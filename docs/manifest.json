{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.3", "generated_at": "2023-12-27T18:18:07.511277Z", "invocation_id": "f4f64765-5e1c-429e-b5fb-1b4a93b6a9c3", "env": {}, "project_id": "22783e4b82b06754aa1102df2bed7710", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"model.smartpill.v2_accounts": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(255)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'license') as varchar(255)) as license,\n    cast(jsonb_extract_path_text(_airbyte_data, 'street') as varchar(255)) as street,\n    cast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zip') as varchar(255)) as zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone') as varchar(255)) as phone\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_accounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_accounts"], "unique_id": "model.smartpill.v2_accounts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_accounts.sql", "original_file_path": "models/cortex/bronze/v2_accounts.sql", "name": "v2_accounts", "alias": "v2_accounts", "checksum": {"name": "sha256", "checksum": "0c23499c745812a9ff4e2d704df1e4da304535116e05871c3b205587c62782b3"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_accounts"]], "metrics": [], "description": "v2_accounts", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.7900965, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(255)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'license') as varchar(255)) as license,\n    cast(jsonb_extract_path_text(_airbyte_data, 'street') as varchar(255)) as street,\n    cast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zip') as varchar(255)) as zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone') as varchar(255)) as phone\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_accounts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_accounts\""}, "model.smartpill.v2_accounts_ordered": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as int) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_account_id') as varchar(191)) as v2_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(191)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'default_location') as varchar(191)) as default_location,\n    cast(jsonb_extract_path_text(_airbyte_data, 'display_message') as varchar(191)) as display_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'destroyed_message') as varchar(191)) as destroyed_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as varchar(191)) as max_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'min_days') as varchar(191)) as min_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'min_qty') as varchar(191)) as min_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price30') as varchar(191)) as price30,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price90') as varchar(191)) as price90,\n    cast(jsonb_extract_path_text(_airbyte_data, 'repack_qty') as varchar(191)) as repack_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'verified_message') as varchar(191)) as verified_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'vial_qty') as varchar(191)) as vial_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'vial_size') as varchar(191)) as vial_size\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_accounts_ordered') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_accounts_ordered"], "unique_id": "model.smartpill.v2_accounts_ordered", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_accounts_ordered.sql", "original_file_path": "models/cortex/bronze/v2_accounts_ordered.sql", "name": "v2_accounts_ordered", "alias": "v2_accounts_ordered", "checksum": {"name": "sha256", "checksum": "22870307b6a76d3c5f6d6be480d1c4969155baf77a98a56c657abe5bf2833cf8"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_accounts_ordered"]], "metrics": [], "description": "v2_accounts_ordered", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_accounts_ordered.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.7971447, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as int) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_account_id') as varchar(191)) as v2_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(191)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'default_location') as varchar(191)) as default_location,\n    cast(jsonb_extract_path_text(_airbyte_data, 'display_message') as varchar(191)) as display_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'destroyed_message') as varchar(191)) as destroyed_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as varchar(191)) as max_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'min_days') as varchar(191)) as min_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'min_qty') as varchar(191)) as min_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price30') as varchar(191)) as price30,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price90') as varchar(191)) as price90,\n    cast(jsonb_extract_path_text(_airbyte_data, 'repack_qty') as varchar(191)) as repack_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'verified_message') as varchar(191)) as verified_message,\n    cast(jsonb_extract_path_text(_airbyte_data, 'vial_qty') as varchar(191)) as vial_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'vial_size') as varchar(191)) as vial_size\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_accounts_ordered", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_accounts_ordered\""}, "model.smartpill.v2_drug_generics": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_drug_id') as bigint) as v2_drug_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(191)) as name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'strength') as varchar(191)) as strength\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_drug_generics') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_drug_generics"], "unique_id": "model.smartpill.v2_drug_generics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_drug_generics.sql", "original_file_path": "models/cortex/bronze/v2_drug_generics.sql", "name": "v2_drug_generics", "alias": "v2_drug_generics", "checksum": {"name": "sha256", "checksum": "e3e606037fc255cd0e5208b9ddb2a24387cdb47d07a4d971bcbbb9a5762df570"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_drug_generics"]], "metrics": [], "description": "v2_drug_generics", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_drug_generics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.8039956, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_drug_id') as bigint) as v2_drug_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(191)) as name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'strength') as varchar(191)) as strength\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drug_generics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_drug_generics\""}, "model.smartpill.v2_drug_gsns": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_drug_id') as bigint) as v2_drug_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'gsn') as varchar(191)) as gsn\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_drug_gsns') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_drug_gsns"], "unique_id": "model.smartpill.v2_drug_gsns", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_drug_gsns.sql", "original_file_path": "models/cortex/bronze/v2_drug_gsns.sql", "name": "v2_drug_gsns", "alias": "v2_drug_gsns", "checksum": {"name": "sha256", "checksum": "3c8809a70d781b9a55f6addd2d2dd248bf48a64d229cb697d69be7170872f992"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_drug_gsns"]], "metrics": [], "description": "v2_drug_gsns", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_drug_gsns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.8129034, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_drug_id') as bigint) as v2_drug_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'gsn') as varchar(191)) as gsn\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drug_gsns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_drug_gsns\""}, "model.smartpill.v2_drugs": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(191)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'form') as varchar(191)) as form,\n    cast(jsonb_extract_path_text(_airbyte_data, 'brand') as varchar(191)) as brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'labeler') as varchar(191)) as labeler,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(8,2)) as price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(8,2)) as price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_invalid_at') as timestamp) as price_invalid_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_updated_at') as timestamp) as price_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'image') as varchar(191)) as image,\n    cast(jsonb_extract_path_text(_airbyte_data, 'ndc9') as varchar(191)) as ndc9,\n    cast(jsonb_extract_path_text(_airbyte_data, 'generic') as varchar(191)) as generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'upc') as varchar(191)) as upc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_drugs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_drugs"], "unique_id": "model.smartpill.v2_drugs", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_drugs.sql", "original_file_path": "models/cortex/bronze/v2_drugs.sql", "name": "v2_drugs", "alias": "v2_drugs", "checksum": {"name": "sha256", "checksum": "bbd5dcf1f97c508c26742777c5e22fff7d57f7de968af18d80a71e9a8bd8a53e"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_drugs"]], "metrics": [], "description": "v2_drugs", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_drugs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.8197036, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(191)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'form') as varchar(191)) as form,\n    cast(jsonb_extract_path_text(_airbyte_data, 'brand') as varchar(191)) as brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'labeler') as varchar(191)) as labeler,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(8,2)) as price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(8,2)) as price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_invalid_at') as timestamp) as price_invalid_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_updated_at') as timestamp) as price_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'image') as varchar(191)) as image,\n    cast(jsonb_extract_path_text(_airbyte_data, 'ndc9') as varchar(191)) as ndc9,\n    cast(jsonb_extract_path_text(_airbyte_data, 'generic') as varchar(191)) as generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'upc') as varchar(191)) as upc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drugs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_drugs\""}, "model.smartpill.v2_failed_imports": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'database') as varchar(191)) as database,\n    cast(jsonb_extract_path_text(_airbyte_data, 'document') as text) as document,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_failed_imports') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_failed_imports"], "unique_id": "model.smartpill.v2_failed_imports", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_failed_imports.sql", "original_file_path": "models/cortex/bronze/v2_failed_imports.sql", "name": "v2_failed_imports", "alias": "v2_failed_imports", "checksum": {"name": "sha256", "checksum": "bb63db775f5bbf5c88216ee575a94d7311e19797575709c95f4f374fe262d101"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_failed_imports"]], "metrics": [], "description": "v2_failed_imports", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_failed_imports.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.8260255, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'database') as varchar(191)) as database,\n    cast(jsonb_extract_path_text(_airbyte_data, 'document') as text) as document,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_failed_imports", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_failed_imports\""}, "model.smartpill.v2_shipment_item_stages": {"raw_sql": "with q as (\n    select *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n    from {{ source('raw', '_airbyte_raw_cortex_v2_shipment_item_stages') }}\n    {% if is_incremental() %}\n        where _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n    {% endif %}\n\n)\nselect\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_shipment_item_id') as bigint) as v2_shipment_item_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stage') as varchar(191)) as stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stage_id') as varchar(191)) as stage_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'user_id') as varchar(191)) as user_id,\n    _airbyte_emitted_at\nfrom q where id_row_number=1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_shipment_item_stages"], "unique_id": "model.smartpill.v2_shipment_item_stages", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_shipment_item_stages.sql", "original_file_path": "models/cortex/bronze/v2_shipment_item_stages.sql", "name": "v2_shipment_item_stages", "alias": "v2_shipment_item_stages", "checksum": {"name": "sha256", "checksum": "570390539cfd91f85630c27f53b91124036fa074eaa74b8fc70bc721e50e24b4"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_shipment_item_stages"]], "metrics": [], "description": "v2_shipment_item_stages", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_shipment_item_stages.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.846924, "compiled_sql": "with q as (\n    select *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n    from \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipment_item_stages\n    \n        where _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".cortex.\"v2_shipment_item_stages\")\n    \n\n)\nselect\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_shipment_item_id') as bigint) as v2_shipment_item_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stage') as varchar(191)) as stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stage_id') as varchar(191)) as stage_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'user_id') as varchar(191)) as user_id,\n    _airbyte_emitted_at\nfrom q where id_row_number=1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_shipment_item_stages\""}, "model.smartpill.v2_shipment_items": {"raw_sql": "with q as (\n\n    select *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n    from  {{ source('raw', '_airbyte_raw_cortex_v2_shipment_items') }}\n    {% if is_incremental() %}\n        where _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n    {% endif %}\n)\nselect\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'couch_id') as varchar(191)) as couch_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'ndc') as varchar(191)) as ndc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(191)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(191)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_name') as varchar(191)) as drug_generic_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_strength') as varchar(191)) as drug_generic_strength,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_form') as varchar(191)) as drug_form,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_goodrx') as decimal(8,2)) as drug_price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_nadac') as decimal(8,2)) as drug_price_nadac,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_retail') as decimal(8,2)) as drug_price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price') as decimal(8,2)) as drug_price,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_updated_at') as timestamp) as drug_price_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_pkg') as varchar(191)) as drug_pkg,\n    cast(jsonb_extract_path_text(_airbyte_data, 'bin') as varchar(191)) as bin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_user_id') as varchar(191)) as v2_user_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_shipment_id') as varchar(191)) as v2_shipment_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_donor_id') as varchar(20)) as v2_donor_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_recipient_id') as varchar(191)) as v2_recipient_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'quantity') as decimal(8,2)) as quantity,\n    cast(jsonb_extract_path_text(_airbyte_data, 'value') as decimal(8,2)) as value,\n    cast(jsonb_extract_path_text(_airbyte_data, 'expires_at') as timestamp) as expires_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'verified_on') as date) as verified_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refused_on') as date) as refused_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'entered_on') as date) as entered_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'expired_on') as date) as expired_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'disposed_on') as date) as disposed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_on') as date) as created_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'received_on') as date) as received_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'dispensed_on') as date) as dispensed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'picked_on') as date) as picked_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'repacked_on') as date) as repacked_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pended_on') as date) as pended_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'next_on') as date) as next_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'removed_on') as date) as removed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_1') as varchar(191)) as sorted_bin_1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_2') as varchar(191)) as sorted_bin_2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_3') as varchar(191)) as sorted_bin_3,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_4') as varchar(191)) as sorted_bin_4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_refused') as boolean) as is_refused,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_inventory') as boolean) as is_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_pended') as boolean) as is_pended,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_dispensed') as boolean) as is_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_disposed') as boolean) as is_disposed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_expired') as boolean) as is_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_magic_bin') as boolean) as is_magic_bin,\n    _airbyte_emitted_at\nfrom q\nwhere id_row_number = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["_airbyte_emitted_at"], "unique": false}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_shipment_items"], "unique_id": "model.smartpill.v2_shipment_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_shipment_items.sql", "original_file_path": "models/cortex/bronze/v2_shipment_items.sql", "name": "v2_shipment_items", "alias": "v2_shipment_items", "checksum": {"name": "sha256", "checksum": "c42bb2c05a3a827820ccbdafcd19ad5239b78f2c2acdcd0df6a3682c9a0f41e0"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_shipment_items"]], "metrics": [], "description": "v2_shipment_items", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_shipment_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.8424385, "compiled_sql": "with q as (\n\n    select *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n    from  \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipment_items\n    \n        where _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".cortex.\"v2_shipment_items\")\n    \n)\nselect\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'couch_id') as varchar(191)) as couch_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'ndc') as varchar(191)) as ndc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(191)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(191)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_name') as varchar(191)) as drug_generic_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_strength') as varchar(191)) as drug_generic_strength,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_form') as varchar(191)) as drug_form,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_goodrx') as decimal(8,2)) as drug_price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_nadac') as decimal(8,2)) as drug_price_nadac,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_retail') as decimal(8,2)) as drug_price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price') as decimal(8,2)) as drug_price,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_price_updated_at') as timestamp) as drug_price_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_pkg') as varchar(191)) as drug_pkg,\n    cast(jsonb_extract_path_text(_airbyte_data, 'bin') as varchar(191)) as bin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_user_id') as varchar(191)) as v2_user_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_shipment_id') as varchar(191)) as v2_shipment_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_donor_id') as varchar(20)) as v2_donor_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_recipient_id') as varchar(191)) as v2_recipient_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'quantity') as decimal(8,2)) as quantity,\n    cast(jsonb_extract_path_text(_airbyte_data, 'value') as decimal(8,2)) as value,\n    cast(jsonb_extract_path_text(_airbyte_data, 'expires_at') as timestamp) as expires_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'verified_on') as date) as verified_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refused_on') as date) as refused_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'entered_on') as date) as entered_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'expired_on') as date) as expired_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'disposed_on') as date) as disposed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_on') as date) as created_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'received_on') as date) as received_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'dispensed_on') as date) as dispensed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'picked_on') as date) as picked_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'repacked_on') as date) as repacked_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pended_on') as date) as pended_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'next_on') as date) as next_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'removed_on') as date) as removed_on,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_1') as varchar(191)) as sorted_bin_1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_2') as varchar(191)) as sorted_bin_2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_3') as varchar(191)) as sorted_bin_3,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sorted_bin_4') as varchar(191)) as sorted_bin_4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_refused') as boolean) as is_refused,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_inventory') as boolean) as is_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_pended') as boolean) as is_pended,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_dispensed') as boolean) as is_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_disposed') as boolean) as is_disposed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_expired') as boolean) as is_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'is_magic_bin') as boolean) as is_magic_bin,\n    _airbyte_emitted_at\nfrom q\nwhere id_row_number = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_shipment_items\""}, "model.smartpill.v2_shipments": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(191)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_donor_account_id') as varchar(191)) as v2_donor_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'donor_account_name') as varchar(191)) as donor_account_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_recipient_account_id') as varchar(191)) as v2_recipient_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'recipient_account_name') as varchar(191)) as recipient_account_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(191)) as status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking') as varchar(191)) as tracking,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pickup_at') as timestamp) as pickup_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_shipments') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipments"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_shipments"], "unique_id": "model.smartpill.v2_shipments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_shipments.sql", "original_file_path": "models/cortex/bronze/v2_shipments.sql", "name": "v2_shipments", "alias": "v2_shipments", "checksum": {"name": "sha256", "checksum": "6d697184a22c21272c2cbc6f46801eddcee515774c60dc8a7adc4261f327229b"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_shipments"]], "metrics": [], "description": "v2_shipments", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_shipments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.832904, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_id') as varchar(191)) as v2_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_donor_account_id') as varchar(191)) as v2_donor_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'donor_account_name') as varchar(191)) as donor_account_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'v2_recipient_account_id') as varchar(191)) as v2_recipient_account_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'recipient_account_name') as varchar(191)) as recipient_account_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(191)) as status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking') as varchar(191)) as tracking,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pickup_at') as timestamp) as pickup_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipments", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_shipments\""}, "model.smartpill.v2_sync_status": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'db') as varchar(191)) as db,\n    cast(jsonb_extract_path_text(_airbyte_data, 'seq') as varchar(500)) as seq,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_sync_started_at') as timestamp) as last_sync_started_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_sync_completed_at') as timestamp) as last_sync_completed_at\nfrom {{ source('raw', '_airbyte_raw_cortex_v2_sync_status') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_cortex_v2_sync_status"]}, "config": {"enabled": true, "alias": null, "schema": "cortex", "database": null, "tags": ["cortex"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "cortex", "fqn": ["smartpill", "cortex", "bronze", "v2_sync_status"], "unique_id": "model.smartpill.v2_sync_status", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "cortex/bronze/v2_sync_status.sql", "original_file_path": "models/cortex/bronze/v2_sync_status.sql", "name": "v2_sync_status", "alias": "v2_sync_status", "checksum": {"name": "sha256", "checksum": "58b1c95829efb6cc0c4e3b0841cbc5ae4a0e25605b4dfeee7eef3d1668b17b59"}, "tags": ["cortex"], "refs": [], "sources": [["raw", "_airbyte_raw_cortex_v2_sync_status"]], "metrics": [], "description": "v2_sync_status", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/cortex/bronze/v2_sync_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "cortex"}, "created_at": 1703701090.836331, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'db') as varchar(191)) as db,\n    cast(jsonb_extract_path_text(_airbyte_data, 'seq') as varchar(500)) as seq,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_sync_started_at') as timestamp) as last_sync_started_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_sync_completed_at') as timestamp) as last_sync_completed_at\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_sync_status", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".cortex.\"v2_sync_status\""}, "model.smartpill.clinic_coupons": {"raw_sql": "with raw_goodpill_gp_clinic_coupons as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_code') as varchar(20)) as coupon_code,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_type') as varchar(20)) as coupon_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_date_used_first') as timestamp) as coupon_date_used_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_date_used_last') as timestamp) as coupon_date_used_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_clinic_coupons') }}\n)\n\nselect\n    nullif(coupon_code, '') as coupon_code,\n    nullif(coupon_type, '') as coupon_type,\n    clinic_id,\n    verified,\n    coupon_date_used_first,\n    coupon_date_used_last,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_clinic_coupons\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "clinic_coupons"], "unique_id": "model.smartpill.clinic_coupons", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/clinic_coupons.sql", "original_file_path": "models/goodpill/bronze/clinic_coupons.sql", "name": "clinic_coupons", "alias": "clinic_coupons", "checksum": {"name": "sha256", "checksum": "4a746cb21204e0b5266371503d0e7ac87bb36f0b85efc94e59a8aca5a881d948"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_clinic_coupons"]], "metrics": [], "description": "Clinic Coupons.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/clinic_coupons.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.196626, "compiled_sql": "with raw_goodpill_gp_clinic_coupons as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_code') as varchar(20)) as coupon_code,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_type') as varchar(20)) as coupon_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_date_used_first') as timestamp) as coupon_date_used_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'coupon_date_used_last') as timestamp) as coupon_date_used_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_clinic_coupons\n)\n\nselect\n    nullif(coupon_code, '') as coupon_code,\n    nullif(coupon_type, '') as coupon_type,\n    clinic_id,\n    verified,\n    coupon_date_used_first,\n    coupon_date_used_last,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_clinic_coupons\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"clinic_coupons\""}, "model.smartpill.clinics": {"raw_sql": "with raw_goodpill_gp_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name_cp') as varchar(255)) as clinic_name_cp,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'clinic_rx_date_added_first') as timestamp\n        ) as clinic_rx_date_added_first,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'clinic_rx_date_added_last') as timestamp\n        ) as clinic_rx_date_added_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from {{ source('raw', '_airbyte_raw_goodpill_gp_clinics') }}\n)\n\nselect\n    clinic_id,\n    nullif(clinic_name_cp, '') as clinic_name_cp,\n    clinic_rx_date_added_first,\n    clinic_rx_date_added_last,\n    verified,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_clinics\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["clinic_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "clinics"], "unique_id": "model.smartpill.clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/clinics.sql", "original_file_path": "models/goodpill/bronze/clinics.sql", "name": "clinics", "alias": "clinics", "checksum": {"name": "sha256", "checksum": "57fa71b9b54a760c9c93412757defd1225f59214285d297d0ade0fe9693e31f5"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_clinics"]], "metrics": [], "description": "Clinics.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/clinics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2018297, "compiled_sql": "with raw_goodpill_gp_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name_cp') as varchar(255)) as clinic_name_cp,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'clinic_rx_date_added_first') as timestamp\n        ) as clinic_rx_date_added_first,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'clinic_rx_date_added_last') as timestamp\n        ) as clinic_rx_date_added_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_clinics\n)\n\nselect\n    clinic_id,\n    nullif(clinic_name_cp, '') as clinic_name_cp,\n    clinic_rx_date_added_first,\n    clinic_rx_date_added_last,\n    verified,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_clinics\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"clinics\""}, "model.smartpill.drugs": {"raw_sql": "with raw_goodpill_gp_drugs as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price30') as int) as price30,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price90') as int) as price90,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_min') as int) as qty_min,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_min') as int) as days_min,\n        cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as int) as max_inventory,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar(255)) as message_display,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_verified') as varchar(255)) as message_verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_destroyed') as varchar(255)) as message_destroyed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(10, 3)) as price_goodrx,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_nadac') as decimal(10, 3)) as price_nadac,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(10, 3)) as price_retail,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_ndcs') as int) as count_ndcs,\n        coalesce(\n            cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp),\n            cast(_airbyte_emitted_at as timestamp without time zone)\n        ) as created_at,\n        coalesce(\n            cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp),\n            cast(_airbyte_emitted_at as timestamp without time zone)\n        ) as updated_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_drugs') }}\n)\n\nselect\n    drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    nullif(drug_gsns, '') as drug_gsns,\n    drug_ordered,\n    price30,\n    price90,\n    price_retail,\n    price_goodrx,\n    price_nadac,\n    qty_min,\n    qty_repack,\n    days_min,\n    count_ndcs,\n    max_inventory,\n    nullif(message_display, '') as message_display,\n    nullif(message_verified, '') as message_verified,\n    nullif(message_destroyed, '') as message_destroyed,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_drugs\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "drug_generic", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["drug_generic"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "drugs"], "unique_id": "model.smartpill.drugs", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/drugs.sql", "original_file_path": "models/goodpill/bronze/drugs.sql", "name": "drugs", "alias": "drugs", "checksum": {"name": "sha256", "checksum": "aeafe5f9de57a8feec705304c8a0979aa52181adc9341a3ae5a55bc96039d217"}, "tags": ["goodpill", "dimension"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_drugs"]], "metrics": [], "description": "Drugs dimension table.", "columns": {"drug_generic": {"name": "drug_generic", "description": "The Unique Identifier for a Drug made by sorting the active\ningredients with their strengths alphabetically and then concatenating\nthe drug's dosage form but excluding the word 'tablet' or 'capsule'\nfrom the resulting string.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_brand": {"name": "drug_brand", "description": "The brand name given to the drug by the labeler usually when the drug\nis under patent e.g Lipitor for Atorvastatin.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_gsns": {"name": "drug_gsns", "description": "Generic Sequence Number. A numerical identifier given to every drug\nby First Databank. This number is used to match Guardian's Drug\nDatabase (used for Rxs) with our Drug Database (used for Inventory\nManagement and Donor Records).\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_ordered": {"name": "drug_ordered", "description": "Whether a recipient is currently accepting a particular drug into\ntheir inventory.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "price30": {"name": "price30", "description": "Price of a 30 day prescription is usually Price90/3.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "price90": {"name": "price90", "description": "Price of a 90 day prescription and is also used to determine the\nprice of other days assuming proportional costs e.g Price60 =\nPrice90/3*2.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "qty_repack": {"name": "qty_repack", "description": "This is the typical qty given in the average Rx of this drug. This is\nused to estimate a potential dispensed volume (and stock level) if we\nhave not yet dispensed this drug.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "qty_min": {"name": "qty_min", "description": "Even if a drug is 'ordered', we will not accept it into inventory if\nthe qty in the item is less than this amount.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "days_min": {"name": "days_min", "description": "Even if a drug is 'ordered', we will not accept it into inventory if\nthe days until the drugs expiration is less than this amount. The\ndrugs expiration should not be confused with the Rx's expiration which\nis also often included on the item's label.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "max_inventory": {"name": "max_inventory", "description": "Even if a drug is 'ordered', we will not accept it into inventory if\nwe alreay have a qty in inventory that is greater than this amount.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "message_display": {"name": "message_display", "description": "This message will popup (currently in a toast at the bottom of the\nscreen) everytime this drug is entered into our system.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "message_verified": {"name": "message_verified", "description": "This message will popup (currently in a toast at the bottom of the\nscreen) everytime this drug is accepted into our inventory.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "message_destroyed": {"name": "message_destroyed", "description": "This message will popup (currently in a toast at the bottom of the\nscreen) everytime this drug is rejected from (not accepted into) our\ninventory.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "price_goodrx": {"name": "price_goodrx", "description": "The GoodRx fair price of a drug at the time it was entered into our system +/- 1 week.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "price_nadac": {"name": "price_nadac", "description": "The NADAC fair price of a drug at the time it was entered into our system +/- 1 week.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "price_retail": {"name": "price_retail", "description": "The GoodRx retail price of a drug at the time it was entered into our system +/- 1 week.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "count_ndcs": {"name": "count_ndcs", "description": "\"Multiple manufacturers make each Drug (drug_generic) and each is give\na National Drug Code by the FDA. This is the total number of NDCs that\nthis drug has in our database.\"\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "updated_at": {"name": "updated_at", "description": "Time where the record was updated.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "created_at": {"name": "created_at", "description": "Time where the record was created.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/drugs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.245238, "compiled_sql": "with raw_goodpill_gp_drugs as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price30') as int) as price30,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price90') as int) as price90,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_min') as int) as qty_min,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_min') as int) as days_min,\n        cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as int) as max_inventory,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar(255)) as message_display,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_verified') as varchar(255)) as message_verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'message_destroyed') as varchar(255)) as message_destroyed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(10, 3)) as price_goodrx,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_nadac') as decimal(10, 3)) as price_nadac,\n        cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(10, 3)) as price_retail,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_ndcs') as int) as count_ndcs,\n        coalesce(\n            cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp),\n            cast(_airbyte_emitted_at as timestamp without time zone)\n        ) as created_at,\n        coalesce(\n            cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp),\n            cast(_airbyte_emitted_at as timestamp without time zone)\n        ) as updated_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_drugs\n)\n\nselect\n    drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    nullif(drug_gsns, '') as drug_gsns,\n    drug_ordered,\n    price30,\n    price90,\n    price_retail,\n    price_goodrx,\n    price_nadac,\n    qty_min,\n    qty_repack,\n    days_min,\n    count_ndcs,\n    max_inventory,\n    nullif(message_display, '') as message_display,\n    nullif(message_verified, '') as message_verified,\n    nullif(message_destroyed, '') as message_destroyed,\n    created_at,\n    updated_at\nfrom raw_goodpill_gp_drugs\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"drugs\""}, "model.smartpill.dw_clinic_groups": {"raw_sql": "with raw_goodpill_dw_clinic_groups as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id') as int) as clinic_group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_name') as varchar(255)) as clinic_group_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id_sf') as varchar(20)) as clinic_group_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_domain') as varchar(255)) as clinic_group_domain,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from {{ source('raw', '_airbyte_raw_goodpill_dw_clinic_groups') }}\n)\n\nselect\n    clinic_group_id,\n    nullif(clinic_group_name, '') as clinic_group_name,\n    nullif(clinic_group_id_sf, '') as clinic_group_id_sf,\n    nullif(clinic_group_domain, '') as clinic_group_domain,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_clinic_groups\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_group_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["clinic_group_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_clinic_groups"], "unique_id": "model.smartpill.dw_clinic_groups", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_clinic_groups.sql", "original_file_path": "models/goodpill/bronze/dw_clinic_groups.sql", "name": "dw_clinic_groups", "alias": "dw_clinic_groups", "checksum": {"name": "sha256", "checksum": "676c79355ce2dd79e78cdda59d37f0cf901a429d483c264a781923255cfaa06f"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_dw_clinic_groups"]], "metrics": [], "description": "DW Clinics Groups.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/dw_clinic_groups.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2112005, "compiled_sql": "with raw_goodpill_dw_clinic_groups as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id') as int) as clinic_group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_name') as varchar(255)) as clinic_group_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id_sf') as varchar(20)) as clinic_group_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_domain') as varchar(255)) as clinic_group_domain,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_clinic_groups\n)\n\nselect\n    clinic_group_id,\n    nullif(clinic_group_name, '') as clinic_group_name,\n    nullif(clinic_group_id_sf, '') as clinic_group_id_sf,\n    nullif(clinic_group_domain, '') as clinic_group_domain,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_clinic_groups\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_clinic_groups\""}, "model.smartpill.dw_clinics": {"raw_sql": "with raw_goodpill_dw_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id') as int) as clinic_group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name') as varchar(255)) as clinic_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name_cp') as varchar(255)) as clinic_name_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_address') as varchar(128)) as clinic_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_street') as varchar(128)) as clinic_street,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_city') as varchar(128)) as clinic_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_state') as varchar(32)) as clinic_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_zip') as varchar(32)) as clinic_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_phone') as varchar(32)) as clinic_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id_sf') as varchar(20)) as clinic_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from {{ source('raw', '_airbyte_raw_goodpill_dw_clinics') }}\n)\n\nselect\n    clinic_id,\n    clinic_group_id,\n    nullif(clinic_name, '') as clinic_name,\n    nullif(clinic_name_cp, '') as clinic_name_cp,\n    nullif(clinic_address, '') as clinic_address,\n    nullif(clinic_street, '') as clinic_street,\n    nullif(clinic_city, '') as clinic_city,\n    nullif(clinic_state, '') as clinic_state,\n    nullif(clinic_zip, '') as clinic_zip,\n    nullif(clinic_phone, '') as clinic_phone,\n    nullif(clinic_id_sf, '') as clinic_id_sf,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_clinics\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_dw_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["clinic_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_clinics"], "unique_id": "model.smartpill.dw_clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_clinics.sql", "original_file_path": "models/goodpill/bronze/dw_clinics.sql", "name": "dw_clinics", "alias": "dw_clinics", "checksum": {"name": "sha256", "checksum": "c2332d502ce66c7c4f88521738f39f52e977bf4ea1f5de213ff8f5ab81c14139"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_dw_clinics"]], "metrics": [], "description": "Clinics.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/dw_clinics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2071176, "compiled_sql": "with raw_goodpill_dw_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_group_id') as int) as clinic_group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name') as varchar(255)) as clinic_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_name_cp') as varchar(255)) as clinic_name_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_address') as varchar(128)) as clinic_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_street') as varchar(128)) as clinic_street,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_city') as varchar(128)) as clinic_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_state') as varchar(32)) as clinic_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_zip') as varchar(32)) as clinic_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_phone') as varchar(32)) as clinic_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id_sf') as varchar(20)) as clinic_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_clinics\n)\n\nselect\n    clinic_id,\n    clinic_group_id,\n    nullif(clinic_name, '') as clinic_name,\n    nullif(clinic_name_cp, '') as clinic_name_cp,\n    nullif(clinic_address, '') as clinic_address,\n    nullif(clinic_street, '') as clinic_street,\n    nullif(clinic_city, '') as clinic_city,\n    nullif(clinic_state, '') as clinic_state,\n    nullif(clinic_zip, '') as clinic_zip,\n    nullif(clinic_phone, '') as clinic_phone,\n    nullif(clinic_id_sf, '') as clinic_id_sf,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_clinics\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_clinics\""}, "model.smartpill.dw_providers": {"raw_sql": "with raw_goodpill_dw_providers as (\n    select\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar) as provider_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_name') as varchar) as provider_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar) as provider_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id_sf') as varchar) as provider_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'default_clinic') as varchar) as default_clinic,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'default_clinic_imputed_at') as timestamp\n        ) as default_clinic_imputed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_dw_providers') }}\n)\n\nselect\n    provider_id,\n    nullif(provider_npi, '') as provider_npi,\n    nullif(provider_name, '') as provider_name,\n    nullif(provider_phone, '') as provider_phone,\n    nullif(provider_id_sf, '') as provider_id_sf,\n    nullif(default_clinic, '') as default_clinic,\n    default_clinic_imputed_at,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_providers\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_dw_providers"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "provider_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["provider_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_providers"], "unique_id": "model.smartpill.dw_providers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_providers.sql", "original_file_path": "models/goodpill/bronze/dw_providers.sql", "name": "dw_providers", "alias": "dw_providers", "checksum": {"name": "sha256", "checksum": "4d54050b85eb3f61e565661df00c7682fffaa2744a7012bc9dc8f8ae85388f6a"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_dw_providers"]], "metrics": [], "description": "DW Providers.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/dw_providers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.216374, "compiled_sql": "with raw_goodpill_dw_providers as (\n    select\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar) as provider_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_name') as varchar) as provider_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar) as provider_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id_sf') as varchar) as provider_id_sf,\n        cast(jsonb_extract_path_text(_airbyte_data, 'default_clinic') as varchar) as default_clinic,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'default_clinic_imputed_at') as timestamp\n        ) as default_clinic_imputed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_providers\n)\n\nselect\n    provider_id,\n    nullif(provider_npi, '') as provider_npi,\n    nullif(provider_name, '') as provider_name,\n    nullif(provider_phone, '') as provider_phone,\n    nullif(provider_id_sf, '') as provider_id_sf,\n    nullif(default_clinic, '') as default_clinic,\n    default_clinic_imputed_at,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_providers\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_providers\""}, "model.smartpill.dw_providers_clinics": {"raw_sql": "with raw_goodpill_dw_providers_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic_id') as int) as provider_clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'started_at') as timestamp) as started_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'stopped_at') as timestamp) as stopped_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_dw_providers_clinics') }}\n)\n\nselect\n    provider_clinic_id,\n    clinic_id,\n    provider_id,\n    started_at,\n    stopped_at,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_providers_clinics\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "provider_clinic_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["provider_clinic_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_providers_clinics"], "unique_id": "model.smartpill.dw_providers_clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_providers_clinics.sql", "original_file_path": "models/goodpill/bronze/dw_providers_clinics.sql", "name": "dw_providers_clinics", "alias": "dw_providers_clinics", "checksum": {"name": "sha256", "checksum": "e224ca0d84a143ffa7fc205c3e04f2e34c49425cbafd1bae92888c7919cb4b13"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_dw_providers_clinics"]], "metrics": [], "description": "Providers table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/dw_providers_clinics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.220932, "compiled_sql": "with raw_goodpill_dw_providers_clinics as (\n    select\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic_id') as int) as provider_clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'started_at') as timestamp) as started_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'stopped_at') as timestamp) as stopped_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_providers_clinics\n)\n\nselect\n    provider_clinic_id,\n    clinic_id,\n    provider_id,\n    started_at,\n    stopped_at,\n    created_at,\n    updated_at\nfrom raw_goodpill_dw_providers_clinics\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_providers_clinics\""}, "model.smartpill.gp_order_items_inventory_items": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'line_id') as int) as line_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'inventory_item_id') as varchar(255)) as inventory_item_id\nfrom {{ source('raw', '_airbyte_raw_goodpill_gp_order_items_inventory_items') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "gp_order_items_inventory_items"], "unique_id": "model.smartpill.gp_order_items_inventory_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/gp_order_items_inventory_items.sql", "original_file_path": "models/goodpill/bronze/gp_order_items_inventory_items.sql", "name": "gp_order_items_inventory_items", "alias": "gp_order_items_inventory_items", "checksum": {"name": "sha256", "checksum": "dbcf9016105f2565c5365c82dfe8a3cbcccd945478edaa1b805a2cd11e6b00c7"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_order_items_inventory_items"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/gp_order_items_inventory_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2848349, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'line_id') as int) as line_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'inventory_item_id') as varchar(255)) as inventory_item_id\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_order_items_inventory_items", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"gp_order_items_inventory_items\""}, "model.smartpill.gp_pend_group": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pend_group_name') as varchar) as pend_group_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'initial_pend_date') as timestamp) as initial_pend_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_pend_date') as timestamp) as last_pend_date\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_pend_group') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["invoice_number"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "gp_pend_group"], "unique_id": "model.smartpill.gp_pend_group", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/gp_pend_group.sql", "original_file_path": "models/goodpill/bronze/gp_pend_group.sql", "name": "gp_pend_group", "alias": "gp_pend_group", "checksum": {"name": "sha256", "checksum": "9321e23063861c82f88e6ba0306a52e64128dc6df948a7db388de0c28930c28a"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_pend_group"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/gp_pend_group.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.289835, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pend_group_name') as varchar) as pend_group_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'initial_pend_date') as timestamp) as initial_pend_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_pend_date') as timestamp) as last_pend_date\nfrom\n    \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_pend_group", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"gp_pend_group\""}, "model.smartpill.gp_pharmacy_actions": {"raw_sql": "select \n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'user_id') as bigint) as user_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'model_type') as varchar(255)) as model_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'model_id') as bigint) as model_id,\n    \n    cast(jsonb_extract_path_text(_airbyte_data, 'type') as varchar(255)) as type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'reason') as varchar(255)) as reason,\n    cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message') as varchar(255)) as message,\n    \n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'payload') as text) as payload\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_pharmacy_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "gp_pharmacy_actions"], "unique_id": "model.smartpill.gp_pharmacy_actions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/gp_pharmacy_actions.sql", "original_file_path": "models/goodpill/bronze/gp_pharmacy_actions.sql", "name": "gp_pharmacy_actions", "alias": "gp_pharmacy_actions", "checksum": {"name": "sha256", "checksum": "47721b00834db011b51308a624e70181fae0a0986dccdb262e22f821c153de88"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_pharmacy_actions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/gp_pharmacy_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2990634, "compiled_sql": "select \n    cast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'user_id') as bigint) as user_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'model_type') as varchar(255)) as model_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'model_id') as bigint) as model_id,\n    \n    cast(jsonb_extract_path_text(_airbyte_data, 'type') as varchar(255)) as type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'reason') as varchar(255)) as reason,\n    cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message') as varchar(255)) as message,\n    \n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'payload') as text) as payload\nfrom\n    \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_pharmacy_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"gp_pharmacy_actions\""}, "model.smartpill.gp_stock_live": {"raw_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar) as message_display,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_per_month') as decimal(5,2)) as price_per_month,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_inventory') as varchar) as months_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'avg_inventory') as decimal(10,1)) as avg_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inventory') as decimal(10,1)) as last_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_entered') as varchar) as months_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_entered') as decimal(10,1)) as stddev_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_entered') as decimal(10,1)) as total_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_dispensed') as varchar) as months_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_dispensed_actual') as decimal(10,1)) as stddev_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_dispensed_actual') as decimal(10,1)) as total_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_dispensed_default') as decimal(10,1)) as total_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_dispensed_default') as decimal(10,1)) as stddev_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'month_interval') as int) as month_interval,\n    cast(jsonb_extract_path_text(_airbyte_data, 'default_rxs_min') as decimal(5,2)) as default_rxs_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_low_threshold') as decimal(10,1)) as last_inv_low_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_high_threshold') as decimal(10,1)) as last_inv_high_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_onetime_threshold') as decimal(10,1)) as last_inv_onetime_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zlow_threshold') as decimal(5,3)) as zlow_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zhigh_threshold') as decimal(5,3)) as zhigh_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zscore') as decimal(6,3)) as zscore,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stock_level') as varchar) as stock_level\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_stock_live') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "drug_generic", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["drug_generic"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "gp_stock_live"], "unique_id": "model.smartpill.gp_stock_live", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/gp_stock_live.sql", "original_file_path": "models/goodpill/bronze/gp_stock_live.sql", "name": "gp_stock_live", "alias": "gp_stock_live", "checksum": {"name": "sha256", "checksum": "72b03845974539435323cf63f56f553b427f30982fda7e8e49bf30f8620cb18d"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_stock_live"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/gp_stock_live.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.307337, "compiled_sql": "select\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar) as message_display,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_per_month') as decimal(5,2)) as price_per_month,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_inventory') as varchar) as months_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'avg_inventory') as decimal(10,1)) as avg_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inventory') as decimal(10,1)) as last_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_entered') as varchar) as months_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_entered') as decimal(10,1)) as stddev_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_entered') as decimal(10,1)) as total_entered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'months_dispensed') as varchar) as months_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_dispensed_actual') as decimal(10,1)) as stddev_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_dispensed_actual') as decimal(10,1)) as total_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'total_dispensed_default') as decimal(10,1)) as total_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stddev_dispensed_default') as decimal(10,1)) as stddev_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'month_interval') as int) as month_interval,\n    cast(jsonb_extract_path_text(_airbyte_data, 'default_rxs_min') as decimal(5,2)) as default_rxs_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_low_threshold') as decimal(10,1)) as last_inv_low_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_high_threshold') as decimal(10,1)) as last_inv_high_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_inv_onetime_threshold') as decimal(10,1)) as last_inv_onetime_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zlow_threshold') as decimal(5,3)) as zlow_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zhigh_threshold') as decimal(5,3)) as zhigh_threshold,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zscore') as decimal(6,3)) as zscore,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stock_level') as varchar) as stock_level\nfrom\n    \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_stock_live", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"gp_stock_live\""}, "model.smartpill.order_items": {"raw_sql": "with order_items as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'line_id') as int) as line_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'groups') as varchar(255)) as groups,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_dispensed_id') as int) as rx_dispensed_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)\n        ) as rx_message_keys_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6, 3)) as zscore_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_default') as decimal(5, 2)\n        ) as refills_dispensed_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5, 2)\n        ) as refills_dispensed_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_default') as int) as days_dispensed_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_default') as decimal(10, 3)\n        ) as qty_dispensed_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10, 3)) as qty_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'price_dispensed_default') as decimal(5, 2)\n        ) as price_dispensed_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5, 2)\n        ) as price_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_retail_initial') as decimal(13, 4)\n        ) as unit_price_retail_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_goodrx_initial') as decimal(13, 4)\n        ) as unit_price_goodrx_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_nadac_initial') as decimal(13, 4)\n        ) as unit_price_nadac_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_awp_initial') as decimal(13, 4)\n        ) as unit_price_awp_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_total') as decimal(10, 3)) as qty_pended_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_repacks') as decimal(10, 3)) as qty_pended_repacks,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_total') as int) as count_pended_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_repacks') as int) as count_pended_repacks,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_message_keys') as varchar(255)) as item_message_keys,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_message_text') as varchar(255)) as item_message_text,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_type') as varchar(80)) as item_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_added_by') as varchar(80)) as item_added_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_date_added') as timestamp) as item_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_date_changed') as timestamp) as item_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as add_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'chg_user_id') as int) as chg_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_lines') as int) as count_lines,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_pended') as varchar(255)) as drug_generic_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'repacked_by') as varchar(5)) as repacked_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_and_message_initial_at') as timestamp) as days_and_message_initial_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_and_message_updated_at') as timestamp) as days_and_message_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_pended') as int) as days_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_per_day_pended') as decimal(6,3)) as qty_per_day_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'unpended_at') as timestamp) as unpended_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_initial_at') as timestamp) as pend_initial_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_updated_at') as timestamp) as pend_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ndc_pended') as varchar(255)) as ndc_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'filled_at') as timestamp) as filled_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_failed_at') as timestamp) as pend_failed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'filled_by') as bigint) as filled_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_by') as bigint) as pend_retried_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar) as status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_days') as integer) as pend_retried_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_at') as timestamp) as pend_retried_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_order_items') }}\n)\n\nselect\n    invoice_number,\n    patient_id_cp,\n    rx_number,\n    line_id,\n    nullif(groups, '') as groups,\n    rx_dispensed_id,\n    nullif(stock_level_initial, '') as stock_level_initial,\n    nullif(rx_message_keys_initial, '') as rx_message_keys_initial,\n    patient_autofill_initial,\n    rx_autofill_initial,\n    nullif(rx_numbers_initial, '') as rx_numbers_initial,\n    zscore_initial,\n    refills_dispensed_default,\n    refills_dispensed_actual,\n    days_dispensed_default,\n    days_dispensed_actual,\n    qty_dispensed_default,\n    qty_dispensed_actual,\n    price_dispensed_default,\n    price_dispensed_actual,\n    unit_price_retail_initial,\n    unit_price_goodrx_initial,\n    unit_price_nadac_initial,\n    unit_price_awp_initial,\n    qty_pended_total,\n    qty_pended_repacks,\n    count_pended_total,\n    count_pended_repacks,\n    nullif(item_message_keys, '') as item_message_keys,\n    nullif(item_message_text, '') as item_message_text,\n    nullif(item_type, '') as item_type,\n    nullif(item_added_by, '') as item_added_by,\n    item_date_added,\n    item_date_changed,\n    refill_date_last,\n    refill_date_manual,\n    refill_date_default,\n    add_user_id,\n    chg_user_id,\n    count_lines,\n    drug_generic_pended,\n    drug_name,\n    nullif(repacked_by, '') as repacked_by,\n    updated_at,\n    created_at,\n    days_and_message_updated_at,\n    days_and_message_initial_at,\n    days_pended,\n    qty_per_day_pended,\n    unpended_at,\n    pend_initial_at,\n    pend_updated_at,\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    ndc_pended,\n    filled_at,\n    pend_failed_at,\n    filled_by,\n    pend_retried_by,\n    status,\n    pend_retried_days,\n    pend_retried_at\nfrom order_items", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["invoice_number", "rx_number"]}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "order_items"], "unique_id": "model.smartpill.order_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/order_items.sql", "original_file_path": "models/goodpill/bronze/order_items.sql", "name": "order_items", "alias": "order_items", "checksum": {"name": "sha256", "checksum": "9c892de2e3116cb55c130d7c5921d9a21718939a852f40d655caf60eae02902b"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_order_items"]], "metrics": [], "description": "Order items snapshot table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/order_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2491446, "compiled_sql": "with order_items as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'line_id') as int) as line_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'groups') as varchar(255)) as groups,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_dispensed_id') as int) as rx_dispensed_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)\n        ) as rx_message_keys_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6, 3)) as zscore_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_default') as decimal(5, 2)\n        ) as refills_dispensed_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5, 2)\n        ) as refills_dispensed_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_default') as int) as days_dispensed_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_default') as decimal(10, 3)\n        ) as qty_dispensed_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10, 3)) as qty_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'price_dispensed_default') as decimal(5, 2)\n        ) as price_dispensed_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5, 2)\n        ) as price_dispensed_actual,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_retail_initial') as decimal(13, 4)\n        ) as unit_price_retail_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_goodrx_initial') as decimal(13, 4)\n        ) as unit_price_goodrx_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_nadac_initial') as decimal(13, 4)\n        ) as unit_price_nadac_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'unit_price_awp_initial') as decimal(13, 4)\n        ) as unit_price_awp_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_total') as decimal(10, 3)) as qty_pended_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_repacks') as decimal(10, 3)) as qty_pended_repacks,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_total') as int) as count_pended_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_repacks') as int) as count_pended_repacks,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_message_keys') as varchar(255)) as item_message_keys,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_message_text') as varchar(255)) as item_message_text,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_type') as varchar(80)) as item_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_added_by') as varchar(80)) as item_added_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_date_added') as timestamp) as item_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'item_date_changed') as timestamp) as item_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as add_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'chg_user_id') as int) as chg_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_lines') as int) as count_lines,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic_pended') as varchar(255)) as drug_generic_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'repacked_by') as varchar(5)) as repacked_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_and_message_initial_at') as timestamp) as days_and_message_initial_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_and_message_updated_at') as timestamp) as days_and_message_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'days_pended') as int) as days_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_per_day_pended') as decimal(6,3)) as qty_per_day_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'unpended_at') as timestamp) as unpended_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_initial_at') as timestamp) as pend_initial_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_updated_at') as timestamp) as pend_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ndc_pended') as varchar(255)) as ndc_pended,\n        cast(jsonb_extract_path_text(_airbyte_data, 'filled_at') as timestamp) as filled_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_failed_at') as timestamp) as pend_failed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'filled_by') as bigint) as filled_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_by') as bigint) as pend_retried_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar) as status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_days') as integer) as pend_retried_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pend_retried_at') as timestamp) as pend_retried_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_order_items\n)\n\nselect\n    invoice_number,\n    patient_id_cp,\n    rx_number,\n    line_id,\n    nullif(groups, '') as groups,\n    rx_dispensed_id,\n    nullif(stock_level_initial, '') as stock_level_initial,\n    nullif(rx_message_keys_initial, '') as rx_message_keys_initial,\n    patient_autofill_initial,\n    rx_autofill_initial,\n    nullif(rx_numbers_initial, '') as rx_numbers_initial,\n    zscore_initial,\n    refills_dispensed_default,\n    refills_dispensed_actual,\n    days_dispensed_default,\n    days_dispensed_actual,\n    qty_dispensed_default,\n    qty_dispensed_actual,\n    price_dispensed_default,\n    price_dispensed_actual,\n    unit_price_retail_initial,\n    unit_price_goodrx_initial,\n    unit_price_nadac_initial,\n    unit_price_awp_initial,\n    qty_pended_total,\n    qty_pended_repacks,\n    count_pended_total,\n    count_pended_repacks,\n    nullif(item_message_keys, '') as item_message_keys,\n    nullif(item_message_text, '') as item_message_text,\n    nullif(item_type, '') as item_type,\n    nullif(item_added_by, '') as item_added_by,\n    item_date_added,\n    item_date_changed,\n    refill_date_last,\n    refill_date_manual,\n    refill_date_default,\n    add_user_id,\n    chg_user_id,\n    count_lines,\n    drug_generic_pended,\n    drug_name,\n    nullif(repacked_by, '') as repacked_by,\n    updated_at,\n    created_at,\n    days_and_message_updated_at,\n    days_and_message_initial_at,\n    days_pended,\n    qty_per_day_pended,\n    unpended_at,\n    pend_initial_at,\n    pend_updated_at,\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    ndc_pended,\n    filled_at,\n    pend_failed_at,\n    filled_by,\n    pend_retried_by,\n    status,\n    pend_retried_days,\n    pend_retried_at\nfrom order_items", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"order_items\""}, "model.smartpill.orders": {"raw_sql": "with orders as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'order_date_expected_initial') as timestamp\n        ) as order_date_expected_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_default_updated_at') as timestamp) as payment_default_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_actual_updated_at') as timestamp) as payment_actual_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc_updated_at') as timestamp) as order_stage_wc_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_payment_coupon') as varchar(255)) as order_payment_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as add_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as chg_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'shipping_speed') as int) as shipping_speed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_group_removals_checked_at') as timestamp) as rx_group_removals_checked_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_group_additions_checked_at') as timestamp) as rx_group_additions_checked_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status\n\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_orders') }}\n)\n\nselect\n    invoice_number,\n    patient_id_cp,\n    patient_id_wc,\n    count_items,\n    count_filled,\n    count_nofill,\n    priority,\n    nullif(order_source, '') as order_source,\n    nullif(order_stage_cp, '') as order_stage_cp,\n    nullif(order_stage_wc, '') as order_stage_wc,\n    nullif(order_status, '') as order_status,\n    nullif(order_address1, '') as order_address1,\n    nullif(order_address2, '') as order_address2,\n    nullif(invoice_doc_id, '') as invoice_doc_id,\n    nullif(tracking_number, '') as tracking_number,\n    payment_total_default,\n    payment_total_actual,\n    payment_fee_default,\n    payment_fee_actual,\n    payment_due_default,\n    payment_due_actual,\n    payment_default_updated_at,\n    payment_actual_updated_at,\n    nullif(payment_date_autopay, '') as payment_date_autopay,\n    nullif(payment_method_actual, '') as payment_method_actual,\n    nullif(order_payment_coupon, '') as order_payment_coupon,\n    nullif(order_note, '') as order_note,\n    nullif(rph_check, '') as rph_check,\n    nullif(tech_fill, '') as tech_fill,\n    order_date_returned,\n    order_date_shipped,\n    order_date_dispensed,\n    order_date_added,\n    order_date_changed,\n    order_date_delivered,\n    order_date_expedited,\n    order_date_expected,\n    order_date_expected_initial,\n    order_date_failed,\n    order_date_updated,\n    order_stage_wc_updated_at,\n    nullif(order_city, '') as order_city,\n    nullif(order_state, '') as order_state,\n    nullif(order_zip, '') as order_zip,\n    add_user_id,\n    chg_user_id,\n    shipping_speed,\n    created_at,\n    updated_at,\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    rx_group_additions_checked_at,\n    rx_group_removals_checked_at,\n    status\nfrom orders", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_orders"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["invoice_number"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "orders"], "unique_id": "model.smartpill.orders", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/orders.sql", "original_file_path": "models/goodpill/bronze/orders.sql", "name": "orders", "alias": "orders", "checksum": {"name": "sha256", "checksum": "f97394e34005a9a3963411ac61d5e3d31e54bcfadddc4477a34e7e3392297873"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_orders"]], "metrics": [], "description": "Order historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2529051, "compiled_sql": "with orders as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n        cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'order_date_expected_initial') as timestamp\n        ) as order_date_expected_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_default_updated_at') as timestamp) as payment_default_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_actual_updated_at') as timestamp) as payment_actual_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc_updated_at') as timestamp) as order_stage_wc_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_payment_coupon') as varchar(255)) as order_payment_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as add_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'add_user_id') as int) as chg_user_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'shipping_speed') as int) as shipping_speed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_group_removals_checked_at') as timestamp) as rx_group_removals_checked_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_group_additions_checked_at') as timestamp) as rx_group_additions_checked_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status\n\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_orders\n)\n\nselect\n    invoice_number,\n    patient_id_cp,\n    patient_id_wc,\n    count_items,\n    count_filled,\n    count_nofill,\n    priority,\n    nullif(order_source, '') as order_source,\n    nullif(order_stage_cp, '') as order_stage_cp,\n    nullif(order_stage_wc, '') as order_stage_wc,\n    nullif(order_status, '') as order_status,\n    nullif(order_address1, '') as order_address1,\n    nullif(order_address2, '') as order_address2,\n    nullif(invoice_doc_id, '') as invoice_doc_id,\n    nullif(tracking_number, '') as tracking_number,\n    payment_total_default,\n    payment_total_actual,\n    payment_fee_default,\n    payment_fee_actual,\n    payment_due_default,\n    payment_due_actual,\n    payment_default_updated_at,\n    payment_actual_updated_at,\n    nullif(payment_date_autopay, '') as payment_date_autopay,\n    nullif(payment_method_actual, '') as payment_method_actual,\n    nullif(order_payment_coupon, '') as order_payment_coupon,\n    nullif(order_note, '') as order_note,\n    nullif(rph_check, '') as rph_check,\n    nullif(tech_fill, '') as tech_fill,\n    order_date_returned,\n    order_date_shipped,\n    order_date_dispensed,\n    order_date_added,\n    order_date_changed,\n    order_date_delivered,\n    order_date_expedited,\n    order_date_expected,\n    order_date_expected_initial,\n    order_date_failed,\n    order_date_updated,\n    order_stage_wc_updated_at,\n    nullif(order_city, '') as order_city,\n    nullif(order_state, '') as order_state,\n    nullif(order_zip, '') as order_zip,\n    add_user_id,\n    chg_user_id,\n    shipping_speed,\n    created_at,\n    updated_at,\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    rx_group_additions_checked_at,\n    rx_group_removals_checked_at,\n    status\nfrom orders", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"orders\""}, "model.smartpill.patient_comms": {"raw_sql": "select\ncast(jsonb_extract_path_text(_airbyte_data, 'event') as varchar(255)) as event,\ncast(jsonb_extract_path_text(_airbyte_data, 'comm_id') as int) as comm_id,\ncast(jsonb_extract_path_text(_airbyte_data, 'data_type') as int) as data_type,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_sent') as timestamp) as date_sent,\ncast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\ncast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_to_send') as timestamp) as date_to_send,\ncast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\ncast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id ,\ncast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number ,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_deleted') as timestamp) as date_deleted,\ncast(jsonb_extract_path_text(_airbyte_data, 'meta_json') as text) as meta_json,\ncast(jsonb_extract_path_text(_airbyte_data, 'email_subject') as varchar(255)) as email_subject,\ncast(jsonb_extract_path_text(_airbyte_data, 'sms') as text) as sms,\ncast(jsonb_extract_path_text(_airbyte_data, 'email_body') as text) as email_body\n\nfrom raw.\"_airbyte_raw_goodpill_gp_patient_comms\" arggpc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "comm_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "patient_comms"], "unique_id": "model.smartpill.patient_comms", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/patient_comms.sql", "original_file_path": "models/goodpill/bronze/patient_comms.sql", "name": "patient_comms", "alias": "patient_comms", "checksum": {"name": "sha256", "checksum": "fdf6488ae3a4c147a1010dc45f386fdb001fc570eff1f7a84e50b760677932ff"}, "tags": ["goodpill"], "refs": [], "sources": [], "metrics": [], "description": "Patients Comm changes table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/patient_comms.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2769144, "compiled_sql": "select\ncast(jsonb_extract_path_text(_airbyte_data, 'event') as varchar(255)) as event,\ncast(jsonb_extract_path_text(_airbyte_data, 'comm_id') as int) as comm_id,\ncast(jsonb_extract_path_text(_airbyte_data, 'data_type') as int) as data_type,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_sent') as timestamp) as date_sent,\ncast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\ncast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_to_send') as timestamp) as date_to_send,\ncast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\ncast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id ,\ncast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number ,\ncast(jsonb_extract_path_text(_airbyte_data, 'date_deleted') as timestamp) as date_deleted,\ncast(jsonb_extract_path_text(_airbyte_data, 'meta_json') as text) as meta_json,\ncast(jsonb_extract_path_text(_airbyte_data, 'email_subject') as varchar(255)) as email_subject,\ncast(jsonb_extract_path_text(_airbyte_data, 'sms') as text) as sms,\ncast(jsonb_extract_path_text(_airbyte_data, 'email_body') as text) as email_body\n\nfrom raw.\"_airbyte_raw_goodpill_gp_patient_comms\" arggpc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patient_comms\""}, "model.smartpill.patient_merge_cp": {"raw_sql": "select\ncast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\ncast(jsonb_extract_path_text(_airbyte_data, 'source_patient_id_cp') as int) as source_patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'target_patient_id_cp') as int) as target_patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'merged_at') as timestamp) as merged_at\nfrom {{ source('raw', '_airbyte_raw_goodpill_gp_patient_merge_cp') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "patient_merge_cp"], "unique_id": "model.smartpill.patient_merge_cp", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/patient_merge_cp.sql", "original_file_path": "models/goodpill/bronze/patient_merge_cp.sql", "name": "patient_merge_cp", "alias": "patient_merge_cp", "checksum": {"name": "sha256", "checksum": "8d2446f67cd6323058482e9503cb566827612a09276f9c2db75536e97a32cb32"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_patient_merge_cp"]], "metrics": [], "description": "Patients dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/patient_merge_cp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2811975, "compiled_sql": "select\ncast(jsonb_extract_path_text(_airbyte_data, 'id') as bigint) as id,\ncast(jsonb_extract_path_text(_airbyte_data, 'source_patient_id_cp') as int) as source_patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'target_patient_id_cp') as int) as target_patient_id_cp,\ncast(jsonb_extract_path_text(_airbyte_data, 'merged_at') as timestamp) as merged_at\nfrom \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_patient_merge_cp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patient_merge_cp\""}, "model.smartpill.patients": {"raw_sql": "with patients as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp\n        ) as payment_card_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_autopay') as int) as payment_card_autopay,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5, 2)) as refills_used,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as \"language\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)\n        ) as allergies_cephalosporins,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n        cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_reviewed') as timestamp) as patient_date_reviewed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_deleted') as int) as patient_deleted,\n        cast(jsonb_extract_path_text(_airbyte_data, 'initial_invoice_number') as int) as initial_invoice_number,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp\n        ) as patient_date_first_dispensed,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp\n        ) as patient_date_first_rx_received,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp\n        ) as patient_date_first_expected_by,\n        cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'third_party_id') as bigint) as third_party_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'terms_viewed_at') as timestamp) as terms_viewed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'terms_accepted') as boolean) as terms_accepted\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_patients') }}\n)\n\nselect distinct on (patients.patient_id_cp)\n    patients.patient_id_cp,\n    nullif(patients.first_name, '') as first_name,\n    nullif(patients.last_name, '') as last_name,\n    patients.birth_date,\n    nullif(patients.language, '') as \"language\",\n    nullif(patients.phone1, '') as phone1,\n    nullif(patients.phone2, '') as phone2,\n    nullif(patients.patient_address1, '') as patient_address1,\n    nullif(patients.patient_address2, '') as patient_address2,\n    nullif(patients.patient_city, '') as patient_city,\n    nullif(patients.patient_state, '') as patient_state,\n    nullif(patients.patient_zip, '') as patient_zip,\n    nullif(patients.payment_card_type, '') as payment_card_type,\n    nullif(patients.payment_card_last4, '') as payment_card_last4,\n    patients.payment_card_date_expired,\n    patients.payment_card_autopay,\n    nullif(patients.payment_method_default, '') as payment_method_default,\n    nullif(patients.payment_coupon, '') as payment_coupon,\n    nullif(patients.tracking_coupon, '') as tracking_coupon,\n    patients.patient_date_registered,\n    patients.patient_date_reviewed,\n    patients.patient_date_added,\n    patients.patient_date_changed,\n    patients.patient_date_first_rx_received,\n    patients.patient_date_first_dispensed,\n    patients.patient_date_first_expected_by,\n    patients.refills_used,\n    nullif(patients.pharmacy_npi, '') as pharmacy_npi,\n    nullif(patients.pharmacy_name, '') as pharmacy_name,\n    nullif(patients.pharmacy_phone, '') as pharmacy_phone,\n    nullif(patients.pharmacy_fax, '') as pharmacy_fax,\n    nullif(patients.pharmacy_address, '') as pharmacy_address,\n    nullif(patients.patient_inactive, '') as patient_inactive,\n    patient_deleted,\n    patients.patient_id_wc,\n    nullif(REPLACE(REPLACE(patients.email,'+','_'),' ','_'), '') as email,\n    patients.patient_autofill,\n    nullif(patients.patient_note, '') as patient_note,\n    patients.initial_invoice_number,\n    nullif(patients.allergies_none, '') as allergies_none,\n    nullif(patients.allergies_cephalosporins, '') as allergies_cephalosporins,\n    nullif(patients.allergies_sulfa, '') as allergies_sulfa,\n    nullif(patients.allergies_aspirin, '') as allergies_aspirin,\n    nullif(patients.allergies_penicillin, '') as allergies_penicillin,\n    nullif(patients.allergies_erythromycin, '') as allergies_erythromycin,\n    nullif(patients.allergies_codeine, '') as allergies_codeine,\n    nullif(patients.allergies_nsaids, '') as allergies_nsaids,\n    nullif(patients.allergies_salicylates, '') as allergies_salicylates,\n    nullif(patients.allergies_azithromycin, '') as allergies_azithromycin,\n    nullif(patients.allergies_amoxicillin, '') as allergies_amoxicillin,\n    nullif(patients.allergies_tetracycline, '') as allergies_tetracycline,\n    nullif(patients.allergies_other, '') as allergies_other,\n    nullif(patients.medications_other, '') as medications_other,\n    patients.patient_date_updated,\n    third_party_id,\n    terms_viewed_at,\n    terms_accepted\nfrom patients\norder by patients.patient_id_cp, patients.patient_date_updated desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id_cp", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["patient_id_cp"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "patients"], "unique_id": "model.smartpill.patients", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/patients.sql", "original_file_path": "models/goodpill/bronze/patients.sql", "name": "patients", "alias": "patients", "checksum": {"name": "sha256", "checksum": "79d99e5bfaa10ef7995ea6ce6073dbf9f27f6b0c8fed9ceafdbd253159434797"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_patients"]], "metrics": [], "description": "Patients dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2717543, "compiled_sql": "with patients as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp\n        ) as payment_card_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_autopay') as int) as payment_card_autopay,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5, 2)) as refills_used,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as \"language\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)\n        ) as allergies_cephalosporins,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n        cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n        cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_reviewed') as timestamp) as patient_date_reviewed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_deleted') as int) as patient_deleted,\n        cast(jsonb_extract_path_text(_airbyte_data, 'initial_invoice_number') as int) as initial_invoice_number,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp\n        ) as patient_date_first_dispensed,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp\n        ) as patient_date_first_rx_received,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp\n        ) as patient_date_first_expected_by,\n        cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'third_party_id') as bigint) as third_party_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'terms_viewed_at') as timestamp) as terms_viewed_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'terms_accepted') as boolean) as terms_accepted\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_patients\n)\n\nselect distinct on (patients.patient_id_cp)\n    patients.patient_id_cp,\n    nullif(patients.first_name, '') as first_name,\n    nullif(patients.last_name, '') as last_name,\n    patients.birth_date,\n    nullif(patients.language, '') as \"language\",\n    nullif(patients.phone1, '') as phone1,\n    nullif(patients.phone2, '') as phone2,\n    nullif(patients.patient_address1, '') as patient_address1,\n    nullif(patients.patient_address2, '') as patient_address2,\n    nullif(patients.patient_city, '') as patient_city,\n    nullif(patients.patient_state, '') as patient_state,\n    nullif(patients.patient_zip, '') as patient_zip,\n    nullif(patients.payment_card_type, '') as payment_card_type,\n    nullif(patients.payment_card_last4, '') as payment_card_last4,\n    patients.payment_card_date_expired,\n    patients.payment_card_autopay,\n    nullif(patients.payment_method_default, '') as payment_method_default,\n    nullif(patients.payment_coupon, '') as payment_coupon,\n    nullif(patients.tracking_coupon, '') as tracking_coupon,\n    patients.patient_date_registered,\n    patients.patient_date_reviewed,\n    patients.patient_date_added,\n    patients.patient_date_changed,\n    patients.patient_date_first_rx_received,\n    patients.patient_date_first_dispensed,\n    patients.patient_date_first_expected_by,\n    patients.refills_used,\n    nullif(patients.pharmacy_npi, '') as pharmacy_npi,\n    nullif(patients.pharmacy_name, '') as pharmacy_name,\n    nullif(patients.pharmacy_phone, '') as pharmacy_phone,\n    nullif(patients.pharmacy_fax, '') as pharmacy_fax,\n    nullif(patients.pharmacy_address, '') as pharmacy_address,\n    nullif(patients.patient_inactive, '') as patient_inactive,\n    patient_deleted,\n    patients.patient_id_wc,\n    nullif(REPLACE(REPLACE(patients.email,'+','_'),' ','_'), '') as email,\n    patients.patient_autofill,\n    nullif(patients.patient_note, '') as patient_note,\n    patients.initial_invoice_number,\n    nullif(patients.allergies_none, '') as allergies_none,\n    nullif(patients.allergies_cephalosporins, '') as allergies_cephalosporins,\n    nullif(patients.allergies_sulfa, '') as allergies_sulfa,\n    nullif(patients.allergies_aspirin, '') as allergies_aspirin,\n    nullif(patients.allergies_penicillin, '') as allergies_penicillin,\n    nullif(patients.allergies_erythromycin, '') as allergies_erythromycin,\n    nullif(patients.allergies_codeine, '') as allergies_codeine,\n    nullif(patients.allergies_nsaids, '') as allergies_nsaids,\n    nullif(patients.allergies_salicylates, '') as allergies_salicylates,\n    nullif(patients.allergies_azithromycin, '') as allergies_azithromycin,\n    nullif(patients.allergies_amoxicillin, '') as allergies_amoxicillin,\n    nullif(patients.allergies_tetracycline, '') as allergies_tetracycline,\n    nullif(patients.allergies_other, '') as allergies_other,\n    nullif(patients.medications_other, '') as medications_other,\n    patients.patient_date_updated,\n    third_party_id,\n    terms_viewed_at,\n    terms_accepted\nfrom patients\norder by patients.patient_id_cp, patients.patient_date_updated desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patients\""}, "model.smartpill.providers": {"raw_sql": "with gp_providers as (\n    select\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar) as npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar) as first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar) as last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_rx_sent_date') as timestamp) as first_rx_sent_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_rx_sent_date') as timestamp) as last_rx_sent_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_providers') }}\n)\n\nselect\n    npi,\n    provider_id,\n    nullif(first_name, '') as first_name,\n    nullif(last_name, '') as last_name,\n    first_rx_sent_date,\n    last_rx_sent_date,\n    verified,\n    created_at,\n    updated_at\nfrom gp_providers\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_providers"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "npi", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["npi", "provider_id"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "providers"], "unique_id": "model.smartpill.providers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/providers.sql", "original_file_path": "models/goodpill/bronze/providers.sql", "name": "providers", "alias": "providers", "checksum": {"name": "sha256", "checksum": "578d877c96cf64c934f096810a4fb6601e68d19b96335000ad7b435d077cdc72"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_providers"]], "metrics": [], "description": "Providers table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/providers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2589974, "compiled_sql": "with gp_providers as (\n    select\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar) as npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar) as first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar) as last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'first_rx_sent_date') as timestamp) as first_rx_sent_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'last_rx_sent_date') as timestamp) as last_rx_sent_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'verified') as boolean) as verified,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_providers\n)\n\nselect\n    npi,\n    provider_id,\n    nullif(first_name, '') as first_name,\n    nullif(last_name, '') as last_name,\n    first_rx_sent_date,\n    last_rx_sent_date,\n    verified,\n    created_at,\n    updated_at\nfrom gp_providers\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"providers\""}, "model.smartpill.rxs_grouped": {"raw_sql": "with rxs_grouped as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6, 3)) as sig_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_date') as timestamp) as rx_message_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5, 2)) as refills_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11, 3)) as qty_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_added_first_at') as timestamp) as rx_added_first_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_added_last_at') as timestamp) as rx_added_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_inactivated_last_at') as timestamp) as rx_inactivated_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_activated_last_at') as timestamp) as rx_activated_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_status') as varchar(255)) as group_status\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_rxs_grouped') }}\n)\n\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    patient_id_cp,\n    nullif(drug_generic, '') as drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    group_id,\n    sig_qty_per_day,\n    nullif(rx_message_keys, '') as rx_message_keys,\n    rx_message_date,\n    max_gsn,\n    nullif(drug_gsns, '') as drug_gsns,\n    refills_total,\n    qty_total,\n    rx_autofill,\n    refill_date_first,\n    refill_date_last,\n    refill_date_next,\n    refill_date_manual,\n    refill_date_default,\n    best_rx_number,\n    nullif(rx_numbers, '') as rx_numbers,\n    nullif(rx_sources, '') as rx_sources,\n    rx_date_changed,\n    rx_date_expired,\n    rx_date_transferred,\n    rx_added_first_at,\n    rx_added_last_at,\n    created_at,\n    updated_at,\n    rx_inactivated_last_at,\n    rx_activated_last_at,\n    group_status\nfrom rxs_grouped\n{% if is_incremental() %}\n    where created_at > (select max(created_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "rxs_grouped"], "unique_id": "model.smartpill.rxs_grouped", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/rxs_grouped.sql", "original_file_path": "models/goodpill/bronze/rxs_grouped.sql", "name": "rxs_grouped", "alias": "rxs_grouped", "checksum": {"name": "sha256", "checksum": "4d381a15b81f09681c6ee0b054a83615ef0e22d4df10e17b3daedf2571c5dd3a"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_rxs_grouped"]], "metrics": [], "description": "Prescription grouped historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/rxs_grouped.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2623591, "compiled_sql": "with rxs_grouped as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6, 3)) as sig_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_date') as timestamp) as rx_message_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5, 2)) as refills_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11, 3)) as qty_total,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_added_first_at') as timestamp) as rx_added_first_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_added_last_at') as timestamp) as rx_added_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_inactivated_last_at') as timestamp) as rx_inactivated_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_activated_last_at') as timestamp) as rx_activated_last_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_status') as varchar(255)) as group_status\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_rxs_grouped\n)\n\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    patient_id_cp,\n    nullif(drug_generic, '') as drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    group_id,\n    sig_qty_per_day,\n    nullif(rx_message_keys, '') as rx_message_keys,\n    rx_message_date,\n    max_gsn,\n    nullif(drug_gsns, '') as drug_gsns,\n    refills_total,\n    qty_total,\n    rx_autofill,\n    refill_date_first,\n    refill_date_last,\n    refill_date_next,\n    refill_date_manual,\n    refill_date_default,\n    best_rx_number,\n    nullif(rx_numbers, '') as rx_numbers,\n    nullif(rx_sources, '') as rx_sources,\n    rx_date_changed,\n    rx_date_expired,\n    rx_date_transferred,\n    rx_added_first_at,\n    rx_added_last_at,\n    created_at,\n    updated_at,\n    rx_inactivated_last_at,\n    rx_activated_last_at,\n    group_status\nfrom rxs_grouped\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"rxs_grouped\""}, "model.smartpill.rxs_single": {"raw_sql": "with rxs_single as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_date') as timestamp) as rx_message_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5, 2)) as refills_left,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5, 2)) as refills_original,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10, 3)) as qty_left,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10, 3)) as qty_original,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10, 3)) as sig_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10, 3)) as sig_v1_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10, 2)) as sig_v1_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6, 3)\n        ) as sig_qty_per_day_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6, 3)\n        ) as sig_qty_per_day_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)\n        ) as sig_frequency_numerators,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)\n        ) as sig_frequency_denominators,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10, 3)) as sig_v2_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10, 3)) as sig_v2_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10, 3)) as sig_v2_conf_score,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred_out') as timestamp) as rx_date_transferred_out,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred_in') as timestamp) as rx_date_transferred_in,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_added') as timestamp) as rx_date_added,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'rx_stock_level_initial') as varchar(255)\n        ) as rx_stock_level_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_phone') as varchar(10)\n        ) as transfer_pharmacy_phone,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_name') as varchar(255)\n        ) as transfer_pharmacy_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_fax') as varchar(10)) as transfer_pharmacy_fax,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_address') as varchar(255)\n        ) as transfer_pharmacy_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_status_updated_at') as timestamp) as rx_status_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_email') as varchar(255)) as provider_email,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_id') as int) as rx_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_confirmed_by') as bigint) as sig_confirmed_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_confirmed_at') as timestamp) as sig_confirmed_at\n\n    from\n        {{ source('raw', '_airbyte_raw_goodpill_gp_rxs_single') }}\n)\n\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    rx_number,\n    patient_id_cp,\n    group_id,\n    nullif(drug_generic, '') as drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    nullif(drug_name, '') as drug_name,\n    nullif(rx_message_key, '') as rx_message_key,\n    nullif(rx_message_text, '') as rx_message_text,\n    rx_message_date,\n    rx_gsn,\n    nullif(drug_gsns, '') as drug_gsns,\n    refills_left,\n    refills_original,\n    qty_left,\n    qty_original,\n    nullif(sig_actual, '') as sig_actual,\n    nullif(sig_initial, '') as sig_initial,\n    nullif(sig_clean, '') as sig_clean,\n    sig_qty,\n    sig_v1_qty,\n    sig_v1_days,\n    sig_v1_qty_per_day,\n    sig_days,\n    sig_qty_per_day_default,\n    sig_qty_per_day_actual,\n    nullif(sig_durations, '') as sig_durations,\n    nullif(sig_qtys_per_time, '') as sig_qtys_per_time,\n    nullif(sig_frequencies, '') as sig_frequencies,\n    nullif(sig_frequency_numerators, '') as sig_frequency_numerators,\n    nullif(sig_frequency_denominators, '') as sig_frequency_denominators,\n    sig_v2_qty,\n    sig_v2_days,\n    sig_v2_qty_per_day,\n    nullif(sig_v2_unit, '') as sig_v2_unit,\n    sig_v2_conf_score,\n    nullif(sig_v2_dosages, '') as sig_v2_dosages,\n    nullif(sig_v2_scores, '') as sig_v2_scores,\n    nullif(sig_v2_frequencies, '') as sig_v2_frequencies,\n    nullif(sig_v2_durations, '') as sig_v2_durations,\n    rx_autofill,\n    refill_date_first,\n    refill_date_last,\n    refill_date_manual,\n    refill_date_default,\n    rx_status,\n    nullif(rx_stage, '') as rx_stage,\n    nullif(rx_source, '') as rx_source,\n    rx_date_transferred_out,\n    rx_date_transferred_in,\n    nullif(provider_npi, '') as provider_npi,\n    nullif(provider_first_name, '') as provider_first_name,\n    nullif(provider_last_name, '') as provider_last_name,\n    nullif(provider_clinic, '') as provider_clinic,\n    nullif(provider_phone, '') as provider_phone,\n    rx_date_changed,\n    rx_date_expired,\n    rx_date_added,\n    rx_stock_level_initial,\n    nullif(transfer_pharmacy_phone, '') as transfer_pharmacy_phone,\n    nullif(transfer_pharmacy_name, '') as transfer_pharmacy_name,\n    nullif(transfer_pharmacy_fax, '') as transfer_pharmacy_fax,\n    nullif(transfer_pharmacy_address, '') as transfer_pharmacy_address,\n    created_at,\n    updated_at,\n    status,\n    rx_status_updated_at,\n    provider_email,\n    rx_id,\n    sig_confirmed_by,\n    sig_confirmed_at\nfrom rxs_single\n{% if is_incremental() %}\n    where updated_at > (select max(updated_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["rx_number", "updated_at"]}, {"columns": ["rx_number"]}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "rxs_single"], "unique_id": "model.smartpill.rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/rxs_single.sql", "original_file_path": "models/goodpill/bronze/rxs_single.sql", "name": "rxs_single", "alias": "rxs_single", "checksum": {"name": "sha256", "checksum": "885e3b1af9e47627885a89349087695c19bd64a31b3caf0508411fac3aade4f7"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_rxs_single"]], "metrics": [], "description": "Prescription historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/rxs_single.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.2678883, "compiled_sql": "with rxs_single as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n        cast(jsonb_extract_path_text(_airbyte_data, 'group_id') as int) as group_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_date') as timestamp) as rx_message_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n        cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5, 2)) as refills_left,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5, 2)) as refills_original,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10, 3)) as qty_left,\n        cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10, 3)) as qty_original,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10, 3)) as sig_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10, 3)) as sig_v1_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10, 2)) as sig_v1_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6, 3)\n        ) as sig_qty_per_day_default,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6, 3)\n        ) as sig_qty_per_day_actual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)\n        ) as sig_frequency_numerators,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)\n        ) as sig_frequency_denominators,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10, 3)) as sig_v2_qty,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10, 3)) as sig_v2_qty_per_day,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10, 3)) as sig_v2_conf_score,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n        cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred_out') as timestamp) as rx_date_transferred_out,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred_in') as timestamp) as rx_date_transferred_in,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_added') as timestamp) as rx_date_added,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'rx_stock_level_initial') as varchar(255)\n        ) as rx_stock_level_initial,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_phone') as varchar(10)\n        ) as transfer_pharmacy_phone,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_name') as varchar(255)\n        ) as transfer_pharmacy_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_fax') as varchar(10)) as transfer_pharmacy_fax,\n        cast(\n            jsonb_extract_path_text(_airbyte_data, 'transfer_pharmacy_address') as varchar(255)\n        ) as transfer_pharmacy_address,\n        cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'status') as varchar(255)) as status,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_status_updated_at') as timestamp) as rx_status_updated_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'provider_email') as varchar(255)) as provider_email,\n        cast(jsonb_extract_path_text(_airbyte_data, 'rx_id') as int) as rx_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_confirmed_by') as bigint) as sig_confirmed_by,\n        cast(jsonb_extract_path_text(_airbyte_data, 'sig_confirmed_at') as timestamp) as sig_confirmed_at\n\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_rxs_single\n)\n\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    rx_number,\n    patient_id_cp,\n    group_id,\n    nullif(drug_generic, '') as drug_generic,\n    nullif(drug_brand, '') as drug_brand,\n    nullif(drug_name, '') as drug_name,\n    nullif(rx_message_key, '') as rx_message_key,\n    nullif(rx_message_text, '') as rx_message_text,\n    rx_message_date,\n    rx_gsn,\n    nullif(drug_gsns, '') as drug_gsns,\n    refills_left,\n    refills_original,\n    qty_left,\n    qty_original,\n    nullif(sig_actual, '') as sig_actual,\n    nullif(sig_initial, '') as sig_initial,\n    nullif(sig_clean, '') as sig_clean,\n    sig_qty,\n    sig_v1_qty,\n    sig_v1_days,\n    sig_v1_qty_per_day,\n    sig_days,\n    sig_qty_per_day_default,\n    sig_qty_per_day_actual,\n    nullif(sig_durations, '') as sig_durations,\n    nullif(sig_qtys_per_time, '') as sig_qtys_per_time,\n    nullif(sig_frequencies, '') as sig_frequencies,\n    nullif(sig_frequency_numerators, '') as sig_frequency_numerators,\n    nullif(sig_frequency_denominators, '') as sig_frequency_denominators,\n    sig_v2_qty,\n    sig_v2_days,\n    sig_v2_qty_per_day,\n    nullif(sig_v2_unit, '') as sig_v2_unit,\n    sig_v2_conf_score,\n    nullif(sig_v2_dosages, '') as sig_v2_dosages,\n    nullif(sig_v2_scores, '') as sig_v2_scores,\n    nullif(sig_v2_frequencies, '') as sig_v2_frequencies,\n    nullif(sig_v2_durations, '') as sig_v2_durations,\n    rx_autofill,\n    refill_date_first,\n    refill_date_last,\n    refill_date_manual,\n    refill_date_default,\n    rx_status,\n    nullif(rx_stage, '') as rx_stage,\n    nullif(rx_source, '') as rx_source,\n    rx_date_transferred_out,\n    rx_date_transferred_in,\n    nullif(provider_npi, '') as provider_npi,\n    nullif(provider_first_name, '') as provider_first_name,\n    nullif(provider_last_name, '') as provider_last_name,\n    nullif(provider_clinic, '') as provider_clinic,\n    nullif(provider_phone, '') as provider_phone,\n    rx_date_changed,\n    rx_date_expired,\n    rx_date_added,\n    rx_stock_level_initial,\n    nullif(transfer_pharmacy_phone, '') as transfer_pharmacy_phone,\n    nullif(transfer_pharmacy_name, '') as transfer_pharmacy_name,\n    nullif(transfer_pharmacy_fax, '') as transfer_pharmacy_fax,\n    nullif(transfer_pharmacy_address, '') as transfer_pharmacy_address,\n    created_at,\n    updated_at,\n    status,\n    rx_status_updated_at,\n    provider_email,\n    rx_id,\n    sig_confirmed_by,\n    sig_confirmed_at\nfrom rxs_single\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"rxs_single\""}, "model.smartpill.active_orders_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n    \"{{ pg_create_index(this = this, name='order_queue_3', schema='goodpill', columns=['day'], includes = ['active_orders_count']) }}\",\n\t\"{{ create_active_orders_abt_view() }}\",\n\t\"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nWITH DATES AS (\n\tSELECT\n\t\tORDER_DATE_ADDED,\n\t\tCOALESCE(ORDER_DATE_DISPENSED, NOW()) AS ORDER_DATE_LAST,\n\t\tGENERATE_SERIES(\n\t\t\tDATE(ORDER_DATE_ADDED),\n\t\t\tDATE(COALESCE(ORDER_DATE_DISPENSED, NOW())),\n\t\t\t'1 DAY'::INTERVAL)::timestamp AS DATE_BETWEEN\n\tFROM {{ ref('orders') }}\n),\nFILTER_CASES AS (\n\tSELECT\n\t\tDATE_BETWEEN\n\tfrom DATES\n\tWHERE\n\t\tORDER_DATE_ADDED <= DATE_BETWEEN + INTERVAL '1' DAY\n\t\tAND ORDER_DATE_LAST > DATE_BETWEEN + INTERVAL '1' DAY\n)\nSELECT\n\tDATE_BETWEEN as day,\n\tCOUNT(*) as active_orders_count\nfrom FILTER_CASES\nGROUP by DATE_BETWEEN", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.pg_create_index", "macro.smartpill.create_active_orders_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.orders"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ pg_create_index(this = this, name='order_queue_3', schema='goodpill', columns=['day'], includes = ['active_orders_count']) }}", "transaction": true, "index": null}, {"sql": "{{ create_active_orders_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "gold", "active_orders_abt"], "unique_id": "model.smartpill.active_orders_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/gold/active_orders_abt.sql", "original_file_path": "models/goodpill/gold/active_orders_abt.sql", "name": "active_orders_abt", "alias": "active_orders_abt", "checksum": {"name": "sha256", "checksum": "cc8e9f1dbf26c60e5488641dc9916cc92081b6951d3507f25c95eefc9970ba65"}, "tags": [], "refs": [["orders"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/gold/active_orders_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "goodpill", "post-hook": ["{{ pg_create_index(this = this, name='order_queue_3', schema='goodpill', columns=['day'], includes = ['active_orders_count']) }}", "{{ create_active_orders_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701091.4708424, "compiled_sql": "\nWITH DATES AS (\n\tSELECT\n\t\tORDER_DATE_ADDED,\n\t\tCOALESCE(ORDER_DATE_DISPENSED, NOW()) AS ORDER_DATE_LAST,\n\t\tGENERATE_SERIES(\n\t\t\tDATE(ORDER_DATE_ADDED),\n\t\t\tDATE(COALESCE(ORDER_DATE_DISPENSED, NOW())),\n\t\t\t'1 DAY'::INTERVAL)::timestamp AS DATE_BETWEEN\n\tFROM \"datawarehouse\".goodpill.\"orders\"\n),\nFILTER_CASES AS (\n\tSELECT\n\t\tDATE_BETWEEN\n\tfrom DATES\n\tWHERE\n\t\tORDER_DATE_ADDED <= DATE_BETWEEN + INTERVAL '1' DAY\n\t\tAND ORDER_DATE_LAST > DATE_BETWEEN + INTERVAL '1' DAY\n)\nSELECT\n\tDATE_BETWEEN as day,\n\tCOUNT(*) as active_orders_count\nfrom FILTER_CASES\nGROUP by DATE_BETWEEN", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"active_orders_abt\""}, "model.smartpill.goodpill_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n    \"{{ pg_create_index(this = this, name='order_queue_1', schema='goodpill', columns=['order_date_added'], includes = ['order_invoice_number']) }}\",\n    \"{{ pg_create_index(this = this, name='order_queue_2', schema='goodpill', columns=['order_date_dispensed'], includes = ['order_invoice_number']) }}\",\n    \"{{ pg_create_index(this = this, name='dispensed_by_person', schema='goodpill', columns=['order_date_shipped'], includes = ['order_tech_fill', 'order_rph_check', 'order_invoice_number', 'item_rx_dispensed_id']) }}\",\n    \"{{ pg_create_index(this = this, name='fulfillment_time', schema='goodpill', columns=['order_date_added'], includes = ['order_date_shipped', 'patient_initial_invoice_number', 'order_invoice_number']) }}\",\n    \"{{ pg_create_index(this = this, name='growth', schema='goodpill', columns=['item_date_added'], includes = ['item_rx_dispensed_id', 'item_qty_dispensed_actual', 'item_days_dispensed_actual', 'order_invoice_number', 'patient_id_cp', 'item_price_dispensed_actual', 'item_price_dispensed_default']) }}\",\n    \"{{ pg_create_index(this = this, name='pend_errors', schema='goodpill', columns=['item_date_added', 'item_qty_dispensed_default'], includes = ['item_qty_pended_total', 'item_qty_dispensed_default']) }}\",\n    \"{{ pg_create_index(this = this, name='recipient_growth_1', schema='goodpill', columns=['rx_group_id'], includes = ['rx_added_first_at']) }}\",\n    \"{{ pg_create_index(this = this, name='recipient_growth_2', schema='goodpill', columns=['rx_date_added'], includes = ['rx_numbers']) }}\",\n    \"{{ pg_create_index(this = this, name='stock_levels', schema='goodpill', columns=['item_days_dispensed_default', 'item_date_added'], includes = ['item_price_dispensed_default', 'item_stock_level_initial']) }}\",\n    \"{{ pg_create_index(this = this, name='sig_errors', schema='goodpill', columns=['item_qty_dispensed_actual', 'item_date_added'], includes = ['item_qty_dispensed_default']) }}\",\n    \"{{ pg_create_index(this = this, name='comm_errors', schema='goodpill', columns=['order_invoice_number', 'order_date_shipped']) }}\",\n    \"{{ create_goodpill_abt_view() }}\",\n    \"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\n\nwith _patients as (\n    select _patients.patient_id_cp, cmc.clinic_id\n    from {{ ref('patients') }} as _patients\n    left join {{ ref('clinic_coupons') }} as cmc on\n        _patients.payment_coupon = cmc.coupon_code or _patients.tracking_coupon = cmc.coupon_code\n),\ngoodpill_snapshot as (\n    with psh as (\n        -- join with dimension patient right away, to join later with clinics\n        select distinct on (patient_id_cp)\n            pat.patient_id_cp,\n            pme.event_date as dw_patient_event_date,\n            pme.event_name as dw_patient_status,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_ACTIVE' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_active,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_NO_RX' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_no_rx,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_UNREGISTERED' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_unregistered,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_DECEASED' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_deceased,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_CHURNED_NO_FILLABLE_RX' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_churned_no_fillable_rx,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_INACTIVE' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_inactive,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_CHURNED_OTHER' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_churned_other\n        from _patients as pat\n        left join {{ ref('clinics') }} as clinics on pat.clinic_id = clinics.clinic_id\n        left join {{ ref('patients_status_historic') }} as pme using (patient_id_cp)\n        order by patient_id_cp, pme.event_date desc\n    ),\n\n    rh as (\n        select\n            patient_id_cp,\n            rx_number,\n            rx_id,\n            first_value(rx_numbers) over (\n                partition by rx_number\n                order by updated_at desc nulls last\n            ) as rx_numbers,\n            best_rx_number as rx_best_rx_number,\n            first_value(provider_npi) over (\n                partition by rx_number\n                order by case when provider_npi is not null then 0 else 1 end, updated_at desc nulls last\n            ) as rx_provider_npi,\n            first_value(drug_generic) over (\n                partition by rx_number\n                order by case when drug_generic is not null then 0 else 1 end, updated_at desc nulls last\n            ) as rx_drug_generic,\n            drug_brand as rx_drug_brand,\n            drug_name as rx_drug_name,\n            rx_message_key,\n            rx_message_text,\n            rx_message_date,\n            rx_sources,\n            rx_gsn,\n            drug_gsns as rx_drug_gsns,\n            max_gsn as rx_max_gsn,\n            refills_left as rx_refills_left,\n            refills_original as rx_refills_original,\n            refills_total as rx_refills_total,\n            qty_left as rx_qty_left,\n            qty_original as rx_qty_original,\n            qty_total as rx_qty_total,\n            sig_actual as rx_sig_actual,\n            sig_initial as rx_sig_initial,\n            sig_clean as rx_sig_clean,\n            sig_qty as rx_sig_qty,\n            sig_v1_qty as rx_sig_v1_qty,\n            sig_v1_days as rx_sig_v1_days,\n            sig_v1_qty_per_day as rx_sig_v1_qty_per_day,\n            sig_days as rx_sig_days,\n            sig_qty_per_day as rx_sig_qty_per_day,\n            sig_qty_per_day_default as rx_sig_qty_per_day_default,\n            sig_qty_per_day_actual as rx_sig_qty_per_day_actual,\n            sig_durations as rx_sig_durations,\n            sig_qtys_per_time as rx_sig_qtys_per_time,\n            sig_frequencies as rx_sig_frequencies,\n            sig_frequency_numerators as rx_sig_frequency_numerators,\n            sig_frequency_denominators as rx_sig_frequency_denominators,\n            sig_v2_qty as rx_sig_v2_qty,\n            sig_v2_days as rx_sig_v2_days,\n            sig_v2_qty_per_day as rx_sig_v2_qty_per_day,\n            sig_v2_unit as rx_sig_v2_unit,\n            sig_v2_conf_score as rx_sig_v2_conf_score,\n            sig_v2_dosages as rx_sig_v2_dosages,\n            sig_v2_scores as rx_sig_v2_scores,\n            sig_v2_frequencies as rx_sig_v2_frequencies,\n            sig_v2_durations as rx_sig_v2_durations,\n            rx_autofill as rx_autofill,\n            refill_date_first as rx_refill_date_first,\n            refill_date_last as rx_refill_date_last,\n            refill_date_manual as rx_refill_date_manual,\n            refill_date_next as rx_refill_date_next,\n            rx_status as rx_status,\n            rx_stage as rx_stage,\n            rx_source as rx_source,\n            rx_date_transferred_out,\n            rx_date_transferred_in,\n            provider_phone as provider_phone,\n            clinic_name as rx_clinic_name,\n            rx_added_first_at,\n            rx_added_last_at,\n            rx_date_changed,\n            rx_date_expired,\n            rx_date_added as rx_date_added,\n            rx_stock_level_initial as rx_stock_level_initial,\n            created_at as rx_created_at,\n            updated_at as rx_updated_at,\n            rx_group_created_at,\n            rx_group_updated_at,\n            rx_clinic_name_cp,\n            status as rxs_single_status,\n            rx_status_updated_at,\n            provider_email as rx_provider_email,\n            rx_inactivated_last_at,\n            rx_activated_last_at,\n            group_status as rx_group_status,\n            rx_group_drug_generic,\n            rx_group_drug_brand,\n            rx_group_id,\n            rx_group_drug_gsns,\n            rx_group_rx_autofill,\n            rx_group_refill_date_first,\n            rx_group_refill_date_last,\n            rx_group_refill_date_manual,\n            rx_group_refill_date_default,\n            rx_group_rx_date_changed,\n            rx_group_rx_date_expired,\n            transfer_pharmacy_phone as rx_transfer_pharmacy_phone,\n            transfer_pharmacy_name as rx_transfer_pharmacy_name,\n            transfer_pharmacy_fax as rx_transfer_pharmacy_fax,\n            transfer_pharmacy_address as rx_transfer_pharmacy_address,\n            sig_confirmed_by as rx_sig_confirmed_by,\n            sig_confirmed_at as rx_sig_confirmed_at\n        from {{ ref('rxs_joined') }}\n    ),\n\n    oi as (\n        select\n            patient_id_cp,\n            rx_number,\n            line_id as item_line_id,\n            invoice_number as order_invoice_number,\n            groups as item_groups,\n            rx_dispensed_id as item_rx_dispensed_id,\n            stock_level_initial as item_stock_level_initial,\n            rx_message_keys_initial as item_rx_message_keys_initial,\n            patient_autofill_initial as item_patient_autofill_initial,\n            rx_autofill_initial as item_rx_autofill_initial,\n            rx_numbers_initial as item_rx_numbers_initial,\n            zscore_initial as item_zscore_initial,\n            refills_dispensed_default as item_refills_dispensed_default,\n            refills_dispensed_actual as item_refills_dispensed_actual,\n            days_dispensed_default as item_days_dispensed_default,\n            days_dispensed_actual as item_days_dispensed_actual,\n            qty_dispensed_default as item_qty_dispensed_default,\n            qty_dispensed_actual as item_qty_dispensed_actual,\n            price_dispensed_default as item_price_dispensed_default,\n            price_dispensed_actual as item_price_dispensed_actual,\n            unit_price_retail_initial as item_unit_price_retail_initial,\n            unit_price_goodrx_initial as item_unit_price_goodrx_initial,\n            unit_price_nadac_initial as item_unit_price_nadac_initial,\n            unit_price_awp_initial as item_unit_price_awp_initial,\n            qty_pended_total as item_qty_pended_total,\n            qty_pended_repacks as item_qty_pended_repacks,\n            count_pended_total as item_count_pended_total,\n            count_pended_repacks as item_count_pended_repacks,\n            item_message_keys as item_message_keys,\n            item_message_text as item_message_text,\n            item_type as item_type,\n            item_added_by as item_added_by,\n            item_date_added as item_date_added,\n            item_date_changed as item_date_changed,\n            updated_at as item_date_updated,\n            days_and_message_updated_at as item_days_and_message_updated_at,\n            days_and_message_initial_at as item_days_and_message_initial_at,\n            days_pended as item_days_pended,\n            qty_per_day_pended as item_qty_per_day_pended,\n            refill_date_last as item_refill_date_last,\n            refill_date_manual as item_refill_date_manual,\n            refill_date_default as item_refill_date_default,\n            add_user_id as item_add_user_id,\n            chg_user_id as item_chg_user_id,\n            count_lines as item_count_lines,\n            repacked_by as item_repacked_by,\n            unpended_at as item_unpended_at,\n            pend_initial_at as item_pend_initial_at,\n            pend_updated_at as item_pend_updated_at,\n            ndc_pended as item_ndc_pended,\n            drug_generic_pended as item_drug_generic_pended,\n            filled_at as item_filled_at,\n            pend_failed_at as item_pend_failed_at,\n            filled_by as item_filled_by,\n            pend_retried_by as item_pend_retried_by,\n            status as item_status,\n            pend_retried_days as item_pend_retried_days,\n            pend_retried_at as item_pend_retried_at\n        from {{ ref('order_items') }}\n    ),\n\n    o as (\n        select\n            patient_id_cp,\n            invoice_number as order_invoice_number,\n            order_date_added as order_date_added,\n            order_date_dispensed as order_date_dispensed,\n            order_date_shipped as order_date_shipped,\n            order_date_returned as order_date_returned,\n            count_items as order_count_items,\n            count_filled as order_count_filled,\n            count_nofill as order_count_nofill,\n            priority as order_priority,\n            order_source as order_source,\n            order_stage_cp as order_stage_cp,\n            order_stage_wc as order_stage_wc,\n            order_status as order_status,\n            order_address1,\n            order_address2,\n            invoice_doc_id as order_invoice_doc_id,\n            tracking_number as order_tracking_number,\n            payment_total_default as order_payment_total_default,\n            payment_total_actual as order_payment_total_actual,\n            payment_fee_default as order_payment_fee_default,\n            payment_fee_actual as order_payment_fee_actual,\n            payment_due_default as order_payment_due_default,\n            payment_due_actual as order_payment_due_actual,\n            payment_date_autopay as order_payment_date_autopay,\n            payment_method_actual as order_payment_method_actual,\n            payment_default_updated_at as order_payment_default_updated_at,\n            payment_actual_updated_at as order_payment_actual_updated_at,\n            order_payment_coupon as order_payment_coupon,\n            order_date_changed, --comes from Carepoint\n            order_date_delivered,\n            order_date_expedited,\n            order_date_expected,\n            order_date_expected_initial,\n            order_date_failed,\n            order_date_updated, --comes from Patient Portal\n            order_stage_wc_updated_at,\n            add_user_id as order_add_user_id,\n            chg_user_id as order_chg_user_id,\n            shipping_speed as order_shipping_speed,\n            rx_group_removals_checked_at as order_rx_group_removals_checked_at,\n            rx_group_additions_checked_at as order_rx_group_additions_checked_at,\n            order_note as order_note,\n            rph_check as order_rph_check,\n            tech_fill as order_tech_fill,\n            order_city as order_city,\n            order_state as order_state,\n            order_zip as order_zip,\n            updated_at as order_updated_at,\n            status as order_shipped_status\n        from {{ ref('orders') }}\n    ),\n    gp_pend_group as (\n        select\n        pend_group_name,\n        invoice_number as pend_group_invoice_number,\n        initial_pend_date as pend_group_initial_date,\n        last_pend_date as pend_group_last_date\n        from {{ ref('gp_pend_group') }}\n    ),\n    o_safe as (\n        select * from o\n        left join gp_pend_group gpg on gpg.pend_group_invoice_number = o.order_invoice_number\n    )\n\n    select distinct on (patient_id_cp, rx_number, order_invoice_number)\n        *,\n        greatest(rh.rx_group_updated_at, rh.rx_group_created_at, oi.item_date_updated, o_safe.order_date_updated) as dw_updated_at\n    from psh\n    left join rh using (patient_id_cp)\n    left join oi using (rx_number, patient_id_cp)\n    full outer join o_safe using (order_invoice_number, patient_id_cp)\n    order by\n        patient_id_cp,\n        rx_number,\n        order_invoice_number,\n        -- prioritize rxs which were updated before the order was dispensed\n        rh.rx_group_updated_at <= o_safe.order_date_dispensed desc,\n        rh.rx_group_updated_at desc,\n        rh.rx_group_created_at <= o_safe.order_date_dispensed desc,\n        rh.rx_group_created_at desc\n),\ndrugs as (\n    select\n    drugs.drug_brand,\n    drugs.drug_gsns,\n    drugs.price30 as drug_price30,\n    drugs.price90 as drug_price90,\n    drugs.price_retail as drug_price_retail,\n    drugs.price_goodrx as drug_price_goodrx,\n    drugs.price_nadac as drug_price_nadac,\n    drugs.qty_repack as drug_qty_repack,\n    drugs.count_ndcs as drug_count_ndcs,\n    drugs.drug_ordered,\n    drugs.qty_min as drug_qty_min,\n    drugs.days_min as drug_days_min,\n    drugs.max_inventory as drug_max_inventory,\n    drugs.message_display as drug_message_display,\n    drugs.message_verified as drug_message_verified,\n    drugs.message_destroyed as drug_message_destroyed,\n    nullif(drug_generic, '') as drug_generic_name,\n    coalesce(nullif(price_goodrx, 0), nullif(price_nadac, 0), nullif(price_retail, 0)) as drug_price_coalesced\n    from {{ ref('drugs') }}\n),\nproviders as (\n    select\n    providers.first_name as provider_first_name,\n\tproviders.last_name as provider_last_name,\n\tproviders.verified as provider_verified,\n    providers.npi as providers_npi,\n    providers.provider_id as dw_provider_id,\n    providers.first_rx_sent_date as provider_first_rx_sent_date,\n    providers.last_rx_sent_date as provider_last_rx_sent_date\n    from {{ ref('providers') }}\n),\ndw_providers as (\n    select\n    dw_providers.provider_npi as dw_provider_npi,\n    dw_providers.provider_name as dw_provider_name,\n    dw_providers.provider_phone as dw_provider_phone,\n    dw_providers.provider_id_sf as dw_provider_id_sf,\n    dw_providers.default_clinic as dw_provider_default_clinic,\n    dw_providers.default_clinic_imputed_at as dw_provider_default_clinic_imputed_at\n    from {{ ref('dw_providers') }}\n),\nclinics as (\n    select\n    clinics.clinic_id,\n    clinics.clinic_name_cp,\n    clinics.clinic_rx_date_added_first,\n    clinics.clinic_rx_date_added_last,\n    clinics.created_at as clinic_created_at,\n    clinics.updated_at as clinic_updated_at\n    from {{ ref('clinics') }}\n),\ndw_clinics as (\n    select\n    dw_clinics.clinic_id as dw_clinic_id,\n    dw_clinics.clinic_group_id as dw_clinic_group_id,\n    dw_clinics.clinic_name as dw_clinic_name,\n    dw_clinics.clinic_address as dw_clinic_address,\n    dw_clinics.clinic_street as dw_clinic_street,\n    dw_clinics.clinic_city as dw_clinic_city,\n    dw_clinics.clinic_state as dw_clinic_state,\n    dw_clinics.clinic_zip as dw_clinic_zip,\n    dw_clinics.clinic_phone as dw_clinic_phone,\n    dw_clinics.clinic_id_sf as dw_clinic_id_sf,\n    dw_clinics.created_at as dw_clinic_created_at,\n    dw_clinics.updated_at as dw_clinic_updated_at\n    from {{ ref('dw_clinics') }}\n),\ndw_clinic_groups as (\n    select\n    dw_clinic_groups.clinic_group_id as dw_clinic_groups_id,\n    dw_clinic_groups.clinic_group_name as dw_clinic_group_name,\n    dw_clinic_groups.clinic_group_id_sf as dw_clinic_group_id_sf,\n    dw_clinic_groups.clinic_group_domain as dw_clinic_group_domain,\n    dw_clinic_groups.created_at as dw_clinic_groups_created_at,\n    dw_clinic_groups.updated_at as dw_clinic_groups_updated_at\n    from {{ ref('dw_clinic_groups') }}\n),\npatients as (\n    select\n    patient_id_cp,\n    patient_id_wc,\n    patient_date_registered,\n    patient_date_reviewed,\n    patient_date_added,\n    patient_date_changed,\n    patient_date_updated,\n    first_name as patient_first_name,\n    last_name as patient_last_name,\n    birth_date as patient_birth_date,\n    birth_date as patient_language,\n    phone1 as patient_phone1,\n    phone2 as patient_phone2,\n    concat(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city as patient_city,\n    patient_state as patient_state,\n    patient_zip as patient_zip,\n    payment_card_type as patient_payment_card_type,\n    payment_card_last4 as patient_payment_card_last4,\n    payment_card_date_expired as patient_payment_card_date_expired,\n    payment_card_autopay as patient_payment_card_autopay,\n    payment_method_default as patient_payment_method_default,\n    patient_date_first_rx_received,\n    patient_date_first_dispensed,\n    patient_date_first_expected_by,\n    refills_used as patient_refills_used,\n    email as patient_email,\n    patient_autofill,\n    initial_invoice_number as patient_initial_invoice_number,\n    patient_note,\n    allergies_none as patient_allergies_none,\n    allergies_cephalosporins as patient_allergies_cephalosporins,\n    allergies_sulfa as patient_allergies_sulfa,\n    allergies_aspirin as patient_allergies_aspirin,\n    allergies_penicillin as patient_allergies_penicillin,\n    allergies_erythromycin as patient_allergies_erythromycin,\n    allergies_codeine as patient_allergies_codeine,\n    allergies_nsaids as patient_allergies_nsaids,\n    allergies_salicylates as patient_allergies_salicylates,\n    allergies_azithromycin as patient_allergies_azithromycin,\n    allergies_amoxicillin as patient_allergies_amoxicillin,\n    allergies_tetracycline as patient_allergies_tetracycline,\n    allergies_other as patient_allergies_other,\n    medications_other as patient_medications_other,\n    pharmacy_npi as pharmacy_npi,\n    pharmacy_name as pharmacy_name,\n    pharmacy_phone as pharmacy_phone,\n    pharmacy_fax as pharmacy_fax,\n    pharmacy_address as pharmacy_address,\n    patient_inactive,\n    payment_coupon as patient_payment_coupon,\n    tracking_coupon as patient_tracking_coupon,\n    patient_deleted as patient_patient_deleted,\n    third_party_id as patient_third_party_id,\n    terms_viewed_at as patient_terms_viewed_at,\n    terms_accepted as patient_terms_accepted\n    from {{ ref('patients') }}\n),\ngp_stock_live as (\n    select\n    drug_generic as stock_live_drug_generic,\n    price_per_month as stock_live_price_per_month,\n    drug_ordered as stock_live_drug_ordered,\n    qty_repack as stock_live_qty_repack,\n    months_inventory as stock_live_months_inventory,\n    avg_inventory as stock_live_avg_inventory,\n    last_inventory as stock_live_last_inventory,\n    months_entered as stock_live_months_entered,\n    stddev_entered as stock_live_stddev_entered,\n    total_entered as stock_live_total_entered,\n    months_dispensed as stock_live_months_dispensed,\n    stddev_dispensed_actual as stock_live_stddev_dispensed_actual,\n    total_dispensed_actual as stock_live_total_dispensed_actual,\n    total_dispensed_default as stock_live_total_dispensed_default,\n    stddev_dispensed_default as stock_live_stddev_dispensed_default,\n    month_interval as stock_live_month_interval,\n    default_rxs_min as stock_live_default_rxs_min,\n    last_inv_low_threshold as stock_live_last_inv_low_threshold,\n    last_inv_high_threshold as stock_live_last_inv_high_threshold,\n    last_inv_onetime_threshold as stock_live_last_inv_onetime_threshold,\n    zlow_threshold as stock_live_zlow_threshold,\n    zhigh_threshold as stock_live_zhigh_threshold,\n    zscore as stock_live_zscore,\n    stock_level as stock_live_level\n    from {{ ref('gp_stock_live') }}\n),\ndrugs_safe as (\n    -- pre join\n    select * from drugs\n    left join gp_stock_live gsl on drugs.drug_generic_name = gsl.stock_live_drug_generic\n),\nclinics_safe as (\n    -- pre join\n    select * from clinics\n    left join dw_clinics on dw_clinics.dw_clinic_id = clinics.clinic_id\n    left join dw_clinic_groups on dw_clinic_groups.dw_clinic_groups_id = dw_clinics.dw_clinic_group_id\n),\nproviders_safe as (\n    -- pre join\n    select * from providers\n    left join dw_providers on dw_providers.dw_provider_npi = providers.providers_npi\n)\nselect *\nfrom goodpill_snapshot as gds\nleft join drugs_safe on drugs_safe.drug_generic_name = gds.rx_drug_generic\nleft join patients using (patient_id_cp)\nleft join providers_safe on providers_safe.providers_npi = gds.rx_provider_npi\nleft join clinics_safe on clinics_safe.clinic_name_cp = gds.rx_clinic_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.pg_create_index", "macro.smartpill.create_goodpill_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.patients", "model.smartpill.clinic_coupons", "model.smartpill.clinics", "model.smartpill.patients_status_historic", "model.smartpill.rxs_joined", "model.smartpill.order_items", "model.smartpill.orders", "model.smartpill.gp_pend_group", "model.smartpill.drugs", "model.smartpill.providers", "model.smartpill.dw_providers", "model.smartpill.clinics", "model.smartpill.dw_clinics", "model.smartpill.dw_clinic_groups", "model.smartpill.patients", "model.smartpill.gp_stock_live"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["rx_number", "order_invoice_number", "patient_id_cp"], "unique": true}], "post-hook": [{"sql": "{{ pg_create_index(this = this, name='order_queue_1', schema='goodpill', columns=['order_date_added'], includes = ['order_invoice_number']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='order_queue_2', schema='goodpill', columns=['order_date_dispensed'], includes = ['order_invoice_number']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='dispensed_by_person', schema='goodpill', columns=['order_date_shipped'], includes = ['order_tech_fill', 'order_rph_check', 'order_invoice_number', 'item_rx_dispensed_id']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='fulfillment_time', schema='goodpill', columns=['order_date_added'], includes = ['order_date_shipped', 'patient_initial_invoice_number', 'order_invoice_number']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='growth', schema='goodpill', columns=['item_date_added'], includes = ['item_rx_dispensed_id', 'item_qty_dispensed_actual', 'item_days_dispensed_actual', 'order_invoice_number', 'patient_id_cp', 'item_price_dispensed_actual', 'item_price_dispensed_default']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='pend_errors', schema='goodpill', columns=['item_date_added', 'item_qty_dispensed_default'], includes = ['item_qty_pended_total', 'item_qty_dispensed_default']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='recipient_growth_1', schema='goodpill', columns=['rx_group_id'], includes = ['rx_added_first_at']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='recipient_growth_2', schema='goodpill', columns=['rx_date_added'], includes = ['rx_numbers']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='stock_levels', schema='goodpill', columns=['item_days_dispensed_default', 'item_date_added'], includes = ['item_price_dispensed_default', 'item_stock_level_initial']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='sig_errors', schema='goodpill', columns=['item_qty_dispensed_actual', 'item_date_added'], includes = ['item_qty_dispensed_default']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='comm_errors', schema='goodpill', columns=['order_invoice_number', 'order_date_shipped']) }}", "transaction": true, "index": null}, {"sql": "{{ create_goodpill_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "gold", "goodpill_abt"], "unique_id": "model.smartpill.goodpill_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/gold/goodpill_abt.sql", "original_file_path": "models/goodpill/gold/goodpill_abt.sql", "name": "goodpill_abt", "alias": "goodpill_abt", "checksum": {"name": "sha256", "checksum": "fcd5d5c3e4ee677aed6635be9fe3f2dcf4878fb009bebe1317c3f1dab2efe94b"}, "tags": [], "refs": [["patients"], ["clinic_coupons"], ["clinics"], ["patients_status_historic"], ["rxs_joined"], ["order_items"], ["orders"], ["gp_pend_group"], ["drugs"], ["providers"], ["dw_providers"], ["clinics"], ["dw_clinics"], ["dw_clinic_groups"], ["patients"], ["gp_stock_live"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "General snapshot tables. It joins the previous historic tables and\ngenerates a single row per patient/prescription/order. Events are pivoted\nto column dates, indicating the date of each event. If the RX was\ndispensed in an order, its columns will have the historic values it had\nbefore the order was dispensed.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/gold/goodpill_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "goodpill", "post-hook": ["{{ pg_create_index(this = this, name='order_queue_1', schema='goodpill', columns=['order_date_added'], includes = ['order_invoice_number']) }}", "{{ pg_create_index(this = this, name='order_queue_2', schema='goodpill', columns=['order_date_dispensed'], includes = ['order_invoice_number']) }}", "{{ pg_create_index(this = this, name='dispensed_by_person', schema='goodpill', columns=['order_date_shipped'], includes = ['order_tech_fill', 'order_rph_check', 'order_invoice_number', 'item_rx_dispensed_id']) }}", "{{ pg_create_index(this = this, name='fulfillment_time', schema='goodpill', columns=['order_date_added'], includes = ['order_date_shipped', 'patient_initial_invoice_number', 'order_invoice_number']) }}", "{{ pg_create_index(this = this, name='growth', schema='goodpill', columns=['item_date_added'], includes = ['item_rx_dispensed_id', 'item_qty_dispensed_actual', 'item_days_dispensed_actual', 'order_invoice_number', 'patient_id_cp', 'item_price_dispensed_actual', 'item_price_dispensed_default']) }}", "{{ pg_create_index(this = this, name='pend_errors', schema='goodpill', columns=['item_date_added', 'item_qty_dispensed_default'], includes = ['item_qty_pended_total', 'item_qty_dispensed_default']) }}", "{{ pg_create_index(this = this, name='recipient_growth_1', schema='goodpill', columns=['rx_group_id'], includes = ['rx_added_first_at']) }}", "{{ pg_create_index(this = this, name='recipient_growth_2', schema='goodpill', columns=['rx_date_added'], includes = ['rx_numbers']) }}", "{{ pg_create_index(this = this, name='stock_levels', schema='goodpill', columns=['item_days_dispensed_default', 'item_date_added'], includes = ['item_price_dispensed_default', 'item_stock_level_initial']) }}", "{{ pg_create_index(this = this, name='sig_errors', schema='goodpill', columns=['item_qty_dispensed_actual', 'item_date_added'], includes = ['item_qty_dispensed_default']) }}", "{{ pg_create_index(this = this, name='comm_errors', schema='goodpill', columns=['order_invoice_number', 'order_date_shipped']) }}", "{{ create_goodpill_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701091.459802, "compiled_sql": "\n\nwith _patients as (\n    select _patients.patient_id_cp, cmc.clinic_id\n    from \"datawarehouse\".goodpill.\"patients\" as _patients\n    left join \"datawarehouse\".goodpill.\"clinic_coupons\" as cmc on\n        _patients.payment_coupon = cmc.coupon_code or _patients.tracking_coupon = cmc.coupon_code\n),\ngoodpill_snapshot as (\n    with psh as (\n        -- join with dimension patient right away, to join later with clinics\n        select distinct on (patient_id_cp)\n            pat.patient_id_cp,\n            pme.event_date as dw_patient_event_date,\n            pme.event_name as dw_patient_status,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_ACTIVE' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_active,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_NO_RX' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_no_rx,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_UNREGISTERED' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_unregistered,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_DECEASED' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_deceased,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_CHURNED_NO_FILLABLE_RX' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_churned_no_fillable_rx,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_INACTIVE' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_inactive,\n            max(\n                case\n                    when pme.event_name = 'PATIENT_CHURNED_OTHER' then pme.event_date\n                end\n            ) over(partition by patient_id_cp) as patient_date_churned_other\n        from _patients as pat\n        left join \"datawarehouse\".goodpill.\"clinics\" as clinics on pat.clinic_id = clinics.clinic_id\n        left join \"datawarehouse\".goodpill.\"patients_status_historic\" as pme using (patient_id_cp)\n        order by patient_id_cp, pme.event_date desc\n    ),\n\n    rh as (\n        select\n            patient_id_cp,\n            rx_number,\n            rx_id,\n            first_value(rx_numbers) over (\n                partition by rx_number\n                order by updated_at desc nulls last\n            ) as rx_numbers,\n            best_rx_number as rx_best_rx_number,\n            first_value(provider_npi) over (\n                partition by rx_number\n                order by case when provider_npi is not null then 0 else 1 end, updated_at desc nulls last\n            ) as rx_provider_npi,\n            first_value(drug_generic) over (\n                partition by rx_number\n                order by case when drug_generic is not null then 0 else 1 end, updated_at desc nulls last\n            ) as rx_drug_generic,\n            drug_brand as rx_drug_brand,\n            drug_name as rx_drug_name,\n            rx_message_key,\n            rx_message_text,\n            rx_message_date,\n            rx_sources,\n            rx_gsn,\n            drug_gsns as rx_drug_gsns,\n            max_gsn as rx_max_gsn,\n            refills_left as rx_refills_left,\n            refills_original as rx_refills_original,\n            refills_total as rx_refills_total,\n            qty_left as rx_qty_left,\n            qty_original as rx_qty_original,\n            qty_total as rx_qty_total,\n            sig_actual as rx_sig_actual,\n            sig_initial as rx_sig_initial,\n            sig_clean as rx_sig_clean,\n            sig_qty as rx_sig_qty,\n            sig_v1_qty as rx_sig_v1_qty,\n            sig_v1_days as rx_sig_v1_days,\n            sig_v1_qty_per_day as rx_sig_v1_qty_per_day,\n            sig_days as rx_sig_days,\n            sig_qty_per_day as rx_sig_qty_per_day,\n            sig_qty_per_day_default as rx_sig_qty_per_day_default,\n            sig_qty_per_day_actual as rx_sig_qty_per_day_actual,\n            sig_durations as rx_sig_durations,\n            sig_qtys_per_time as rx_sig_qtys_per_time,\n            sig_frequencies as rx_sig_frequencies,\n            sig_frequency_numerators as rx_sig_frequency_numerators,\n            sig_frequency_denominators as rx_sig_frequency_denominators,\n            sig_v2_qty as rx_sig_v2_qty,\n            sig_v2_days as rx_sig_v2_days,\n            sig_v2_qty_per_day as rx_sig_v2_qty_per_day,\n            sig_v2_unit as rx_sig_v2_unit,\n            sig_v2_conf_score as rx_sig_v2_conf_score,\n            sig_v2_dosages as rx_sig_v2_dosages,\n            sig_v2_scores as rx_sig_v2_scores,\n            sig_v2_frequencies as rx_sig_v2_frequencies,\n            sig_v2_durations as rx_sig_v2_durations,\n            rx_autofill as rx_autofill,\n            refill_date_first as rx_refill_date_first,\n            refill_date_last as rx_refill_date_last,\n            refill_date_manual as rx_refill_date_manual,\n            refill_date_next as rx_refill_date_next,\n            rx_status as rx_status,\n            rx_stage as rx_stage,\n            rx_source as rx_source,\n            rx_date_transferred_out,\n            rx_date_transferred_in,\n            provider_phone as provider_phone,\n            clinic_name as rx_clinic_name,\n            rx_added_first_at,\n            rx_added_last_at,\n            rx_date_changed,\n            rx_date_expired,\n            rx_date_added as rx_date_added,\n            rx_stock_level_initial as rx_stock_level_initial,\n            created_at as rx_created_at,\n            updated_at as rx_updated_at,\n            rx_group_created_at,\n            rx_group_updated_at,\n            rx_clinic_name_cp,\n            status as rxs_single_status,\n            rx_status_updated_at,\n            provider_email as rx_provider_email,\n            rx_inactivated_last_at,\n            rx_activated_last_at,\n            group_status as rx_group_status,\n            rx_group_drug_generic,\n            rx_group_drug_brand,\n            rx_group_id,\n            rx_group_drug_gsns,\n            rx_group_rx_autofill,\n            rx_group_refill_date_first,\n            rx_group_refill_date_last,\n            rx_group_refill_date_manual,\n            rx_group_refill_date_default,\n            rx_group_rx_date_changed,\n            rx_group_rx_date_expired,\n            transfer_pharmacy_phone as rx_transfer_pharmacy_phone,\n            transfer_pharmacy_name as rx_transfer_pharmacy_name,\n            transfer_pharmacy_fax as rx_transfer_pharmacy_fax,\n            transfer_pharmacy_address as rx_transfer_pharmacy_address,\n            sig_confirmed_by as rx_sig_confirmed_by,\n            sig_confirmed_at as rx_sig_confirmed_at\n        from \"datawarehouse\".goodpill.\"rxs_joined\"\n    ),\n\n    oi as (\n        select\n            patient_id_cp,\n            rx_number,\n            line_id as item_line_id,\n            invoice_number as order_invoice_number,\n            groups as item_groups,\n            rx_dispensed_id as item_rx_dispensed_id,\n            stock_level_initial as item_stock_level_initial,\n            rx_message_keys_initial as item_rx_message_keys_initial,\n            patient_autofill_initial as item_patient_autofill_initial,\n            rx_autofill_initial as item_rx_autofill_initial,\n            rx_numbers_initial as item_rx_numbers_initial,\n            zscore_initial as item_zscore_initial,\n            refills_dispensed_default as item_refills_dispensed_default,\n            refills_dispensed_actual as item_refills_dispensed_actual,\n            days_dispensed_default as item_days_dispensed_default,\n            days_dispensed_actual as item_days_dispensed_actual,\n            qty_dispensed_default as item_qty_dispensed_default,\n            qty_dispensed_actual as item_qty_dispensed_actual,\n            price_dispensed_default as item_price_dispensed_default,\n            price_dispensed_actual as item_price_dispensed_actual,\n            unit_price_retail_initial as item_unit_price_retail_initial,\n            unit_price_goodrx_initial as item_unit_price_goodrx_initial,\n            unit_price_nadac_initial as item_unit_price_nadac_initial,\n            unit_price_awp_initial as item_unit_price_awp_initial,\n            qty_pended_total as item_qty_pended_total,\n            qty_pended_repacks as item_qty_pended_repacks,\n            count_pended_total as item_count_pended_total,\n            count_pended_repacks as item_count_pended_repacks,\n            item_message_keys as item_message_keys,\n            item_message_text as item_message_text,\n            item_type as item_type,\n            item_added_by as item_added_by,\n            item_date_added as item_date_added,\n            item_date_changed as item_date_changed,\n            updated_at as item_date_updated,\n            days_and_message_updated_at as item_days_and_message_updated_at,\n            days_and_message_initial_at as item_days_and_message_initial_at,\n            days_pended as item_days_pended,\n            qty_per_day_pended as item_qty_per_day_pended,\n            refill_date_last as item_refill_date_last,\n            refill_date_manual as item_refill_date_manual,\n            refill_date_default as item_refill_date_default,\n            add_user_id as item_add_user_id,\n            chg_user_id as item_chg_user_id,\n            count_lines as item_count_lines,\n            repacked_by as item_repacked_by,\n            unpended_at as item_unpended_at,\n            pend_initial_at as item_pend_initial_at,\n            pend_updated_at as item_pend_updated_at,\n            ndc_pended as item_ndc_pended,\n            drug_generic_pended as item_drug_generic_pended,\n            filled_at as item_filled_at,\n            pend_failed_at as item_pend_failed_at,\n            filled_by as item_filled_by,\n            pend_retried_by as item_pend_retried_by,\n            status as item_status,\n            pend_retried_days as item_pend_retried_days,\n            pend_retried_at as item_pend_retried_at\n        from \"datawarehouse\".goodpill.\"order_items\"\n    ),\n\n    o as (\n        select\n            patient_id_cp,\n            invoice_number as order_invoice_number,\n            order_date_added as order_date_added,\n            order_date_dispensed as order_date_dispensed,\n            order_date_shipped as order_date_shipped,\n            order_date_returned as order_date_returned,\n            count_items as order_count_items,\n            count_filled as order_count_filled,\n            count_nofill as order_count_nofill,\n            priority as order_priority,\n            order_source as order_source,\n            order_stage_cp as order_stage_cp,\n            order_stage_wc as order_stage_wc,\n            order_status as order_status,\n            order_address1,\n            order_address2,\n            invoice_doc_id as order_invoice_doc_id,\n            tracking_number as order_tracking_number,\n            payment_total_default as order_payment_total_default,\n            payment_total_actual as order_payment_total_actual,\n            payment_fee_default as order_payment_fee_default,\n            payment_fee_actual as order_payment_fee_actual,\n            payment_due_default as order_payment_due_default,\n            payment_due_actual as order_payment_due_actual,\n            payment_date_autopay as order_payment_date_autopay,\n            payment_method_actual as order_payment_method_actual,\n            payment_default_updated_at as order_payment_default_updated_at,\n            payment_actual_updated_at as order_payment_actual_updated_at,\n            order_payment_coupon as order_payment_coupon,\n            order_date_changed, --comes from Carepoint\n            order_date_delivered,\n            order_date_expedited,\n            order_date_expected,\n            order_date_expected_initial,\n            order_date_failed,\n            order_date_updated, --comes from Patient Portal\n            order_stage_wc_updated_at,\n            add_user_id as order_add_user_id,\n            chg_user_id as order_chg_user_id,\n            shipping_speed as order_shipping_speed,\n            rx_group_removals_checked_at as order_rx_group_removals_checked_at,\n            rx_group_additions_checked_at as order_rx_group_additions_checked_at,\n            order_note as order_note,\n            rph_check as order_rph_check,\n            tech_fill as order_tech_fill,\n            order_city as order_city,\n            order_state as order_state,\n            order_zip as order_zip,\n            updated_at as order_updated_at,\n            status as order_shipped_status\n        from \"datawarehouse\".goodpill.\"orders\"\n    ),\n    gp_pend_group as (\n        select\n        pend_group_name,\n        invoice_number as pend_group_invoice_number,\n        initial_pend_date as pend_group_initial_date,\n        last_pend_date as pend_group_last_date\n        from \"datawarehouse\".goodpill.\"gp_pend_group\"\n    ),\n    o_safe as (\n        select * from o\n        left join gp_pend_group gpg on gpg.pend_group_invoice_number = o.order_invoice_number\n    )\n\n    select distinct on (patient_id_cp, rx_number, order_invoice_number)\n        *,\n        greatest(rh.rx_group_updated_at, rh.rx_group_created_at, oi.item_date_updated, o_safe.order_date_updated) as dw_updated_at\n    from psh\n    left join rh using (patient_id_cp)\n    left join oi using (rx_number, patient_id_cp)\n    full outer join o_safe using (order_invoice_number, patient_id_cp)\n    order by\n        patient_id_cp,\n        rx_number,\n        order_invoice_number,\n        -- prioritize rxs which were updated before the order was dispensed\n        rh.rx_group_updated_at <= o_safe.order_date_dispensed desc,\n        rh.rx_group_updated_at desc,\n        rh.rx_group_created_at <= o_safe.order_date_dispensed desc,\n        rh.rx_group_created_at desc\n),\ndrugs as (\n    select\n    drugs.drug_brand,\n    drugs.drug_gsns,\n    drugs.price30 as drug_price30,\n    drugs.price90 as drug_price90,\n    drugs.price_retail as drug_price_retail,\n    drugs.price_goodrx as drug_price_goodrx,\n    drugs.price_nadac as drug_price_nadac,\n    drugs.qty_repack as drug_qty_repack,\n    drugs.count_ndcs as drug_count_ndcs,\n    drugs.drug_ordered,\n    drugs.qty_min as drug_qty_min,\n    drugs.days_min as drug_days_min,\n    drugs.max_inventory as drug_max_inventory,\n    drugs.message_display as drug_message_display,\n    drugs.message_verified as drug_message_verified,\n    drugs.message_destroyed as drug_message_destroyed,\n    nullif(drug_generic, '') as drug_generic_name,\n    coalesce(nullif(price_goodrx, 0), nullif(price_nadac, 0), nullif(price_retail, 0)) as drug_price_coalesced\n    from \"datawarehouse\".goodpill.\"drugs\"\n),\nproviders as (\n    select\n    providers.first_name as provider_first_name,\n\tproviders.last_name as provider_last_name,\n\tproviders.verified as provider_verified,\n    providers.npi as providers_npi,\n    providers.provider_id as dw_provider_id,\n    providers.first_rx_sent_date as provider_first_rx_sent_date,\n    providers.last_rx_sent_date as provider_last_rx_sent_date\n    from \"datawarehouse\".goodpill.\"providers\"\n),\ndw_providers as (\n    select\n    dw_providers.provider_npi as dw_provider_npi,\n    dw_providers.provider_name as dw_provider_name,\n    dw_providers.provider_phone as dw_provider_phone,\n    dw_providers.provider_id_sf as dw_provider_id_sf,\n    dw_providers.default_clinic as dw_provider_default_clinic,\n    dw_providers.default_clinic_imputed_at as dw_provider_default_clinic_imputed_at\n    from \"datawarehouse\".goodpill.\"dw_providers\"\n),\nclinics as (\n    select\n    clinics.clinic_id,\n    clinics.clinic_name_cp,\n    clinics.clinic_rx_date_added_first,\n    clinics.clinic_rx_date_added_last,\n    clinics.created_at as clinic_created_at,\n    clinics.updated_at as clinic_updated_at\n    from \"datawarehouse\".goodpill.\"clinics\"\n),\ndw_clinics as (\n    select\n    dw_clinics.clinic_id as dw_clinic_id,\n    dw_clinics.clinic_group_id as dw_clinic_group_id,\n    dw_clinics.clinic_name as dw_clinic_name,\n    dw_clinics.clinic_address as dw_clinic_address,\n    dw_clinics.clinic_street as dw_clinic_street,\n    dw_clinics.clinic_city as dw_clinic_city,\n    dw_clinics.clinic_state as dw_clinic_state,\n    dw_clinics.clinic_zip as dw_clinic_zip,\n    dw_clinics.clinic_phone as dw_clinic_phone,\n    dw_clinics.clinic_id_sf as dw_clinic_id_sf,\n    dw_clinics.created_at as dw_clinic_created_at,\n    dw_clinics.updated_at as dw_clinic_updated_at\n    from \"datawarehouse\".goodpill.\"dw_clinics\"\n),\ndw_clinic_groups as (\n    select\n    dw_clinic_groups.clinic_group_id as dw_clinic_groups_id,\n    dw_clinic_groups.clinic_group_name as dw_clinic_group_name,\n    dw_clinic_groups.clinic_group_id_sf as dw_clinic_group_id_sf,\n    dw_clinic_groups.clinic_group_domain as dw_clinic_group_domain,\n    dw_clinic_groups.created_at as dw_clinic_groups_created_at,\n    dw_clinic_groups.updated_at as dw_clinic_groups_updated_at\n    from \"datawarehouse\".goodpill.\"dw_clinic_groups\"\n),\npatients as (\n    select\n    patient_id_cp,\n    patient_id_wc,\n    patient_date_registered,\n    patient_date_reviewed,\n    patient_date_added,\n    patient_date_changed,\n    patient_date_updated,\n    first_name as patient_first_name,\n    last_name as patient_last_name,\n    birth_date as patient_birth_date,\n    birth_date as patient_language,\n    phone1 as patient_phone1,\n    phone2 as patient_phone2,\n    concat(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city as patient_city,\n    patient_state as patient_state,\n    patient_zip as patient_zip,\n    payment_card_type as patient_payment_card_type,\n    payment_card_last4 as patient_payment_card_last4,\n    payment_card_date_expired as patient_payment_card_date_expired,\n    payment_card_autopay as patient_payment_card_autopay,\n    payment_method_default as patient_payment_method_default,\n    patient_date_first_rx_received,\n    patient_date_first_dispensed,\n    patient_date_first_expected_by,\n    refills_used as patient_refills_used,\n    email as patient_email,\n    patient_autofill,\n    initial_invoice_number as patient_initial_invoice_number,\n    patient_note,\n    allergies_none as patient_allergies_none,\n    allergies_cephalosporins as patient_allergies_cephalosporins,\n    allergies_sulfa as patient_allergies_sulfa,\n    allergies_aspirin as patient_allergies_aspirin,\n    allergies_penicillin as patient_allergies_penicillin,\n    allergies_erythromycin as patient_allergies_erythromycin,\n    allergies_codeine as patient_allergies_codeine,\n    allergies_nsaids as patient_allergies_nsaids,\n    allergies_salicylates as patient_allergies_salicylates,\n    allergies_azithromycin as patient_allergies_azithromycin,\n    allergies_amoxicillin as patient_allergies_amoxicillin,\n    allergies_tetracycline as patient_allergies_tetracycline,\n    allergies_other as patient_allergies_other,\n    medications_other as patient_medications_other,\n    pharmacy_npi as pharmacy_npi,\n    pharmacy_name as pharmacy_name,\n    pharmacy_phone as pharmacy_phone,\n    pharmacy_fax as pharmacy_fax,\n    pharmacy_address as pharmacy_address,\n    patient_inactive,\n    payment_coupon as patient_payment_coupon,\n    tracking_coupon as patient_tracking_coupon,\n    patient_deleted as patient_patient_deleted,\n    third_party_id as patient_third_party_id,\n    terms_viewed_at as patient_terms_viewed_at,\n    terms_accepted as patient_terms_accepted\n    from \"datawarehouse\".goodpill.\"patients\"\n),\ngp_stock_live as (\n    select\n    drug_generic as stock_live_drug_generic,\n    price_per_month as stock_live_price_per_month,\n    drug_ordered as stock_live_drug_ordered,\n    qty_repack as stock_live_qty_repack,\n    months_inventory as stock_live_months_inventory,\n    avg_inventory as stock_live_avg_inventory,\n    last_inventory as stock_live_last_inventory,\n    months_entered as stock_live_months_entered,\n    stddev_entered as stock_live_stddev_entered,\n    total_entered as stock_live_total_entered,\n    months_dispensed as stock_live_months_dispensed,\n    stddev_dispensed_actual as stock_live_stddev_dispensed_actual,\n    total_dispensed_actual as stock_live_total_dispensed_actual,\n    total_dispensed_default as stock_live_total_dispensed_default,\n    stddev_dispensed_default as stock_live_stddev_dispensed_default,\n    month_interval as stock_live_month_interval,\n    default_rxs_min as stock_live_default_rxs_min,\n    last_inv_low_threshold as stock_live_last_inv_low_threshold,\n    last_inv_high_threshold as stock_live_last_inv_high_threshold,\n    last_inv_onetime_threshold as stock_live_last_inv_onetime_threshold,\n    zlow_threshold as stock_live_zlow_threshold,\n    zhigh_threshold as stock_live_zhigh_threshold,\n    zscore as stock_live_zscore,\n    stock_level as stock_live_level\n    from \"datawarehouse\".goodpill.\"gp_stock_live\"\n),\ndrugs_safe as (\n    -- pre join\n    select * from drugs\n    left join gp_stock_live gsl on drugs.drug_generic_name = gsl.stock_live_drug_generic\n),\nclinics_safe as (\n    -- pre join\n    select * from clinics\n    left join dw_clinics on dw_clinics.dw_clinic_id = clinics.clinic_id\n    left join dw_clinic_groups on dw_clinic_groups.dw_clinic_groups_id = dw_clinics.dw_clinic_group_id\n),\nproviders_safe as (\n    -- pre join\n    select * from providers\n    left join dw_providers on dw_providers.dw_provider_npi = providers.providers_npi\n)\nselect *\nfrom goodpill_snapshot as gds\nleft join drugs_safe on drugs_safe.drug_generic_name = gds.rx_drug_generic\nleft join patients using (patient_id_cp)\nleft join providers_safe on providers_safe.providers_npi = gds.rx_provider_npi\nleft join clinics_safe on clinics_safe.clinic_name_cp = gds.rx_clinic_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"goodpill_abt\""}, "model.smartpill.gp_pharmacy_actions_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n    \"{{ create_pharmacy_actions_abt_view() }}\",\n    \"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nselect\n    user_id as pharmacy_user_id,\n    model_type as pharmacy_model_type,\n    model_id as pharmacy_model_id,\n    type as pharmacy_type,\n    reason as pharmacy_reason,\n    status as pharmacy_status,\n    message as pharmacy_message,\n    payload as pharmacy_payload\nfrom {{ ref('gp_pharmacy_actions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.create_pharmacy_actions_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ create_pharmacy_actions_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "gold", "gp_pharmacy_actions_abt"], "unique_id": "model.smartpill.gp_pharmacy_actions_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/gold/gp_pharmacy_actions_abt.sql", "original_file_path": "models/goodpill/gold/gp_pharmacy_actions_abt.sql", "name": "gp_pharmacy_actions_abt", "alias": "gp_pharmacy_actions_abt", "checksum": {"name": "sha256", "checksum": "0f6205a0160eddf67d9c9dba50cadcf86a0d97af8c7f0dff0fe43d80aeeae843"}, "tags": [], "refs": [["gp_pharmacy_actions"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/gold/gp_pharmacy_actions_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "goodpill", "post-hook": ["{{ create_pharmacy_actions_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701091.4935367, "compiled_sql": "\nselect\n    user_id as pharmacy_user_id,\n    model_type as pharmacy_model_type,\n    model_id as pharmacy_model_id,\n    type as pharmacy_type,\n    reason as pharmacy_reason,\n    status as pharmacy_status,\n    message as pharmacy_message,\n    payload as pharmacy_payload\nfrom \"datawarehouse\".goodpill.\"gp_pharmacy_actions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"gp_pharmacy_actions_abt\""}, "model.smartpill.patient_comms_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n\t\"{{ create_patient_comms_view() }}\",\n\t\"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nwith patients as (\n    select\n    patient_id_cp,\n    patient_id_wc,\n    patient_date_registered,\n    patient_date_reviewed,\n    patient_date_added,\n    patient_date_changed,\n    patient_date_updated,\n    first_name as patient_first_name,\n    last_name as patient_last_name,\n    birth_date as patient_birth_date,\n    birth_date as patient_language,\n    phone1 as patient_phone1,\n    phone2 as patient_phone2,\n    concat(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city as patient_city,\n    patient_state as patient_state,\n    patient_zip as patient_zip,\n    payment_card_type as patient_payment_card_type,\n    payment_card_last4 as patient_payment_card_last4,\n    payment_card_date_expired as patient_payment_card_date_expired,\n    payment_card_autopay as patient_payment_card_autopay,\n    payment_method_default as patient_payment_method_default,\n    patient_date_first_rx_received,\n    patient_date_first_dispensed,\n    patient_date_first_expected_by,\n    refills_used as patient_refills_used,\n    email as patient_email,\n    patient_autofill,\n    initial_invoice_number as patient_initial_invoice_number,\n    patient_note,\n    allergies_none as patient_allergies_none,\n    allergies_cephalosporins as patient_allergies_cephalosporins,\n    allergies_sulfa as patient_allergies_sulfa,\n    allergies_aspirin as patient_allergies_aspirin,\n    allergies_penicillin as patient_allergies_penicillin,\n    allergies_erythromycin as patient_allergies_erythromycin,\n    allergies_codeine as patient_allergies_codeine,\n    allergies_nsaids as patient_allergies_nsaids,\n    allergies_salicylates as patient_allergies_salicylates,\n    allergies_azithromycin as patient_allergies_azithromycin,\n    allergies_amoxicillin as patient_allergies_amoxicillin,\n    allergies_tetracycline as patient_allergies_tetracycline,\n    allergies_other as patient_allergies_other,\n    medications_other as patient_medications_other,\n    pharmacy_npi as pharmacy_npi,\n    pharmacy_name as pharmacy_name,\n    pharmacy_phone as pharmacy_phone,\n    pharmacy_fax as pharmacy_fax,\n    pharmacy_address as pharmacy_address,\n    patient_inactive,\n    payment_coupon as patient_payment_coupon,\n    tracking_coupon as patient_tracking_coupon,\n    patient_deleted as patient_patient_deleted,\n    third_party_id as patient_third_party_id,\n    terms_viewed_at as patient_terms_viewed_at,\n    terms_accepted as patient_terms_accepted\n    from {{ ref('patients') }}\n),\npatient_comms as (\n    select\n    comm_id as patient_comms_comm_id,\n    event as patient_comms_event,\n    data_type as patient_comms_data_type,\n    date_sent as patient_comms_date_sent,\n    created_at as patient_comms_created_at,\n    updated_at as patient_comms_updated_at,\n    date_to_send as patient_comms_date_to_send,\n    patient_id_cp as patient_comms_patient_id_cp,\n    invoice_number as patient_comms_invoice_number,\n    group_id as patient_comms_group_id ,\n    rx_number as patient_comms_rx_number ,\n    date_deleted as patient_comms_date_deleted,\n    meta_json as patient_comms_meta_json,\n    email_subject as patient_comms_email_subject,\n    sms as patient_comms_sms,\n    email_body as patient_comms_email_body\n    from {{ ref('patient_comms') }}\n)\nselect * from patients\nleft join patient_comms on patient_comms.patient_comms_patient_id_cp = patients.patient_id_cp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.create_patient_comms_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.patients", "model.smartpill.patient_comms"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ create_patient_comms_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "gold", "patient_comms_abt"], "unique_id": "model.smartpill.patient_comms_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/gold/patient_comms_abt.sql", "original_file_path": "models/goodpill/gold/patient_comms_abt.sql", "name": "patient_comms_abt", "alias": "patient_comms_abt", "checksum": {"name": "sha256", "checksum": "18f1447f7586c2a8bd7b5cd0d6511f00f9a09f32f52a43c2e08ce2f2fe66b69b"}, "tags": [], "refs": [["patients"], ["patient_comms"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/gold/patient_comms_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "goodpill", "post-hook": ["{{ create_patient_comms_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701091.4830718, "compiled_sql": "\nwith patients as (\n    select\n    patient_id_cp,\n    patient_id_wc,\n    patient_date_registered,\n    patient_date_reviewed,\n    patient_date_added,\n    patient_date_changed,\n    patient_date_updated,\n    first_name as patient_first_name,\n    last_name as patient_last_name,\n    birth_date as patient_birth_date,\n    birth_date as patient_language,\n    phone1 as patient_phone1,\n    phone2 as patient_phone2,\n    concat(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city as patient_city,\n    patient_state as patient_state,\n    patient_zip as patient_zip,\n    payment_card_type as patient_payment_card_type,\n    payment_card_last4 as patient_payment_card_last4,\n    payment_card_date_expired as patient_payment_card_date_expired,\n    payment_card_autopay as patient_payment_card_autopay,\n    payment_method_default as patient_payment_method_default,\n    patient_date_first_rx_received,\n    patient_date_first_dispensed,\n    patient_date_first_expected_by,\n    refills_used as patient_refills_used,\n    email as patient_email,\n    patient_autofill,\n    initial_invoice_number as patient_initial_invoice_number,\n    patient_note,\n    allergies_none as patient_allergies_none,\n    allergies_cephalosporins as patient_allergies_cephalosporins,\n    allergies_sulfa as patient_allergies_sulfa,\n    allergies_aspirin as patient_allergies_aspirin,\n    allergies_penicillin as patient_allergies_penicillin,\n    allergies_erythromycin as patient_allergies_erythromycin,\n    allergies_codeine as patient_allergies_codeine,\n    allergies_nsaids as patient_allergies_nsaids,\n    allergies_salicylates as patient_allergies_salicylates,\n    allergies_azithromycin as patient_allergies_azithromycin,\n    allergies_amoxicillin as patient_allergies_amoxicillin,\n    allergies_tetracycline as patient_allergies_tetracycline,\n    allergies_other as patient_allergies_other,\n    medications_other as patient_medications_other,\n    pharmacy_npi as pharmacy_npi,\n    pharmacy_name as pharmacy_name,\n    pharmacy_phone as pharmacy_phone,\n    pharmacy_fax as pharmacy_fax,\n    pharmacy_address as pharmacy_address,\n    patient_inactive,\n    payment_coupon as patient_payment_coupon,\n    tracking_coupon as patient_tracking_coupon,\n    patient_deleted as patient_patient_deleted,\n    third_party_id as patient_third_party_id,\n    terms_viewed_at as patient_terms_viewed_at,\n    terms_accepted as patient_terms_accepted\n    from \"datawarehouse\".goodpill.\"patients\"\n),\npatient_comms as (\n    select\n    comm_id as patient_comms_comm_id,\n    event as patient_comms_event,\n    data_type as patient_comms_data_type,\n    date_sent as patient_comms_date_sent,\n    created_at as patient_comms_created_at,\n    updated_at as patient_comms_updated_at,\n    date_to_send as patient_comms_date_to_send,\n    patient_id_cp as patient_comms_patient_id_cp,\n    invoice_number as patient_comms_invoice_number,\n    group_id as patient_comms_group_id ,\n    rx_number as patient_comms_rx_number ,\n    date_deleted as patient_comms_date_deleted,\n    meta_json as patient_comms_meta_json,\n    email_subject as patient_comms_email_subject,\n    sms as patient_comms_sms,\n    email_body as patient_comms_email_body\n    from \"datawarehouse\".goodpill.\"patient_comms\"\n)\nselect * from patients\nleft join patient_comms on patient_comms.patient_comms_patient_id_cp = patients.patient_id_cp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patient_comms_abt\""}, "model.smartpill.raw_gp_rxs_single": {"raw_sql": "{{ config(\n\tunique_key='unique_id',\n\tindexes=[\n\t\t{'columns': ['unique_id'], 'unique': True},\n\t\t{'columns': ['pkey'], 'unique': True}\n\t]\n) }}\n\nwith r as (\n\tselect\n\t\t_airbyte_emitted_at,\n\t\t_airbyte_ab_id,\n\t\t_airbyte_data,\n\t\tcast({{ json_extract_scalar('_airbyte_data', ['rx_number']) }} as int) as pkey,\n\t\tcoalesce(cast({{ json_extract_scalar('_airbyte_data', ['created_at']) }} as timestamp), cast(_airbyte_emitted_at as timestamp without time zone)) as created_at,\n\t\tcoalesce(cast({{ json_extract_scalar('_airbyte_data', ['updated_at']) }} as timestamp), cast(_airbyte_emitted_at as timestamp without time zone)) as updated_at,\n\t\tcast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n\t\tcast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\n\tfrom\n\t\t{{ source('raw', '_airbyte_raw_goodpill_gp_rxs_single') }}\n)\n\nselect distinct on (pkey, created_at, updated_at, _ab_cdc_updated_at, _ab_cdc_deleted_at)\n\t*,\n\t{{ hash('concat(pkey, created_at, updated_at, _ab_cdc_updated_at, _ab_cdc_deleted_at)') }} as unique_id\nfrom\n\tr\n{% if is_incremental() %}\n\twhere greatest(created_at, updated_at, _ab_cdc_deleted_at) >= (select max(greatest(created_at, updated_at, date(_ab_cdc_deleted_at))) from {{ this }})\n{% endif %}\norder by\n\tpkey,\n\tcreated_at desc,\n\tupdated_at desc,\n\t_ab_cdc_updated_at desc,\n\t_ab_cdc_deleted_at desc,\n\t-- It's rare, but there might be two rows with same timestamps, pk and different data\n\t-- To ensure the latest one, order by log pos\n\tcast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_log_pos']) }} as int) desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar", "macro.dbt.hash", "macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["unique_id"], "unique": true}, {"columns": ["pkey"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "prod", "fqn": ["smartpill", "goodpill", "raw_tables", "raw_gp_rxs_single"], "unique_id": "model.smartpill.raw_gp_rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/raw_tables/raw_gp_rxs_single.sql", "original_file_path": "models/goodpill/raw_tables/raw_gp_rxs_single.sql", "name": "raw_gp_rxs_single", "alias": "raw_gp_rxs_single", "checksum": {"name": "sha256", "checksum": "70a059ff0f02b2d3535dcc2d1a87be993b24369f3f85e2ab13359d8de6e8318e"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_rxs_single"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/raw_tables/raw_gp_rxs_single.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "full_refresh": false, "unique_key": "unique_id", "indexes": [{"columns": ["unique_id"], "unique": true}, {"columns": ["pkey"], "unique": true}]}, "created_at": 1703701089.304908, "compiled_sql": "\n\nwith r as (\n\tselect\n\t\t_airbyte_emitted_at,\n\t\t_airbyte_ab_id,\n\t\t_airbyte_data,\n\t\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as pkey,\n\t\tcoalesce(cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp), cast(_airbyte_emitted_at as timestamp without time zone)) as created_at,\n\t\tcoalesce(cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp), cast(_airbyte_emitted_at as timestamp without time zone)) as updated_at,\n\t\tcast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n\t\tcast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\n\tfrom\n\t\t\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_rxs_single\n)\n\nselect distinct on (pkey, created_at, updated_at, _ab_cdc_updated_at, _ab_cdc_deleted_at)\n\t*,\n\tmd5(cast(concat(pkey, created_at, updated_at, _ab_cdc_updated_at, _ab_cdc_deleted_at) as TEXT)) as unique_id\nfrom\n\tr\n\norder by\n\tpkey,\n\tcreated_at desc,\n\tupdated_at desc,\n\t_ab_cdc_updated_at desc,\n\t_ab_cdc_deleted_at desc,\n\t-- It's rare, but there might be two rows with same timestamps, pk and different data\n\t-- To ensure the latest one, order by log pos\n\tcast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_log_pos') as int) desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".prod.\"raw_gp_rxs_single\""}, "model.smartpill.patients_status_historic": {"raw_sql": "with calc_statuses as (\n\twith all_dates as (\n\t\tselect\n\t\t\tpatient_id_cp,\n\t\t\thas_refills,\n\t\t\trx_date_expired,\n\t\t\tcoalesce(order_date_added, refill_date_first) as order_date_added,\n\t\t\tcoalesce(order_date_shipped, refill_date_first) as order_date_shipped,\n\t\t\tcoalesce(refill_date_next, refill_date_first) as refill_date_next,\n\t\t\trefill_date_first,\n\t\t\tcoalesce(lag(order_date_added, -1) over (partition by patient_id_cp order by order_date_added), now()) as next_row_order_date_added,\n\t\t\tpatient_date_changed,\n\t\t\tpatient_inactive\n\t\tfrom (\n\t\t\tselect\n\t\t\t\trh.patient_id_cp,\n\t\t\t\tcoalesce(oh.order_date_added, rh.refill_date_first) as order_date_added,\n\t\t\t\toh.order_date_shipped as order_date_shipped,\n\t\t\t\trh.refill_date_next as refill_date_next,\n\t\t\t\trh.refills_left > 0 or rh.refills_total > 0 as has_refills,\n\t\t\t\trh.rx_date_expired,\n\t\t\t\trh.refill_date_first,\n\t\t\t\tp.patient_date_changed,\n\t\t\t\tp.patient_inactive is not null as patient_inactive\n\t\t\tfrom {{ ref('rxs_joined') }} rh\n\t\t\tinner join {{ ref('patients') }} p using (patient_id_cp)\n\t\t\tleft join {{ ref('order_items') }} oi using (rx_number, patient_id_cp)\n\t\t\tleft join {{ ref('orders') }} oh using (invoice_number, patient_id_cp)\n\t\t) t\n\t)\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcoalesce(order_date_added, refill_date_first) as event_date,\n\t\t'PATIENT_ACTIVE' as event_name\n\tfrom all_dates\n\twhere order_date_added is not null or (has_refills and refill_date_first is not null)\n\tunion\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcase\n\t\t\twhen refill_date_next > next_row_order_date_added then refill_date_next + interval '1' day\n\t\t\telse order_date_added + interval '4' month\n\t\tend as event_date,\n\t\t'PATIENT_CHURNED_OTHER' as event_name\n\tfrom all_dates\n\twhere\n\t\tcoalesce(refill_date_next + interval '1' day, order_date_added + interval '4' month) < next_row_order_date_added\n\t\tand order_date_shipped < next_row_order_date_added\n\t\tand order_date_added + interval '4' month < next_row_order_date_added\n\t\tand (has_refills and rx_date_expired >= coalesce(refill_date_next, order_date_added + interval '4' month))\n\t\tand (not patient_inactive or coalesce(refill_date_next, order_date_added + interval '4' month) < patient_date_changed)\n\tunion\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcase\n\t\t\twhen refill_date_next > next_row_order_date_added then refill_date_next + interval '1' day\n\t\t\telse order_date_added + interval '4' month\n\t\tend as event_date,\n\t\t'PATIENT_CHURNED_NO_FILLABLE_RX' as event_name\n\tfrom all_dates\n\twhere\n\t\tcoalesce(refill_date_next + interval '1' day, order_date_added + interval '4' month) < next_row_order_date_added\n\t\tand order_date_shipped < next_row_order_date_added\n\t\tand order_date_added + interval '4' month < next_row_order_date_added\n\t\tand not (has_refills and rx_date_expired >= coalesce(refill_date_next, order_date_added + interval '4' month))\n\t\tand (not patient_inactive or coalesce(refill_date_next, order_date_added + interval '4' month) < patient_date_changed)\n),\nstatuses as (\n\tselect\n\t\tgp.patient_id_cp,\n\t\tpatient_date_added as event_date,\n\t\t'PATIENT_UNREGISTERED' as event_name\n\t\tfrom {{ ref('patients')}} gp\n\t\tinner join (\n\t\t\tselect distinct patient_id_cp from {{ ref('rxs_joined') }} rxs\n\t\t) t using (patient_id_cp)\n\t\twhere patient_date_added is not null\n\t\t\tand (patient_date_registered is null or date(patient_date_registered) >= date(patient_date_added))\n\tunion\n\tselect\n\t\tgp.patient_id_cp,\n\t\tpatient_date_added as event_date,\n\t\t'PATIENT_NO_RX' as event_name\n\t\tfrom {{ ref('patients')}} gp\n\t\tleft join (\n\t\t\tselect\n\t\t\t\tpatient_id_cp,\n\t\t\t\tmin(rx_date_added) as min_rx_date_added\n\t\t\tfrom {{ ref('rxs_joined') }} rxs\n\t\t\tgroup by patient_id_cp\n\t\t) r on r.patient_id_cp = gp.patient_id_cp\n\t\twhere patient_date_registered is not null\n\t\t\tand (r.patient_id_cp is null or patient_date_added < min_rx_date_added)\n\tunion\n\tselect\n\t\tpatient_id_cp,\n\t\tpatient_date_updated as event_date,\n\t\t'PATIENT_INACTIVE' as event_name\n\t\tfrom {{ ref('patients') }}\n\t\twhere patient_inactive = 'Inactive'\n\tunion\n\tselect\n\t\tpatient_id_cp,\n\t\tpatient_date_updated as event_date,\n\t\t'PATIENT_DECEASED' as event_name\n\t\tfrom {{ ref('patients') }}\n\t\twhere patient_inactive = 'Deceased'\n)\n\nselect\n\tpatient_id_cp,\n\tevent_name,\n\tevent_date,\n\t{{ hash('concat(event_name, patient_id_cp, event_date)') }} as unique_event_id\nfrom (\n\tselect *\n\tfrom calc_statuses\n\tunion\n\tselect *\n\tfrom statuses\n) gps\norder by patient_id_cp, event_name, event_date desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.hash"], "nodes": ["model.smartpill.rxs_joined", "model.smartpill.patients", "model.smartpill.order_items", "model.smartpill.orders", "model.smartpill.patients", "model.smartpill.rxs_joined", "model.smartpill.patients", "model.smartpill.rxs_joined", "model.smartpill.patients", "model.smartpill.patients"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_event_id", "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["patient_id_cp", "event_name", "event_date"]}, {"columns": ["unique_event_id"]}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "silver", "patients_status_historic"], "unique_id": "model.smartpill.patients_status_historic", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/silver/patients_status_historic.sql", "original_file_path": "models/goodpill/silver/patients_status_historic.sql", "name": "patients_status_historic", "alias": "patients_status_historic", "checksum": {"name": "sha256", "checksum": "8bb3909a13c2ba570344e8277a261449861b330dc40e01479ae40a9a79e6c7f4"}, "tags": ["goodpill"], "refs": [["rxs_joined"], ["patients"], ["order_items"], ["orders"], ["patients"], ["rxs_joined"], ["patients"], ["rxs_joined"], ["patients"], ["patients"]], "sources": [], "metrics": [], "description": "Patient status historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/silver/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/silver/patients_status_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.5012047, "compiled_sql": "with calc_statuses as (\n\twith all_dates as (\n\t\tselect\n\t\t\tpatient_id_cp,\n\t\t\thas_refills,\n\t\t\trx_date_expired,\n\t\t\tcoalesce(order_date_added, refill_date_first) as order_date_added,\n\t\t\tcoalesce(order_date_shipped, refill_date_first) as order_date_shipped,\n\t\t\tcoalesce(refill_date_next, refill_date_first) as refill_date_next,\n\t\t\trefill_date_first,\n\t\t\tcoalesce(lag(order_date_added, -1) over (partition by patient_id_cp order by order_date_added), now()) as next_row_order_date_added,\n\t\t\tpatient_date_changed,\n\t\t\tpatient_inactive\n\t\tfrom (\n\t\t\tselect\n\t\t\t\trh.patient_id_cp,\n\t\t\t\tcoalesce(oh.order_date_added, rh.refill_date_first) as order_date_added,\n\t\t\t\toh.order_date_shipped as order_date_shipped,\n\t\t\t\trh.refill_date_next as refill_date_next,\n\t\t\t\trh.refills_left > 0 or rh.refills_total > 0 as has_refills,\n\t\t\t\trh.rx_date_expired,\n\t\t\t\trh.refill_date_first,\n\t\t\t\tp.patient_date_changed,\n\t\t\t\tp.patient_inactive is not null as patient_inactive\n\t\t\tfrom \"datawarehouse\".goodpill.\"rxs_joined\" rh\n\t\t\tinner join \"datawarehouse\".goodpill.\"patients\" p using (patient_id_cp)\n\t\t\tleft join \"datawarehouse\".goodpill.\"order_items\" oi using (rx_number, patient_id_cp)\n\t\t\tleft join \"datawarehouse\".goodpill.\"orders\" oh using (invoice_number, patient_id_cp)\n\t\t) t\n\t)\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcoalesce(order_date_added, refill_date_first) as event_date,\n\t\t'PATIENT_ACTIVE' as event_name\n\tfrom all_dates\n\twhere order_date_added is not null or (has_refills and refill_date_first is not null)\n\tunion\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcase\n\t\t\twhen refill_date_next > next_row_order_date_added then refill_date_next + interval '1' day\n\t\t\telse order_date_added + interval '4' month\n\t\tend as event_date,\n\t\t'PATIENT_CHURNED_OTHER' as event_name\n\tfrom all_dates\n\twhere\n\t\tcoalesce(refill_date_next + interval '1' day, order_date_added + interval '4' month) < next_row_order_date_added\n\t\tand order_date_shipped < next_row_order_date_added\n\t\tand order_date_added + interval '4' month < next_row_order_date_added\n\t\tand (has_refills and rx_date_expired >= coalesce(refill_date_next, order_date_added + interval '4' month))\n\t\tand (not patient_inactive or coalesce(refill_date_next, order_date_added + interval '4' month) < patient_date_changed)\n\tunion\n\tselect distinct\n\t\tpatient_id_cp,\n\t\tcase\n\t\t\twhen refill_date_next > next_row_order_date_added then refill_date_next + interval '1' day\n\t\t\telse order_date_added + interval '4' month\n\t\tend as event_date,\n\t\t'PATIENT_CHURNED_NO_FILLABLE_RX' as event_name\n\tfrom all_dates\n\twhere\n\t\tcoalesce(refill_date_next + interval '1' day, order_date_added + interval '4' month) < next_row_order_date_added\n\t\tand order_date_shipped < next_row_order_date_added\n\t\tand order_date_added + interval '4' month < next_row_order_date_added\n\t\tand not (has_refills and rx_date_expired >= coalesce(refill_date_next, order_date_added + interval '4' month))\n\t\tand (not patient_inactive or coalesce(refill_date_next, order_date_added + interval '4' month) < patient_date_changed)\n),\nstatuses as (\n\tselect\n\t\tgp.patient_id_cp,\n\t\tpatient_date_added as event_date,\n\t\t'PATIENT_UNREGISTERED' as event_name\n\t\tfrom \"datawarehouse\".goodpill.\"patients\" gp\n\t\tinner join (\n\t\t\tselect distinct patient_id_cp from \"datawarehouse\".goodpill.\"rxs_joined\" rxs\n\t\t) t using (patient_id_cp)\n\t\twhere patient_date_added is not null\n\t\t\tand (patient_date_registered is null or date(patient_date_registered) >= date(patient_date_added))\n\tunion\n\tselect\n\t\tgp.patient_id_cp,\n\t\tpatient_date_added as event_date,\n\t\t'PATIENT_NO_RX' as event_name\n\t\tfrom \"datawarehouse\".goodpill.\"patients\" gp\n\t\tleft join (\n\t\t\tselect\n\t\t\t\tpatient_id_cp,\n\t\t\t\tmin(rx_date_added) as min_rx_date_added\n\t\t\tfrom \"datawarehouse\".goodpill.\"rxs_joined\" rxs\n\t\t\tgroup by patient_id_cp\n\t\t) r on r.patient_id_cp = gp.patient_id_cp\n\t\twhere patient_date_registered is not null\n\t\t\tand (r.patient_id_cp is null or patient_date_added < min_rx_date_added)\n\tunion\n\tselect\n\t\tpatient_id_cp,\n\t\tpatient_date_updated as event_date,\n\t\t'PATIENT_INACTIVE' as event_name\n\t\tfrom \"datawarehouse\".goodpill.\"patients\"\n\t\twhere patient_inactive = 'Inactive'\n\tunion\n\tselect\n\t\tpatient_id_cp,\n\t\tpatient_date_updated as event_date,\n\t\t'PATIENT_DECEASED' as event_name\n\t\tfrom \"datawarehouse\".goodpill.\"patients\"\n\t\twhere patient_inactive = 'Deceased'\n)\n\nselect\n\tpatient_id_cp,\n\tevent_name,\n\tevent_date,\n\tmd5(cast(concat(event_name, patient_id_cp, event_date) as TEXT)) as unique_event_id\nfrom (\n\tselect *\n\tfrom calc_statuses\n\tunion\n\tselect *\n\tfrom statuses\n) gps\norder by patient_id_cp, event_name, event_date desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patients_status_historic\""}, "model.smartpill.rxs_joined": {"raw_sql": "with rx_group_unnested as (\n    select\n        *\n    from {{ ref('rxs_grouped') }}, unnest(string_to_array(trim(both ',' from rx_numbers), ',')) as rx_number\n),\n_rxs_single as (\n    select *, ROW_NUMBER() OVER (PARTITION BY rx_number ORDER BY updated_at  DESC) rank\n    from {{ ref('rxs_single') }}\n),\nrxs_single as (\n    select *\n    from _rxs_single\n    where rank = 1\n)\nselect distinct on (rs.rx_number, rs.updated_at)\n    rs.rx_number as rx_number,\n    rs.rx_id,\n    rg.rx_numbers as rx_numbers,\n    rg.best_rx_number as best_rx_number,\n    rs.patient_id_cp as patient_id_cp,\n    rg.drug_generic,\n    rg.drug_generic as rx_group_drug_generic,\n    rs.drug_brand as drug_brand,\n    rg.drug_brand as rx_group_drug_brand,\n    rs.drug_name as drug_name,\n    rs.group_id,\n    rg.group_id as rx_group_id,\n    rs.rx_message_key as rx_message_key,\n    rs.rx_message_text as rx_message_text,\n    rs.rx_message_date as rx_message_date,\n    rs.rx_gsn as rx_gsn,\n    rg.drug_gsns as rx_group_drug_gsns,\n    rs.drug_gsns,\n    rg.max_gsn as max_gsn,\n    rs.refills_left as refills_left,\n    rs.refills_original as refills_original,\n    rg.refills_total as refills_total,\n    rs.qty_left as qty_left,\n    rs.qty_original as qty_original,\n    rs.sig_actual as sig_actual,\n    rs.sig_initial as sig_initial,\n    rs.sig_clean as sig_clean,\n    rs.sig_qty as sig_qty,\n    rs.sig_v1_qty as sig_v1_qty,\n    rs.sig_v1_days as sig_v1_days,\n    rs.sig_v1_qty_per_day as sig_v1_qty_per_day,\n    rs.sig_days as sig_days,\n    rg.sig_qty_per_day as sig_qty_per_day,\n    rs.sig_qty_per_day_default as sig_qty_per_day_default,\n    rs.sig_qty_per_day_actual as sig_qty_per_day_actual,\n    rs.sig_durations as sig_durations,\n    rs.sig_qtys_per_time as sig_qtys_per_time,\n    rs.sig_frequencies as sig_frequencies,\n    rs.sig_frequency_numerators as sig_frequency_numerators,\n    rs.sig_frequency_denominators as sig_frequency_denominators,\n    rs.sig_v2_qty as sig_v2_qty,\n    rs.sig_v2_days as sig_v2_days,\n    rs.sig_v2_qty_per_day as sig_v2_qty_per_day,\n    rs.sig_v2_unit as sig_v2_unit,\n    rs.sig_v2_conf_score as sig_v2_conf_score,\n    rs.sig_v2_dosages as sig_v2_dosages,\n    rs.sig_v2_scores as sig_v2_scores,\n    rs.sig_v2_frequencies as sig_v2_frequencies,\n    rs.sig_v2_durations as sig_v2_durations,\n    rg.rx_autofill as rx_group_rx_autofill,\n    rs.rx_autofill,\n    rg.refill_date_first as rx_group_refill_date_first,\n    rs.refill_date_first,\n    rg.refill_date_last as rx_group_refill_date_last,\n    rs.refill_date_last,\n    rg.refill_date_manual as rx_group_refill_date_manual,\n    rs.refill_date_manual,\n    rg.refill_date_default as rx_group_refill_date_default,\n    rs.refill_date_default,\n    rg.rx_added_first_at,\n    rg.rx_added_last_at,\n    rg.refill_date_next as refill_date_next,\n    rs.rx_status as rx_status,\n    rs.rx_stage as rx_stage,\n    rs.rx_source as rx_source,\n    rs.rx_date_transferred_out,\n    rs.rx_date_transferred_in,\n    rs.provider_npi as provider_npi,\n    rs.provider_first_name as provider_first_name,\n    rs.provider_last_name as provider_last_name,\n    rs.provider_clinic as clinic_name,\n    rs.provider_phone as provider_phone,\n    rg.rx_date_changed as rx_group_rx_date_changed,\n    rs.rx_date_changed,\n    rg.rx_date_expired as rx_group_rx_date_expired,\n    rs.rx_date_expired,\n    rs.rx_date_added as rx_date_added,\n    rs.rx_stock_level_initial as rx_stock_level_initial,\n    rs.transfer_pharmacy_phone as transfer_pharmacy_phone,\n    rs.transfer_pharmacy_name as transfer_pharmacy_name,\n    rs.transfer_pharmacy_fax as transfer_pharmacy_fax,\n    rs.transfer_pharmacy_address as transfer_pharmacy_address,\n    rs.created_at as created_at,\n    rs.updated_at as updated_at,\n    rs.status,\n    rg.created_at as rx_group_created_at,\n    rg.updated_at as rx_group_updated_at,\n    clinics.clinic_name_cp as rx_clinic_name_cp,\n    rs.rx_status_updated_at,\n    rs.provider_email,\n    rg.rx_inactivated_last_at,\n    rg.rx_activated_last_at,\n    rg.group_status,\n    rg.qty_total,\n    rg.rx_sources,\n    rs.sig_confirmed_by,\n    rs.sig_confirmed_at\n\n\nfrom rxs_single rs\nleft join rx_group_unnested as rg on (rs.rx_number = cast(rg.rx_number as int))\nleft join {{ ref('clinics') }} as clinics on clinics.clinic_name_cp = rs.provider_clinic\n{% if is_incremental() %}\n    where rs.updated_at > (select max(updated_at) from {{ this }})\n{% endif %}\norder by\n    rs.rx_number,\n    rs.updated_at,\n    -- prioritize the rxs_single that was updated before the group was created\n    rs.updated_at <= rg.created_at desc,\n    rg.created_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.rxs_grouped", "model.smartpill.rxs_single", "model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "indexes": [{"columns": ["rx_number", "updated_at"], "unique": true}, {"columns": ["rx_number"]}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "silver", "rxs_joined"], "unique_id": "model.smartpill.rxs_joined", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/silver/rxs_joined.sql", "original_file_path": "models/goodpill/silver/rxs_joined.sql", "name": "rxs_joined", "alias": "rxs_joined", "checksum": {"name": "sha256", "checksum": "1342c1b30ab5b414675eaeb9dda572ff8d6de604da2acd994c0f4bb8689c611e"}, "tags": ["goodpill"], "refs": [["rxs_grouped"], ["rxs_single"], ["clinics"]], "sources": [], "metrics": [], "description": "Prescription joined historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/goodpill/silver/models.yml", "compiled_path": "target/compiled/smartpill/models/goodpill/silver/rxs_joined.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "goodpill"}, "created_at": 1703701091.5063922, "compiled_sql": "with rx_group_unnested as (\n    select\n        *\n    from \"datawarehouse\".goodpill.\"rxs_grouped\", unnest(string_to_array(trim(both ',' from rx_numbers), ',')) as rx_number\n),\n_rxs_single as (\n    select *, ROW_NUMBER() OVER (PARTITION BY rx_number ORDER BY updated_at  DESC) rank\n    from \"datawarehouse\".goodpill.\"rxs_single\"\n),\nrxs_single as (\n    select *\n    from _rxs_single\n    where rank = 1\n)\nselect distinct on (rs.rx_number, rs.updated_at)\n    rs.rx_number as rx_number,\n    rs.rx_id,\n    rg.rx_numbers as rx_numbers,\n    rg.best_rx_number as best_rx_number,\n    rs.patient_id_cp as patient_id_cp,\n    rg.drug_generic,\n    rg.drug_generic as rx_group_drug_generic,\n    rs.drug_brand as drug_brand,\n    rg.drug_brand as rx_group_drug_brand,\n    rs.drug_name as drug_name,\n    rs.group_id,\n    rg.group_id as rx_group_id,\n    rs.rx_message_key as rx_message_key,\n    rs.rx_message_text as rx_message_text,\n    rs.rx_message_date as rx_message_date,\n    rs.rx_gsn as rx_gsn,\n    rg.drug_gsns as rx_group_drug_gsns,\n    rs.drug_gsns,\n    rg.max_gsn as max_gsn,\n    rs.refills_left as refills_left,\n    rs.refills_original as refills_original,\n    rg.refills_total as refills_total,\n    rs.qty_left as qty_left,\n    rs.qty_original as qty_original,\n    rs.sig_actual as sig_actual,\n    rs.sig_initial as sig_initial,\n    rs.sig_clean as sig_clean,\n    rs.sig_qty as sig_qty,\n    rs.sig_v1_qty as sig_v1_qty,\n    rs.sig_v1_days as sig_v1_days,\n    rs.sig_v1_qty_per_day as sig_v1_qty_per_day,\n    rs.sig_days as sig_days,\n    rg.sig_qty_per_day as sig_qty_per_day,\n    rs.sig_qty_per_day_default as sig_qty_per_day_default,\n    rs.sig_qty_per_day_actual as sig_qty_per_day_actual,\n    rs.sig_durations as sig_durations,\n    rs.sig_qtys_per_time as sig_qtys_per_time,\n    rs.sig_frequencies as sig_frequencies,\n    rs.sig_frequency_numerators as sig_frequency_numerators,\n    rs.sig_frequency_denominators as sig_frequency_denominators,\n    rs.sig_v2_qty as sig_v2_qty,\n    rs.sig_v2_days as sig_v2_days,\n    rs.sig_v2_qty_per_day as sig_v2_qty_per_day,\n    rs.sig_v2_unit as sig_v2_unit,\n    rs.sig_v2_conf_score as sig_v2_conf_score,\n    rs.sig_v2_dosages as sig_v2_dosages,\n    rs.sig_v2_scores as sig_v2_scores,\n    rs.sig_v2_frequencies as sig_v2_frequencies,\n    rs.sig_v2_durations as sig_v2_durations,\n    rg.rx_autofill as rx_group_rx_autofill,\n    rs.rx_autofill,\n    rg.refill_date_first as rx_group_refill_date_first,\n    rs.refill_date_first,\n    rg.refill_date_last as rx_group_refill_date_last,\n    rs.refill_date_last,\n    rg.refill_date_manual as rx_group_refill_date_manual,\n    rs.refill_date_manual,\n    rg.refill_date_default as rx_group_refill_date_default,\n    rs.refill_date_default,\n    rg.rx_added_first_at,\n    rg.rx_added_last_at,\n    rg.refill_date_next as refill_date_next,\n    rs.rx_status as rx_status,\n    rs.rx_stage as rx_stage,\n    rs.rx_source as rx_source,\n    rs.rx_date_transferred_out,\n    rs.rx_date_transferred_in,\n    rs.provider_npi as provider_npi,\n    rs.provider_first_name as provider_first_name,\n    rs.provider_last_name as provider_last_name,\n    rs.provider_clinic as clinic_name,\n    rs.provider_phone as provider_phone,\n    rg.rx_date_changed as rx_group_rx_date_changed,\n    rs.rx_date_changed,\n    rg.rx_date_expired as rx_group_rx_date_expired,\n    rs.rx_date_expired,\n    rs.rx_date_added as rx_date_added,\n    rs.rx_stock_level_initial as rx_stock_level_initial,\n    rs.transfer_pharmacy_phone as transfer_pharmacy_phone,\n    rs.transfer_pharmacy_name as transfer_pharmacy_name,\n    rs.transfer_pharmacy_fax as transfer_pharmacy_fax,\n    rs.transfer_pharmacy_address as transfer_pharmacy_address,\n    rs.created_at as created_at,\n    rs.updated_at as updated_at,\n    rs.status,\n    rg.created_at as rx_group_created_at,\n    rg.updated_at as rx_group_updated_at,\n    clinics.clinic_name_cp as rx_clinic_name_cp,\n    rs.rx_status_updated_at,\n    rs.provider_email,\n    rg.rx_inactivated_last_at,\n    rg.rx_activated_last_at,\n    rg.group_status,\n    rg.qty_total,\n    rg.rx_sources,\n    rs.sig_confirmed_by,\n    rs.sig_confirmed_at\n\n\nfrom rxs_single rs\nleft join rx_group_unnested as rg on (rs.rx_number = cast(rg.rx_number as int))\nleft join \"datawarehouse\".goodpill.\"clinics\" as clinics on clinics.clinic_name_cp = rs.provider_clinic\n\norder by\n    rs.rx_number,\n    rs.updated_at,\n    -- prioritize the rxs_single that was updated before the group was created\n    rs.updated_at <= rg.created_at desc,\n    rg.created_at desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"rxs_joined\""}, "model.smartpill.v2_accounts_ordered_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_accounts_ordered\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_accounts_ordered"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_accounts_ordered_profile"], "unique_id": "model.smartpill.v2_accounts_ordered_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_accounts_ordered_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_accounts_ordered_profile.sql", "name": "v2_accounts_ordered_profile", "alias": "v2_accounts_ordered_profile", "checksum": {"name": "sha256", "checksum": "9235a67fc0c8b8f36b5db46bf16575baa2fed0320334c79010de0d6ef62ec291"}, "tags": [], "refs": [["v2_accounts_ordered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_accounts_ordered_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5125082, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_accounts_ordered\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          cast(min(\"id\") as varchar) as min,\n          cast(max(\"id\") as varchar) as max,\n          avg(\"id\") as avg,\n          stddev_pop(\"id\") as std_dev_population,\n          stddev_samp(\"id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_account_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_account_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_account_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_account_id\") as distinct_count,\n          count(distinct \"v2_account_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic\") as distinct_count,\n          count(distinct \"drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('default_location') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"default_location\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"default_location\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"default_location\") as distinct_count,\n          count(distinct \"default_location\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('display_message') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"display_message\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"display_message\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"display_message\") as distinct_count,\n          count(distinct \"display_message\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('destroyed_message') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"destroyed_message\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"destroyed_message\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"destroyed_message\") as distinct_count,\n          count(distinct \"destroyed_message\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('max_inventory') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"max_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"max_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"max_inventory\") as distinct_count,\n          count(distinct \"max_inventory\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('min_days') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"min_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"min_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"min_days\") as distinct_count,\n          count(distinct \"min_days\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('min_qty') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"min_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"min_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"min_qty\") as distinct_count,\n          count(distinct \"min_qty\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price30') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price30\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price30\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price30\") as distinct_count,\n          count(distinct \"price30\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price90') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price90\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price90\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price90\") as distinct_count,\n          count(distinct \"price90\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('repack_qty') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"repack_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"repack_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"repack_qty\") as distinct_count,\n          count(distinct \"repack_qty\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('verified_message') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"verified_message\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"verified_message\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"verified_message\") as distinct_count,\n          count(distinct \"verified_message\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('vial_qty') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"vial_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"vial_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"vial_qty\") as distinct_count,\n          count(distinct \"vial_qty\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('vial_size') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"vial_size\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"vial_size\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"vial_size\") as distinct_count,\n          count(distinct \"vial_size\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_accounts_ordered_profile\""}, "model.smartpill.v2_accounts_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_accounts\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_accounts_profile"], "unique_id": "model.smartpill.v2_accounts_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_accounts_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_accounts_profile.sql", "name": "v2_accounts_profile", "alias": "v2_accounts_profile", "checksum": {"name": "sha256", "checksum": "410d3b8b111f07ef4199ebc8d5866ea60b9e7a814220ef1284b6f81d24fa2fcf"}, "tags": [], "refs": [["v2_accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_accounts_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5099154, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_accounts\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_id\") as distinct_count,\n          count(distinct \"v2_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"name\") as distinct_count,\n          count(distinct \"name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('license') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"license\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"license\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"license\") as distinct_count,\n          count(distinct \"license\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('street') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"street\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"street\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"street\") as distinct_count,\n          count(distinct \"street\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('city') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"city\") as distinct_count,\n          count(distinct \"city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('state') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"state\") as distinct_count,\n          count(distinct \"state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('zip') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"zip\") as distinct_count,\n          count(distinct \"zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('phone') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"phone\") as distinct_count,\n          count(distinct \"phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_accounts_profile\""}, "model.smartpill.v2_drug_generics_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_drug_generics\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_drug_generics"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_drug_generics_profile"], "unique_id": "model.smartpill.v2_drug_generics_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_drug_generics_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_drug_generics_profile.sql", "name": "v2_drug_generics_profile", "alias": "v2_drug_generics_profile", "checksum": {"name": "sha256", "checksum": "7788564dcc484e9cff2eb08125db8644b7cbdf76a1c7f98337681b42c93aeaba"}, "tags": [], "refs": [["v2_drug_generics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_drug_generics_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5157208, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_drug_generics\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_drug_id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_drug_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_drug_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_drug_id\") as distinct_count,\n          count(distinct \"v2_drug_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"name\") as distinct_count,\n          count(distinct \"name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('strength') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"strength\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"strength\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"strength\") as distinct_count,\n          count(distinct \"strength\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_drug_generics_profile\""}, "model.smartpill.v2_drug_gsns_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_drug_gsns\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_drug_gsns"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_drug_gsns_profile"], "unique_id": "model.smartpill.v2_drug_gsns_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_drug_gsns_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_drug_gsns_profile.sql", "name": "v2_drug_gsns_profile", "alias": "v2_drug_gsns_profile", "checksum": {"name": "sha256", "checksum": "f4509712b2922cec27441c200eea1cbb98b25d70f3ec7f02f110ba5deae8eda7"}, "tags": [], "refs": [["v2_drug_gsns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_drug_gsns_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5191948, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_drug_gsns\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_drug_id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_drug_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_drug_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_drug_id\") as distinct_count,\n          count(distinct \"v2_drug_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gsn') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gsn\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gsn\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gsn\") as distinct_count,\n          count(distinct \"gsn\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_drug_gsns_profile\""}, "model.smartpill.v2_drugs_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_drugs\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_drugs_profile"], "unique_id": "model.smartpill.v2_drugs_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_drugs_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_drugs_profile.sql", "name": "v2_drugs_profile", "alias": "v2_drugs_profile", "checksum": {"name": "sha256", "checksum": "3d6f9e3f71dc152117a407af83404cb303b16b3c3e4568533fa9cddb3f66a30b"}, "tags": [], "refs": [["v2_drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_drugs_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5224483, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_drugs\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_id\") as distinct_count,\n          count(distinct \"v2_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('form') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"form\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"form\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"form\") as distinct_count,\n          count(distinct \"form\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('brand') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"brand\") as distinct_count,\n          count(distinct \"brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('labeler') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"labeler\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"labeler\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"labeler\") as distinct_count,\n          count(distinct \"labeler\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_goodrx') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_goodrx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_goodrx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_goodrx\") as distinct_count,\n          count(distinct \"price_goodrx\") = count(*) as is_unique,\n          cast(min(\"price_goodrx\") as varchar) as min,\n          cast(max(\"price_goodrx\") as varchar) as max,\n          avg(\"price_goodrx\") as avg,\n          stddev_pop(\"price_goodrx\") as std_dev_population,\n          stddev_samp(\"price_goodrx\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_retail') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_retail\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_retail\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_retail\") as distinct_count,\n          count(distinct \"price_retail\") = count(*) as is_unique,\n          cast(min(\"price_retail\") as varchar) as min,\n          cast(max(\"price_retail\") as varchar) as max,\n          avg(\"price_retail\") as avg,\n          stddev_pop(\"price_retail\") as std_dev_population,\n          stddev_samp(\"price_retail\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_invalid_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_invalid_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_invalid_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_invalid_at\") as distinct_count,\n          count(distinct \"price_invalid_at\") = count(*) as is_unique,\n          cast(min(\"price_invalid_at\") as varchar) as min,\n          cast(max(\"price_invalid_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_updated_at\") as distinct_count,\n          count(distinct \"price_updated_at\") = count(*) as is_unique,\n          cast(min(\"price_updated_at\") as varchar) as min,\n          cast(max(\"price_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('image') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"image\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"image\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"image\") as distinct_count,\n          count(distinct \"image\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('ndc9') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"ndc9\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"ndc9\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"ndc9\") as distinct_count,\n          count(distinct \"ndc9\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('generic') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"generic\") as distinct_count,\n          count(distinct \"generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('upc') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"upc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"upc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"upc\") as distinct_count,\n          count(distinct \"upc\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_drugs_profile\""}, "model.smartpill.v2_failed_imports_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_failed_imports\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_failed_imports"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_failed_imports_profile"], "unique_id": "model.smartpill.v2_failed_imports_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_failed_imports_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_failed_imports_profile.sql", "name": "v2_failed_imports_profile", "alias": "v2_failed_imports_profile", "checksum": {"name": "sha256", "checksum": "7320c2118f89b8a4541d538db40a675d83860132416ab4be609bb6894288706b"}, "tags": [], "refs": [["v2_failed_imports"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_failed_imports_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5265367, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_failed_imports\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('database') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"database\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"database\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"database\") as distinct_count,\n          count(distinct \"database\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('document') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"document\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"document\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"document\") as distinct_count,\n          count(distinct \"document\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_failed_imports_profile\""}, "model.smartpill.v2_shipment_item_stages_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_shipment_item_stages\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_shipment_item_stages"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_shipment_item_stages_profile"], "unique_id": "model.smartpill.v2_shipment_item_stages_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_shipment_item_stages_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_shipment_item_stages_profile.sql", "name": "v2_shipment_item_stages_profile", "alias": "v2_shipment_item_stages_profile", "checksum": {"name": "sha256", "checksum": "ca161bf06d61f984315c047926222ed054a2c59a974e9c3c2d0d002ed12efd43"}, "tags": [], "refs": [["v2_shipment_item_stages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_shipment_item_stages_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5442064, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_shipment_item_stages\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_shipment_item_id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_shipment_item_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_shipment_item_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_shipment_item_id\") as distinct_count,\n          count(distinct \"v2_shipment_item_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stage') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stage\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stage\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stage\") as distinct_count,\n          count(distinct \"stage\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stage_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stage_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stage_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stage_id\") as distinct_count,\n          count(distinct \"stage_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('user_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"user_id\") as distinct_count,\n          count(distinct \"user_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_shipment_item_stages_profile\""}, "model.smartpill.v2_shipment_items_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_shipment_items\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_shipment_items"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_shipment_items_profile"], "unique_id": "model.smartpill.v2_shipment_items_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_shipment_items_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_shipment_items_profile.sql", "name": "v2_shipment_items_profile", "alias": "v2_shipment_items_profile", "checksum": {"name": "sha256", "checksum": "488bae6b282ed61dece33ab5c0833991a0958271872250505285ab15941a9237"}, "tags": [], "refs": [["v2_shipment_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_shipment_items_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5413692, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_shipment_items\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('couch_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"couch_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"couch_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"couch_id\") as distinct_count,\n          count(distinct \"couch_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('ndc') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"ndc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"ndc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"ndc\") as distinct_count,\n          count(distinct \"ndc\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_brand') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_brand\") as distinct_count,\n          count(distinct \"drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic\") as distinct_count,\n          count(distinct \"drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic_name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic_name\") as distinct_count,\n          count(distinct \"drug_generic_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic_strength') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic_strength\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic_strength\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic_strength\") as distinct_count,\n          count(distinct \"drug_generic_strength\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_form') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_form\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_form\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_form\") as distinct_count,\n          count(distinct \"drug_form\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_goodrx') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_goodrx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_goodrx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_goodrx\") as distinct_count,\n          count(distinct \"drug_price_goodrx\") = count(*) as is_unique,\n          cast(min(\"drug_price_goodrx\") as varchar) as min,\n          cast(max(\"drug_price_goodrx\") as varchar) as max,\n          avg(\"drug_price_goodrx\") as avg,\n          stddev_pop(\"drug_price_goodrx\") as std_dev_population,\n          stddev_samp(\"drug_price_goodrx\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_nadac') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_nadac\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_nadac\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_nadac\") as distinct_count,\n          count(distinct \"drug_price_nadac\") = count(*) as is_unique,\n          cast(min(\"drug_price_nadac\") as varchar) as min,\n          cast(max(\"drug_price_nadac\") as varchar) as max,\n          avg(\"drug_price_nadac\") as avg,\n          stddev_pop(\"drug_price_nadac\") as std_dev_population,\n          stddev_samp(\"drug_price_nadac\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_retail') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_retail\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_retail\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_retail\") as distinct_count,\n          count(distinct \"drug_price_retail\") = count(*) as is_unique,\n          cast(min(\"drug_price_retail\") as varchar) as min,\n          cast(max(\"drug_price_retail\") as varchar) as max,\n          avg(\"drug_price_retail\") as avg,\n          stddev_pop(\"drug_price_retail\") as std_dev_population,\n          stddev_samp(\"drug_price_retail\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price\") as distinct_count,\n          count(distinct \"drug_price\") = count(*) as is_unique,\n          cast(min(\"drug_price\") as varchar) as min,\n          cast(max(\"drug_price\") as varchar) as max,\n          avg(\"drug_price\") as avg,\n          stddev_pop(\"drug_price\") as std_dev_population,\n          stddev_samp(\"drug_price\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_updated_at\") as distinct_count,\n          count(distinct \"drug_price_updated_at\") = count(*) as is_unique,\n          cast(min(\"drug_price_updated_at\") as varchar) as min,\n          cast(max(\"drug_price_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_pkg') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_pkg\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_pkg\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_pkg\") as distinct_count,\n          count(distinct \"drug_pkg\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('bin') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"bin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"bin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"bin\") as distinct_count,\n          count(distinct \"bin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_user_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_user_id\") as distinct_count,\n          count(distinct \"v2_user_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_shipment_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_shipment_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_shipment_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_shipment_id\") as distinct_count,\n          count(distinct \"v2_shipment_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_donor_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_donor_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_donor_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_donor_id\") as distinct_count,\n          count(distinct \"v2_donor_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_recipient_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_recipient_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_recipient_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_recipient_id\") as distinct_count,\n          count(distinct \"v2_recipient_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('quantity') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"quantity\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"quantity\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"quantity\") as distinct_count,\n          count(distinct \"quantity\") = count(*) as is_unique,\n          cast(min(\"quantity\") as varchar) as min,\n          cast(max(\"quantity\") as varchar) as max,\n          avg(\"quantity\") as avg,\n          stddev_pop(\"quantity\") as std_dev_population,\n          stddev_samp(\"quantity\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('value') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"value\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"value\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"value\") as distinct_count,\n          count(distinct \"value\") = count(*) as is_unique,\n          cast(min(\"value\") as varchar) as min,\n          cast(max(\"value\") as varchar) as max,\n          avg(\"value\") as avg,\n          stddev_pop(\"value\") as std_dev_population,\n          stddev_samp(\"value\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('expires_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"expires_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"expires_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"expires_at\") as distinct_count,\n          count(distinct \"expires_at\") = count(*) as is_unique,\n          cast(min(\"expires_at\") as varchar) as min,\n          cast(max(\"expires_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('verified_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"verified_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"verified_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"verified_on\") as distinct_count,\n          count(distinct \"verified_on\") = count(*) as is_unique,\n          cast(min(\"verified_on\") as varchar) as min,\n          cast(max(\"verified_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refused_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refused_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refused_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refused_on\") as distinct_count,\n          count(distinct \"refused_on\") = count(*) as is_unique,\n          cast(min(\"refused_on\") as varchar) as min,\n          cast(max(\"refused_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('entered_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"entered_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"entered_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"entered_on\") as distinct_count,\n          count(distinct \"entered_on\") = count(*) as is_unique,\n          cast(min(\"entered_on\") as varchar) as min,\n          cast(max(\"entered_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('expired_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"expired_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"expired_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"expired_on\") as distinct_count,\n          count(distinct \"expired_on\") = count(*) as is_unique,\n          cast(min(\"expired_on\") as varchar) as min,\n          cast(max(\"expired_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('disposed_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"disposed_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"disposed_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"disposed_on\") as distinct_count,\n          count(distinct \"disposed_on\") = count(*) as is_unique,\n          cast(min(\"disposed_on\") as varchar) as min,\n          cast(max(\"disposed_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_on\") as distinct_count,\n          count(distinct \"created_on\") = count(*) as is_unique,\n          cast(min(\"created_on\") as varchar) as min,\n          cast(max(\"created_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('received_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"received_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"received_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"received_on\") as distinct_count,\n          count(distinct \"received_on\") = count(*) as is_unique,\n          cast(min(\"received_on\") as varchar) as min,\n          cast(max(\"received_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dispensed_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dispensed_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dispensed_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dispensed_on\") as distinct_count,\n          count(distinct \"dispensed_on\") = count(*) as is_unique,\n          cast(min(\"dispensed_on\") as varchar) as min,\n          cast(max(\"dispensed_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('picked_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"picked_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"picked_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"picked_on\") as distinct_count,\n          count(distinct \"picked_on\") = count(*) as is_unique,\n          cast(min(\"picked_on\") as varchar) as min,\n          cast(max(\"picked_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('repacked_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"repacked_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"repacked_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"repacked_on\") as distinct_count,\n          count(distinct \"repacked_on\") = count(*) as is_unique,\n          cast(min(\"repacked_on\") as varchar) as min,\n          cast(max(\"repacked_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pended_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pended_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pended_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pended_on\") as distinct_count,\n          count(distinct \"pended_on\") = count(*) as is_unique,\n          cast(min(\"pended_on\") as varchar) as min,\n          cast(max(\"pended_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('next_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"next_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"next_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"next_on\") as distinct_count,\n          count(distinct \"next_on\") = count(*) as is_unique,\n          cast(min(\"next_on\") as varchar) as min,\n          cast(max(\"next_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('removed_on') as column_name,\n          nullif(lower('date'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"removed_on\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"removed_on\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"removed_on\") as distinct_count,\n          count(distinct \"removed_on\") = count(*) as is_unique,\n          cast(min(\"removed_on\") as varchar) as min,\n          cast(max(\"removed_on\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sorted_bin_1') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sorted_bin_1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sorted_bin_1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sorted_bin_1\") as distinct_count,\n          count(distinct \"sorted_bin_1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sorted_bin_2') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sorted_bin_2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sorted_bin_2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sorted_bin_2\") as distinct_count,\n          count(distinct \"sorted_bin_2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sorted_bin_3') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sorted_bin_3\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sorted_bin_3\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sorted_bin_3\") as distinct_count,\n          count(distinct \"sorted_bin_3\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sorted_bin_4') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sorted_bin_4\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sorted_bin_4\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sorted_bin_4\") as distinct_count,\n          count(distinct \"sorted_bin_4\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_refused') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_refused\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_refused\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_refused\") as distinct_count,\n          count(distinct \"is_refused\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_inventory') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_inventory\") as distinct_count,\n          count(distinct \"is_inventory\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_pended') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_pended\") as distinct_count,\n          count(distinct \"is_pended\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_dispensed') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_dispensed\") as distinct_count,\n          count(distinct \"is_dispensed\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_disposed') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_disposed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_disposed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_disposed\") as distinct_count,\n          count(distinct \"is_disposed\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_expired') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_expired\") as distinct_count,\n          count(distinct \"is_expired\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('is_magic_bin') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"is_magic_bin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"is_magic_bin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"is_magic_bin\") as distinct_count,\n          count(distinct \"is_magic_bin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_shipment_items_profile\""}, "model.smartpill.v2_shipments_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_shipments\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_shipments"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_shipments_profile"], "unique_id": "model.smartpill.v2_shipments_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_shipments_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_shipments_profile.sql", "name": "v2_shipments_profile", "alias": "v2_shipments_profile", "checksum": {"name": "sha256", "checksum": "ba5b9deb29607cb0fe4acdd845bac1b36540a5f928900f540dbcc36bdc74673f"}, "tags": [], "refs": [["v2_shipments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_shipments_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5318584, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_shipments\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"id\") as distinct_count,\n          count(distinct \"id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_id\") as distinct_count,\n          count(distinct \"v2_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_donor_account_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_donor_account_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_donor_account_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_donor_account_id\") as distinct_count,\n          count(distinct \"v2_donor_account_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('donor_account_name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"donor_account_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"donor_account_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"donor_account_name\") as distinct_count,\n          count(distinct \"donor_account_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('v2_recipient_account_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"v2_recipient_account_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"v2_recipient_account_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"v2_recipient_account_id\") as distinct_count,\n          count(distinct \"v2_recipient_account_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('recipient_account_name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"recipient_account_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"recipient_account_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"recipient_account_name\") as distinct_count,\n          count(distinct \"recipient_account_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"status\") as distinct_count,\n          count(distinct \"status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('tracking') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"tracking\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"tracking\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"tracking\") as distinct_count,\n          count(distinct \"tracking\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pickup_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pickup_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pickup_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pickup_at\") as distinct_count,\n          count(distinct \"pickup_at\") = count(*) as is_unique,\n          cast(min(\"pickup_at\") as varchar) as min,\n          cast(max(\"pickup_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_shipments_profile\""}, "model.smartpill.v2_sync_status_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"v2_sync_status\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.v2_sync_status"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "cortex", "bronze", "v2_sync_status_profile"], "unique_id": "model.smartpill.v2_sync_status_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/cortex/bronze/v2_sync_status_profile.sql", "original_file_path": "models/profiling/cortex/bronze/v2_sync_status_profile.sql", "name": "v2_sync_status_profile", "alias": "v2_sync_status_profile", "checksum": {"name": "sha256", "checksum": "87e4bb9fa507e9708bbe98ebe9c1f123602c15b219e7272da605fff6cc477f94"}, "tags": [], "refs": [["v2_sync_status"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/cortex/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/cortex/bronze/v2_sync_status_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5348794, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".cortex.\"v2_sync_status\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('db') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"db\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"db\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"db\") as distinct_count,\n          count(distinct \"db\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('seq') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"seq\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"seq\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"seq\") as distinct_count,\n          count(distinct \"seq\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('last_sync_started_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"last_sync_started_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"last_sync_started_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"last_sync_started_at\") as distinct_count,\n          count(distinct \"last_sync_started_at\") = count(*) as is_unique,\n          cast(min(\"last_sync_started_at\") as varchar) as min,\n          cast(max(\"last_sync_started_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('last_sync_completed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"last_sync_completed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"last_sync_completed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"last_sync_completed_at\") as distinct_count,\n          count(distinct \"last_sync_completed_at\") = count(*) as is_unique,\n          cast(min(\"last_sync_completed_at\") as varchar) as min,\n          cast(max(\"last_sync_completed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"v2_sync_status_profile\""}, "model.smartpill.clinic_coupons_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"clinic_coupons\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.clinic_coupons"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "clinic_coupons_profile"], "unique_id": "model.smartpill.clinic_coupons_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/clinic_coupons_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/clinic_coupons_profile.sql", "name": "clinic_coupons_profile", "alias": "clinic_coupons_profile", "checksum": {"name": "sha256", "checksum": "e8015f39511c25918753b065847f9f4d70dd0e977f33d59b567ac6d8313dfe29"}, "tags": [], "refs": [["clinic_coupons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/clinic_coupons_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5477867, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"clinic_coupons\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('coupon_code') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"coupon_code\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"coupon_code\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"coupon_code\") as distinct_count,\n          count(distinct \"coupon_code\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('coupon_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"coupon_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"coupon_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"coupon_type\") as distinct_count,\n          count(distinct \"coupon_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id\") as distinct_count,\n          count(distinct \"clinic_id\") = count(*) as is_unique,\n          cast(min(\"clinic_id\") as varchar) as min,\n          cast(max(\"clinic_id\") as varchar) as max,\n          avg(\"clinic_id\") as avg,\n          stddev_pop(\"clinic_id\") as std_dev_population,\n          stddev_samp(\"clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('verified') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"verified\") as distinct_count,\n          count(distinct \"verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('coupon_date_used_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"coupon_date_used_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"coupon_date_used_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"coupon_date_used_first\") as distinct_count,\n          count(distinct \"coupon_date_used_first\") = count(*) as is_unique,\n          cast(min(\"coupon_date_used_first\") as varchar) as min,\n          cast(max(\"coupon_date_used_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('coupon_date_used_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"coupon_date_used_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"coupon_date_used_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"coupon_date_used_last\") as distinct_count,\n          count(distinct \"coupon_date_used_last\") = count(*) as is_unique,\n          cast(min(\"coupon_date_used_last\") as varchar) as min,\n          cast(max(\"coupon_date_used_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"clinic_coupons_profile\""}, "model.smartpill.clinics_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"clinics\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "clinics_profile"], "unique_id": "model.smartpill.clinics_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/clinics_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/clinics_profile.sql", "name": "clinics_profile", "alias": "clinics_profile", "checksum": {"name": "sha256", "checksum": "4679b0c860972d01a3365ebc55cdda8b3b56b03a4284439b89baad92b9c5c3f6"}, "tags": [], "refs": [["clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/clinics_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5504227, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"clinics\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id\") as distinct_count,\n          count(distinct \"clinic_id\") = count(*) as is_unique,\n          cast(min(\"clinic_id\") as varchar) as min,\n          cast(max(\"clinic_id\") as varchar) as max,\n          avg(\"clinic_id\") as avg,\n          stddev_pop(\"clinic_id\") as std_dev_population,\n          stddev_samp(\"clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_name_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_name_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_name_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_name_cp\") as distinct_count,\n          count(distinct \"clinic_name_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_rx_date_added_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_rx_date_added_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_rx_date_added_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_rx_date_added_first\") as distinct_count,\n          count(distinct \"clinic_rx_date_added_first\") = count(*) as is_unique,\n          cast(min(\"clinic_rx_date_added_first\") as varchar) as min,\n          cast(max(\"clinic_rx_date_added_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_rx_date_added_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_rx_date_added_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_rx_date_added_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_rx_date_added_last\") as distinct_count,\n          count(distinct \"clinic_rx_date_added_last\") = count(*) as is_unique,\n          cast(min(\"clinic_rx_date_added_last\") as varchar) as min,\n          cast(max(\"clinic_rx_date_added_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('verified') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"verified\") as distinct_count,\n          count(distinct \"verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"clinics_profile\""}, "model.smartpill.drugs_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"drugs\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.drugs"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "drugs_profile"], "unique_id": "model.smartpill.drugs_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/drugs_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/drugs_profile.sql", "name": "drugs_profile", "alias": "drugs_profile", "checksum": {"name": "sha256", "checksum": "65ee58f8c4da143234e7aed561d4a13aa6abb31358bf7d2f871bcc5b55cc5843"}, "tags": [], "refs": [["drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/drugs_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5656223, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"drugs\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('drug_generic') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic\") as distinct_count,\n          count(distinct \"drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_brand\") as distinct_count,\n          count(distinct \"drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_gsns\") as distinct_count,\n          count(distinct \"drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_ordered') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_ordered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_ordered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_ordered\") as distinct_count,\n          count(distinct \"drug_ordered\") = count(*) as is_unique,\n          cast(min(\"drug_ordered\") as varchar) as min,\n          cast(max(\"drug_ordered\") as varchar) as max,\n          avg(\"drug_ordered\") as avg,\n          stddev_pop(\"drug_ordered\") as std_dev_population,\n          stddev_samp(\"drug_ordered\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price30') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price30\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price30\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price30\") as distinct_count,\n          count(distinct \"price30\") = count(*) as is_unique,\n          cast(min(\"price30\") as varchar) as min,\n          cast(max(\"price30\") as varchar) as max,\n          avg(\"price30\") as avg,\n          stddev_pop(\"price30\") as std_dev_population,\n          stddev_samp(\"price30\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price90') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price90\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price90\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price90\") as distinct_count,\n          count(distinct \"price90\") = count(*) as is_unique,\n          cast(min(\"price90\") as varchar) as min,\n          cast(max(\"price90\") as varchar) as max,\n          avg(\"price90\") as avg,\n          stddev_pop(\"price90\") as std_dev_population,\n          stddev_samp(\"price90\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_retail') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_retail\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_retail\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_retail\") as distinct_count,\n          count(distinct \"price_retail\") = count(*) as is_unique,\n          cast(min(\"price_retail\") as varchar) as min,\n          cast(max(\"price_retail\") as varchar) as max,\n          avg(\"price_retail\") as avg,\n          stddev_pop(\"price_retail\") as std_dev_population,\n          stddev_samp(\"price_retail\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_goodrx') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_goodrx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_goodrx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_goodrx\") as distinct_count,\n          count(distinct \"price_goodrx\") = count(*) as is_unique,\n          cast(min(\"price_goodrx\") as varchar) as min,\n          cast(max(\"price_goodrx\") as varchar) as max,\n          avg(\"price_goodrx\") as avg,\n          stddev_pop(\"price_goodrx\") as std_dev_population,\n          stddev_samp(\"price_goodrx\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_nadac') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_nadac\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_nadac\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_nadac\") as distinct_count,\n          count(distinct \"price_nadac\") = count(*) as is_unique,\n          cast(min(\"price_nadac\") as varchar) as min,\n          cast(max(\"price_nadac\") as varchar) as max,\n          avg(\"price_nadac\") as avg,\n          stddev_pop(\"price_nadac\") as std_dev_population,\n          stddev_samp(\"price_nadac\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_min') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_min\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_min\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_min\") as distinct_count,\n          count(distinct \"qty_min\") = count(*) as is_unique,\n          cast(min(\"qty_min\") as varchar) as min,\n          cast(max(\"qty_min\") as varchar) as max,\n          avg(\"qty_min\") as avg,\n          stddev_pop(\"qty_min\") as std_dev_population,\n          stddev_samp(\"qty_min\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_repack') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_repack\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_repack\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_repack\") as distinct_count,\n          count(distinct \"qty_repack\") = count(*) as is_unique,\n          cast(min(\"qty_repack\") as varchar) as min,\n          cast(max(\"qty_repack\") as varchar) as max,\n          avg(\"qty_repack\") as avg,\n          stddev_pop(\"qty_repack\") as std_dev_population,\n          stddev_samp(\"qty_repack\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_min') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_min\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_min\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_min\") as distinct_count,\n          count(distinct \"days_min\") = count(*) as is_unique,\n          cast(min(\"days_min\") as varchar) as min,\n          cast(max(\"days_min\") as varchar) as max,\n          avg(\"days_min\") as avg,\n          stddev_pop(\"days_min\") as std_dev_population,\n          stddev_samp(\"days_min\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_ndcs') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_ndcs\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_ndcs\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_ndcs\") as distinct_count,\n          count(distinct \"count_ndcs\") = count(*) as is_unique,\n          cast(min(\"count_ndcs\") as varchar) as min,\n          cast(max(\"count_ndcs\") as varchar) as max,\n          avg(\"count_ndcs\") as avg,\n          stddev_pop(\"count_ndcs\") as std_dev_population,\n          stddev_samp(\"count_ndcs\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('max_inventory') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"max_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"max_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"max_inventory\") as distinct_count,\n          count(distinct \"max_inventory\") = count(*) as is_unique,\n          cast(min(\"max_inventory\") as varchar) as min,\n          cast(max(\"max_inventory\") as varchar) as max,\n          avg(\"max_inventory\") as avg,\n          stddev_pop(\"max_inventory\") as std_dev_population,\n          stddev_samp(\"max_inventory\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('message_display') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"message_display\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"message_display\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"message_display\") as distinct_count,\n          count(distinct \"message_display\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('message_verified') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"message_verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"message_verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"message_verified\") as distinct_count,\n          count(distinct \"message_verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('message_destroyed') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"message_destroyed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"message_destroyed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"message_destroyed\") as distinct_count,\n          count(distinct \"message_destroyed\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"drugs_profile\""}, "model.smartpill.dw_clinic_groups_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"dw_clinic_groups\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.dw_clinic_groups"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "dw_clinic_groups_profile"], "unique_id": "model.smartpill.dw_clinic_groups_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/dw_clinic_groups_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/dw_clinic_groups_profile.sql", "name": "dw_clinic_groups_profile", "alias": "dw_clinic_groups_profile", "checksum": {"name": "sha256", "checksum": "162e464acb2cc538f9253ec29a0045455e22b8d835e461297688108667de258a"}, "tags": [], "refs": [["dw_clinic_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/dw_clinic_groups_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5564654, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"dw_clinic_groups\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('clinic_group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_group_id\") as distinct_count,\n          count(distinct \"clinic_group_id\") = count(*) as is_unique,\n          cast(min(\"clinic_group_id\") as varchar) as min,\n          cast(max(\"clinic_group_id\") as varchar) as max,\n          avg(\"clinic_group_id\") as avg,\n          stddev_pop(\"clinic_group_id\") as std_dev_population,\n          stddev_samp(\"clinic_group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_group_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_group_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_group_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_group_name\") as distinct_count,\n          count(distinct \"clinic_group_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_group_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_group_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_group_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_group_id_sf\") as distinct_count,\n          count(distinct \"clinic_group_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_group_domain') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_group_domain\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_group_domain\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_group_domain\") as distinct_count,\n          count(distinct \"clinic_group_domain\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"dw_clinic_groups_profile\""}, "model.smartpill.dw_clinics_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"dw_clinics\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.dw_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "dw_clinics_profile"], "unique_id": "model.smartpill.dw_clinics_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/dw_clinics_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/dw_clinics_profile.sql", "name": "dw_clinics_profile", "alias": "dw_clinics_profile", "checksum": {"name": "sha256", "checksum": "c507097d040bfcc497b66aa27a122a913aa9524bdd6c2cae566afd2c9ffb7fd5"}, "tags": [], "refs": [["dw_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/dw_clinics_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5532558, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"dw_clinics\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id\") as distinct_count,\n          count(distinct \"clinic_id\") = count(*) as is_unique,\n          cast(min(\"clinic_id\") as varchar) as min,\n          cast(max(\"clinic_id\") as varchar) as max,\n          avg(\"clinic_id\") as avg,\n          stddev_pop(\"clinic_id\") as std_dev_population,\n          stddev_samp(\"clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_group_id\") as distinct_count,\n          count(distinct \"clinic_group_id\") = count(*) as is_unique,\n          cast(min(\"clinic_group_id\") as varchar) as min,\n          cast(max(\"clinic_group_id\") as varchar) as max,\n          avg(\"clinic_group_id\") as avg,\n          stddev_pop(\"clinic_group_id\") as std_dev_population,\n          stddev_samp(\"clinic_group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_name\") as distinct_count,\n          count(distinct \"clinic_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_name_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_name_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_name_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_name_cp\") as distinct_count,\n          count(distinct \"clinic_name_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_address\") as distinct_count,\n          count(distinct \"clinic_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_street') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_street\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_street\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_street\") as distinct_count,\n          count(distinct \"clinic_street\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_city\") as distinct_count,\n          count(distinct \"clinic_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_state\") as distinct_count,\n          count(distinct \"clinic_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_zip\") as distinct_count,\n          count(distinct \"clinic_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_phone\") as distinct_count,\n          count(distinct \"clinic_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id_sf\") as distinct_count,\n          count(distinct \"clinic_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"dw_clinics_profile\""}, "model.smartpill.dw_providers_clinics_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"dw_providers_clinics\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.dw_providers_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "dw_providers_clinics_profile"], "unique_id": "model.smartpill.dw_providers_clinics_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/dw_providers_clinics_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/dw_providers_clinics_profile.sql", "name": "dw_providers_clinics_profile", "alias": "dw_providers_clinics_profile", "checksum": {"name": "sha256", "checksum": "d7a09f6782ee33271f6bb1297f7e479897bfcdede4c342450972f29cda386947"}, "tags": [], "refs": [["dw_providers_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/dw_providers_clinics_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5628767, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"dw_providers_clinics\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('provider_clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_clinic_id\") as distinct_count,\n          count(distinct \"provider_clinic_id\") = count(*) as is_unique,\n          cast(min(\"provider_clinic_id\") as varchar) as min,\n          cast(max(\"provider_clinic_id\") as varchar) as max,\n          avg(\"provider_clinic_id\") as avg,\n          stddev_pop(\"provider_clinic_id\") as std_dev_population,\n          stddev_samp(\"provider_clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id\") as distinct_count,\n          count(distinct \"clinic_id\") = count(*) as is_unique,\n          cast(min(\"clinic_id\") as varchar) as min,\n          cast(max(\"clinic_id\") as varchar) as max,\n          avg(\"clinic_id\") as avg,\n          stddev_pop(\"clinic_id\") as std_dev_population,\n          stddev_samp(\"clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_id\") as distinct_count,\n          count(distinct \"provider_id\") = count(*) as is_unique,\n          cast(min(\"provider_id\") as varchar) as min,\n          cast(max(\"provider_id\") as varchar) as max,\n          avg(\"provider_id\") as avg,\n          stddev_pop(\"provider_id\") as std_dev_population,\n          stddev_samp(\"provider_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('started_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"started_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"started_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"started_at\") as distinct_count,\n          count(distinct \"started_at\") = count(*) as is_unique,\n          cast(min(\"started_at\") as varchar) as min,\n          cast(max(\"started_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stopped_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stopped_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stopped_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stopped_at\") as distinct_count,\n          count(distinct \"stopped_at\") = count(*) as is_unique,\n          cast(min(\"stopped_at\") as varchar) as min,\n          cast(max(\"stopped_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"dw_providers_clinics_profile\""}, "model.smartpill.dw_providers_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"dw_providers\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.dw_providers"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "dw_providers_profile"], "unique_id": "model.smartpill.dw_providers_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/dw_providers_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/dw_providers_profile.sql", "name": "dw_providers_profile", "alias": "dw_providers_profile", "checksum": {"name": "sha256", "checksum": "d1effafbc6061f7440d46ae9c7a32426ede98660dc8fc69c4d5442588ce7b2cc"}, "tags": [], "refs": [["dw_providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/dw_providers_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5596793, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"dw_providers\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('provider_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_id\") as distinct_count,\n          count(distinct \"provider_id\") = count(*) as is_unique,\n          cast(min(\"provider_id\") as varchar) as min,\n          cast(max(\"provider_id\") as varchar) as max,\n          avg(\"provider_id\") as avg,\n          stddev_pop(\"provider_id\") as std_dev_population,\n          stddev_samp(\"provider_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_npi\") as distinct_count,\n          count(distinct \"provider_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_name\") as distinct_count,\n          count(distinct \"provider_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_phone\") as distinct_count,\n          count(distinct \"provider_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_id_sf\") as distinct_count,\n          count(distinct \"provider_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('default_clinic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"default_clinic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"default_clinic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"default_clinic\") as distinct_count,\n          count(distinct \"default_clinic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('default_clinic_imputed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"default_clinic_imputed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"default_clinic_imputed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"default_clinic_imputed_at\") as distinct_count,\n          count(distinct \"default_clinic_imputed_at\") = count(*) as is_unique,\n          cast(min(\"default_clinic_imputed_at\") as varchar) as min,\n          cast(max(\"default_clinic_imputed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"dw_providers_profile\""}, "model.smartpill.order_items_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"order_items\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.order_items"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "order_items_profile"], "unique_id": "model.smartpill.order_items_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/order_items_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/order_items_profile.sql", "name": "order_items_profile", "alias": "order_items_profile", "checksum": {"name": "sha256", "checksum": "222f1173c0670cf8665baa07d5f483acade1ac32f9da5f998787c490453fea8d"}, "tags": [], "refs": [["order_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/order_items_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5688403, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"order_items\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"invoice_number\") as distinct_count,\n          count(distinct \"invoice_number\") = count(*) as is_unique,\n          cast(min(\"invoice_number\") as varchar) as min,\n          cast(max(\"invoice_number\") as varchar) as max,\n          avg(\"invoice_number\") as avg,\n          stddev_pop(\"invoice_number\") as std_dev_population,\n          stddev_samp(\"invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_number\") as distinct_count,\n          count(distinct \"rx_number\") = count(*) as is_unique,\n          cast(min(\"rx_number\") as varchar) as min,\n          cast(max(\"rx_number\") as varchar) as max,\n          avg(\"rx_number\") as avg,\n          stddev_pop(\"rx_number\") as std_dev_population,\n          stddev_samp(\"rx_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('line_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"line_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"line_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"line_id\") as distinct_count,\n          count(distinct \"line_id\") = count(*) as is_unique,\n          cast(min(\"line_id\") as varchar) as min,\n          cast(max(\"line_id\") as varchar) as max,\n          avg(\"line_id\") as avg,\n          stddev_pop(\"line_id\") as std_dev_population,\n          stddev_samp(\"line_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('groups') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"groups\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"groups\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"groups\") as distinct_count,\n          count(distinct \"groups\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_dispensed_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_dispensed_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_dispensed_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_dispensed_id\") as distinct_count,\n          count(distinct \"rx_dispensed_id\") = count(*) as is_unique,\n          cast(min(\"rx_dispensed_id\") as varchar) as min,\n          cast(max(\"rx_dispensed_id\") as varchar) as max,\n          avg(\"rx_dispensed_id\") as avg,\n          stddev_pop(\"rx_dispensed_id\") as std_dev_population,\n          stddev_samp(\"rx_dispensed_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_level_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_level_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_level_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_level_initial\") as distinct_count,\n          count(distinct \"stock_level_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_keys_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_keys_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_keys_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_keys_initial\") as distinct_count,\n          count(distinct \"rx_message_keys_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_autofill_initial') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_autofill_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_autofill_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_autofill_initial\") as distinct_count,\n          count(distinct \"patient_autofill_initial\") = count(*) as is_unique,\n          cast(min(\"patient_autofill_initial\") as varchar) as min,\n          cast(max(\"patient_autofill_initial\") as varchar) as max,\n          avg(\"patient_autofill_initial\") as avg,\n          stddev_pop(\"patient_autofill_initial\") as std_dev_population,\n          stddev_samp(\"patient_autofill_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_autofill_initial') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_autofill_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_autofill_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_autofill_initial\") as distinct_count,\n          count(distinct \"rx_autofill_initial\") = count(*) as is_unique,\n          cast(min(\"rx_autofill_initial\") as varchar) as min,\n          cast(max(\"rx_autofill_initial\") as varchar) as max,\n          avg(\"rx_autofill_initial\") as avg,\n          stddev_pop(\"rx_autofill_initial\") as std_dev_population,\n          stddev_samp(\"rx_autofill_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_numbers_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_numbers_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_numbers_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_numbers_initial\") as distinct_count,\n          count(distinct \"rx_numbers_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('zscore_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"zscore_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"zscore_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"zscore_initial\") as distinct_count,\n          count(distinct \"zscore_initial\") = count(*) as is_unique,\n          cast(min(\"zscore_initial\") as varchar) as min,\n          cast(max(\"zscore_initial\") as varchar) as max,\n          avg(\"zscore_initial\") as avg,\n          stddev_pop(\"zscore_initial\") as std_dev_population,\n          stddev_samp(\"zscore_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_dispensed_default\") as distinct_count,\n          count(distinct \"refills_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"refills_dispensed_default\") as varchar) as min,\n          cast(max(\"refills_dispensed_default\") as varchar) as max,\n          avg(\"refills_dispensed_default\") as avg,\n          stddev_pop(\"refills_dispensed_default\") as std_dev_population,\n          stddev_samp(\"refills_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_dispensed_actual\") as distinct_count,\n          count(distinct \"refills_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"refills_dispensed_actual\") as varchar) as min,\n          cast(max(\"refills_dispensed_actual\") as varchar) as max,\n          avg(\"refills_dispensed_actual\") as avg,\n          stddev_pop(\"refills_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"refills_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_dispensed_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_dispensed_default\") as distinct_count,\n          count(distinct \"days_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"days_dispensed_default\") as varchar) as min,\n          cast(max(\"days_dispensed_default\") as varchar) as max,\n          avg(\"days_dispensed_default\") as avg,\n          stddev_pop(\"days_dispensed_default\") as std_dev_population,\n          stddev_samp(\"days_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_dispensed_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_dispensed_actual\") as distinct_count,\n          count(distinct \"days_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"days_dispensed_actual\") as varchar) as min,\n          cast(max(\"days_dispensed_actual\") as varchar) as max,\n          avg(\"days_dispensed_actual\") as avg,\n          stddev_pop(\"days_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"days_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_dispensed_default\") as distinct_count,\n          count(distinct \"qty_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"qty_dispensed_default\") as varchar) as min,\n          cast(max(\"qty_dispensed_default\") as varchar) as max,\n          avg(\"qty_dispensed_default\") as avg,\n          stddev_pop(\"qty_dispensed_default\") as std_dev_population,\n          stddev_samp(\"qty_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_dispensed_actual\") as distinct_count,\n          count(distinct \"qty_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"qty_dispensed_actual\") as varchar) as min,\n          cast(max(\"qty_dispensed_actual\") as varchar) as max,\n          avg(\"qty_dispensed_actual\") as avg,\n          stddev_pop(\"qty_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"qty_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_dispensed_default\") as distinct_count,\n          count(distinct \"price_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"price_dispensed_default\") as varchar) as min,\n          cast(max(\"price_dispensed_default\") as varchar) as max,\n          avg(\"price_dispensed_default\") as avg,\n          stddev_pop(\"price_dispensed_default\") as std_dev_population,\n          stddev_samp(\"price_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('price_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"price_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"price_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"price_dispensed_actual\") as distinct_count,\n          count(distinct \"price_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"price_dispensed_actual\") as varchar) as min,\n          cast(max(\"price_dispensed_actual\") as varchar) as max,\n          avg(\"price_dispensed_actual\") as avg,\n          stddev_pop(\"price_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"price_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('unit_price_retail_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"unit_price_retail_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"unit_price_retail_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"unit_price_retail_initial\") as distinct_count,\n          count(distinct \"unit_price_retail_initial\") = count(*) as is_unique,\n          cast(min(\"unit_price_retail_initial\") as varchar) as min,\n          cast(max(\"unit_price_retail_initial\") as varchar) as max,\n          avg(\"unit_price_retail_initial\") as avg,\n          stddev_pop(\"unit_price_retail_initial\") as std_dev_population,\n          stddev_samp(\"unit_price_retail_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('unit_price_goodrx_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"unit_price_goodrx_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"unit_price_goodrx_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"unit_price_goodrx_initial\") as distinct_count,\n          count(distinct \"unit_price_goodrx_initial\") = count(*) as is_unique,\n          cast(min(\"unit_price_goodrx_initial\") as varchar) as min,\n          cast(max(\"unit_price_goodrx_initial\") as varchar) as max,\n          avg(\"unit_price_goodrx_initial\") as avg,\n          stddev_pop(\"unit_price_goodrx_initial\") as std_dev_population,\n          stddev_samp(\"unit_price_goodrx_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('unit_price_nadac_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"unit_price_nadac_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"unit_price_nadac_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"unit_price_nadac_initial\") as distinct_count,\n          count(distinct \"unit_price_nadac_initial\") = count(*) as is_unique,\n          cast(min(\"unit_price_nadac_initial\") as varchar) as min,\n          cast(max(\"unit_price_nadac_initial\") as varchar) as max,\n          avg(\"unit_price_nadac_initial\") as avg,\n          stddev_pop(\"unit_price_nadac_initial\") as std_dev_population,\n          stddev_samp(\"unit_price_nadac_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('unit_price_awp_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"unit_price_awp_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"unit_price_awp_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"unit_price_awp_initial\") as distinct_count,\n          count(distinct \"unit_price_awp_initial\") = count(*) as is_unique,\n          cast(min(\"unit_price_awp_initial\") as varchar) as min,\n          cast(max(\"unit_price_awp_initial\") as varchar) as max,\n          avg(\"unit_price_awp_initial\") as avg,\n          stddev_pop(\"unit_price_awp_initial\") as std_dev_population,\n          stddev_samp(\"unit_price_awp_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_pended_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_pended_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_pended_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_pended_total\") as distinct_count,\n          count(distinct \"qty_pended_total\") = count(*) as is_unique,\n          cast(min(\"qty_pended_total\") as varchar) as min,\n          cast(max(\"qty_pended_total\") as varchar) as max,\n          avg(\"qty_pended_total\") as avg,\n          stddev_pop(\"qty_pended_total\") as std_dev_population,\n          stddev_samp(\"qty_pended_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_pended_repacks') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_pended_repacks\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_pended_repacks\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_pended_repacks\") as distinct_count,\n          count(distinct \"qty_pended_repacks\") = count(*) as is_unique,\n          cast(min(\"qty_pended_repacks\") as varchar) as min,\n          cast(max(\"qty_pended_repacks\") as varchar) as max,\n          avg(\"qty_pended_repacks\") as avg,\n          stddev_pop(\"qty_pended_repacks\") as std_dev_population,\n          stddev_samp(\"qty_pended_repacks\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_pended_total') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_pended_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_pended_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_pended_total\") as distinct_count,\n          count(distinct \"count_pended_total\") = count(*) as is_unique,\n          cast(min(\"count_pended_total\") as varchar) as min,\n          cast(max(\"count_pended_total\") as varchar) as max,\n          avg(\"count_pended_total\") as avg,\n          stddev_pop(\"count_pended_total\") as std_dev_population,\n          stddev_samp(\"count_pended_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_pended_repacks') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_pended_repacks\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_pended_repacks\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_pended_repacks\") as distinct_count,\n          count(distinct \"count_pended_repacks\") = count(*) as is_unique,\n          cast(min(\"count_pended_repacks\") as varchar) as min,\n          cast(max(\"count_pended_repacks\") as varchar) as max,\n          avg(\"count_pended_repacks\") as avg,\n          stddev_pop(\"count_pended_repacks\") as std_dev_population,\n          stddev_samp(\"count_pended_repacks\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_message_keys') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_message_keys\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_message_keys\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_message_keys\") as distinct_count,\n          count(distinct \"item_message_keys\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_message_text') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_message_text\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_message_text\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_message_text\") as distinct_count,\n          count(distinct \"item_message_text\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_type\") as distinct_count,\n          count(distinct \"item_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_added_by') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_added_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_added_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_added_by\") as distinct_count,\n          count(distinct \"item_added_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_date_added\") as distinct_count,\n          count(distinct \"item_date_added\") = count(*) as is_unique,\n          cast(min(\"item_date_added\") as varchar) as min,\n          cast(max(\"item_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_date_changed\") as distinct_count,\n          count(distinct \"item_date_changed\") = count(*) as is_unique,\n          cast(min(\"item_date_changed\") as varchar) as min,\n          cast(max(\"item_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_last\") as distinct_count,\n          count(distinct \"refill_date_last\") = count(*) as is_unique,\n          cast(min(\"refill_date_last\") as varchar) as min,\n          cast(max(\"refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_manual\") as distinct_count,\n          count(distinct \"refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"refill_date_manual\") as varchar) as min,\n          cast(max(\"refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_default') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_default\") as distinct_count,\n          count(distinct \"refill_date_default\") = count(*) as is_unique,\n          cast(min(\"refill_date_default\") as varchar) as min,\n          cast(max(\"refill_date_default\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('add_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"add_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"add_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"add_user_id\") as distinct_count,\n          count(distinct \"add_user_id\") = count(*) as is_unique,\n          cast(min(\"add_user_id\") as varchar) as min,\n          cast(max(\"add_user_id\") as varchar) as max,\n          avg(\"add_user_id\") as avg,\n          stddev_pop(\"add_user_id\") as std_dev_population,\n          stddev_samp(\"add_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('chg_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"chg_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"chg_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"chg_user_id\") as distinct_count,\n          count(distinct \"chg_user_id\") = count(*) as is_unique,\n          cast(min(\"chg_user_id\") as varchar) as min,\n          cast(max(\"chg_user_id\") as varchar) as max,\n          avg(\"chg_user_id\") as avg,\n          stddev_pop(\"chg_user_id\") as std_dev_population,\n          stddev_samp(\"chg_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_lines') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_lines\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_lines\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_lines\") as distinct_count,\n          count(distinct \"count_lines\") = count(*) as is_unique,\n          cast(min(\"count_lines\") as varchar) as min,\n          cast(max(\"count_lines\") as varchar) as max,\n          avg(\"count_lines\") as avg,\n          stddev_pop(\"count_lines\") as std_dev_population,\n          stddev_samp(\"count_lines\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic_pended') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic_pended\") as distinct_count,\n          count(distinct \"drug_generic_pended\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_name\") as distinct_count,\n          count(distinct \"drug_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('repacked_by') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"repacked_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"repacked_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"repacked_by\") as distinct_count,\n          count(distinct \"repacked_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_and_message_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_and_message_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_and_message_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_and_message_updated_at\") as distinct_count,\n          count(distinct \"days_and_message_updated_at\") = count(*) as is_unique,\n          cast(min(\"days_and_message_updated_at\") as varchar) as min,\n          cast(max(\"days_and_message_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_and_message_initial_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_and_message_initial_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_and_message_initial_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_and_message_initial_at\") as distinct_count,\n          count(distinct \"days_and_message_initial_at\") = count(*) as is_unique,\n          cast(min(\"days_and_message_initial_at\") as varchar) as min,\n          cast(max(\"days_and_message_initial_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('days_pended') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"days_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"days_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"days_pended\") as distinct_count,\n          count(distinct \"days_pended\") = count(*) as is_unique,\n          cast(min(\"days_pended\") as varchar) as min,\n          cast(max(\"days_pended\") as varchar) as max,\n          avg(\"days_pended\") as avg,\n          stddev_pop(\"days_pended\") as std_dev_population,\n          stddev_samp(\"days_pended\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_per_day_pended') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_per_day_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_per_day_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_per_day_pended\") as distinct_count,\n          count(distinct \"qty_per_day_pended\") = count(*) as is_unique,\n          cast(min(\"qty_per_day_pended\") as varchar) as min,\n          cast(max(\"qty_per_day_pended\") as varchar) as max,\n          avg(\"qty_per_day_pended\") as avg,\n          stddev_pop(\"qty_per_day_pended\") as std_dev_population,\n          stddev_samp(\"qty_per_day_pended\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('unpended_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"unpended_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"unpended_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"unpended_at\") as distinct_count,\n          count(distinct \"unpended_at\") = count(*) as is_unique,\n          cast(min(\"unpended_at\") as varchar) as min,\n          cast(max(\"unpended_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_initial_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_initial_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_initial_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_initial_at\") as distinct_count,\n          count(distinct \"pend_initial_at\") = count(*) as is_unique,\n          cast(min(\"pend_initial_at\") as varchar) as min,\n          cast(max(\"pend_initial_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_updated_at\") as distinct_count,\n          count(distinct \"pend_updated_at\") = count(*) as is_unique,\n          cast(min(\"pend_updated_at\") as varchar) as min,\n          cast(max(\"pend_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_ab_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_ab_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_ab_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_ab_id\") as distinct_count,\n          count(distinct \"_airbyte_ab_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('ndc_pended') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"ndc_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"ndc_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"ndc_pended\") as distinct_count,\n          count(distinct \"ndc_pended\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          55 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('filled_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"filled_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"filled_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"filled_at\") as distinct_count,\n          count(distinct \"filled_at\") = count(*) as is_unique,\n          cast(min(\"filled_at\") as varchar) as min,\n          cast(max(\"filled_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          56 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_failed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_failed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_failed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_failed_at\") as distinct_count,\n          count(distinct \"pend_failed_at\") = count(*) as is_unique,\n          cast(min(\"pend_failed_at\") as varchar) as min,\n          cast(max(\"pend_failed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          57 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('filled_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"filled_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"filled_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"filled_by\") as distinct_count,\n          count(distinct \"filled_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          58 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_retried_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_retried_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_retried_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_retried_by\") as distinct_count,\n          count(distinct \"pend_retried_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          59 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"status\") as distinct_count,\n          count(distinct \"status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          60 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_retried_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_retried_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_retried_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_retried_days\") as distinct_count,\n          count(distinct \"pend_retried_days\") = count(*) as is_unique,\n          cast(min(\"pend_retried_days\") as varchar) as min,\n          cast(max(\"pend_retried_days\") as varchar) as max,\n          avg(\"pend_retried_days\") as avg,\n          stddev_pop(\"pend_retried_days\") as std_dev_population,\n          stddev_samp(\"pend_retried_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          61 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_retried_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_retried_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_retried_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_retried_at\") as distinct_count,\n          count(distinct \"pend_retried_at\") = count(*) as is_unique,\n          cast(min(\"pend_retried_at\") as varchar) as min,\n          cast(max(\"pend_retried_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          62 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"order_items_profile\""}, "model.smartpill.orders_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"orders\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.orders"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "orders_profile"], "unique_id": "model.smartpill.orders_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/orders_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/orders_profile.sql", "name": "orders_profile", "alias": "orders_profile", "checksum": {"name": "sha256", "checksum": "f99ebec0b6ac85d31f678107d657fbd87f914a4c45b52900e1697d2a6fb54df4"}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/orders_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5720544, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"orders\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"invoice_number\") as distinct_count,\n          count(distinct \"invoice_number\") = count(*) as is_unique,\n          cast(min(\"invoice_number\") as varchar) as min,\n          cast(max(\"invoice_number\") as varchar) as max,\n          avg(\"invoice_number\") as avg,\n          stddev_pop(\"invoice_number\") as std_dev_population,\n          stddev_samp(\"invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_wc') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_wc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_wc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_wc\") as distinct_count,\n          count(distinct \"patient_id_wc\") = count(*) as is_unique,\n          cast(min(\"patient_id_wc\") as varchar) as min,\n          cast(max(\"patient_id_wc\") as varchar) as max,\n          avg(\"patient_id_wc\") as avg,\n          stddev_pop(\"patient_id_wc\") as std_dev_population,\n          stddev_samp(\"patient_id_wc\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_items') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_items\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_items\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_items\") as distinct_count,\n          count(distinct \"count_items\") = count(*) as is_unique,\n          cast(min(\"count_items\") as varchar) as min,\n          cast(max(\"count_items\") as varchar) as max,\n          avg(\"count_items\") as avg,\n          stddev_pop(\"count_items\") as std_dev_population,\n          stddev_samp(\"count_items\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_filled') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_filled\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_filled\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_filled\") as distinct_count,\n          count(distinct \"count_filled\") = count(*) as is_unique,\n          cast(min(\"count_filled\") as varchar) as min,\n          cast(max(\"count_filled\") as varchar) as max,\n          avg(\"count_filled\") as avg,\n          stddev_pop(\"count_filled\") as std_dev_population,\n          stddev_samp(\"count_filled\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('count_nofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"count_nofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"count_nofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"count_nofill\") as distinct_count,\n          count(distinct \"count_nofill\") = count(*) as is_unique,\n          cast(min(\"count_nofill\") as varchar) as min,\n          cast(max(\"count_nofill\") as varchar) as max,\n          avg(\"count_nofill\") as avg,\n          stddev_pop(\"count_nofill\") as std_dev_population,\n          stddev_samp(\"count_nofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('priority') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"priority\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"priority\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"priority\") as distinct_count,\n          count(distinct \"priority\") = count(*) as is_unique,\n          cast(min(\"priority\") as varchar) as min,\n          cast(max(\"priority\") as varchar) as max,\n          avg(\"priority\") as avg,\n          stddev_pop(\"priority\") as std_dev_population,\n          stddev_samp(\"priority\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_source') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_source\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_source\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_source\") as distinct_count,\n          count(distinct \"order_source\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_cp\") as distinct_count,\n          count(distinct \"order_stage_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_wc') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_wc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_wc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_wc\") as distinct_count,\n          count(distinct \"order_stage_wc\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_status') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_status\") as distinct_count,\n          count(distinct \"order_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_address1') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_address1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_address1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_address1\") as distinct_count,\n          count(distinct \"order_address1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_address2') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_address2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_address2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_address2\") as distinct_count,\n          count(distinct \"order_address2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('invoice_doc_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"invoice_doc_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"invoice_doc_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"invoice_doc_id\") as distinct_count,\n          count(distinct \"invoice_doc_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('tracking_number') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"tracking_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"tracking_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"tracking_number\") as distinct_count,\n          count(distinct \"tracking_number\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_total_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_total_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_total_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_total_default\") as distinct_count,\n          count(distinct \"payment_total_default\") = count(*) as is_unique,\n          cast(min(\"payment_total_default\") as varchar) as min,\n          cast(max(\"payment_total_default\") as varchar) as max,\n          avg(\"payment_total_default\") as avg,\n          stddev_pop(\"payment_total_default\") as std_dev_population,\n          stddev_samp(\"payment_total_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_total_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_total_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_total_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_total_actual\") as distinct_count,\n          count(distinct \"payment_total_actual\") = count(*) as is_unique,\n          cast(min(\"payment_total_actual\") as varchar) as min,\n          cast(max(\"payment_total_actual\") as varchar) as max,\n          avg(\"payment_total_actual\") as avg,\n          stddev_pop(\"payment_total_actual\") as std_dev_population,\n          stddev_samp(\"payment_total_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_fee_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_fee_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_fee_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_fee_default\") as distinct_count,\n          count(distinct \"payment_fee_default\") = count(*) as is_unique,\n          cast(min(\"payment_fee_default\") as varchar) as min,\n          cast(max(\"payment_fee_default\") as varchar) as max,\n          avg(\"payment_fee_default\") as avg,\n          stddev_pop(\"payment_fee_default\") as std_dev_population,\n          stddev_samp(\"payment_fee_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_fee_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_fee_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_fee_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_fee_actual\") as distinct_count,\n          count(distinct \"payment_fee_actual\") = count(*) as is_unique,\n          cast(min(\"payment_fee_actual\") as varchar) as min,\n          cast(max(\"payment_fee_actual\") as varchar) as max,\n          avg(\"payment_fee_actual\") as avg,\n          stddev_pop(\"payment_fee_actual\") as std_dev_population,\n          stddev_samp(\"payment_fee_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_due_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_due_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_due_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_due_default\") as distinct_count,\n          count(distinct \"payment_due_default\") = count(*) as is_unique,\n          cast(min(\"payment_due_default\") as varchar) as min,\n          cast(max(\"payment_due_default\") as varchar) as max,\n          avg(\"payment_due_default\") as avg,\n          stddev_pop(\"payment_due_default\") as std_dev_population,\n          stddev_samp(\"payment_due_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_due_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_due_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_due_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_due_actual\") as distinct_count,\n          count(distinct \"payment_due_actual\") = count(*) as is_unique,\n          cast(min(\"payment_due_actual\") as varchar) as min,\n          cast(max(\"payment_due_actual\") as varchar) as max,\n          avg(\"payment_due_actual\") as avg,\n          stddev_pop(\"payment_due_actual\") as std_dev_population,\n          stddev_samp(\"payment_due_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_default_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_default_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_default_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_default_updated_at\") as distinct_count,\n          count(distinct \"payment_default_updated_at\") = count(*) as is_unique,\n          cast(min(\"payment_default_updated_at\") as varchar) as min,\n          cast(max(\"payment_default_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_actual_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_actual_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_actual_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_actual_updated_at\") as distinct_count,\n          count(distinct \"payment_actual_updated_at\") = count(*) as is_unique,\n          cast(min(\"payment_actual_updated_at\") as varchar) as min,\n          cast(max(\"payment_actual_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_date_autopay') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_date_autopay\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_date_autopay\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_date_autopay\") as distinct_count,\n          count(distinct \"payment_date_autopay\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_method_actual') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_method_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_method_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_method_actual\") as distinct_count,\n          count(distinct \"payment_method_actual\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_coupon\") as distinct_count,\n          count(distinct \"order_payment_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_note') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_note\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_note\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_note\") as distinct_count,\n          count(distinct \"order_note\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rph_check') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rph_check\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rph_check\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rph_check\") as distinct_count,\n          count(distinct \"rph_check\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('tech_fill') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"tech_fill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"tech_fill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"tech_fill\") as distinct_count,\n          count(distinct \"tech_fill\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_returned') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_returned\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_returned\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_returned\") as distinct_count,\n          count(distinct \"order_date_returned\") = count(*) as is_unique,\n          cast(min(\"order_date_returned\") as varchar) as min,\n          cast(max(\"order_date_returned\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_shipped') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_shipped\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_shipped\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_shipped\") as distinct_count,\n          count(distinct \"order_date_shipped\") = count(*) as is_unique,\n          cast(min(\"order_date_shipped\") as varchar) as min,\n          cast(max(\"order_date_shipped\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_dispensed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_dispensed\") as distinct_count,\n          count(distinct \"order_date_dispensed\") = count(*) as is_unique,\n          cast(min(\"order_date_dispensed\") as varchar) as min,\n          cast(max(\"order_date_dispensed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_added\") as distinct_count,\n          count(distinct \"order_date_added\") = count(*) as is_unique,\n          cast(min(\"order_date_added\") as varchar) as min,\n          cast(max(\"order_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_changed\") as distinct_count,\n          count(distinct \"order_date_changed\") = count(*) as is_unique,\n          cast(min(\"order_date_changed\") as varchar) as min,\n          cast(max(\"order_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_delivered') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_delivered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_delivered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_delivered\") as distinct_count,\n          count(distinct \"order_date_delivered\") = count(*) as is_unique,\n          cast(min(\"order_date_delivered\") as varchar) as min,\n          cast(max(\"order_date_delivered\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expedited') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expedited\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expedited\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expedited\") as distinct_count,\n          count(distinct \"order_date_expedited\") = count(*) as is_unique,\n          cast(min(\"order_date_expedited\") as varchar) as min,\n          cast(max(\"order_date_expedited\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expected') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expected\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expected\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expected\") as distinct_count,\n          count(distinct \"order_date_expected\") = count(*) as is_unique,\n          cast(min(\"order_date_expected\") as varchar) as min,\n          cast(max(\"order_date_expected\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expected_initial') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expected_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expected_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expected_initial\") as distinct_count,\n          count(distinct \"order_date_expected_initial\") = count(*) as is_unique,\n          cast(min(\"order_date_expected_initial\") as varchar) as min,\n          cast(max(\"order_date_expected_initial\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_failed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_failed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_failed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_failed\") as distinct_count,\n          count(distinct \"order_date_failed\") = count(*) as is_unique,\n          cast(min(\"order_date_failed\") as varchar) as min,\n          cast(max(\"order_date_failed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_updated') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_updated\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_updated\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_updated\") as distinct_count,\n          count(distinct \"order_date_updated\") = count(*) as is_unique,\n          cast(min(\"order_date_updated\") as varchar) as min,\n          cast(max(\"order_date_updated\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_wc_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_wc_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_wc_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_wc_updated_at\") as distinct_count,\n          count(distinct \"order_stage_wc_updated_at\") = count(*) as is_unique,\n          cast(min(\"order_stage_wc_updated_at\") as varchar) as min,\n          cast(max(\"order_stage_wc_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_city\") as distinct_count,\n          count(distinct \"order_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_state\") as distinct_count,\n          count(distinct \"order_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_zip\") as distinct_count,\n          count(distinct \"order_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('add_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"add_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"add_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"add_user_id\") as distinct_count,\n          count(distinct \"add_user_id\") = count(*) as is_unique,\n          cast(min(\"add_user_id\") as varchar) as min,\n          cast(max(\"add_user_id\") as varchar) as max,\n          avg(\"add_user_id\") as avg,\n          stddev_pop(\"add_user_id\") as std_dev_population,\n          stddev_samp(\"add_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('chg_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"chg_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"chg_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"chg_user_id\") as distinct_count,\n          count(distinct \"chg_user_id\") = count(*) as is_unique,\n          cast(min(\"chg_user_id\") as varchar) as min,\n          cast(max(\"chg_user_id\") as varchar) as max,\n          avg(\"chg_user_id\") as avg,\n          stddev_pop(\"chg_user_id\") as std_dev_population,\n          stddev_samp(\"chg_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('shipping_speed') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"shipping_speed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"shipping_speed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"shipping_speed\") as distinct_count,\n          count(distinct \"shipping_speed\") = count(*) as is_unique,\n          cast(min(\"shipping_speed\") as varchar) as min,\n          cast(max(\"shipping_speed\") as varchar) as max,\n          avg(\"shipping_speed\") as avg,\n          stddev_pop(\"shipping_speed\") as std_dev_population,\n          stddev_samp(\"shipping_speed\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_ab_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_ab_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_ab_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_ab_id\") as distinct_count,\n          count(distinct \"_airbyte_ab_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_additions_checked_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_additions_checked_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_additions_checked_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_additions_checked_at\") as distinct_count,\n          count(distinct \"rx_group_additions_checked_at\") = count(*) as is_unique,\n          cast(min(\"rx_group_additions_checked_at\") as varchar) as min,\n          cast(max(\"rx_group_additions_checked_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_removals_checked_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_removals_checked_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_removals_checked_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_removals_checked_at\") as distinct_count,\n          count(distinct \"rx_group_removals_checked_at\") = count(*) as is_unique,\n          cast(min(\"rx_group_removals_checked_at\") as varchar) as min,\n          cast(max(\"rx_group_removals_checked_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"status\") as distinct_count,\n          count(distinct \"status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"orders_profile\""}, "model.smartpill.patients_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"patients\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.patients"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "patients_profile"], "unique_id": "model.smartpill.patients_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/patients_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/patients_profile.sql", "name": "patients_profile", "alias": "patients_profile", "checksum": {"name": "sha256", "checksum": "8095b8c4604d90fa66837292f06087df5ea342a69ea830eb6b7ac521a204fd12"}, "tags": [], "refs": [["patients"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/patients_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5848327, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"patients\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('first_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"first_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"first_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"first_name\") as distinct_count,\n          count(distinct \"first_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('last_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"last_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"last_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"last_name\") as distinct_count,\n          count(distinct \"last_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('birth_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"birth_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"birth_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"birth_date\") as distinct_count,\n          count(distinct \"birth_date\") = count(*) as is_unique,\n          cast(min(\"birth_date\") as varchar) as min,\n          cast(max(\"birth_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('language') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"language\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"language\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"language\") as distinct_count,\n          count(distinct \"language\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('phone1') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"phone1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"phone1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"phone1\") as distinct_count,\n          count(distinct \"phone1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('phone2') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"phone2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"phone2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"phone2\") as distinct_count,\n          count(distinct \"phone2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_address1') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_address1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_address1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_address1\") as distinct_count,\n          count(distinct \"patient_address1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_address2') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_address2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_address2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_address2\") as distinct_count,\n          count(distinct \"patient_address2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_city\") as distinct_count,\n          count(distinct \"patient_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_state\") as distinct_count,\n          count(distinct \"patient_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_zip\") as distinct_count,\n          count(distinct \"patient_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_card_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_card_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_card_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_card_type\") as distinct_count,\n          count(distinct \"payment_card_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_card_last4') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_card_last4\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_card_last4\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_card_last4\") as distinct_count,\n          count(distinct \"payment_card_last4\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_card_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_card_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_card_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_card_date_expired\") as distinct_count,\n          count(distinct \"payment_card_date_expired\") = count(*) as is_unique,\n          cast(min(\"payment_card_date_expired\") as varchar) as min,\n          cast(max(\"payment_card_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_card_autopay') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_card_autopay\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_card_autopay\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_card_autopay\") as distinct_count,\n          count(distinct \"payment_card_autopay\") = count(*) as is_unique,\n          cast(min(\"payment_card_autopay\") as varchar) as min,\n          cast(max(\"payment_card_autopay\") as varchar) as max,\n          avg(\"payment_card_autopay\") as avg,\n          stddev_pop(\"payment_card_autopay\") as std_dev_population,\n          stddev_samp(\"payment_card_autopay\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_method_default') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_method_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_method_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_method_default\") as distinct_count,\n          count(distinct \"payment_method_default\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('payment_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"payment_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"payment_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"payment_coupon\") as distinct_count,\n          count(distinct \"payment_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('tracking_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"tracking_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"tracking_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"tracking_coupon\") as distinct_count,\n          count(distinct \"tracking_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_registered') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_registered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_registered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_registered\") as distinct_count,\n          count(distinct \"patient_date_registered\") = count(*) as is_unique,\n          cast(min(\"patient_date_registered\") as varchar) as min,\n          cast(max(\"patient_date_registered\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_reviewed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_reviewed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_reviewed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_reviewed\") as distinct_count,\n          count(distinct \"patient_date_reviewed\") = count(*) as is_unique,\n          cast(min(\"patient_date_reviewed\") as varchar) as min,\n          cast(max(\"patient_date_reviewed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_added\") as distinct_count,\n          count(distinct \"patient_date_added\") = count(*) as is_unique,\n          cast(min(\"patient_date_added\") as varchar) as min,\n          cast(max(\"patient_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_changed\") as distinct_count,\n          count(distinct \"patient_date_changed\") = count(*) as is_unique,\n          cast(min(\"patient_date_changed\") as varchar) as min,\n          cast(max(\"patient_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_rx_received') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_rx_received\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_rx_received\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_rx_received\") as distinct_count,\n          count(distinct \"patient_date_first_rx_received\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_rx_received\") as varchar) as min,\n          cast(max(\"patient_date_first_rx_received\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_dispensed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_dispensed\") as distinct_count,\n          count(distinct \"patient_date_first_dispensed\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_dispensed\") as varchar) as min,\n          cast(max(\"patient_date_first_dispensed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_expected_by') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_expected_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_expected_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_expected_by\") as distinct_count,\n          count(distinct \"patient_date_first_expected_by\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_expected_by\") as varchar) as min,\n          cast(max(\"patient_date_first_expected_by\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_used') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_used\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_used\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_used\") as distinct_count,\n          count(distinct \"refills_used\") = count(*) as is_unique,\n          cast(min(\"refills_used\") as varchar) as min,\n          cast(max(\"refills_used\") as varchar) as max,\n          avg(\"refills_used\") as avg,\n          stddev_pop(\"refills_used\") as std_dev_population,\n          stddev_samp(\"refills_used\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_npi\") as distinct_count,\n          count(distinct \"pharmacy_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_name\") as distinct_count,\n          count(distinct \"pharmacy_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_phone\") as distinct_count,\n          count(distinct \"pharmacy_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_fax') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_fax\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_fax\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_fax\") as distinct_count,\n          count(distinct \"pharmacy_fax\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_address\") as distinct_count,\n          count(distinct \"pharmacy_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_inactive') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_inactive\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_inactive\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_inactive\") as distinct_count,\n          count(distinct \"patient_inactive\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_deleted') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_deleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_deleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_deleted\") as distinct_count,\n          count(distinct \"patient_deleted\") = count(*) as is_unique,\n          cast(min(\"patient_deleted\") as varchar) as min,\n          cast(max(\"patient_deleted\") as varchar) as max,\n          avg(\"patient_deleted\") as avg,\n          stddev_pop(\"patient_deleted\") as std_dev_population,\n          stddev_samp(\"patient_deleted\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_wc') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_wc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_wc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_wc\") as distinct_count,\n          count(distinct \"patient_id_wc\") = count(*) as is_unique,\n          cast(min(\"patient_id_wc\") as varchar) as min,\n          cast(max(\"patient_id_wc\") as varchar) as max,\n          avg(\"patient_id_wc\") as avg,\n          stddev_pop(\"patient_id_wc\") as std_dev_population,\n          stddev_samp(\"patient_id_wc\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('email') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"email\") as distinct_count,\n          count(distinct \"email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_autofill\") as distinct_count,\n          count(distinct \"patient_autofill\") = count(*) as is_unique,\n          cast(min(\"patient_autofill\") as varchar) as min,\n          cast(max(\"patient_autofill\") as varchar) as max,\n          avg(\"patient_autofill\") as avg,\n          stddev_pop(\"patient_autofill\") as std_dev_population,\n          stddev_samp(\"patient_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_note') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_note\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_note\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_note\") as distinct_count,\n          count(distinct \"patient_note\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('initial_invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"initial_invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"initial_invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"initial_invoice_number\") as distinct_count,\n          count(distinct \"initial_invoice_number\") = count(*) as is_unique,\n          cast(min(\"initial_invoice_number\") as varchar) as min,\n          cast(max(\"initial_invoice_number\") as varchar) as max,\n          avg(\"initial_invoice_number\") as avg,\n          stddev_pop(\"initial_invoice_number\") as std_dev_population,\n          stddev_samp(\"initial_invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_none') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_none\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_none\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_none\") as distinct_count,\n          count(distinct \"allergies_none\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_cephalosporins') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_cephalosporins\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_cephalosporins\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_cephalosporins\") as distinct_count,\n          count(distinct \"allergies_cephalosporins\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_sulfa') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_sulfa\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_sulfa\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_sulfa\") as distinct_count,\n          count(distinct \"allergies_sulfa\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_aspirin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_aspirin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_aspirin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_aspirin\") as distinct_count,\n          count(distinct \"allergies_aspirin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_penicillin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_penicillin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_penicillin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_penicillin\") as distinct_count,\n          count(distinct \"allergies_penicillin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_erythromycin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_erythromycin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_erythromycin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_erythromycin\") as distinct_count,\n          count(distinct \"allergies_erythromycin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_codeine') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_codeine\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_codeine\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_codeine\") as distinct_count,\n          count(distinct \"allergies_codeine\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_nsaids') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_nsaids\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_nsaids\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_nsaids\") as distinct_count,\n          count(distinct \"allergies_nsaids\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_salicylates') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_salicylates\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_salicylates\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_salicylates\") as distinct_count,\n          count(distinct \"allergies_salicylates\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_azithromycin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_azithromycin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_azithromycin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_azithromycin\") as distinct_count,\n          count(distinct \"allergies_azithromycin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_amoxicillin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_amoxicillin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_amoxicillin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_amoxicillin\") as distinct_count,\n          count(distinct \"allergies_amoxicillin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_tetracycline') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_tetracycline\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_tetracycline\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_tetracycline\") as distinct_count,\n          count(distinct \"allergies_tetracycline\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('allergies_other') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"allergies_other\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"allergies_other\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"allergies_other\") as distinct_count,\n          count(distinct \"allergies_other\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('medications_other') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"medications_other\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"medications_other\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"medications_other\") as distinct_count,\n          count(distinct \"medications_other\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_updated') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_updated\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_updated\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_updated\") as distinct_count,\n          count(distinct \"patient_date_updated\") = count(*) as is_unique,\n          cast(min(\"patient_date_updated\") as varchar) as min,\n          cast(max(\"patient_date_updated\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('third_party_id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"third_party_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"third_party_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"third_party_id\") as distinct_count,\n          count(distinct \"third_party_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          55 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('terms_viewed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"terms_viewed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"terms_viewed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"terms_viewed_at\") as distinct_count,\n          count(distinct \"terms_viewed_at\") = count(*) as is_unique,\n          cast(min(\"terms_viewed_at\") as varchar) as min,\n          cast(max(\"terms_viewed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          56 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('terms_accepted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"terms_accepted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"terms_accepted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"terms_accepted\") as distinct_count,\n          count(distinct \"terms_accepted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          57 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"patients_profile\""}, "model.smartpill.providers_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"providers\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.providers"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "providers_profile"], "unique_id": "model.smartpill.providers_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/providers_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/providers_profile.sql", "name": "providers_profile", "alias": "providers_profile", "checksum": {"name": "sha256", "checksum": "fb2db3957477772a4f95bde621ae766a77b68c4eff688ec63bde0041f509fc04"}, "tags": [], "refs": [["providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/providers_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5750887, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"providers\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('npi') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"npi\") as distinct_count,\n          count(distinct \"npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_id\") as distinct_count,\n          count(distinct \"provider_id\") = count(*) as is_unique,\n          cast(min(\"provider_id\") as varchar) as min,\n          cast(max(\"provider_id\") as varchar) as max,\n          avg(\"provider_id\") as avg,\n          stddev_pop(\"provider_id\") as std_dev_population,\n          stddev_samp(\"provider_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('first_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"first_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"first_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"first_name\") as distinct_count,\n          count(distinct \"first_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('last_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"last_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"last_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"last_name\") as distinct_count,\n          count(distinct \"last_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('first_rx_sent_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"first_rx_sent_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"first_rx_sent_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"first_rx_sent_date\") as distinct_count,\n          count(distinct \"first_rx_sent_date\") = count(*) as is_unique,\n          cast(min(\"first_rx_sent_date\") as varchar) as min,\n          cast(max(\"first_rx_sent_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('last_rx_sent_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"last_rx_sent_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"last_rx_sent_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"last_rx_sent_date\") as distinct_count,\n          count(distinct \"last_rx_sent_date\") = count(*) as is_unique,\n          cast(min(\"last_rx_sent_date\") as varchar) as min,\n          cast(max(\"last_rx_sent_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('verified') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"verified\") as distinct_count,\n          count(distinct \"verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"providers_profile\""}, "model.smartpill.rxs_grouped_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"rxs_grouped\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.rxs_grouped"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "rxs_grouped_profile"], "unique_id": "model.smartpill.rxs_grouped_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/rxs_grouped_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/rxs_grouped_profile.sql", "name": "rxs_grouped_profile", "alias": "rxs_grouped_profile", "checksum": {"name": "sha256", "checksum": "a87ff46d393770ceb320085cb87b3af72f391cf903d66a8b3b775a8d4ed41a24"}, "tags": [], "refs": [["rxs_grouped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/rxs_grouped_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5779912, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"rxs_grouped\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_ab_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_ab_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_ab_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_ab_id\") as distinct_count,\n          count(distinct \"_airbyte_ab_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic\") as distinct_count,\n          count(distinct \"drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_brand\") as distinct_count,\n          count(distinct \"drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"group_id\") as distinct_count,\n          count(distinct \"group_id\") = count(*) as is_unique,\n          cast(min(\"group_id\") as varchar) as min,\n          cast(max(\"group_id\") as varchar) as max,\n          avg(\"group_id\") as avg,\n          stddev_pop(\"group_id\") as std_dev_population,\n          stddev_samp(\"group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_qty_per_day\") as distinct_count,\n          count(distinct \"sig_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"sig_qty_per_day\") as varchar) as min,\n          cast(max(\"sig_qty_per_day\") as varchar) as max,\n          avg(\"sig_qty_per_day\") as avg,\n          stddev_pop(\"sig_qty_per_day\") as std_dev_population,\n          stddev_samp(\"sig_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_keys') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_keys\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_keys\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_keys\") as distinct_count,\n          count(distinct \"rx_message_keys\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_date\") as distinct_count,\n          count(distinct \"rx_message_date\") = count(*) as is_unique,\n          cast(min(\"rx_message_date\") as varchar) as min,\n          cast(max(\"rx_message_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('max_gsn') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"max_gsn\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"max_gsn\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"max_gsn\") as distinct_count,\n          count(distinct \"max_gsn\") = count(*) as is_unique,\n          cast(min(\"max_gsn\") as varchar) as min,\n          cast(max(\"max_gsn\") as varchar) as max,\n          avg(\"max_gsn\") as avg,\n          stddev_pop(\"max_gsn\") as std_dev_population,\n          stddev_samp(\"max_gsn\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_gsns\") as distinct_count,\n          count(distinct \"drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_total\") as distinct_count,\n          count(distinct \"refills_total\") = count(*) as is_unique,\n          cast(min(\"refills_total\") as varchar) as min,\n          cast(max(\"refills_total\") as varchar) as max,\n          avg(\"refills_total\") as avg,\n          stddev_pop(\"refills_total\") as std_dev_population,\n          stddev_samp(\"refills_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_total\") as distinct_count,\n          count(distinct \"qty_total\") = count(*) as is_unique,\n          cast(min(\"qty_total\") as varchar) as min,\n          cast(max(\"qty_total\") as varchar) as max,\n          avg(\"qty_total\") as avg,\n          stddev_pop(\"qty_total\") as std_dev_population,\n          stddev_samp(\"qty_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_autofill\") as distinct_count,\n          count(distinct \"rx_autofill\") = count(*) as is_unique,\n          cast(min(\"rx_autofill\") as varchar) as min,\n          cast(max(\"rx_autofill\") as varchar) as max,\n          avg(\"rx_autofill\") as avg,\n          stddev_pop(\"rx_autofill\") as std_dev_population,\n          stddev_samp(\"rx_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_first\") as distinct_count,\n          count(distinct \"refill_date_first\") = count(*) as is_unique,\n          cast(min(\"refill_date_first\") as varchar) as min,\n          cast(max(\"refill_date_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_last\") as distinct_count,\n          count(distinct \"refill_date_last\") = count(*) as is_unique,\n          cast(min(\"refill_date_last\") as varchar) as min,\n          cast(max(\"refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_next') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_next\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_next\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_next\") as distinct_count,\n          count(distinct \"refill_date_next\") = count(*) as is_unique,\n          cast(min(\"refill_date_next\") as varchar) as min,\n          cast(max(\"refill_date_next\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_manual\") as distinct_count,\n          count(distinct \"refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"refill_date_manual\") as varchar) as min,\n          cast(max(\"refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_default') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_default\") as distinct_count,\n          count(distinct \"refill_date_default\") = count(*) as is_unique,\n          cast(min(\"refill_date_default\") as varchar) as min,\n          cast(max(\"refill_date_default\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('best_rx_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"best_rx_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"best_rx_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"best_rx_number\") as distinct_count,\n          count(distinct \"best_rx_number\") = count(*) as is_unique,\n          cast(min(\"best_rx_number\") as varchar) as min,\n          cast(max(\"best_rx_number\") as varchar) as max,\n          avg(\"best_rx_number\") as avg,\n          stddev_pop(\"best_rx_number\") as std_dev_population,\n          stddev_samp(\"best_rx_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_numbers') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_numbers\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_numbers\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_numbers\") as distinct_count,\n          count(distinct \"rx_numbers\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sources') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sources\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sources\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sources\") as distinct_count,\n          count(distinct \"rx_sources\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_changed\") as distinct_count,\n          count(distinct \"rx_date_changed\") = count(*) as is_unique,\n          cast(min(\"rx_date_changed\") as varchar) as min,\n          cast(max(\"rx_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_expired\") as distinct_count,\n          count(distinct \"rx_date_expired\") = count(*) as is_unique,\n          cast(min(\"rx_date_expired\") as varchar) as min,\n          cast(max(\"rx_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_transferred') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_transferred\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_transferred\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_transferred\") as distinct_count,\n          count(distinct \"rx_date_transferred\") = count(*) as is_unique,\n          cast(min(\"rx_date_transferred\") as varchar) as min,\n          cast(max(\"rx_date_transferred\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_added_first_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_added_first_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_added_first_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_added_first_at\") as distinct_count,\n          count(distinct \"rx_added_first_at\") = count(*) as is_unique,\n          cast(min(\"rx_added_first_at\") as varchar) as min,\n          cast(max(\"rx_added_first_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_added_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_added_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_added_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_added_last_at\") as distinct_count,\n          count(distinct \"rx_added_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_added_last_at\") as varchar) as min,\n          cast(max(\"rx_added_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_inactivated_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_inactivated_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_inactivated_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_inactivated_last_at\") as distinct_count,\n          count(distinct \"rx_inactivated_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_inactivated_last_at\") as varchar) as min,\n          cast(max(\"rx_inactivated_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_activated_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_activated_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_activated_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_activated_last_at\") as distinct_count,\n          count(distinct \"rx_activated_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_activated_last_at\") as varchar) as min,\n          cast(max(\"rx_activated_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('group_status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"group_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"group_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"group_status\") as distinct_count,\n          count(distinct \"group_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"rxs_grouped_profile\""}, "model.smartpill.rxs_single_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"rxs_single\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "bronze", "rxs_single_profile"], "unique_id": "model.smartpill.rxs_single_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/bronze/rxs_single_profile.sql", "original_file_path": "models/profiling/goodpill/bronze/rxs_single_profile.sql", "name": "rxs_single_profile", "alias": "rxs_single_profile", "checksum": {"name": "sha256", "checksum": "6a835c65e8a4e309e31270bdba36dd2f4e7138aa8cae3fdef9c35ea1f3173a34"}, "tags": [], "refs": [["rxs_single"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/bronze/rxs_single_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5814304, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"rxs_single\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_ab_id') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_ab_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_ab_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_ab_id\") as distinct_count,\n          count(distinct \"_airbyte_ab_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_number\") as distinct_count,\n          count(distinct \"rx_number\") = count(*) as is_unique,\n          cast(min(\"rx_number\") as varchar) as min,\n          cast(max(\"rx_number\") as varchar) as max,\n          avg(\"rx_number\") as avg,\n          stddev_pop(\"rx_number\") as std_dev_population,\n          stddev_samp(\"rx_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"group_id\") as distinct_count,\n          count(distinct \"group_id\") = count(*) as is_unique,\n          cast(min(\"group_id\") as varchar) as min,\n          cast(max(\"group_id\") as varchar) as max,\n          avg(\"group_id\") as avg,\n          stddev_pop(\"group_id\") as std_dev_population,\n          stddev_samp(\"group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic\") as distinct_count,\n          count(distinct \"drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_brand\") as distinct_count,\n          count(distinct \"drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_name\") as distinct_count,\n          count(distinct \"drug_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_key') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_key\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_key\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_key\") as distinct_count,\n          count(distinct \"rx_message_key\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_text') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_text\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_text\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_text\") as distinct_count,\n          count(distinct \"rx_message_text\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_date\") as distinct_count,\n          count(distinct \"rx_message_date\") = count(*) as is_unique,\n          cast(min(\"rx_message_date\") as varchar) as min,\n          cast(max(\"rx_message_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_gsn') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_gsn\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_gsn\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_gsn\") as distinct_count,\n          count(distinct \"rx_gsn\") = count(*) as is_unique,\n          cast(min(\"rx_gsn\") as varchar) as min,\n          cast(max(\"rx_gsn\") as varchar) as max,\n          avg(\"rx_gsn\") as avg,\n          stddev_pop(\"rx_gsn\") as std_dev_population,\n          stddev_samp(\"rx_gsn\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_gsns\") as distinct_count,\n          count(distinct \"drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_left') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_left\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_left\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_left\") as distinct_count,\n          count(distinct \"refills_left\") = count(*) as is_unique,\n          cast(min(\"refills_left\") as varchar) as min,\n          cast(max(\"refills_left\") as varchar) as max,\n          avg(\"refills_left\") as avg,\n          stddev_pop(\"refills_left\") as std_dev_population,\n          stddev_samp(\"refills_left\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refills_original') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refills_original\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refills_original\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refills_original\") as distinct_count,\n          count(distinct \"refills_original\") = count(*) as is_unique,\n          cast(min(\"refills_original\") as varchar) as min,\n          cast(max(\"refills_original\") as varchar) as max,\n          avg(\"refills_original\") as avg,\n          stddev_pop(\"refills_original\") as std_dev_population,\n          stddev_samp(\"refills_original\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_left') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_left\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_left\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_left\") as distinct_count,\n          count(distinct \"qty_left\") = count(*) as is_unique,\n          cast(min(\"qty_left\") as varchar) as min,\n          cast(max(\"qty_left\") as varchar) as max,\n          avg(\"qty_left\") as avg,\n          stddev_pop(\"qty_left\") as std_dev_population,\n          stddev_samp(\"qty_left\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('qty_original') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"qty_original\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"qty_original\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"qty_original\") as distinct_count,\n          count(distinct \"qty_original\") = count(*) as is_unique,\n          cast(min(\"qty_original\") as varchar) as min,\n          cast(max(\"qty_original\") as varchar) as max,\n          avg(\"qty_original\") as avg,\n          stddev_pop(\"qty_original\") as std_dev_population,\n          stddev_samp(\"qty_original\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_actual') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_actual\") as distinct_count,\n          count(distinct \"sig_actual\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_initial\") as distinct_count,\n          count(distinct \"sig_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_clean') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_clean\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_clean\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_clean\") as distinct_count,\n          count(distinct \"sig_clean\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_qty\") as distinct_count,\n          count(distinct \"sig_qty\") = count(*) as is_unique,\n          cast(min(\"sig_qty\") as varchar) as min,\n          cast(max(\"sig_qty\") as varchar) as max,\n          avg(\"sig_qty\") as avg,\n          stddev_pop(\"sig_qty\") as std_dev_population,\n          stddev_samp(\"sig_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v1_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v1_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v1_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v1_qty\") as distinct_count,\n          count(distinct \"sig_v1_qty\") = count(*) as is_unique,\n          cast(min(\"sig_v1_qty\") as varchar) as min,\n          cast(max(\"sig_v1_qty\") as varchar) as max,\n          avg(\"sig_v1_qty\") as avg,\n          stddev_pop(\"sig_v1_qty\") as std_dev_population,\n          stddev_samp(\"sig_v1_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v1_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v1_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v1_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v1_days\") as distinct_count,\n          count(distinct \"sig_v1_days\") = count(*) as is_unique,\n          cast(min(\"sig_v1_days\") as varchar) as min,\n          cast(max(\"sig_v1_days\") as varchar) as max,\n          avg(\"sig_v1_days\") as avg,\n          stddev_pop(\"sig_v1_days\") as std_dev_population,\n          stddev_samp(\"sig_v1_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v1_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v1_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v1_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v1_qty_per_day\") as distinct_count,\n          count(distinct \"sig_v1_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"sig_v1_qty_per_day\") as varchar) as min,\n          cast(max(\"sig_v1_qty_per_day\") as varchar) as max,\n          avg(\"sig_v1_qty_per_day\") as avg,\n          stddev_pop(\"sig_v1_qty_per_day\") as std_dev_population,\n          stddev_samp(\"sig_v1_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_days\") as distinct_count,\n          count(distinct \"sig_days\") = count(*) as is_unique,\n          cast(min(\"sig_days\") as varchar) as min,\n          cast(max(\"sig_days\") as varchar) as max,\n          avg(\"sig_days\") as avg,\n          stddev_pop(\"sig_days\") as std_dev_population,\n          stddev_samp(\"sig_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_qty_per_day_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_qty_per_day_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_qty_per_day_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_qty_per_day_default\") as distinct_count,\n          count(distinct \"sig_qty_per_day_default\") = count(*) as is_unique,\n          cast(min(\"sig_qty_per_day_default\") as varchar) as min,\n          cast(max(\"sig_qty_per_day_default\") as varchar) as max,\n          avg(\"sig_qty_per_day_default\") as avg,\n          stddev_pop(\"sig_qty_per_day_default\") as std_dev_population,\n          stddev_samp(\"sig_qty_per_day_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_qty_per_day_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_qty_per_day_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_qty_per_day_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_qty_per_day_actual\") as distinct_count,\n          count(distinct \"sig_qty_per_day_actual\") = count(*) as is_unique,\n          cast(min(\"sig_qty_per_day_actual\") as varchar) as min,\n          cast(max(\"sig_qty_per_day_actual\") as varchar) as max,\n          avg(\"sig_qty_per_day_actual\") as avg,\n          stddev_pop(\"sig_qty_per_day_actual\") as std_dev_population,\n          stddev_samp(\"sig_qty_per_day_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_durations') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_durations\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_durations\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_durations\") as distinct_count,\n          count(distinct \"sig_durations\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_qtys_per_time') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_qtys_per_time\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_qtys_per_time\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_qtys_per_time\") as distinct_count,\n          count(distinct \"sig_qtys_per_time\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_frequencies') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_frequencies\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_frequencies\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_frequencies\") as distinct_count,\n          count(distinct \"sig_frequencies\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_frequency_numerators') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_frequency_numerators\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_frequency_numerators\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_frequency_numerators\") as distinct_count,\n          count(distinct \"sig_frequency_numerators\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_frequency_denominators') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_frequency_denominators\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_frequency_denominators\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_frequency_denominators\") as distinct_count,\n          count(distinct \"sig_frequency_denominators\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_qty\") as distinct_count,\n          count(distinct \"sig_v2_qty\") = count(*) as is_unique,\n          cast(min(\"sig_v2_qty\") as varchar) as min,\n          cast(max(\"sig_v2_qty\") as varchar) as max,\n          avg(\"sig_v2_qty\") as avg,\n          stddev_pop(\"sig_v2_qty\") as std_dev_population,\n          stddev_samp(\"sig_v2_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_days\") as distinct_count,\n          count(distinct \"sig_v2_days\") = count(*) as is_unique,\n          cast(min(\"sig_v2_days\") as varchar) as min,\n          cast(max(\"sig_v2_days\") as varchar) as max,\n          avg(\"sig_v2_days\") as avg,\n          stddev_pop(\"sig_v2_days\") as std_dev_population,\n          stddev_samp(\"sig_v2_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_qty_per_day\") as distinct_count,\n          count(distinct \"sig_v2_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"sig_v2_qty_per_day\") as varchar) as min,\n          cast(max(\"sig_v2_qty_per_day\") as varchar) as max,\n          avg(\"sig_v2_qty_per_day\") as avg,\n          stddev_pop(\"sig_v2_qty_per_day\") as std_dev_population,\n          stddev_samp(\"sig_v2_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_unit') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_unit\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_unit\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_unit\") as distinct_count,\n          count(distinct \"sig_v2_unit\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_conf_score') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_conf_score\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_conf_score\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_conf_score\") as distinct_count,\n          count(distinct \"sig_v2_conf_score\") = count(*) as is_unique,\n          cast(min(\"sig_v2_conf_score\") as varchar) as min,\n          cast(max(\"sig_v2_conf_score\") as varchar) as max,\n          avg(\"sig_v2_conf_score\") as avg,\n          stddev_pop(\"sig_v2_conf_score\") as std_dev_population,\n          stddev_samp(\"sig_v2_conf_score\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_dosages') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_dosages\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_dosages\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_dosages\") as distinct_count,\n          count(distinct \"sig_v2_dosages\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_scores') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_scores\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_scores\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_scores\") as distinct_count,\n          count(distinct \"sig_v2_scores\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_frequencies') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_frequencies\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_frequencies\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_frequencies\") as distinct_count,\n          count(distinct \"sig_v2_frequencies\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_v2_durations') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_v2_durations\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_v2_durations\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_v2_durations\") as distinct_count,\n          count(distinct \"sig_v2_durations\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_autofill\") as distinct_count,\n          count(distinct \"rx_autofill\") = count(*) as is_unique,\n          cast(min(\"rx_autofill\") as varchar) as min,\n          cast(max(\"rx_autofill\") as varchar) as max,\n          avg(\"rx_autofill\") as avg,\n          stddev_pop(\"rx_autofill\") as std_dev_population,\n          stddev_samp(\"rx_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_first\") as distinct_count,\n          count(distinct \"refill_date_first\") = count(*) as is_unique,\n          cast(min(\"refill_date_first\") as varchar) as min,\n          cast(max(\"refill_date_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_last\") as distinct_count,\n          count(distinct \"refill_date_last\") = count(*) as is_unique,\n          cast(min(\"refill_date_last\") as varchar) as min,\n          cast(max(\"refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_manual\") as distinct_count,\n          count(distinct \"refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"refill_date_manual\") as varchar) as min,\n          cast(max(\"refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('refill_date_default') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"refill_date_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"refill_date_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"refill_date_default\") as distinct_count,\n          count(distinct \"refill_date_default\") = count(*) as is_unique,\n          cast(min(\"refill_date_default\") as varchar) as min,\n          cast(max(\"refill_date_default\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_status') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_status\") as distinct_count,\n          count(distinct \"rx_status\") = count(*) as is_unique,\n          cast(min(\"rx_status\") as varchar) as min,\n          cast(max(\"rx_status\") as varchar) as max,\n          avg(\"rx_status\") as avg,\n          stddev_pop(\"rx_status\") as std_dev_population,\n          stddev_samp(\"rx_status\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_stage') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_stage\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_stage\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_stage\") as distinct_count,\n          count(distinct \"rx_stage\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_source') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_source\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_source\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_source\") as distinct_count,\n          count(distinct \"rx_source\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_transferred_out') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_transferred_out\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_transferred_out\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_transferred_out\") as distinct_count,\n          count(distinct \"rx_date_transferred_out\") = count(*) as is_unique,\n          cast(min(\"rx_date_transferred_out\") as varchar) as min,\n          cast(max(\"rx_date_transferred_out\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_transferred_in') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_transferred_in\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_transferred_in\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_transferred_in\") as distinct_count,\n          count(distinct \"rx_date_transferred_in\") = count(*) as is_unique,\n          cast(min(\"rx_date_transferred_in\") as varchar) as min,\n          cast(max(\"rx_date_transferred_in\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_npi\") as distinct_count,\n          count(distinct \"provider_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_first_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_first_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_first_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_first_name\") as distinct_count,\n          count(distinct \"provider_first_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_last_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_last_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_last_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_last_name\") as distinct_count,\n          count(distinct \"provider_last_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_clinic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_clinic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_clinic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_clinic\") as distinct_count,\n          count(distinct \"provider_clinic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          55 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_phone\") as distinct_count,\n          count(distinct \"provider_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          56 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_changed\") as distinct_count,\n          count(distinct \"rx_date_changed\") = count(*) as is_unique,\n          cast(min(\"rx_date_changed\") as varchar) as min,\n          cast(max(\"rx_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          57 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_expired\") as distinct_count,\n          count(distinct \"rx_date_expired\") = count(*) as is_unique,\n          cast(min(\"rx_date_expired\") as varchar) as min,\n          cast(max(\"rx_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          58 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_added\") as distinct_count,\n          count(distinct \"rx_date_added\") = count(*) as is_unique,\n          cast(min(\"rx_date_added\") as varchar) as min,\n          cast(max(\"rx_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          59 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_stock_level_initial') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_stock_level_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_stock_level_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_stock_level_initial\") as distinct_count,\n          count(distinct \"rx_stock_level_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          60 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('transfer_pharmacy_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"transfer_pharmacy_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"transfer_pharmacy_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"transfer_pharmacy_phone\") as distinct_count,\n          count(distinct \"transfer_pharmacy_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          61 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('transfer_pharmacy_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"transfer_pharmacy_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"transfer_pharmacy_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"transfer_pharmacy_name\") as distinct_count,\n          count(distinct \"transfer_pharmacy_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          62 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('transfer_pharmacy_fax') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"transfer_pharmacy_fax\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"transfer_pharmacy_fax\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"transfer_pharmacy_fax\") as distinct_count,\n          count(distinct \"transfer_pharmacy_fax\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          63 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('transfer_pharmacy_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"transfer_pharmacy_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"transfer_pharmacy_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"transfer_pharmacy_address\") as distinct_count,\n          count(distinct \"transfer_pharmacy_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          64 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"created_at\") as distinct_count,\n          count(distinct \"created_at\") = count(*) as is_unique,\n          cast(min(\"created_at\") as varchar) as min,\n          cast(max(\"created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          65 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"updated_at\") as distinct_count,\n          count(distinct \"updated_at\") = count(*) as is_unique,\n          cast(min(\"updated_at\") as varchar) as min,\n          cast(max(\"updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          66 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"status\") as distinct_count,\n          count(distinct \"status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          67 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_status_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_status_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_status_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_status_updated_at\") as distinct_count,\n          count(distinct \"rx_status_updated_at\") = count(*) as is_unique,\n          cast(min(\"rx_status_updated_at\") as varchar) as min,\n          cast(max(\"rx_status_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          68 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_email') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_email\") as distinct_count,\n          count(distinct \"provider_email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          69 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_id\") as distinct_count,\n          count(distinct \"rx_id\") = count(*) as is_unique,\n          cast(min(\"rx_id\") as varchar) as min,\n          cast(max(\"rx_id\") as varchar) as max,\n          avg(\"rx_id\") as avg,\n          stddev_pop(\"rx_id\") as std_dev_population,\n          stddev_samp(\"rx_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          70 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_confirmed_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_confirmed_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_confirmed_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_confirmed_by\") as distinct_count,\n          count(distinct \"sig_confirmed_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          71 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('sig_confirmed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"sig_confirmed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"sig_confirmed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"sig_confirmed_at\") as distinct_count,\n          count(distinct \"sig_confirmed_at\") = count(*) as is_unique,\n          cast(min(\"sig_confirmed_at\") as varchar) as min,\n          cast(max(\"sig_confirmed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          72 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"rxs_single_profile\""}, "model.smartpill.goodpill_abt_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"goodpill_abt\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.goodpill_abt"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "gold", "goodpill_abt_profile"], "unique_id": "model.smartpill.goodpill_abt_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/gold/goodpill_abt_profile.sql", "original_file_path": "models/profiling/goodpill/gold/goodpill_abt_profile.sql", "name": "goodpill_abt_profile", "alias": "goodpill_abt_profile", "checksum": {"name": "sha256", "checksum": "19bd6c194d0d290d92537cb1af69f0850c8c5bdb6090ac4e25cc2db37129c3d5"}, "tags": [], "refs": [["goodpill_abt"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/gold/goodpill_abt_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5880263, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".goodpill.\"goodpill_abt\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('patient_id_cp') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_cp\") as distinct_count,\n          count(distinct \"patient_id_cp\") = count(*) as is_unique,\n          cast(min(\"patient_id_cp\") as varchar) as min,\n          cast(max(\"patient_id_cp\") as varchar) as max,\n          avg(\"patient_id_cp\") as avg,\n          stddev_pop(\"patient_id_cp\") as std_dev_population,\n          stddev_samp(\"patient_id_cp\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_invoice_number\") as distinct_count,\n          count(distinct \"order_invoice_number\") = count(*) as is_unique,\n          cast(min(\"order_invoice_number\") as varchar) as min,\n          cast(max(\"order_invoice_number\") as varchar) as max,\n          avg(\"order_invoice_number\") as avg,\n          stddev_pop(\"order_invoice_number\") as std_dev_population,\n          stddev_samp(\"order_invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_number\") as distinct_count,\n          count(distinct \"rx_number\") = count(*) as is_unique,\n          cast(min(\"rx_number\") as varchar) as min,\n          cast(max(\"rx_number\") as varchar) as max,\n          avg(\"rx_number\") as avg,\n          stddev_pop(\"rx_number\") as std_dev_population,\n          stddev_samp(\"rx_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_patient_event_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_patient_event_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_patient_event_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_patient_event_date\") as distinct_count,\n          count(distinct \"dw_patient_event_date\") = count(*) as is_unique,\n          cast(min(\"dw_patient_event_date\") as varchar) as min,\n          cast(max(\"dw_patient_event_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_patient_status') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_patient_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_patient_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_patient_status\") as distinct_count,\n          count(distinct \"dw_patient_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_active') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_active\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_active\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_active\") as distinct_count,\n          count(distinct \"patient_date_active\") = count(*) as is_unique,\n          cast(min(\"patient_date_active\") as varchar) as min,\n          cast(max(\"patient_date_active\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_no_rx') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_no_rx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_no_rx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_no_rx\") as distinct_count,\n          count(distinct \"patient_date_no_rx\") = count(*) as is_unique,\n          cast(min(\"patient_date_no_rx\") as varchar) as min,\n          cast(max(\"patient_date_no_rx\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_unregistered') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_unregistered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_unregistered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_unregistered\") as distinct_count,\n          count(distinct \"patient_date_unregistered\") = count(*) as is_unique,\n          cast(min(\"patient_date_unregistered\") as varchar) as min,\n          cast(max(\"patient_date_unregistered\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_deceased') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_deceased\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_deceased\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_deceased\") as distinct_count,\n          count(distinct \"patient_date_deceased\") = count(*) as is_unique,\n          cast(min(\"patient_date_deceased\") as varchar) as min,\n          cast(max(\"patient_date_deceased\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_churned_no_fillable_rx') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_churned_no_fillable_rx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_churned_no_fillable_rx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_churned_no_fillable_rx\") as distinct_count,\n          count(distinct \"patient_date_churned_no_fillable_rx\") = count(*) as is_unique,\n          cast(min(\"patient_date_churned_no_fillable_rx\") as varchar) as min,\n          cast(max(\"patient_date_churned_no_fillable_rx\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_inactive') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_inactive\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_inactive\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_inactive\") as distinct_count,\n          count(distinct \"patient_date_inactive\") = count(*) as is_unique,\n          cast(min(\"patient_date_inactive\") as varchar) as min,\n          cast(max(\"patient_date_inactive\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_churned_other') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_churned_other\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_churned_other\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_churned_other\") as distinct_count,\n          count(distinct \"patient_date_churned_other\") = count(*) as is_unique,\n          cast(min(\"patient_date_churned_other\") as varchar) as min,\n          cast(max(\"patient_date_churned_other\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_id\") as distinct_count,\n          count(distinct \"rx_id\") = count(*) as is_unique,\n          cast(min(\"rx_id\") as varchar) as min,\n          cast(max(\"rx_id\") as varchar) as max,\n          avg(\"rx_id\") as avg,\n          stddev_pop(\"rx_id\") as std_dev_population,\n          stddev_samp(\"rx_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_numbers') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_numbers\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_numbers\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_numbers\") as distinct_count,\n          count(distinct \"rx_numbers\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_best_rx_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_best_rx_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_best_rx_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_best_rx_number\") as distinct_count,\n          count(distinct \"rx_best_rx_number\") = count(*) as is_unique,\n          cast(min(\"rx_best_rx_number\") as varchar) as min,\n          cast(max(\"rx_best_rx_number\") as varchar) as max,\n          avg(\"rx_best_rx_number\") as avg,\n          stddev_pop(\"rx_best_rx_number\") as std_dev_population,\n          stddev_samp(\"rx_best_rx_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_provider_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_provider_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_provider_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_provider_npi\") as distinct_count,\n          count(distinct \"rx_provider_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_drug_generic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_drug_generic\") as distinct_count,\n          count(distinct \"rx_drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_drug_brand\") as distinct_count,\n          count(distinct \"rx_drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_drug_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_drug_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_drug_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_drug_name\") as distinct_count,\n          count(distinct \"rx_drug_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_key') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_key\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_key\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_key\") as distinct_count,\n          count(distinct \"rx_message_key\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_text') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_text\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_text\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_text\") as distinct_count,\n          count(distinct \"rx_message_text\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_message_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_message_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_message_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_message_date\") as distinct_count,\n          count(distinct \"rx_message_date\") = count(*) as is_unique,\n          cast(min(\"rx_message_date\") as varchar) as min,\n          cast(max(\"rx_message_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sources') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sources\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sources\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sources\") as distinct_count,\n          count(distinct \"rx_sources\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_gsn') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_gsn\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_gsn\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_gsn\") as distinct_count,\n          count(distinct \"rx_gsn\") = count(*) as is_unique,\n          cast(min(\"rx_gsn\") as varchar) as min,\n          cast(max(\"rx_gsn\") as varchar) as max,\n          avg(\"rx_gsn\") as avg,\n          stddev_pop(\"rx_gsn\") as std_dev_population,\n          stddev_samp(\"rx_gsn\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_drug_gsns\") as distinct_count,\n          count(distinct \"rx_drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_max_gsn') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_max_gsn\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_max_gsn\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_max_gsn\") as distinct_count,\n          count(distinct \"rx_max_gsn\") = count(*) as is_unique,\n          cast(min(\"rx_max_gsn\") as varchar) as min,\n          cast(max(\"rx_max_gsn\") as varchar) as max,\n          avg(\"rx_max_gsn\") as avg,\n          stddev_pop(\"rx_max_gsn\") as std_dev_population,\n          stddev_samp(\"rx_max_gsn\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refills_left') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refills_left\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refills_left\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refills_left\") as distinct_count,\n          count(distinct \"rx_refills_left\") = count(*) as is_unique,\n          cast(min(\"rx_refills_left\") as varchar) as min,\n          cast(max(\"rx_refills_left\") as varchar) as max,\n          avg(\"rx_refills_left\") as avg,\n          stddev_pop(\"rx_refills_left\") as std_dev_population,\n          stddev_samp(\"rx_refills_left\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refills_original') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refills_original\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refills_original\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refills_original\") as distinct_count,\n          count(distinct \"rx_refills_original\") = count(*) as is_unique,\n          cast(min(\"rx_refills_original\") as varchar) as min,\n          cast(max(\"rx_refills_original\") as varchar) as max,\n          avg(\"rx_refills_original\") as avg,\n          stddev_pop(\"rx_refills_original\") as std_dev_population,\n          stddev_samp(\"rx_refills_original\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refills_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refills_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refills_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refills_total\") as distinct_count,\n          count(distinct \"rx_refills_total\") = count(*) as is_unique,\n          cast(min(\"rx_refills_total\") as varchar) as min,\n          cast(max(\"rx_refills_total\") as varchar) as max,\n          avg(\"rx_refills_total\") as avg,\n          stddev_pop(\"rx_refills_total\") as std_dev_population,\n          stddev_samp(\"rx_refills_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_qty_left') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_qty_left\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_qty_left\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_qty_left\") as distinct_count,\n          count(distinct \"rx_qty_left\") = count(*) as is_unique,\n          cast(min(\"rx_qty_left\") as varchar) as min,\n          cast(max(\"rx_qty_left\") as varchar) as max,\n          avg(\"rx_qty_left\") as avg,\n          stddev_pop(\"rx_qty_left\") as std_dev_population,\n          stddev_samp(\"rx_qty_left\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_qty_original') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_qty_original\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_qty_original\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_qty_original\") as distinct_count,\n          count(distinct \"rx_qty_original\") = count(*) as is_unique,\n          cast(min(\"rx_qty_original\") as varchar) as min,\n          cast(max(\"rx_qty_original\") as varchar) as max,\n          avg(\"rx_qty_original\") as avg,\n          stddev_pop(\"rx_qty_original\") as std_dev_population,\n          stddev_samp(\"rx_qty_original\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_qty_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_qty_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_qty_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_qty_total\") as distinct_count,\n          count(distinct \"rx_qty_total\") = count(*) as is_unique,\n          cast(min(\"rx_qty_total\") as varchar) as min,\n          cast(max(\"rx_qty_total\") as varchar) as max,\n          avg(\"rx_qty_total\") as avg,\n          stddev_pop(\"rx_qty_total\") as std_dev_population,\n          stddev_samp(\"rx_qty_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_actual') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_actual\") as distinct_count,\n          count(distinct \"rx_sig_actual\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_initial\") as distinct_count,\n          count(distinct \"rx_sig_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_clean') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_clean\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_clean\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_clean\") as distinct_count,\n          count(distinct \"rx_sig_clean\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_qty\") as distinct_count,\n          count(distinct \"rx_sig_qty\") = count(*) as is_unique,\n          cast(min(\"rx_sig_qty\") as varchar) as min,\n          cast(max(\"rx_sig_qty\") as varchar) as max,\n          avg(\"rx_sig_qty\") as avg,\n          stddev_pop(\"rx_sig_qty\") as std_dev_population,\n          stddev_samp(\"rx_sig_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v1_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v1_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v1_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v1_qty\") as distinct_count,\n          count(distinct \"rx_sig_v1_qty\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v1_qty\") as varchar) as min,\n          cast(max(\"rx_sig_v1_qty\") as varchar) as max,\n          avg(\"rx_sig_v1_qty\") as avg,\n          stddev_pop(\"rx_sig_v1_qty\") as std_dev_population,\n          stddev_samp(\"rx_sig_v1_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v1_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v1_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v1_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v1_days\") as distinct_count,\n          count(distinct \"rx_sig_v1_days\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v1_days\") as varchar) as min,\n          cast(max(\"rx_sig_v1_days\") as varchar) as max,\n          avg(\"rx_sig_v1_days\") as avg,\n          stddev_pop(\"rx_sig_v1_days\") as std_dev_population,\n          stddev_samp(\"rx_sig_v1_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v1_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v1_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v1_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v1_qty_per_day\") as distinct_count,\n          count(distinct \"rx_sig_v1_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v1_qty_per_day\") as varchar) as min,\n          cast(max(\"rx_sig_v1_qty_per_day\") as varchar) as max,\n          avg(\"rx_sig_v1_qty_per_day\") as avg,\n          stddev_pop(\"rx_sig_v1_qty_per_day\") as std_dev_population,\n          stddev_samp(\"rx_sig_v1_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_days\") as distinct_count,\n          count(distinct \"rx_sig_days\") = count(*) as is_unique,\n          cast(min(\"rx_sig_days\") as varchar) as min,\n          cast(max(\"rx_sig_days\") as varchar) as max,\n          avg(\"rx_sig_days\") as avg,\n          stddev_pop(\"rx_sig_days\") as std_dev_population,\n          stddev_samp(\"rx_sig_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_qty_per_day\") as distinct_count,\n          count(distinct \"rx_sig_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"rx_sig_qty_per_day\") as varchar) as min,\n          cast(max(\"rx_sig_qty_per_day\") as varchar) as max,\n          avg(\"rx_sig_qty_per_day\") as avg,\n          stddev_pop(\"rx_sig_qty_per_day\") as std_dev_population,\n          stddev_samp(\"rx_sig_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_qty_per_day_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_qty_per_day_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_qty_per_day_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_qty_per_day_default\") as distinct_count,\n          count(distinct \"rx_sig_qty_per_day_default\") = count(*) as is_unique,\n          cast(min(\"rx_sig_qty_per_day_default\") as varchar) as min,\n          cast(max(\"rx_sig_qty_per_day_default\") as varchar) as max,\n          avg(\"rx_sig_qty_per_day_default\") as avg,\n          stddev_pop(\"rx_sig_qty_per_day_default\") as std_dev_population,\n          stddev_samp(\"rx_sig_qty_per_day_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_qty_per_day_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_qty_per_day_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_qty_per_day_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_qty_per_day_actual\") as distinct_count,\n          count(distinct \"rx_sig_qty_per_day_actual\") = count(*) as is_unique,\n          cast(min(\"rx_sig_qty_per_day_actual\") as varchar) as min,\n          cast(max(\"rx_sig_qty_per_day_actual\") as varchar) as max,\n          avg(\"rx_sig_qty_per_day_actual\") as avg,\n          stddev_pop(\"rx_sig_qty_per_day_actual\") as std_dev_population,\n          stddev_samp(\"rx_sig_qty_per_day_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_durations') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_durations\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_durations\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_durations\") as distinct_count,\n          count(distinct \"rx_sig_durations\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_qtys_per_time') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_qtys_per_time\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_qtys_per_time\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_qtys_per_time\") as distinct_count,\n          count(distinct \"rx_sig_qtys_per_time\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_frequencies') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_frequencies\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_frequencies\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_frequencies\") as distinct_count,\n          count(distinct \"rx_sig_frequencies\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_frequency_numerators') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_frequency_numerators\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_frequency_numerators\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_frequency_numerators\") as distinct_count,\n          count(distinct \"rx_sig_frequency_numerators\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_frequency_denominators') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_frequency_denominators\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_frequency_denominators\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_frequency_denominators\") as distinct_count,\n          count(distinct \"rx_sig_frequency_denominators\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_qty') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_qty\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_qty\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_qty\") as distinct_count,\n          count(distinct \"rx_sig_v2_qty\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v2_qty\") as varchar) as min,\n          cast(max(\"rx_sig_v2_qty\") as varchar) as max,\n          avg(\"rx_sig_v2_qty\") as avg,\n          stddev_pop(\"rx_sig_v2_qty\") as std_dev_population,\n          stddev_samp(\"rx_sig_v2_qty\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_days\") as distinct_count,\n          count(distinct \"rx_sig_v2_days\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v2_days\") as varchar) as min,\n          cast(max(\"rx_sig_v2_days\") as varchar) as max,\n          avg(\"rx_sig_v2_days\") as avg,\n          stddev_pop(\"rx_sig_v2_days\") as std_dev_population,\n          stddev_samp(\"rx_sig_v2_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_qty_per_day') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_qty_per_day\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_qty_per_day\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_qty_per_day\") as distinct_count,\n          count(distinct \"rx_sig_v2_qty_per_day\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v2_qty_per_day\") as varchar) as min,\n          cast(max(\"rx_sig_v2_qty_per_day\") as varchar) as max,\n          avg(\"rx_sig_v2_qty_per_day\") as avg,\n          stddev_pop(\"rx_sig_v2_qty_per_day\") as std_dev_population,\n          stddev_samp(\"rx_sig_v2_qty_per_day\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_unit') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_unit\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_unit\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_unit\") as distinct_count,\n          count(distinct \"rx_sig_v2_unit\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_conf_score') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_conf_score\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_conf_score\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_conf_score\") as distinct_count,\n          count(distinct \"rx_sig_v2_conf_score\") = count(*) as is_unique,\n          cast(min(\"rx_sig_v2_conf_score\") as varchar) as min,\n          cast(max(\"rx_sig_v2_conf_score\") as varchar) as max,\n          avg(\"rx_sig_v2_conf_score\") as avg,\n          stddev_pop(\"rx_sig_v2_conf_score\") as std_dev_population,\n          stddev_samp(\"rx_sig_v2_conf_score\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_dosages') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_dosages\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_dosages\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_dosages\") as distinct_count,\n          count(distinct \"rx_sig_v2_dosages\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_scores') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_scores\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_scores\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_scores\") as distinct_count,\n          count(distinct \"rx_sig_v2_scores\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          55 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_frequencies') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_frequencies\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_frequencies\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_frequencies\") as distinct_count,\n          count(distinct \"rx_sig_v2_frequencies\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          56 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_v2_durations') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_v2_durations\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_v2_durations\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_v2_durations\") as distinct_count,\n          count(distinct \"rx_sig_v2_durations\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          57 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_autofill\") as distinct_count,\n          count(distinct \"rx_autofill\") = count(*) as is_unique,\n          cast(min(\"rx_autofill\") as varchar) as min,\n          cast(max(\"rx_autofill\") as varchar) as max,\n          avg(\"rx_autofill\") as avg,\n          stddev_pop(\"rx_autofill\") as std_dev_population,\n          stddev_samp(\"rx_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          58 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refill_date_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refill_date_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refill_date_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refill_date_first\") as distinct_count,\n          count(distinct \"rx_refill_date_first\") = count(*) as is_unique,\n          cast(min(\"rx_refill_date_first\") as varchar) as min,\n          cast(max(\"rx_refill_date_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          59 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refill_date_last\") as distinct_count,\n          count(distinct \"rx_refill_date_last\") = count(*) as is_unique,\n          cast(min(\"rx_refill_date_last\") as varchar) as min,\n          cast(max(\"rx_refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          60 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refill_date_manual\") as distinct_count,\n          count(distinct \"rx_refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"rx_refill_date_manual\") as varchar) as min,\n          cast(max(\"rx_refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          61 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_refill_date_next') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_refill_date_next\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_refill_date_next\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_refill_date_next\") as distinct_count,\n          count(distinct \"rx_refill_date_next\") = count(*) as is_unique,\n          cast(min(\"rx_refill_date_next\") as varchar) as min,\n          cast(max(\"rx_refill_date_next\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          62 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_status') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_status\") as distinct_count,\n          count(distinct \"rx_status\") = count(*) as is_unique,\n          cast(min(\"rx_status\") as varchar) as min,\n          cast(max(\"rx_status\") as varchar) as max,\n          avg(\"rx_status\") as avg,\n          stddev_pop(\"rx_status\") as std_dev_population,\n          stddev_samp(\"rx_status\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          63 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_stage') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_stage\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_stage\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_stage\") as distinct_count,\n          count(distinct \"rx_stage\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          64 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_source') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_source\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_source\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_source\") as distinct_count,\n          count(distinct \"rx_source\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          65 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_transferred_out') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_transferred_out\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_transferred_out\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_transferred_out\") as distinct_count,\n          count(distinct \"rx_date_transferred_out\") = count(*) as is_unique,\n          cast(min(\"rx_date_transferred_out\") as varchar) as min,\n          cast(max(\"rx_date_transferred_out\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          66 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_transferred_in') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_transferred_in\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_transferred_in\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_transferred_in\") as distinct_count,\n          count(distinct \"rx_date_transferred_in\") = count(*) as is_unique,\n          cast(min(\"rx_date_transferred_in\") as varchar) as min,\n          cast(max(\"rx_date_transferred_in\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          67 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_phone\") as distinct_count,\n          count(distinct \"provider_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          68 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_clinic_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_clinic_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_clinic_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_clinic_name\") as distinct_count,\n          count(distinct \"rx_clinic_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          69 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_added_first_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_added_first_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_added_first_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_added_first_at\") as distinct_count,\n          count(distinct \"rx_added_first_at\") = count(*) as is_unique,\n          cast(min(\"rx_added_first_at\") as varchar) as min,\n          cast(max(\"rx_added_first_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          70 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_added_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_added_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_added_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_added_last_at\") as distinct_count,\n          count(distinct \"rx_added_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_added_last_at\") as varchar) as min,\n          cast(max(\"rx_added_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          71 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_changed\") as distinct_count,\n          count(distinct \"rx_date_changed\") = count(*) as is_unique,\n          cast(min(\"rx_date_changed\") as varchar) as min,\n          cast(max(\"rx_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          72 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_expired\") as distinct_count,\n          count(distinct \"rx_date_expired\") = count(*) as is_unique,\n          cast(min(\"rx_date_expired\") as varchar) as min,\n          cast(max(\"rx_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          73 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_date_added\") as distinct_count,\n          count(distinct \"rx_date_added\") = count(*) as is_unique,\n          cast(min(\"rx_date_added\") as varchar) as min,\n          cast(max(\"rx_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          74 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_stock_level_initial') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_stock_level_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_stock_level_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_stock_level_initial\") as distinct_count,\n          count(distinct \"rx_stock_level_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          75 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_created_at\") as distinct_count,\n          count(distinct \"rx_created_at\") = count(*) as is_unique,\n          cast(min(\"rx_created_at\") as varchar) as min,\n          cast(max(\"rx_created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          76 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_updated_at\") as distinct_count,\n          count(distinct \"rx_updated_at\") = count(*) as is_unique,\n          cast(min(\"rx_updated_at\") as varchar) as min,\n          cast(max(\"rx_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          77 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_created_at\") as distinct_count,\n          count(distinct \"rx_group_created_at\") = count(*) as is_unique,\n          cast(min(\"rx_group_created_at\") as varchar) as min,\n          cast(max(\"rx_group_created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          78 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_updated_at\") as distinct_count,\n          count(distinct \"rx_group_updated_at\") = count(*) as is_unique,\n          cast(min(\"rx_group_updated_at\") as varchar) as min,\n          cast(max(\"rx_group_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          79 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_clinic_name_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_clinic_name_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_clinic_name_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_clinic_name_cp\") as distinct_count,\n          count(distinct \"rx_clinic_name_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          80 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rxs_single_status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rxs_single_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rxs_single_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rxs_single_status\") as distinct_count,\n          count(distinct \"rxs_single_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          81 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_status_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_status_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_status_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_status_updated_at\") as distinct_count,\n          count(distinct \"rx_status_updated_at\") = count(*) as is_unique,\n          cast(min(\"rx_status_updated_at\") as varchar) as min,\n          cast(max(\"rx_status_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          82 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_provider_email') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_provider_email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_provider_email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_provider_email\") as distinct_count,\n          count(distinct \"rx_provider_email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          83 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_inactivated_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_inactivated_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_inactivated_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_inactivated_last_at\") as distinct_count,\n          count(distinct \"rx_inactivated_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_inactivated_last_at\") as varchar) as min,\n          cast(max(\"rx_inactivated_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          84 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_activated_last_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_activated_last_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_activated_last_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_activated_last_at\") as distinct_count,\n          count(distinct \"rx_activated_last_at\") = count(*) as is_unique,\n          cast(min(\"rx_activated_last_at\") as varchar) as min,\n          cast(max(\"rx_activated_last_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          85 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_status\") as distinct_count,\n          count(distinct \"rx_group_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          86 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_drug_generic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_drug_generic\") as distinct_count,\n          count(distinct \"rx_group_drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          87 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_drug_brand\") as distinct_count,\n          count(distinct \"rx_group_drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          88 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_id\") as distinct_count,\n          count(distinct \"rx_group_id\") = count(*) as is_unique,\n          cast(min(\"rx_group_id\") as varchar) as min,\n          cast(max(\"rx_group_id\") as varchar) as max,\n          avg(\"rx_group_id\") as avg,\n          stddev_pop(\"rx_group_id\") as std_dev_population,\n          stddev_samp(\"rx_group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          89 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_drug_gsns\") as distinct_count,\n          count(distinct \"rx_group_drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          90 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_rx_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_rx_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_rx_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_rx_autofill\") as distinct_count,\n          count(distinct \"rx_group_rx_autofill\") = count(*) as is_unique,\n          cast(min(\"rx_group_rx_autofill\") as varchar) as min,\n          cast(max(\"rx_group_rx_autofill\") as varchar) as max,\n          avg(\"rx_group_rx_autofill\") as avg,\n          stddev_pop(\"rx_group_rx_autofill\") as std_dev_population,\n          stddev_samp(\"rx_group_rx_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          91 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_refill_date_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_refill_date_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_refill_date_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_refill_date_first\") as distinct_count,\n          count(distinct \"rx_group_refill_date_first\") = count(*) as is_unique,\n          cast(min(\"rx_group_refill_date_first\") as varchar) as min,\n          cast(max(\"rx_group_refill_date_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          92 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_refill_date_last\") as distinct_count,\n          count(distinct \"rx_group_refill_date_last\") = count(*) as is_unique,\n          cast(min(\"rx_group_refill_date_last\") as varchar) as min,\n          cast(max(\"rx_group_refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          93 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_refill_date_manual\") as distinct_count,\n          count(distinct \"rx_group_refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"rx_group_refill_date_manual\") as varchar) as min,\n          cast(max(\"rx_group_refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          94 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_refill_date_default') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_refill_date_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_refill_date_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_refill_date_default\") as distinct_count,\n          count(distinct \"rx_group_refill_date_default\") = count(*) as is_unique,\n          cast(min(\"rx_group_refill_date_default\") as varchar) as min,\n          cast(max(\"rx_group_refill_date_default\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          95 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_rx_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_rx_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_rx_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_rx_date_changed\") as distinct_count,\n          count(distinct \"rx_group_rx_date_changed\") = count(*) as is_unique,\n          cast(min(\"rx_group_rx_date_changed\") as varchar) as min,\n          cast(max(\"rx_group_rx_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          96 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_group_rx_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_group_rx_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_group_rx_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_group_rx_date_expired\") as distinct_count,\n          count(distinct \"rx_group_rx_date_expired\") = count(*) as is_unique,\n          cast(min(\"rx_group_rx_date_expired\") as varchar) as min,\n          cast(max(\"rx_group_rx_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          97 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_transfer_pharmacy_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_transfer_pharmacy_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_transfer_pharmacy_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_transfer_pharmacy_phone\") as distinct_count,\n          count(distinct \"rx_transfer_pharmacy_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          98 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_transfer_pharmacy_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_transfer_pharmacy_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_transfer_pharmacy_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_transfer_pharmacy_name\") as distinct_count,\n          count(distinct \"rx_transfer_pharmacy_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          99 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_transfer_pharmacy_fax') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_transfer_pharmacy_fax\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_transfer_pharmacy_fax\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_transfer_pharmacy_fax\") as distinct_count,\n          count(distinct \"rx_transfer_pharmacy_fax\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          100 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_transfer_pharmacy_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_transfer_pharmacy_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_transfer_pharmacy_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_transfer_pharmacy_address\") as distinct_count,\n          count(distinct \"rx_transfer_pharmacy_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          101 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_confirmed_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_confirmed_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_confirmed_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_confirmed_by\") as distinct_count,\n          count(distinct \"rx_sig_confirmed_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          102 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('rx_sig_confirmed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"rx_sig_confirmed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"rx_sig_confirmed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"rx_sig_confirmed_at\") as distinct_count,\n          count(distinct \"rx_sig_confirmed_at\") = count(*) as is_unique,\n          cast(min(\"rx_sig_confirmed_at\") as varchar) as min,\n          cast(max(\"rx_sig_confirmed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          103 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_line_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_line_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_line_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_line_id\") as distinct_count,\n          count(distinct \"item_line_id\") = count(*) as is_unique,\n          cast(min(\"item_line_id\") as varchar) as min,\n          cast(max(\"item_line_id\") as varchar) as max,\n          avg(\"item_line_id\") as avg,\n          stddev_pop(\"item_line_id\") as std_dev_population,\n          stddev_samp(\"item_line_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          104 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_groups') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_groups\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_groups\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_groups\") as distinct_count,\n          count(distinct \"item_groups\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          105 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_rx_dispensed_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_rx_dispensed_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_rx_dispensed_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_rx_dispensed_id\") as distinct_count,\n          count(distinct \"item_rx_dispensed_id\") = count(*) as is_unique,\n          cast(min(\"item_rx_dispensed_id\") as varchar) as min,\n          cast(max(\"item_rx_dispensed_id\") as varchar) as max,\n          avg(\"item_rx_dispensed_id\") as avg,\n          stddev_pop(\"item_rx_dispensed_id\") as std_dev_population,\n          stddev_samp(\"item_rx_dispensed_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          106 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_stock_level_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_stock_level_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_stock_level_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_stock_level_initial\") as distinct_count,\n          count(distinct \"item_stock_level_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          107 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_rx_message_keys_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_rx_message_keys_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_rx_message_keys_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_rx_message_keys_initial\") as distinct_count,\n          count(distinct \"item_rx_message_keys_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          108 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_patient_autofill_initial') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_patient_autofill_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_patient_autofill_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_patient_autofill_initial\") as distinct_count,\n          count(distinct \"item_patient_autofill_initial\") = count(*) as is_unique,\n          cast(min(\"item_patient_autofill_initial\") as varchar) as min,\n          cast(max(\"item_patient_autofill_initial\") as varchar) as max,\n          avg(\"item_patient_autofill_initial\") as avg,\n          stddev_pop(\"item_patient_autofill_initial\") as std_dev_population,\n          stddev_samp(\"item_patient_autofill_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          109 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_rx_autofill_initial') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_rx_autofill_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_rx_autofill_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_rx_autofill_initial\") as distinct_count,\n          count(distinct \"item_rx_autofill_initial\") = count(*) as is_unique,\n          cast(min(\"item_rx_autofill_initial\") as varchar) as min,\n          cast(max(\"item_rx_autofill_initial\") as varchar) as max,\n          avg(\"item_rx_autofill_initial\") as avg,\n          stddev_pop(\"item_rx_autofill_initial\") as std_dev_population,\n          stddev_samp(\"item_rx_autofill_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          110 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_rx_numbers_initial') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_rx_numbers_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_rx_numbers_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_rx_numbers_initial\") as distinct_count,\n          count(distinct \"item_rx_numbers_initial\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          111 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_zscore_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_zscore_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_zscore_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_zscore_initial\") as distinct_count,\n          count(distinct \"item_zscore_initial\") = count(*) as is_unique,\n          cast(min(\"item_zscore_initial\") as varchar) as min,\n          cast(max(\"item_zscore_initial\") as varchar) as max,\n          avg(\"item_zscore_initial\") as avg,\n          stddev_pop(\"item_zscore_initial\") as std_dev_population,\n          stddev_samp(\"item_zscore_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          112 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_refills_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_refills_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_refills_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_refills_dispensed_default\") as distinct_count,\n          count(distinct \"item_refills_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"item_refills_dispensed_default\") as varchar) as min,\n          cast(max(\"item_refills_dispensed_default\") as varchar) as max,\n          avg(\"item_refills_dispensed_default\") as avg,\n          stddev_pop(\"item_refills_dispensed_default\") as std_dev_population,\n          stddev_samp(\"item_refills_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          113 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_refills_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_refills_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_refills_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_refills_dispensed_actual\") as distinct_count,\n          count(distinct \"item_refills_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"item_refills_dispensed_actual\") as varchar) as min,\n          cast(max(\"item_refills_dispensed_actual\") as varchar) as max,\n          avg(\"item_refills_dispensed_actual\") as avg,\n          stddev_pop(\"item_refills_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"item_refills_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          114 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_days_dispensed_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_days_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_days_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_days_dispensed_default\") as distinct_count,\n          count(distinct \"item_days_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"item_days_dispensed_default\") as varchar) as min,\n          cast(max(\"item_days_dispensed_default\") as varchar) as max,\n          avg(\"item_days_dispensed_default\") as avg,\n          stddev_pop(\"item_days_dispensed_default\") as std_dev_population,\n          stddev_samp(\"item_days_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          115 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_days_dispensed_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_days_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_days_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_days_dispensed_actual\") as distinct_count,\n          count(distinct \"item_days_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"item_days_dispensed_actual\") as varchar) as min,\n          cast(max(\"item_days_dispensed_actual\") as varchar) as max,\n          avg(\"item_days_dispensed_actual\") as avg,\n          stddev_pop(\"item_days_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"item_days_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          116 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_qty_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_qty_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_qty_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_qty_dispensed_default\") as distinct_count,\n          count(distinct \"item_qty_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"item_qty_dispensed_default\") as varchar) as min,\n          cast(max(\"item_qty_dispensed_default\") as varchar) as max,\n          avg(\"item_qty_dispensed_default\") as avg,\n          stddev_pop(\"item_qty_dispensed_default\") as std_dev_population,\n          stddev_samp(\"item_qty_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          117 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_qty_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_qty_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_qty_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_qty_dispensed_actual\") as distinct_count,\n          count(distinct \"item_qty_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"item_qty_dispensed_actual\") as varchar) as min,\n          cast(max(\"item_qty_dispensed_actual\") as varchar) as max,\n          avg(\"item_qty_dispensed_actual\") as avg,\n          stddev_pop(\"item_qty_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"item_qty_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          118 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_price_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_price_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_price_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_price_dispensed_default\") as distinct_count,\n          count(distinct \"item_price_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"item_price_dispensed_default\") as varchar) as min,\n          cast(max(\"item_price_dispensed_default\") as varchar) as max,\n          avg(\"item_price_dispensed_default\") as avg,\n          stddev_pop(\"item_price_dispensed_default\") as std_dev_population,\n          stddev_samp(\"item_price_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          119 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_price_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_price_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_price_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_price_dispensed_actual\") as distinct_count,\n          count(distinct \"item_price_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"item_price_dispensed_actual\") as varchar) as min,\n          cast(max(\"item_price_dispensed_actual\") as varchar) as max,\n          avg(\"item_price_dispensed_actual\") as avg,\n          stddev_pop(\"item_price_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"item_price_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          120 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_unit_price_retail_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_unit_price_retail_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_unit_price_retail_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_unit_price_retail_initial\") as distinct_count,\n          count(distinct \"item_unit_price_retail_initial\") = count(*) as is_unique,\n          cast(min(\"item_unit_price_retail_initial\") as varchar) as min,\n          cast(max(\"item_unit_price_retail_initial\") as varchar) as max,\n          avg(\"item_unit_price_retail_initial\") as avg,\n          stddev_pop(\"item_unit_price_retail_initial\") as std_dev_population,\n          stddev_samp(\"item_unit_price_retail_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          121 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_unit_price_goodrx_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_unit_price_goodrx_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_unit_price_goodrx_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_unit_price_goodrx_initial\") as distinct_count,\n          count(distinct \"item_unit_price_goodrx_initial\") = count(*) as is_unique,\n          cast(min(\"item_unit_price_goodrx_initial\") as varchar) as min,\n          cast(max(\"item_unit_price_goodrx_initial\") as varchar) as max,\n          avg(\"item_unit_price_goodrx_initial\") as avg,\n          stddev_pop(\"item_unit_price_goodrx_initial\") as std_dev_population,\n          stddev_samp(\"item_unit_price_goodrx_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          122 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_unit_price_nadac_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_unit_price_nadac_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_unit_price_nadac_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_unit_price_nadac_initial\") as distinct_count,\n          count(distinct \"item_unit_price_nadac_initial\") = count(*) as is_unique,\n          cast(min(\"item_unit_price_nadac_initial\") as varchar) as min,\n          cast(max(\"item_unit_price_nadac_initial\") as varchar) as max,\n          avg(\"item_unit_price_nadac_initial\") as avg,\n          stddev_pop(\"item_unit_price_nadac_initial\") as std_dev_population,\n          stddev_samp(\"item_unit_price_nadac_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          123 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_unit_price_awp_initial') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_unit_price_awp_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_unit_price_awp_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_unit_price_awp_initial\") as distinct_count,\n          count(distinct \"item_unit_price_awp_initial\") = count(*) as is_unique,\n          cast(min(\"item_unit_price_awp_initial\") as varchar) as min,\n          cast(max(\"item_unit_price_awp_initial\") as varchar) as max,\n          avg(\"item_unit_price_awp_initial\") as avg,\n          stddev_pop(\"item_unit_price_awp_initial\") as std_dev_population,\n          stddev_samp(\"item_unit_price_awp_initial\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          124 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_qty_pended_total') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_qty_pended_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_qty_pended_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_qty_pended_total\") as distinct_count,\n          count(distinct \"item_qty_pended_total\") = count(*) as is_unique,\n          cast(min(\"item_qty_pended_total\") as varchar) as min,\n          cast(max(\"item_qty_pended_total\") as varchar) as max,\n          avg(\"item_qty_pended_total\") as avg,\n          stddev_pop(\"item_qty_pended_total\") as std_dev_population,\n          stddev_samp(\"item_qty_pended_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          125 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_qty_pended_repacks') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_qty_pended_repacks\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_qty_pended_repacks\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_qty_pended_repacks\") as distinct_count,\n          count(distinct \"item_qty_pended_repacks\") = count(*) as is_unique,\n          cast(min(\"item_qty_pended_repacks\") as varchar) as min,\n          cast(max(\"item_qty_pended_repacks\") as varchar) as max,\n          avg(\"item_qty_pended_repacks\") as avg,\n          stddev_pop(\"item_qty_pended_repacks\") as std_dev_population,\n          stddev_samp(\"item_qty_pended_repacks\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          126 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_count_pended_total') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_count_pended_total\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_count_pended_total\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_count_pended_total\") as distinct_count,\n          count(distinct \"item_count_pended_total\") = count(*) as is_unique,\n          cast(min(\"item_count_pended_total\") as varchar) as min,\n          cast(max(\"item_count_pended_total\") as varchar) as max,\n          avg(\"item_count_pended_total\") as avg,\n          stddev_pop(\"item_count_pended_total\") as std_dev_population,\n          stddev_samp(\"item_count_pended_total\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          127 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_count_pended_repacks') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_count_pended_repacks\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_count_pended_repacks\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_count_pended_repacks\") as distinct_count,\n          count(distinct \"item_count_pended_repacks\") = count(*) as is_unique,\n          cast(min(\"item_count_pended_repacks\") as varchar) as min,\n          cast(max(\"item_count_pended_repacks\") as varchar) as max,\n          avg(\"item_count_pended_repacks\") as avg,\n          stddev_pop(\"item_count_pended_repacks\") as std_dev_population,\n          stddev_samp(\"item_count_pended_repacks\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          128 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_message_keys') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_message_keys\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_message_keys\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_message_keys\") as distinct_count,\n          count(distinct \"item_message_keys\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          129 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_message_text') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_message_text\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_message_text\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_message_text\") as distinct_count,\n          count(distinct \"item_message_text\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          130 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_type\") as distinct_count,\n          count(distinct \"item_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          131 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_added_by') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_added_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_added_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_added_by\") as distinct_count,\n          count(distinct \"item_added_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          132 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_date_added\") as distinct_count,\n          count(distinct \"item_date_added\") = count(*) as is_unique,\n          cast(min(\"item_date_added\") as varchar) as min,\n          cast(max(\"item_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          133 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_date_changed\") as distinct_count,\n          count(distinct \"item_date_changed\") = count(*) as is_unique,\n          cast(min(\"item_date_changed\") as varchar) as min,\n          cast(max(\"item_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          134 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_date_updated') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_date_updated\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_date_updated\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_date_updated\") as distinct_count,\n          count(distinct \"item_date_updated\") = count(*) as is_unique,\n          cast(min(\"item_date_updated\") as varchar) as min,\n          cast(max(\"item_date_updated\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          135 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_days_and_message_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_days_and_message_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_days_and_message_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_days_and_message_updated_at\") as distinct_count,\n          count(distinct \"item_days_and_message_updated_at\") = count(*) as is_unique,\n          cast(min(\"item_days_and_message_updated_at\") as varchar) as min,\n          cast(max(\"item_days_and_message_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          136 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_days_and_message_initial_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_days_and_message_initial_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_days_and_message_initial_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_days_and_message_initial_at\") as distinct_count,\n          count(distinct \"item_days_and_message_initial_at\") = count(*) as is_unique,\n          cast(min(\"item_days_and_message_initial_at\") as varchar) as min,\n          cast(max(\"item_days_and_message_initial_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          137 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_days_pended') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_days_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_days_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_days_pended\") as distinct_count,\n          count(distinct \"item_days_pended\") = count(*) as is_unique,\n          cast(min(\"item_days_pended\") as varchar) as min,\n          cast(max(\"item_days_pended\") as varchar) as max,\n          avg(\"item_days_pended\") as avg,\n          stddev_pop(\"item_days_pended\") as std_dev_population,\n          stddev_samp(\"item_days_pended\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          138 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_qty_per_day_pended') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_qty_per_day_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_qty_per_day_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_qty_per_day_pended\") as distinct_count,\n          count(distinct \"item_qty_per_day_pended\") = count(*) as is_unique,\n          cast(min(\"item_qty_per_day_pended\") as varchar) as min,\n          cast(max(\"item_qty_per_day_pended\") as varchar) as max,\n          avg(\"item_qty_per_day_pended\") as avg,\n          stddev_pop(\"item_qty_per_day_pended\") as std_dev_population,\n          stddev_samp(\"item_qty_per_day_pended\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          139 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_refill_date_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_refill_date_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_refill_date_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_refill_date_last\") as distinct_count,\n          count(distinct \"item_refill_date_last\") = count(*) as is_unique,\n          cast(min(\"item_refill_date_last\") as varchar) as min,\n          cast(max(\"item_refill_date_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          140 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_refill_date_manual') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_refill_date_manual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_refill_date_manual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_refill_date_manual\") as distinct_count,\n          count(distinct \"item_refill_date_manual\") = count(*) as is_unique,\n          cast(min(\"item_refill_date_manual\") as varchar) as min,\n          cast(max(\"item_refill_date_manual\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          141 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_refill_date_default') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_refill_date_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_refill_date_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_refill_date_default\") as distinct_count,\n          count(distinct \"item_refill_date_default\") = count(*) as is_unique,\n          cast(min(\"item_refill_date_default\") as varchar) as min,\n          cast(max(\"item_refill_date_default\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          142 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_add_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_add_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_add_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_add_user_id\") as distinct_count,\n          count(distinct \"item_add_user_id\") = count(*) as is_unique,\n          cast(min(\"item_add_user_id\") as varchar) as min,\n          cast(max(\"item_add_user_id\") as varchar) as max,\n          avg(\"item_add_user_id\") as avg,\n          stddev_pop(\"item_add_user_id\") as std_dev_population,\n          stddev_samp(\"item_add_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          143 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_chg_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_chg_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_chg_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_chg_user_id\") as distinct_count,\n          count(distinct \"item_chg_user_id\") = count(*) as is_unique,\n          cast(min(\"item_chg_user_id\") as varchar) as min,\n          cast(max(\"item_chg_user_id\") as varchar) as max,\n          avg(\"item_chg_user_id\") as avg,\n          stddev_pop(\"item_chg_user_id\") as std_dev_population,\n          stddev_samp(\"item_chg_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          144 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_count_lines') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_count_lines\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_count_lines\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_count_lines\") as distinct_count,\n          count(distinct \"item_count_lines\") = count(*) as is_unique,\n          cast(min(\"item_count_lines\") as varchar) as min,\n          cast(max(\"item_count_lines\") as varchar) as max,\n          avg(\"item_count_lines\") as avg,\n          stddev_pop(\"item_count_lines\") as std_dev_population,\n          stddev_samp(\"item_count_lines\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          145 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_repacked_by') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_repacked_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_repacked_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_repacked_by\") as distinct_count,\n          count(distinct \"item_repacked_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          146 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_unpended_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_unpended_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_unpended_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_unpended_at\") as distinct_count,\n          count(distinct \"item_unpended_at\") = count(*) as is_unique,\n          cast(min(\"item_unpended_at\") as varchar) as min,\n          cast(max(\"item_unpended_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          147 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_initial_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_initial_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_initial_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_initial_at\") as distinct_count,\n          count(distinct \"item_pend_initial_at\") = count(*) as is_unique,\n          cast(min(\"item_pend_initial_at\") as varchar) as min,\n          cast(max(\"item_pend_initial_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          148 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_updated_at\") as distinct_count,\n          count(distinct \"item_pend_updated_at\") = count(*) as is_unique,\n          cast(min(\"item_pend_updated_at\") as varchar) as min,\n          cast(max(\"item_pend_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          149 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_ndc_pended') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_ndc_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_ndc_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_ndc_pended\") as distinct_count,\n          count(distinct \"item_ndc_pended\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          150 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_drug_generic_pended') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_drug_generic_pended\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_drug_generic_pended\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_drug_generic_pended\") as distinct_count,\n          count(distinct \"item_drug_generic_pended\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          151 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_filled_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_filled_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_filled_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_filled_at\") as distinct_count,\n          count(distinct \"item_filled_at\") = count(*) as is_unique,\n          cast(min(\"item_filled_at\") as varchar) as min,\n          cast(max(\"item_filled_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          152 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_failed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_failed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_failed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_failed_at\") as distinct_count,\n          count(distinct \"item_pend_failed_at\") = count(*) as is_unique,\n          cast(min(\"item_pend_failed_at\") as varchar) as min,\n          cast(max(\"item_pend_failed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          153 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_filled_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_filled_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_filled_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_filled_by\") as distinct_count,\n          count(distinct \"item_filled_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          154 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_retried_by') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_retried_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_retried_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_retried_by\") as distinct_count,\n          count(distinct \"item_pend_retried_by\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          155 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_status\") as distinct_count,\n          count(distinct \"item_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          156 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_retried_days') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_retried_days\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_retried_days\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_retried_days\") as distinct_count,\n          count(distinct \"item_pend_retried_days\") = count(*) as is_unique,\n          cast(min(\"item_pend_retried_days\") as varchar) as min,\n          cast(max(\"item_pend_retried_days\") as varchar) as max,\n          avg(\"item_pend_retried_days\") as avg,\n          stddev_pop(\"item_pend_retried_days\") as std_dev_population,\n          stddev_samp(\"item_pend_retried_days\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          157 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('item_pend_retried_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"item_pend_retried_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"item_pend_retried_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"item_pend_retried_at\") as distinct_count,\n          count(distinct \"item_pend_retried_at\") = count(*) as is_unique,\n          cast(min(\"item_pend_retried_at\") as varchar) as min,\n          cast(max(\"item_pend_retried_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          158 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_added\") as distinct_count,\n          count(distinct \"order_date_added\") = count(*) as is_unique,\n          cast(min(\"order_date_added\") as varchar) as min,\n          cast(max(\"order_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          159 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_dispensed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_dispensed\") as distinct_count,\n          count(distinct \"order_date_dispensed\") = count(*) as is_unique,\n          cast(min(\"order_date_dispensed\") as varchar) as min,\n          cast(max(\"order_date_dispensed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          160 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_shipped') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_shipped\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_shipped\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_shipped\") as distinct_count,\n          count(distinct \"order_date_shipped\") = count(*) as is_unique,\n          cast(min(\"order_date_shipped\") as varchar) as min,\n          cast(max(\"order_date_shipped\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          161 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_returned') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_returned\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_returned\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_returned\") as distinct_count,\n          count(distinct \"order_date_returned\") = count(*) as is_unique,\n          cast(min(\"order_date_returned\") as varchar) as min,\n          cast(max(\"order_date_returned\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          162 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_count_items') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_count_items\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_count_items\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_count_items\") as distinct_count,\n          count(distinct \"order_count_items\") = count(*) as is_unique,\n          cast(min(\"order_count_items\") as varchar) as min,\n          cast(max(\"order_count_items\") as varchar) as max,\n          avg(\"order_count_items\") as avg,\n          stddev_pop(\"order_count_items\") as std_dev_population,\n          stddev_samp(\"order_count_items\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          163 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_count_filled') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_count_filled\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_count_filled\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_count_filled\") as distinct_count,\n          count(distinct \"order_count_filled\") = count(*) as is_unique,\n          cast(min(\"order_count_filled\") as varchar) as min,\n          cast(max(\"order_count_filled\") as varchar) as max,\n          avg(\"order_count_filled\") as avg,\n          stddev_pop(\"order_count_filled\") as std_dev_population,\n          stddev_samp(\"order_count_filled\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          164 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_count_nofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_count_nofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_count_nofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_count_nofill\") as distinct_count,\n          count(distinct \"order_count_nofill\") = count(*) as is_unique,\n          cast(min(\"order_count_nofill\") as varchar) as min,\n          cast(max(\"order_count_nofill\") as varchar) as max,\n          avg(\"order_count_nofill\") as avg,\n          stddev_pop(\"order_count_nofill\") as std_dev_population,\n          stddev_samp(\"order_count_nofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          165 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_priority') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_priority\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_priority\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_priority\") as distinct_count,\n          count(distinct \"order_priority\") = count(*) as is_unique,\n          cast(min(\"order_priority\") as varchar) as min,\n          cast(max(\"order_priority\") as varchar) as max,\n          avg(\"order_priority\") as avg,\n          stddev_pop(\"order_priority\") as std_dev_population,\n          stddev_samp(\"order_priority\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          166 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_source') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_source\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_source\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_source\") as distinct_count,\n          count(distinct \"order_source\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          167 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_cp\") as distinct_count,\n          count(distinct \"order_stage_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          168 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_wc') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_wc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_wc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_wc\") as distinct_count,\n          count(distinct \"order_stage_wc\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          169 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_status') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_status\") as distinct_count,\n          count(distinct \"order_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          170 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_address1') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_address1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_address1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_address1\") as distinct_count,\n          count(distinct \"order_address1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          171 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_address2') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_address2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_address2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_address2\") as distinct_count,\n          count(distinct \"order_address2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          172 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_invoice_doc_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_invoice_doc_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_invoice_doc_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_invoice_doc_id\") as distinct_count,\n          count(distinct \"order_invoice_doc_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          173 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_tracking_number') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_tracking_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_tracking_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_tracking_number\") as distinct_count,\n          count(distinct \"order_tracking_number\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          174 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_total_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_total_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_total_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_total_default\") as distinct_count,\n          count(distinct \"order_payment_total_default\") = count(*) as is_unique,\n          cast(min(\"order_payment_total_default\") as varchar) as min,\n          cast(max(\"order_payment_total_default\") as varchar) as max,\n          avg(\"order_payment_total_default\") as avg,\n          stddev_pop(\"order_payment_total_default\") as std_dev_population,\n          stddev_samp(\"order_payment_total_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          175 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_total_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_total_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_total_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_total_actual\") as distinct_count,\n          count(distinct \"order_payment_total_actual\") = count(*) as is_unique,\n          cast(min(\"order_payment_total_actual\") as varchar) as min,\n          cast(max(\"order_payment_total_actual\") as varchar) as max,\n          avg(\"order_payment_total_actual\") as avg,\n          stddev_pop(\"order_payment_total_actual\") as std_dev_population,\n          stddev_samp(\"order_payment_total_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          176 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_fee_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_fee_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_fee_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_fee_default\") as distinct_count,\n          count(distinct \"order_payment_fee_default\") = count(*) as is_unique,\n          cast(min(\"order_payment_fee_default\") as varchar) as min,\n          cast(max(\"order_payment_fee_default\") as varchar) as max,\n          avg(\"order_payment_fee_default\") as avg,\n          stddev_pop(\"order_payment_fee_default\") as std_dev_population,\n          stddev_samp(\"order_payment_fee_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          177 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_fee_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_fee_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_fee_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_fee_actual\") as distinct_count,\n          count(distinct \"order_payment_fee_actual\") = count(*) as is_unique,\n          cast(min(\"order_payment_fee_actual\") as varchar) as min,\n          cast(max(\"order_payment_fee_actual\") as varchar) as max,\n          avg(\"order_payment_fee_actual\") as avg,\n          stddev_pop(\"order_payment_fee_actual\") as std_dev_population,\n          stddev_samp(\"order_payment_fee_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          178 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_due_default') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_due_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_due_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_due_default\") as distinct_count,\n          count(distinct \"order_payment_due_default\") = count(*) as is_unique,\n          cast(min(\"order_payment_due_default\") as varchar) as min,\n          cast(max(\"order_payment_due_default\") as varchar) as max,\n          avg(\"order_payment_due_default\") as avg,\n          stddev_pop(\"order_payment_due_default\") as std_dev_population,\n          stddev_samp(\"order_payment_due_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          179 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_due_actual') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_due_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_due_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_due_actual\") as distinct_count,\n          count(distinct \"order_payment_due_actual\") = count(*) as is_unique,\n          cast(min(\"order_payment_due_actual\") as varchar) as min,\n          cast(max(\"order_payment_due_actual\") as varchar) as max,\n          avg(\"order_payment_due_actual\") as avg,\n          stddev_pop(\"order_payment_due_actual\") as std_dev_population,\n          stddev_samp(\"order_payment_due_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          180 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_date_autopay') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_date_autopay\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_date_autopay\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_date_autopay\") as distinct_count,\n          count(distinct \"order_payment_date_autopay\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          181 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_method_actual') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_method_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_method_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_method_actual\") as distinct_count,\n          count(distinct \"order_payment_method_actual\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          182 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_default_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_default_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_default_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_default_updated_at\") as distinct_count,\n          count(distinct \"order_payment_default_updated_at\") = count(*) as is_unique,\n          cast(min(\"order_payment_default_updated_at\") as varchar) as min,\n          cast(max(\"order_payment_default_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          183 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_actual_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_actual_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_actual_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_actual_updated_at\") as distinct_count,\n          count(distinct \"order_payment_actual_updated_at\") = count(*) as is_unique,\n          cast(min(\"order_payment_actual_updated_at\") as varchar) as min,\n          cast(max(\"order_payment_actual_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          184 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_payment_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_payment_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_payment_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_payment_coupon\") as distinct_count,\n          count(distinct \"order_payment_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          185 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_changed\") as distinct_count,\n          count(distinct \"order_date_changed\") = count(*) as is_unique,\n          cast(min(\"order_date_changed\") as varchar) as min,\n          cast(max(\"order_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          186 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_delivered') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_delivered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_delivered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_delivered\") as distinct_count,\n          count(distinct \"order_date_delivered\") = count(*) as is_unique,\n          cast(min(\"order_date_delivered\") as varchar) as min,\n          cast(max(\"order_date_delivered\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          187 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expedited') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expedited\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expedited\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expedited\") as distinct_count,\n          count(distinct \"order_date_expedited\") = count(*) as is_unique,\n          cast(min(\"order_date_expedited\") as varchar) as min,\n          cast(max(\"order_date_expedited\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          188 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expected') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expected\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expected\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expected\") as distinct_count,\n          count(distinct \"order_date_expected\") = count(*) as is_unique,\n          cast(min(\"order_date_expected\") as varchar) as min,\n          cast(max(\"order_date_expected\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          189 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_expected_initial') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_expected_initial\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_expected_initial\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_expected_initial\") as distinct_count,\n          count(distinct \"order_date_expected_initial\") = count(*) as is_unique,\n          cast(min(\"order_date_expected_initial\") as varchar) as min,\n          cast(max(\"order_date_expected_initial\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          190 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_failed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_failed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_failed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_failed\") as distinct_count,\n          count(distinct \"order_date_failed\") = count(*) as is_unique,\n          cast(min(\"order_date_failed\") as varchar) as min,\n          cast(max(\"order_date_failed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          191 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_date_updated') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_date_updated\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_date_updated\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_date_updated\") as distinct_count,\n          count(distinct \"order_date_updated\") = count(*) as is_unique,\n          cast(min(\"order_date_updated\") as varchar) as min,\n          cast(max(\"order_date_updated\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          192 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_stage_wc_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_stage_wc_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_stage_wc_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_stage_wc_updated_at\") as distinct_count,\n          count(distinct \"order_stage_wc_updated_at\") = count(*) as is_unique,\n          cast(min(\"order_stage_wc_updated_at\") as varchar) as min,\n          cast(max(\"order_stage_wc_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          193 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_add_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_add_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_add_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_add_user_id\") as distinct_count,\n          count(distinct \"order_add_user_id\") = count(*) as is_unique,\n          cast(min(\"order_add_user_id\") as varchar) as min,\n          cast(max(\"order_add_user_id\") as varchar) as max,\n          avg(\"order_add_user_id\") as avg,\n          stddev_pop(\"order_add_user_id\") as std_dev_population,\n          stddev_samp(\"order_add_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          194 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_chg_user_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_chg_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_chg_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_chg_user_id\") as distinct_count,\n          count(distinct \"order_chg_user_id\") = count(*) as is_unique,\n          cast(min(\"order_chg_user_id\") as varchar) as min,\n          cast(max(\"order_chg_user_id\") as varchar) as max,\n          avg(\"order_chg_user_id\") as avg,\n          stddev_pop(\"order_chg_user_id\") as std_dev_population,\n          stddev_samp(\"order_chg_user_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          195 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_shipping_speed') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_shipping_speed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_shipping_speed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_shipping_speed\") as distinct_count,\n          count(distinct \"order_shipping_speed\") = count(*) as is_unique,\n          cast(min(\"order_shipping_speed\") as varchar) as min,\n          cast(max(\"order_shipping_speed\") as varchar) as max,\n          avg(\"order_shipping_speed\") as avg,\n          stddev_pop(\"order_shipping_speed\") as std_dev_population,\n          stddev_samp(\"order_shipping_speed\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          196 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_rx_group_removals_checked_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_rx_group_removals_checked_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_rx_group_removals_checked_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_rx_group_removals_checked_at\") as distinct_count,\n          count(distinct \"order_rx_group_removals_checked_at\") = count(*) as is_unique,\n          cast(min(\"order_rx_group_removals_checked_at\") as varchar) as min,\n          cast(max(\"order_rx_group_removals_checked_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          197 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_rx_group_additions_checked_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_rx_group_additions_checked_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_rx_group_additions_checked_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_rx_group_additions_checked_at\") as distinct_count,\n          count(distinct \"order_rx_group_additions_checked_at\") = count(*) as is_unique,\n          cast(min(\"order_rx_group_additions_checked_at\") as varchar) as min,\n          cast(max(\"order_rx_group_additions_checked_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          198 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_note') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_note\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_note\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_note\") as distinct_count,\n          count(distinct \"order_note\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          199 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_rph_check') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_rph_check\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_rph_check\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_rph_check\") as distinct_count,\n          count(distinct \"order_rph_check\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          200 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_tech_fill') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_tech_fill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_tech_fill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_tech_fill\") as distinct_count,\n          count(distinct \"order_tech_fill\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          201 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_city\") as distinct_count,\n          count(distinct \"order_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          202 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_state\") as distinct_count,\n          count(distinct \"order_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          203 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_zip\") as distinct_count,\n          count(distinct \"order_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          204 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_updated_at\") as distinct_count,\n          count(distinct \"order_updated_at\") = count(*) as is_unique,\n          cast(min(\"order_updated_at\") as varchar) as min,\n          cast(max(\"order_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          205 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('order_shipped_status') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"order_shipped_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"order_shipped_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"order_shipped_status\") as distinct_count,\n          count(distinct \"order_shipped_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          206 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_group_name') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_group_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_group_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_group_name\") as distinct_count,\n          count(distinct \"pend_group_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          207 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_group_invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_group_invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_group_invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_group_invoice_number\") as distinct_count,\n          count(distinct \"pend_group_invoice_number\") = count(*) as is_unique,\n          cast(min(\"pend_group_invoice_number\") as varchar) as min,\n          cast(max(\"pend_group_invoice_number\") as varchar) as max,\n          avg(\"pend_group_invoice_number\") as avg,\n          stddev_pop(\"pend_group_invoice_number\") as std_dev_population,\n          stddev_samp(\"pend_group_invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          208 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_group_initial_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_group_initial_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_group_initial_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_group_initial_date\") as distinct_count,\n          count(distinct \"pend_group_initial_date\") = count(*) as is_unique,\n          cast(min(\"pend_group_initial_date\") as varchar) as min,\n          cast(max(\"pend_group_initial_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          209 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pend_group_last_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pend_group_last_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pend_group_last_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pend_group_last_date\") as distinct_count,\n          count(distinct \"pend_group_last_date\") = count(*) as is_unique,\n          cast(min(\"pend_group_last_date\") as varchar) as min,\n          cast(max(\"pend_group_last_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          210 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_updated_at\") as distinct_count,\n          count(distinct \"dw_updated_at\") = count(*) as is_unique,\n          cast(min(\"dw_updated_at\") as varchar) as min,\n          cast(max(\"dw_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          211 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_brand') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_brand\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_brand\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_brand\") as distinct_count,\n          count(distinct \"drug_brand\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          212 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_gsns') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_gsns\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_gsns\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_gsns\") as distinct_count,\n          count(distinct \"drug_gsns\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          213 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price30') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price30\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price30\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price30\") as distinct_count,\n          count(distinct \"drug_price30\") = count(*) as is_unique,\n          cast(min(\"drug_price30\") as varchar) as min,\n          cast(max(\"drug_price30\") as varchar) as max,\n          avg(\"drug_price30\") as avg,\n          stddev_pop(\"drug_price30\") as std_dev_population,\n          stddev_samp(\"drug_price30\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          214 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price90') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price90\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price90\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price90\") as distinct_count,\n          count(distinct \"drug_price90\") = count(*) as is_unique,\n          cast(min(\"drug_price90\") as varchar) as min,\n          cast(max(\"drug_price90\") as varchar) as max,\n          avg(\"drug_price90\") as avg,\n          stddev_pop(\"drug_price90\") as std_dev_population,\n          stddev_samp(\"drug_price90\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          215 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_retail') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_retail\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_retail\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_retail\") as distinct_count,\n          count(distinct \"drug_price_retail\") = count(*) as is_unique,\n          cast(min(\"drug_price_retail\") as varchar) as min,\n          cast(max(\"drug_price_retail\") as varchar) as max,\n          avg(\"drug_price_retail\") as avg,\n          stddev_pop(\"drug_price_retail\") as std_dev_population,\n          stddev_samp(\"drug_price_retail\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          216 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_goodrx') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_goodrx\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_goodrx\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_goodrx\") as distinct_count,\n          count(distinct \"drug_price_goodrx\") = count(*) as is_unique,\n          cast(min(\"drug_price_goodrx\") as varchar) as min,\n          cast(max(\"drug_price_goodrx\") as varchar) as max,\n          avg(\"drug_price_goodrx\") as avg,\n          stddev_pop(\"drug_price_goodrx\") as std_dev_population,\n          stddev_samp(\"drug_price_goodrx\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          217 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_nadac') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_nadac\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_nadac\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_nadac\") as distinct_count,\n          count(distinct \"drug_price_nadac\") = count(*) as is_unique,\n          cast(min(\"drug_price_nadac\") as varchar) as min,\n          cast(max(\"drug_price_nadac\") as varchar) as max,\n          avg(\"drug_price_nadac\") as avg,\n          stddev_pop(\"drug_price_nadac\") as std_dev_population,\n          stddev_samp(\"drug_price_nadac\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          218 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_qty_repack') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_qty_repack\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_qty_repack\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_qty_repack\") as distinct_count,\n          count(distinct \"drug_qty_repack\") = count(*) as is_unique,\n          cast(min(\"drug_qty_repack\") as varchar) as min,\n          cast(max(\"drug_qty_repack\") as varchar) as max,\n          avg(\"drug_qty_repack\") as avg,\n          stddev_pop(\"drug_qty_repack\") as std_dev_population,\n          stddev_samp(\"drug_qty_repack\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          219 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_count_ndcs') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_count_ndcs\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_count_ndcs\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_count_ndcs\") as distinct_count,\n          count(distinct \"drug_count_ndcs\") = count(*) as is_unique,\n          cast(min(\"drug_count_ndcs\") as varchar) as min,\n          cast(max(\"drug_count_ndcs\") as varchar) as max,\n          avg(\"drug_count_ndcs\") as avg,\n          stddev_pop(\"drug_count_ndcs\") as std_dev_population,\n          stddev_samp(\"drug_count_ndcs\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          220 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_ordered') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_ordered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_ordered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_ordered\") as distinct_count,\n          count(distinct \"drug_ordered\") = count(*) as is_unique,\n          cast(min(\"drug_ordered\") as varchar) as min,\n          cast(max(\"drug_ordered\") as varchar) as max,\n          avg(\"drug_ordered\") as avg,\n          stddev_pop(\"drug_ordered\") as std_dev_population,\n          stddev_samp(\"drug_ordered\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          221 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_qty_min') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_qty_min\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_qty_min\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_qty_min\") as distinct_count,\n          count(distinct \"drug_qty_min\") = count(*) as is_unique,\n          cast(min(\"drug_qty_min\") as varchar) as min,\n          cast(max(\"drug_qty_min\") as varchar) as max,\n          avg(\"drug_qty_min\") as avg,\n          stddev_pop(\"drug_qty_min\") as std_dev_population,\n          stddev_samp(\"drug_qty_min\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          222 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_days_min') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_days_min\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_days_min\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_days_min\") as distinct_count,\n          count(distinct \"drug_days_min\") = count(*) as is_unique,\n          cast(min(\"drug_days_min\") as varchar) as min,\n          cast(max(\"drug_days_min\") as varchar) as max,\n          avg(\"drug_days_min\") as avg,\n          stddev_pop(\"drug_days_min\") as std_dev_population,\n          stddev_samp(\"drug_days_min\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          223 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_max_inventory') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_max_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_max_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_max_inventory\") as distinct_count,\n          count(distinct \"drug_max_inventory\") = count(*) as is_unique,\n          cast(min(\"drug_max_inventory\") as varchar) as min,\n          cast(max(\"drug_max_inventory\") as varchar) as max,\n          avg(\"drug_max_inventory\") as avg,\n          stddev_pop(\"drug_max_inventory\") as std_dev_population,\n          stddev_samp(\"drug_max_inventory\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          224 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_message_display') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_message_display\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_message_display\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_message_display\") as distinct_count,\n          count(distinct \"drug_message_display\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          225 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_message_verified') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_message_verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_message_verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_message_verified\") as distinct_count,\n          count(distinct \"drug_message_verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          226 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_message_destroyed') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_message_destroyed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_message_destroyed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_message_destroyed\") as distinct_count,\n          count(distinct \"drug_message_destroyed\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          227 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_generic_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_generic_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_generic_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_generic_name\") as distinct_count,\n          count(distinct \"drug_generic_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          228 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('drug_price_coalesced') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"drug_price_coalesced\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"drug_price_coalesced\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"drug_price_coalesced\") as distinct_count,\n          count(distinct \"drug_price_coalesced\") = count(*) as is_unique,\n          cast(min(\"drug_price_coalesced\") as varchar) as min,\n          cast(max(\"drug_price_coalesced\") as varchar) as max,\n          avg(\"drug_price_coalesced\") as avg,\n          stddev_pop(\"drug_price_coalesced\") as std_dev_population,\n          stddev_samp(\"drug_price_coalesced\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          229 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_drug_generic') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_drug_generic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_drug_generic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_drug_generic\") as distinct_count,\n          count(distinct \"stock_live_drug_generic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          230 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_price_per_month') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_price_per_month\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_price_per_month\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_price_per_month\") as distinct_count,\n          count(distinct \"stock_live_price_per_month\") = count(*) as is_unique,\n          cast(min(\"stock_live_price_per_month\") as varchar) as min,\n          cast(max(\"stock_live_price_per_month\") as varchar) as max,\n          avg(\"stock_live_price_per_month\") as avg,\n          stddev_pop(\"stock_live_price_per_month\") as std_dev_population,\n          stddev_samp(\"stock_live_price_per_month\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          231 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_drug_ordered') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_drug_ordered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_drug_ordered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_drug_ordered\") as distinct_count,\n          count(distinct \"stock_live_drug_ordered\") = count(*) as is_unique,\n          cast(min(\"stock_live_drug_ordered\") as varchar) as min,\n          cast(max(\"stock_live_drug_ordered\") as varchar) as max,\n          avg(\"stock_live_drug_ordered\") as avg,\n          stddev_pop(\"stock_live_drug_ordered\") as std_dev_population,\n          stddev_samp(\"stock_live_drug_ordered\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          232 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_qty_repack') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_qty_repack\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_qty_repack\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_qty_repack\") as distinct_count,\n          count(distinct \"stock_live_qty_repack\") = count(*) as is_unique,\n          cast(min(\"stock_live_qty_repack\") as varchar) as min,\n          cast(max(\"stock_live_qty_repack\") as varchar) as max,\n          avg(\"stock_live_qty_repack\") as avg,\n          stddev_pop(\"stock_live_qty_repack\") as std_dev_population,\n          stddev_samp(\"stock_live_qty_repack\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          233 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_months_inventory') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_months_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_months_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_months_inventory\") as distinct_count,\n          count(distinct \"stock_live_months_inventory\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          234 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_avg_inventory') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_avg_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_avg_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_avg_inventory\") as distinct_count,\n          count(distinct \"stock_live_avg_inventory\") = count(*) as is_unique,\n          cast(min(\"stock_live_avg_inventory\") as varchar) as min,\n          cast(max(\"stock_live_avg_inventory\") as varchar) as max,\n          avg(\"stock_live_avg_inventory\") as avg,\n          stddev_pop(\"stock_live_avg_inventory\") as std_dev_population,\n          stddev_samp(\"stock_live_avg_inventory\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          235 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_last_inventory') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_last_inventory\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_last_inventory\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_last_inventory\") as distinct_count,\n          count(distinct \"stock_live_last_inventory\") = count(*) as is_unique,\n          cast(min(\"stock_live_last_inventory\") as varchar) as min,\n          cast(max(\"stock_live_last_inventory\") as varchar) as max,\n          avg(\"stock_live_last_inventory\") as avg,\n          stddev_pop(\"stock_live_last_inventory\") as std_dev_population,\n          stddev_samp(\"stock_live_last_inventory\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          236 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_months_entered') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_months_entered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_months_entered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_months_entered\") as distinct_count,\n          count(distinct \"stock_live_months_entered\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          237 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_stddev_entered') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_stddev_entered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_stddev_entered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_stddev_entered\") as distinct_count,\n          count(distinct \"stock_live_stddev_entered\") = count(*) as is_unique,\n          cast(min(\"stock_live_stddev_entered\") as varchar) as min,\n          cast(max(\"stock_live_stddev_entered\") as varchar) as max,\n          avg(\"stock_live_stddev_entered\") as avg,\n          stddev_pop(\"stock_live_stddev_entered\") as std_dev_population,\n          stddev_samp(\"stock_live_stddev_entered\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          238 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_total_entered') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_total_entered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_total_entered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_total_entered\") as distinct_count,\n          count(distinct \"stock_live_total_entered\") = count(*) as is_unique,\n          cast(min(\"stock_live_total_entered\") as varchar) as min,\n          cast(max(\"stock_live_total_entered\") as varchar) as max,\n          avg(\"stock_live_total_entered\") as avg,\n          stddev_pop(\"stock_live_total_entered\") as std_dev_population,\n          stddev_samp(\"stock_live_total_entered\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          239 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_months_dispensed') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_months_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_months_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_months_dispensed\") as distinct_count,\n          count(distinct \"stock_live_months_dispensed\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          240 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_stddev_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_stddev_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_stddev_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_stddev_dispensed_actual\") as distinct_count,\n          count(distinct \"stock_live_stddev_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"stock_live_stddev_dispensed_actual\") as varchar) as min,\n          cast(max(\"stock_live_stddev_dispensed_actual\") as varchar) as max,\n          avg(\"stock_live_stddev_dispensed_actual\") as avg,\n          stddev_pop(\"stock_live_stddev_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"stock_live_stddev_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          241 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_total_dispensed_actual') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_total_dispensed_actual\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_total_dispensed_actual\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_total_dispensed_actual\") as distinct_count,\n          count(distinct \"stock_live_total_dispensed_actual\") = count(*) as is_unique,\n          cast(min(\"stock_live_total_dispensed_actual\") as varchar) as min,\n          cast(max(\"stock_live_total_dispensed_actual\") as varchar) as max,\n          avg(\"stock_live_total_dispensed_actual\") as avg,\n          stddev_pop(\"stock_live_total_dispensed_actual\") as std_dev_population,\n          stddev_samp(\"stock_live_total_dispensed_actual\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          242 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_total_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_total_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_total_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_total_dispensed_default\") as distinct_count,\n          count(distinct \"stock_live_total_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"stock_live_total_dispensed_default\") as varchar) as min,\n          cast(max(\"stock_live_total_dispensed_default\") as varchar) as max,\n          avg(\"stock_live_total_dispensed_default\") as avg,\n          stddev_pop(\"stock_live_total_dispensed_default\") as std_dev_population,\n          stddev_samp(\"stock_live_total_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          243 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_stddev_dispensed_default') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_stddev_dispensed_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_stddev_dispensed_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_stddev_dispensed_default\") as distinct_count,\n          count(distinct \"stock_live_stddev_dispensed_default\") = count(*) as is_unique,\n          cast(min(\"stock_live_stddev_dispensed_default\") as varchar) as min,\n          cast(max(\"stock_live_stddev_dispensed_default\") as varchar) as max,\n          avg(\"stock_live_stddev_dispensed_default\") as avg,\n          stddev_pop(\"stock_live_stddev_dispensed_default\") as std_dev_population,\n          stddev_samp(\"stock_live_stddev_dispensed_default\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          244 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_month_interval') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_month_interval\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_month_interval\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_month_interval\") as distinct_count,\n          count(distinct \"stock_live_month_interval\") = count(*) as is_unique,\n          cast(min(\"stock_live_month_interval\") as varchar) as min,\n          cast(max(\"stock_live_month_interval\") as varchar) as max,\n          avg(\"stock_live_month_interval\") as avg,\n          stddev_pop(\"stock_live_month_interval\") as std_dev_population,\n          stddev_samp(\"stock_live_month_interval\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          245 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_default_rxs_min') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_default_rxs_min\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_default_rxs_min\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_default_rxs_min\") as distinct_count,\n          count(distinct \"stock_live_default_rxs_min\") = count(*) as is_unique,\n          cast(min(\"stock_live_default_rxs_min\") as varchar) as min,\n          cast(max(\"stock_live_default_rxs_min\") as varchar) as max,\n          avg(\"stock_live_default_rxs_min\") as avg,\n          stddev_pop(\"stock_live_default_rxs_min\") as std_dev_population,\n          stddev_samp(\"stock_live_default_rxs_min\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          246 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_last_inv_low_threshold') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_last_inv_low_threshold\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_last_inv_low_threshold\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_last_inv_low_threshold\") as distinct_count,\n          count(distinct \"stock_live_last_inv_low_threshold\") = count(*) as is_unique,\n          cast(min(\"stock_live_last_inv_low_threshold\") as varchar) as min,\n          cast(max(\"stock_live_last_inv_low_threshold\") as varchar) as max,\n          avg(\"stock_live_last_inv_low_threshold\") as avg,\n          stddev_pop(\"stock_live_last_inv_low_threshold\") as std_dev_population,\n          stddev_samp(\"stock_live_last_inv_low_threshold\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          247 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_last_inv_high_threshold') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_last_inv_high_threshold\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_last_inv_high_threshold\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_last_inv_high_threshold\") as distinct_count,\n          count(distinct \"stock_live_last_inv_high_threshold\") = count(*) as is_unique,\n          cast(min(\"stock_live_last_inv_high_threshold\") as varchar) as min,\n          cast(max(\"stock_live_last_inv_high_threshold\") as varchar) as max,\n          avg(\"stock_live_last_inv_high_threshold\") as avg,\n          stddev_pop(\"stock_live_last_inv_high_threshold\") as std_dev_population,\n          stddev_samp(\"stock_live_last_inv_high_threshold\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          248 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_last_inv_onetime_threshold') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_last_inv_onetime_threshold\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_last_inv_onetime_threshold\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_last_inv_onetime_threshold\") as distinct_count,\n          count(distinct \"stock_live_last_inv_onetime_threshold\") = count(*) as is_unique,\n          cast(min(\"stock_live_last_inv_onetime_threshold\") as varchar) as min,\n          cast(max(\"stock_live_last_inv_onetime_threshold\") as varchar) as max,\n          avg(\"stock_live_last_inv_onetime_threshold\") as avg,\n          stddev_pop(\"stock_live_last_inv_onetime_threshold\") as std_dev_population,\n          stddev_samp(\"stock_live_last_inv_onetime_threshold\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          249 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_zlow_threshold') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_zlow_threshold\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_zlow_threshold\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_zlow_threshold\") as distinct_count,\n          count(distinct \"stock_live_zlow_threshold\") = count(*) as is_unique,\n          cast(min(\"stock_live_zlow_threshold\") as varchar) as min,\n          cast(max(\"stock_live_zlow_threshold\") as varchar) as max,\n          avg(\"stock_live_zlow_threshold\") as avg,\n          stddev_pop(\"stock_live_zlow_threshold\") as std_dev_population,\n          stddev_samp(\"stock_live_zlow_threshold\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          250 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_zhigh_threshold') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_zhigh_threshold\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_zhigh_threshold\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_zhigh_threshold\") as distinct_count,\n          count(distinct \"stock_live_zhigh_threshold\") = count(*) as is_unique,\n          cast(min(\"stock_live_zhigh_threshold\") as varchar) as min,\n          cast(max(\"stock_live_zhigh_threshold\") as varchar) as max,\n          avg(\"stock_live_zhigh_threshold\") as avg,\n          stddev_pop(\"stock_live_zhigh_threshold\") as std_dev_population,\n          stddev_samp(\"stock_live_zhigh_threshold\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          251 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_zscore') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_zscore\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_zscore\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_zscore\") as distinct_count,\n          count(distinct \"stock_live_zscore\") = count(*) as is_unique,\n          cast(min(\"stock_live_zscore\") as varchar) as min,\n          cast(max(\"stock_live_zscore\") as varchar) as max,\n          avg(\"stock_live_zscore\") as avg,\n          stddev_pop(\"stock_live_zscore\") as std_dev_population,\n          stddev_samp(\"stock_live_zscore\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          252 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('stock_live_level') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"stock_live_level\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"stock_live_level\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"stock_live_level\") as distinct_count,\n          count(distinct \"stock_live_level\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          253 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_id_wc') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_id_wc\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_id_wc\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_id_wc\") as distinct_count,\n          count(distinct \"patient_id_wc\") = count(*) as is_unique,\n          cast(min(\"patient_id_wc\") as varchar) as min,\n          cast(max(\"patient_id_wc\") as varchar) as max,\n          avg(\"patient_id_wc\") as avg,\n          stddev_pop(\"patient_id_wc\") as std_dev_population,\n          stddev_samp(\"patient_id_wc\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          254 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_registered') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_registered\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_registered\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_registered\") as distinct_count,\n          count(distinct \"patient_date_registered\") = count(*) as is_unique,\n          cast(min(\"patient_date_registered\") as varchar) as min,\n          cast(max(\"patient_date_registered\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          255 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_reviewed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_reviewed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_reviewed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_reviewed\") as distinct_count,\n          count(distinct \"patient_date_reviewed\") = count(*) as is_unique,\n          cast(min(\"patient_date_reviewed\") as varchar) as min,\n          cast(max(\"patient_date_reviewed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          256 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_added') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_added\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_added\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_added\") as distinct_count,\n          count(distinct \"patient_date_added\") = count(*) as is_unique,\n          cast(min(\"patient_date_added\") as varchar) as min,\n          cast(max(\"patient_date_added\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          257 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_changed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_changed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_changed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_changed\") as distinct_count,\n          count(distinct \"patient_date_changed\") = count(*) as is_unique,\n          cast(min(\"patient_date_changed\") as varchar) as min,\n          cast(max(\"patient_date_changed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          258 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_updated') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_updated\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_updated\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_updated\") as distinct_count,\n          count(distinct \"patient_date_updated\") = count(*) as is_unique,\n          cast(min(\"patient_date_updated\") as varchar) as min,\n          cast(max(\"patient_date_updated\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          259 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_first_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_first_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_first_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_first_name\") as distinct_count,\n          count(distinct \"patient_first_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          260 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_last_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_last_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_last_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_last_name\") as distinct_count,\n          count(distinct \"patient_last_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          261 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_birth_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_birth_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_birth_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_birth_date\") as distinct_count,\n          count(distinct \"patient_birth_date\") = count(*) as is_unique,\n          cast(min(\"patient_birth_date\") as varchar) as min,\n          cast(max(\"patient_birth_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          262 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_language') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_language\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_language\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_language\") as distinct_count,\n          count(distinct \"patient_language\") = count(*) as is_unique,\n          cast(min(\"patient_language\") as varchar) as min,\n          cast(max(\"patient_language\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          263 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_phone1') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_phone1\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_phone1\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_phone1\") as distinct_count,\n          count(distinct \"patient_phone1\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          264 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_phone2') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_phone2\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_phone2\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_phone2\") as distinct_count,\n          count(distinct \"patient_phone2\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          265 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_address\") as distinct_count,\n          count(distinct \"patient_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          266 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_city\") as distinct_count,\n          count(distinct \"patient_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          267 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_state\") as distinct_count,\n          count(distinct \"patient_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          268 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_zip\") as distinct_count,\n          count(distinct \"patient_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          269 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_card_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_card_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_card_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_card_type\") as distinct_count,\n          count(distinct \"patient_payment_card_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          270 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_card_last4') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_card_last4\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_card_last4\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_card_last4\") as distinct_count,\n          count(distinct \"patient_payment_card_last4\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          271 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_card_date_expired') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_card_date_expired\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_card_date_expired\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_card_date_expired\") as distinct_count,\n          count(distinct \"patient_payment_card_date_expired\") = count(*) as is_unique,\n          cast(min(\"patient_payment_card_date_expired\") as varchar) as min,\n          cast(max(\"patient_payment_card_date_expired\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          272 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_card_autopay') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_card_autopay\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_card_autopay\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_card_autopay\") as distinct_count,\n          count(distinct \"patient_payment_card_autopay\") = count(*) as is_unique,\n          cast(min(\"patient_payment_card_autopay\") as varchar) as min,\n          cast(max(\"patient_payment_card_autopay\") as varchar) as max,\n          avg(\"patient_payment_card_autopay\") as avg,\n          stddev_pop(\"patient_payment_card_autopay\") as std_dev_population,\n          stddev_samp(\"patient_payment_card_autopay\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          273 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_method_default') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_method_default\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_method_default\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_method_default\") as distinct_count,\n          count(distinct \"patient_payment_method_default\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          274 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_rx_received') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_rx_received\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_rx_received\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_rx_received\") as distinct_count,\n          count(distinct \"patient_date_first_rx_received\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_rx_received\") as varchar) as min,\n          cast(max(\"patient_date_first_rx_received\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          275 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_dispensed') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_dispensed\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_dispensed\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_dispensed\") as distinct_count,\n          count(distinct \"patient_date_first_dispensed\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_dispensed\") as varchar) as min,\n          cast(max(\"patient_date_first_dispensed\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          276 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_date_first_expected_by') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_date_first_expected_by\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_date_first_expected_by\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_date_first_expected_by\") as distinct_count,\n          count(distinct \"patient_date_first_expected_by\") = count(*) as is_unique,\n          cast(min(\"patient_date_first_expected_by\") as varchar) as min,\n          cast(max(\"patient_date_first_expected_by\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          277 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_refills_used') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_refills_used\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_refills_used\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_refills_used\") as distinct_count,\n          count(distinct \"patient_refills_used\") = count(*) as is_unique,\n          cast(min(\"patient_refills_used\") as varchar) as min,\n          cast(max(\"patient_refills_used\") as varchar) as max,\n          avg(\"patient_refills_used\") as avg,\n          stddev_pop(\"patient_refills_used\") as std_dev_population,\n          stddev_samp(\"patient_refills_used\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          278 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_email') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_email\") as distinct_count,\n          count(distinct \"patient_email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          279 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_autofill') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_autofill\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_autofill\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_autofill\") as distinct_count,\n          count(distinct \"patient_autofill\") = count(*) as is_unique,\n          cast(min(\"patient_autofill\") as varchar) as min,\n          cast(max(\"patient_autofill\") as varchar) as max,\n          avg(\"patient_autofill\") as avg,\n          stddev_pop(\"patient_autofill\") as std_dev_population,\n          stddev_samp(\"patient_autofill\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          280 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_initial_invoice_number') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_initial_invoice_number\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_initial_invoice_number\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_initial_invoice_number\") as distinct_count,\n          count(distinct \"patient_initial_invoice_number\") = count(*) as is_unique,\n          cast(min(\"patient_initial_invoice_number\") as varchar) as min,\n          cast(max(\"patient_initial_invoice_number\") as varchar) as max,\n          avg(\"patient_initial_invoice_number\") as avg,\n          stddev_pop(\"patient_initial_invoice_number\") as std_dev_population,\n          stddev_samp(\"patient_initial_invoice_number\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          281 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_note') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_note\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_note\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_note\") as distinct_count,\n          count(distinct \"patient_note\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          282 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_none') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_none\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_none\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_none\") as distinct_count,\n          count(distinct \"patient_allergies_none\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          283 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_cephalosporins') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_cephalosporins\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_cephalosporins\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_cephalosporins\") as distinct_count,\n          count(distinct \"patient_allergies_cephalosporins\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          284 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_sulfa') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_sulfa\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_sulfa\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_sulfa\") as distinct_count,\n          count(distinct \"patient_allergies_sulfa\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          285 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_aspirin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_aspirin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_aspirin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_aspirin\") as distinct_count,\n          count(distinct \"patient_allergies_aspirin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          286 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_penicillin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_penicillin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_penicillin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_penicillin\") as distinct_count,\n          count(distinct \"patient_allergies_penicillin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          287 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_erythromycin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_erythromycin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_erythromycin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_erythromycin\") as distinct_count,\n          count(distinct \"patient_allergies_erythromycin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          288 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_codeine') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_codeine\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_codeine\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_codeine\") as distinct_count,\n          count(distinct \"patient_allergies_codeine\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          289 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_nsaids') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_nsaids\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_nsaids\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_nsaids\") as distinct_count,\n          count(distinct \"patient_allergies_nsaids\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          290 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_salicylates') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_salicylates\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_salicylates\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_salicylates\") as distinct_count,\n          count(distinct \"patient_allergies_salicylates\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          291 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_azithromycin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_azithromycin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_azithromycin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_azithromycin\") as distinct_count,\n          count(distinct \"patient_allergies_azithromycin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          292 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_amoxicillin') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_amoxicillin\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_amoxicillin\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_amoxicillin\") as distinct_count,\n          count(distinct \"patient_allergies_amoxicillin\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          293 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_tetracycline') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_tetracycline\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_tetracycline\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_tetracycline\") as distinct_count,\n          count(distinct \"patient_allergies_tetracycline\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          294 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_allergies_other') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_allergies_other\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_allergies_other\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_allergies_other\") as distinct_count,\n          count(distinct \"patient_allergies_other\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          295 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_medications_other') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_medications_other\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_medications_other\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_medications_other\") as distinct_count,\n          count(distinct \"patient_medications_other\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          296 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_npi\") as distinct_count,\n          count(distinct \"pharmacy_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          297 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_name\") as distinct_count,\n          count(distinct \"pharmacy_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          298 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_phone\") as distinct_count,\n          count(distinct \"pharmacy_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          299 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_fax') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_fax\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_fax\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_fax\") as distinct_count,\n          count(distinct \"pharmacy_fax\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          300 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('pharmacy_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"pharmacy_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"pharmacy_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"pharmacy_address\") as distinct_count,\n          count(distinct \"pharmacy_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          301 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_inactive') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_inactive\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_inactive\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_inactive\") as distinct_count,\n          count(distinct \"patient_inactive\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          302 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_payment_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_payment_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_payment_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_payment_coupon\") as distinct_count,\n          count(distinct \"patient_payment_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          303 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_tracking_coupon') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_tracking_coupon\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_tracking_coupon\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_tracking_coupon\") as distinct_count,\n          count(distinct \"patient_tracking_coupon\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          304 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_patient_deleted') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_patient_deleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_patient_deleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_patient_deleted\") as distinct_count,\n          count(distinct \"patient_patient_deleted\") = count(*) as is_unique,\n          cast(min(\"patient_patient_deleted\") as varchar) as min,\n          cast(max(\"patient_patient_deleted\") as varchar) as max,\n          avg(\"patient_patient_deleted\") as avg,\n          stddev_pop(\"patient_patient_deleted\") as std_dev_population,\n          stddev_samp(\"patient_patient_deleted\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          305 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_third_party_id') as column_name,\n          nullif(lower('bigint'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_third_party_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_third_party_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_third_party_id\") as distinct_count,\n          count(distinct \"patient_third_party_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          306 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_terms_viewed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_terms_viewed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_terms_viewed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_terms_viewed_at\") as distinct_count,\n          count(distinct \"patient_terms_viewed_at\") = count(*) as is_unique,\n          cast(min(\"patient_terms_viewed_at\") as varchar) as min,\n          cast(max(\"patient_terms_viewed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          307 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('patient_terms_accepted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"patient_terms_accepted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"patient_terms_accepted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"patient_terms_accepted\") as distinct_count,\n          count(distinct \"patient_terms_accepted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          308 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_first_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_first_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_first_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_first_name\") as distinct_count,\n          count(distinct \"provider_first_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          309 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_last_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_last_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_last_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_last_name\") as distinct_count,\n          count(distinct \"provider_last_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          310 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_verified') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_verified\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_verified\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_verified\") as distinct_count,\n          count(distinct \"provider_verified\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          311 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('providers_npi') as column_name,\n          nullif(lower('character varying'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"providers_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"providers_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"providers_npi\") as distinct_count,\n          count(distinct \"providers_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          312 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_id\") as distinct_count,\n          count(distinct \"dw_provider_id\") = count(*) as is_unique,\n          cast(min(\"dw_provider_id\") as varchar) as min,\n          cast(max(\"dw_provider_id\") as varchar) as max,\n          avg(\"dw_provider_id\") as avg,\n          stddev_pop(\"dw_provider_id\") as std_dev_population,\n          stddev_samp(\"dw_provider_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          313 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_first_rx_sent_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_first_rx_sent_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_first_rx_sent_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_first_rx_sent_date\") as distinct_count,\n          count(distinct \"provider_first_rx_sent_date\") = count(*) as is_unique,\n          cast(min(\"provider_first_rx_sent_date\") as varchar) as min,\n          cast(max(\"provider_first_rx_sent_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          314 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('provider_last_rx_sent_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"provider_last_rx_sent_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"provider_last_rx_sent_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"provider_last_rx_sent_date\") as distinct_count,\n          count(distinct \"provider_last_rx_sent_date\") = count(*) as is_unique,\n          cast(min(\"provider_last_rx_sent_date\") as varchar) as min,\n          cast(max(\"provider_last_rx_sent_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          315 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_npi') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_npi\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_npi\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_npi\") as distinct_count,\n          count(distinct \"dw_provider_npi\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          316 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_name\") as distinct_count,\n          count(distinct \"dw_provider_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          317 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_phone\") as distinct_count,\n          count(distinct \"dw_provider_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          318 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_id_sf\") as distinct_count,\n          count(distinct \"dw_provider_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          319 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_default_clinic') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_default_clinic\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_default_clinic\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_default_clinic\") as distinct_count,\n          count(distinct \"dw_provider_default_clinic\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          320 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_provider_default_clinic_imputed_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_provider_default_clinic_imputed_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_provider_default_clinic_imputed_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_provider_default_clinic_imputed_at\") as distinct_count,\n          count(distinct \"dw_provider_default_clinic_imputed_at\") = count(*) as is_unique,\n          cast(min(\"dw_provider_default_clinic_imputed_at\") as varchar) as min,\n          cast(max(\"dw_provider_default_clinic_imputed_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          321 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_id\") as distinct_count,\n          count(distinct \"clinic_id\") = count(*) as is_unique,\n          cast(min(\"clinic_id\") as varchar) as min,\n          cast(max(\"clinic_id\") as varchar) as max,\n          avg(\"clinic_id\") as avg,\n          stddev_pop(\"clinic_id\") as std_dev_population,\n          stddev_samp(\"clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          322 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_name_cp') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_name_cp\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_name_cp\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_name_cp\") as distinct_count,\n          count(distinct \"clinic_name_cp\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          323 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_rx_date_added_first') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_rx_date_added_first\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_rx_date_added_first\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_rx_date_added_first\") as distinct_count,\n          count(distinct \"clinic_rx_date_added_first\") = count(*) as is_unique,\n          cast(min(\"clinic_rx_date_added_first\") as varchar) as min,\n          cast(max(\"clinic_rx_date_added_first\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          324 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_rx_date_added_last') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_rx_date_added_last\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_rx_date_added_last\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_rx_date_added_last\") as distinct_count,\n          count(distinct \"clinic_rx_date_added_last\") = count(*) as is_unique,\n          cast(min(\"clinic_rx_date_added_last\") as varchar) as min,\n          cast(max(\"clinic_rx_date_added_last\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          325 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_created_at\") as distinct_count,\n          count(distinct \"clinic_created_at\") = count(*) as is_unique,\n          cast(min(\"clinic_created_at\") as varchar) as min,\n          cast(max(\"clinic_created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          326 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('clinic_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"clinic_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"clinic_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"clinic_updated_at\") as distinct_count,\n          count(distinct \"clinic_updated_at\") = count(*) as is_unique,\n          cast(min(\"clinic_updated_at\") as varchar) as min,\n          cast(max(\"clinic_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          327 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_id\") as distinct_count,\n          count(distinct \"dw_clinic_id\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_id\") as varchar) as min,\n          cast(max(\"dw_clinic_id\") as varchar) as max,\n          avg(\"dw_clinic_id\") as avg,\n          stddev_pop(\"dw_clinic_id\") as std_dev_population,\n          stddev_samp(\"dw_clinic_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          328 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_group_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_group_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_group_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_group_id\") as distinct_count,\n          count(distinct \"dw_clinic_group_id\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_group_id\") as varchar) as min,\n          cast(max(\"dw_clinic_group_id\") as varchar) as max,\n          avg(\"dw_clinic_group_id\") as avg,\n          stddev_pop(\"dw_clinic_group_id\") as std_dev_population,\n          stddev_samp(\"dw_clinic_group_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          329 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_name\") as distinct_count,\n          count(distinct \"dw_clinic_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          330 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_address') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_address\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_address\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_address\") as distinct_count,\n          count(distinct \"dw_clinic_address\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          331 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_street') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_street\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_street\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_street\") as distinct_count,\n          count(distinct \"dw_clinic_street\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          332 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_city') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_city\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_city\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_city\") as distinct_count,\n          count(distinct \"dw_clinic_city\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          333 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_state') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_state\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_state\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_state\") as distinct_count,\n          count(distinct \"dw_clinic_state\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          334 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_zip') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_zip\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_zip\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_zip\") as distinct_count,\n          count(distinct \"dw_clinic_zip\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          335 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_phone\") as distinct_count,\n          count(distinct \"dw_clinic_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          336 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_id_sf\") as distinct_count,\n          count(distinct \"dw_clinic_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          337 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_created_at\") as distinct_count,\n          count(distinct \"dw_clinic_created_at\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_created_at\") as varchar) as min,\n          cast(max(\"dw_clinic_created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          338 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_updated_at\") as distinct_count,\n          count(distinct \"dw_clinic_updated_at\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_updated_at\") as varchar) as min,\n          cast(max(\"dw_clinic_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          339 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_groups_id') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_groups_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_groups_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_groups_id\") as distinct_count,\n          count(distinct \"dw_clinic_groups_id\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_groups_id\") as varchar) as min,\n          cast(max(\"dw_clinic_groups_id\") as varchar) as max,\n          avg(\"dw_clinic_groups_id\") as avg,\n          stddev_pop(\"dw_clinic_groups_id\") as std_dev_population,\n          stddev_samp(\"dw_clinic_groups_id\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          340 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_group_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_group_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_group_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_group_name\") as distinct_count,\n          count(distinct \"dw_clinic_group_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          341 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_group_id_sf') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_group_id_sf\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_group_id_sf\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_group_id_sf\") as distinct_count,\n          count(distinct \"dw_clinic_group_id_sf\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          342 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_group_domain') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_group_domain\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_group_domain\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_group_domain\") as distinct_count,\n          count(distinct \"dw_clinic_group_domain\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          343 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_groups_created_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_groups_created_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_groups_created_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_groups_created_at\") as distinct_count,\n          count(distinct \"dw_clinic_groups_created_at\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_groups_created_at\") as varchar) as min,\n          cast(max(\"dw_clinic_groups_created_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          344 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('dw_clinic_groups_updated_at') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"dw_clinic_groups_updated_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"dw_clinic_groups_updated_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"dw_clinic_groups_updated_at\") as distinct_count,\n          count(distinct \"dw_clinic_groups_updated_at\") = count(*) as is_unique,\n          cast(min(\"dw_clinic_groups_updated_at\") as varchar) as min,\n          cast(max(\"dw_clinic_groups_updated_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          345 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"goodpill_abt_profile\""}, "model.smartpill.salesforce_donors_abt_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"salesforce_donors_abt\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.salesforce_donors_abt"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "gold", "salesforce_donors_abt_profile"], "unique_id": "model.smartpill.salesforce_donors_abt_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/gold/salesforce_donors_abt_profile.sql", "original_file_path": "models/profiling/goodpill/gold/salesforce_donors_abt_profile.sql", "name": "salesforce_donors_abt_profile", "alias": "salesforce_donors_abt_profile", "checksum": {"name": "sha256", "checksum": "a8d1101d4ac69c85cccd0db42644f1eb851a23ae46902562315f66fe8ff4950a"}, "tags": [], "refs": [["salesforce_donors_abt"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/gold/salesforce_donors_abt_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5940368, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".salesforce.\"salesforce_donors_abt\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('task_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_id\") as distinct_count,\n          count(distinct \"task_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_user_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_user_id\") as distinct_count,\n          count(distinct \"task_user_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_contact_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_contact_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_contact_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_contact_id\") as distinct_count,\n          count(distinct \"task_contact_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_what_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_what_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_what_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_what_id\") as distinct_count,\n          count(distinct \"task_what_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_assigned_to__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_assigned_to__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_assigned_to__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_assigned_to__c\") as distinct_count,\n          count(distinct \"task_assigned_to__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_subject') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_subject\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_subject\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_subject\") as distinct_count,\n          count(distinct \"task_subject\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_priority') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_priority\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_priority\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_priority\") as distinct_count,\n          count(distinct \"task_priority\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_type\") as distinct_count,\n          count(distinct \"task_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_created_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_created_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_created_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_created_date\") as distinct_count,\n          count(distinct \"task_created_date\") = count(*) as is_unique,\n          cast(min(\"task_created_date\") as varchar) as min,\n          cast(max(\"task_created_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_completed_datetime') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_completed_datetime\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_completed_datetime\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_completed_datetime\") as distinct_count,\n          count(distinct \"task_completed_datetime\") = count(*) as is_unique,\n          cast(min(\"task_completed_datetime\") as varchar) as min,\n          cast(max(\"task_completed_datetime\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_due_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_due_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_due_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_due_date\") as distinct_count,\n          count(distinct \"task_due_date\") = count(*) as is_unique,\n          cast(min(\"task_due_date\") as varchar) as min,\n          cast(max(\"task_due_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('call_duration_in_seconds') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"call_duration_in_seconds\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"call_duration_in_seconds\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"call_duration_in_seconds\") as distinct_count,\n          count(distinct \"call_duration_in_seconds\") = count(*) as is_unique,\n          cast(min(\"call_duration_in_seconds\") as varchar) as min,\n          cast(max(\"call_duration_in_seconds\") as varchar) as max,\n          avg(\"call_duration_in_seconds\") as avg,\n          stddev_pop(\"call_duration_in_seconds\") as std_dev_population,\n          stddev_samp(\"call_duration_in_seconds\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_touch_reason__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_touch_reason__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_touch_reason__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_touch_reason__c\") as distinct_count,\n          count(distinct \"task_touch_reason__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_status') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_status\") as distinct_count,\n          count(distinct \"task_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_notes') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_notes\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_notes\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_notes\") as distinct_count,\n          count(distinct \"task_notes\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_follow_up_notes__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_follow_up_notes__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_follow_up_notes__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_follow_up_notes__c\") as distinct_count,\n          count(distinct \"task_follow_up_notes__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_follow_up_2__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_follow_up_2__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_follow_up_2__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_follow_up_2__c\") as distinct_count,\n          count(distinct \"task_follow_up_2__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_description') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_description\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_description\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_description\") as distinct_count,\n          count(distinct \"task_description\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_last_modified_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_last_modified_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_last_modified_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_last_modified_date\") as distinct_count,\n          count(distinct \"task_last_modified_date\") = count(*) as is_unique,\n          cast(min(\"task_last_modified_date\") as varchar) as min,\n          cast(max(\"task_last_modified_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_is_deleted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_is_deleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_is_deleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_is_deleted\") as distinct_count,\n          count(distinct \"task_is_deleted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"task_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"task_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"task_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_id\") as distinct_count,\n          count(distinct \"contact_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_owner_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_owner_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_owner_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_owner_id\") as distinct_count,\n          count(distinct \"contact_owner_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_name\") as distinct_count,\n          count(distinct \"contact_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_birthdate') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_birthdate\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_birthdate\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_birthdate\") as distinct_count,\n          count(distinct \"contact_birthdate\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_lastname') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_lastname\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_lastname\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_lastname\") as distinct_count,\n          count(distinct \"contact_lastname\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_firstname') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_firstname\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_firstname\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_firstname\") as distinct_count,\n          count(distinct \"contact_firstname\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_email') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_email\") as distinct_count,\n          count(distinct \"contact_email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_phone\") as distinct_count,\n          count(distinct \"contact_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_title') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_title\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_title\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_title\") as distinct_count,\n          count(distinct \"contact_title\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_description') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_description\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_description\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_description\") as distinct_count,\n          count(distinct \"contact_description\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_last_modified_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_last_modified_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_last_modified_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_last_modified_date\") as distinct_count,\n          count(distinct \"contact_last_modified_date\") = count(*) as is_unique,\n          cast(min(\"contact_last_modified_date\") as varchar) as min,\n          cast(max(\"contact_last_modified_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_isdeleted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_isdeleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_isdeleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_isdeleted\") as distinct_count,\n          count(distinct \"contact_isdeleted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"contact_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"contact_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"contact_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_id\") as distinct_count,\n          count(distinct \"gp_user_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_ownerid') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_ownerid\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_ownerid\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_ownerid\") as distinct_count,\n          count(distinct \"gp_user_ownerid\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_name\") as distinct_count,\n          count(distinct \"gp_user_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_role__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_role__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_role__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_role__c\") as distinct_count,\n          count(distinct \"gp_user_role__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_email__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_email__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_email__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_email__c\") as distinct_count,\n          count(distinct \"gp_user_email__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"gp_user_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"gp_user_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"gp_user_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_isdeleted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_isdeleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_isdeleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_isdeleted\") as distinct_count,\n          count(distinct \"gp_user_isdeleted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"salesforce_donors_abt_profile\""}, "model.smartpill.salesforce_patients_abt_profile": {"raw_sql": "{{ dbt_profiler.get_profile(relation=ref(\"salesforce_patients_abt\")) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_profiler.get_profile"], "nodes": ["model.smartpill.salesforce_patients_abt"]}, "config": {"enabled": true, "alias": null, "schema": "profiles", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "profiles", "fqn": ["smartpill", "profiling", "goodpill", "gold", "salesforce_patients_abt_profile"], "unique_id": "model.smartpill.salesforce_patients_abt_profile", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "profiling/goodpill/gold/salesforce_patients_abt_profile.sql", "original_file_path": "models/profiling/goodpill/gold/salesforce_patients_abt_profile.sql", "name": "salesforce_patients_abt_profile", "alias": "salesforce_patients_abt_profile", "checksum": {"name": "sha256", "checksum": "d920624554aee69e2d74b49040e141879e157247c82deaea462f81f5fe158c43"}, "tags": [], "refs": [["salesforce_patients_abt"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/profiling/goodpill/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/profiling/goodpill/gold/salesforce_patients_abt_profile.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "profiles"}, "created_at": 1703701091.5909884, "compiled_sql": "\n    with source_data as (\n      select\n        *\n      from \"datawarehouse\".salesforce.\"salesforce_patients_abt\"\n      \n    ),\n\n    column_profiles as (\n      \n        \n        select \n          lower('task_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_id\") as distinct_count,\n          count(distinct \"task_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          1 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_user_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_user_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_user_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_user_id\") as distinct_count,\n          count(distinct \"task_user_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          2 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_contact_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_contact_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_contact_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_contact_id\") as distinct_count,\n          count(distinct \"task_contact_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          3 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_what_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_what_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_what_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_what_id\") as distinct_count,\n          count(distinct \"task_what_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          4 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_related_to_id__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_related_to_id__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_related_to_id__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_related_to_id__c\") as distinct_count,\n          count(distinct \"task_related_to_id__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          5 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_assigned_to__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_assigned_to__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_assigned_to__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_assigned_to__c\") as distinct_count,\n          count(distinct \"task_assigned_to__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          6 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_account_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_account_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_account_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_account_id\") as distinct_count,\n          count(distinct \"task_account_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          7 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_subject') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_subject\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_subject\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_subject\") as distinct_count,\n          count(distinct \"task_subject\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          8 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_priority') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_priority\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_priority\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_priority\") as distinct_count,\n          count(distinct \"task_priority\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          9 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_type') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_type\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_type\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_type\") as distinct_count,\n          count(distinct \"task_type\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          10 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_created_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_created_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_created_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_created_date\") as distinct_count,\n          count(distinct \"task_created_date\") = count(*) as is_unique,\n          cast(min(\"task_created_date\") as varchar) as min,\n          cast(max(\"task_created_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          11 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_last_modified_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_last_modified_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_last_modified_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_last_modified_date\") as distinct_count,\n          count(distinct \"task_last_modified_date\") = count(*) as is_unique,\n          cast(min(\"task_last_modified_date\") as varchar) as min,\n          cast(max(\"task_last_modified_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          12 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_completed_datetime') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_completed_datetime\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_completed_datetime\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_completed_datetime\") as distinct_count,\n          count(distinct \"task_completed_datetime\") = count(*) as is_unique,\n          cast(min(\"task_completed_datetime\") as varchar) as min,\n          cast(max(\"task_completed_datetime\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          13 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_due_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_due_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_due_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_due_date\") as distinct_count,\n          count(distinct \"task_due_date\") = count(*) as is_unique,\n          cast(min(\"task_due_date\") as varchar) as min,\n          cast(max(\"task_due_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          14 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('call_duration_in_seconds') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"call_duration_in_seconds\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"call_duration_in_seconds\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"call_duration_in_seconds\") as distinct_count,\n          count(distinct \"call_duration_in_seconds\") = count(*) as is_unique,\n          cast(min(\"call_duration_in_seconds\") as varchar) as min,\n          cast(max(\"call_duration_in_seconds\") as varchar) as max,\n          avg(\"call_duration_in_seconds\") as avg,\n          stddev_pop(\"call_duration_in_seconds\") as std_dev_population,\n          stddev_samp(\"call_duration_in_seconds\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          15 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__country__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__country__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__country__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__country__c\") as distinct_count,\n          count(distinct \"aircall__country__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          16 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__timezone__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__timezone__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__timezone__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__timezone__c\") as distinct_count,\n          count(distinct \"aircall__timezone__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          17 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__answered_by__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__answered_by__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__answered_by__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__answered_by__c\") as distinct_count,\n          count(distinct \"aircall__answered_by__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          18 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__is_voicemail__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__is_voicemail__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__is_voicemail__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__is_voicemail__c\") as distinct_count,\n          count(distinct \"aircall__is_voicemail__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          19 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__phone_number__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__phone_number__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__phone_number__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__phone_number__c\") as distinct_count,\n          count(distinct \"aircall__phone_number__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          20 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__waiting_time__c') as column_name,\n          nullif(lower('numeric'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__waiting_time__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__waiting_time__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__waiting_time__c\") as distinct_count,\n          count(distinct \"aircall__waiting_time__c\") = count(*) as is_unique,\n          cast(min(\"aircall__waiting_time__c\") as varchar) as min,\n          cast(max(\"aircall__waiting_time__c\") as varchar) as max,\n          avg(\"aircall__waiting_time__c\") as avg,\n          stddev_pop(\"aircall__waiting_time__c\") as std_dev_population,\n          stddev_samp(\"aircall__waiting_time__c\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          21 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__detailed_type__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__detailed_type__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__detailed_type__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__detailed_type__c\") as distinct_count,\n          count(distinct \"aircall__detailed_type__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          22 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__has_connected__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__has_connected__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__has_connected__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__has_connected__c\") as distinct_count,\n          count(distinct \"aircall__has_connected__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          23 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__call_recording__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__call_recording__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__call_recording__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__call_recording__c\") as distinct_count,\n          count(distinct \"aircall__call_recording__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          24 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__is_missed_call__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__is_missed_call__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__is_missed_call__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__is_missed_call__c\") as distinct_count,\n          count(distinct \"aircall__is_missed_call__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          25 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__transferred_to__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__transferred_to__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__transferred_to__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__transferred_to__c\") as distinct_count,\n          count(distinct \"aircall__transferred_to__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          26 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__hour_of_the_day__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__hour_of_the_day__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__hour_of_the_day__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__hour_of_the_day__c\") as distinct_count,\n          count(distinct \"aircall__hour_of_the_day__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          27 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__connection_status__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__connection_status__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__connection_status__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__connection_status__c\") as distinct_count,\n          count(distinct \"aircall__connection_status__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          28 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('aircall__missed_call_ratio__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"aircall__missed_call_ratio__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"aircall__missed_call_ratio__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"aircall__missed_call_ratio__c\") as distinct_count,\n          count(distinct \"aircall__missed_call_ratio__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          29 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_status') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_status\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_status\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_status\") as distinct_count,\n          count(distinct \"task_status\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          30 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_notes') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_notes\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_notes\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_notes\") as distinct_count,\n          count(distinct \"task_notes\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          31 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_follow_up_notes__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_follow_up_notes__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_follow_up_notes__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_follow_up_notes__c\") as distinct_count,\n          count(distinct \"task_follow_up_notes__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          32 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_follow_up_2__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_follow_up_2__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_follow_up_2__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_follow_up_2__c\") as distinct_count,\n          count(distinct \"task_follow_up_2__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          33 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_description') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_description\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_description\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_description\") as distinct_count,\n          count(distinct \"task_description\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          34 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_is_deleted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_is_deleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_is_deleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_is_deleted\") as distinct_count,\n          count(distinct \"task_is_deleted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          35 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('task_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"task_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"task_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"task_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"task_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"task_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"task_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          36 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_id\") as distinct_count,\n          count(distinct \"contact_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          37 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_owner_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_owner_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_owner_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_owner_id\") as distinct_count,\n          count(distinct \"contact_owner_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          38 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_id_cp__c') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_id_cp__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_id_cp__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_id_cp__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_id_cp__c\") = count(*) as is_unique,\n          cast(min(\"contact_gp_patient_id_cp__c\") as varchar) as min,\n          cast(max(\"contact_gp_patient_id_cp__c\") as varchar) as max,\n          avg(\"contact_gp_patient_id_cp__c\") as avg,\n          stddev_pop(\"contact_gp_patient_id_cp__c\") as std_dev_population,\n          stddev_samp(\"contact_gp_patient_id_cp__c\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          39 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_id_wc__c') as column_name,\n          nullif(lower('integer'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_id_wc__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_id_wc__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_id_wc__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_id_wc__c\") = count(*) as is_unique,\n          cast(min(\"contact_gp_patient_id_wc__c\") as varchar) as min,\n          cast(max(\"contact_gp_patient_id_wc__c\") as varchar) as max,\n          avg(\"contact_gp_patient_id_wc__c\") as avg,\n          stddev_pop(\"contact_gp_patient_id_wc__c\") as std_dev_population,\n          stddev_samp(\"contact_gp_patient_id_wc__c\") as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          40 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_name\") as distinct_count,\n          count(distinct \"contact_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          41 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_birthdate') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_birthdate\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_birthdate\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_birthdate\") as distinct_count,\n          count(distinct \"contact_birthdate\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          42 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_lastname') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_lastname\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_lastname\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_lastname\") as distinct_count,\n          count(distinct \"contact_lastname\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          43 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_firstname') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_firstname\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_firstname\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_firstname\") as distinct_count,\n          count(distinct \"contact_firstname\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          44 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_created_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_created_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_created_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_created_date\") as distinct_count,\n          count(distinct \"contact_created_date\") = count(*) as is_unique,\n          cast(min(\"contact_created_date\") as varchar) as min,\n          cast(max(\"contact_created_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          45 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_email') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_email\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_email\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_email\") as distinct_count,\n          count(distinct \"contact_email\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          46 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_phone') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_phone\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_phone\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_phone\") as distinct_count,\n          count(distinct \"contact_phone\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          47 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_title') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_title\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_title\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_title\") as distinct_count,\n          count(distinct \"contact_title\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          48 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_payment_card_type__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_payment_card_type__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_payment_card_type__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_payment_card_type__c\") as distinct_count,\n          count(distinct \"contact_gp_payment_card_type__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          49 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_description') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_description\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_description\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_description\") as distinct_count,\n          count(distinct \"contact_description\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          50 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_last_modified_date') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_last_modified_date\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_last_modified_date\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_last_modified_date\") as distinct_count,\n          count(distinct \"contact_last_modified_date\") = count(*) as is_unique,\n          cast(min(\"contact_last_modified_date\") as varchar) as min,\n          cast(max(\"contact_last_modified_date\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          51 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_account_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_account_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_account_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_account_id\") as distinct_count,\n          count(distinct \"contact_account_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          52 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_language__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_language__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_language__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_language__c\") as distinct_count,\n          count(distinct \"contact_gp_language__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          53 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_address1__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_address1__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_address1__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_address1__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_address1__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          54 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_address2__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_address2__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_address2__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_address2__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_address2__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          55 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_autofill__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_autofill__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_autofill__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_autofill__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_autofill__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          56 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_city__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_city__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_city__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_city__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_city__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          57 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_date_added__c') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_date_added__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_date_added__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_date_added__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_date_added__c\") = count(*) as is_unique,\n          cast(min(\"contact_gp_patient_date_added__c\") as varchar) as min,\n          cast(max(\"contact_gp_patient_date_added__c\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          58 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_date_changed__c') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_date_changed__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_date_changed__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_date_changed__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_date_changed__c\") = count(*) as is_unique,\n          cast(min(\"contact_gp_patient_date_changed__c\") as varchar) as min,\n          cast(max(\"contact_gp_patient_date_changed__c\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          59 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_note__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_note__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_note__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_note__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_note__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          60 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_state__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_state__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_state__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_state__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_state__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          61 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_status__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_status__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_status__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_status__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_status__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          62 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_patient_zip__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_patient_zip__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_patient_zip__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_patient_zip__c\") as distinct_count,\n          count(distinct \"contact_gp_patient_zip__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          63 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_payment_card_date_expired__c') as column_name,\n          nullif(lower('timestamp without time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_payment_card_date_expired__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_payment_card_date_expired__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_payment_card_date_expired__c\") as distinct_count,\n          count(distinct \"contact_gp_payment_card_date_expired__c\") = count(*) as is_unique,\n          cast(min(\"contact_gp_payment_card_date_expired__c\") as varchar) as min,\n          cast(max(\"contact_gp_payment_card_date_expired__c\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          64 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_payment_card_last4__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_payment_card_last4__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_payment_card_last4__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_payment_card_last4__c\") as distinct_count,\n          count(distinct \"contact_gp_payment_card_last4__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          65 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_payment_coupon__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_payment_coupon__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_payment_coupon__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_payment_coupon__c\") as distinct_count,\n          count(distinct \"contact_gp_payment_coupon__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          66 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_payment_method__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_payment_method__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_payment_method__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_payment_method__c\") as distinct_count,\n          count(distinct \"contact_gp_payment_method__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          67 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_pharmacy_fax__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_pharmacy_fax__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_pharmacy_fax__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_pharmacy_fax__c\") as distinct_count,\n          count(distinct \"contact_gp_pharmacy_fax__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          68 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_pharmacy_npi__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_pharmacy_npi__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_pharmacy_npi__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_pharmacy_npi__c\") as distinct_count,\n          count(distinct \"contact_gp_pharmacy_npi__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          69 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_pharmacy_name__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_pharmacy_name__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_pharmacy_name__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_pharmacy_name__c\") as distinct_count,\n          count(distinct \"contact_gp_pharmacy_name__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          70 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_pharmacy_phone__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_pharmacy_phone__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_pharmacy_phone__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_pharmacy_phone__c\") as distinct_count,\n          count(distinct \"contact_gp_pharmacy_phone__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          71 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_pharmacy_address__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_pharmacy_address__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_pharmacy_address__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_pharmacy_address__c\") as distinct_count,\n          count(distinct \"contact_gp_pharmacy_address__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          72 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_phone1__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_phone1__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_phone1__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_phone1__c\") as distinct_count,\n          count(distinct \"contact_gp_phone1__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          73 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_phone2__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_phone2__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_phone2__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_phone2__c\") as distinct_count,\n          count(distinct \"contact_gp_phone2__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          74 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_refills_used__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_refills_used__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_refills_used__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_refills_used__c\") as distinct_count,\n          count(distinct \"contact_gp_refills_used__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          75 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_tracking_coupon__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_tracking_coupon__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_tracking_coupon__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_tracking_coupon__c\") as distinct_count,\n          count(distinct \"contact_gp_tracking_coupon__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          76 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_recordtype_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_recordtype_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_recordtype_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_recordtype_id\") as distinct_count,\n          count(distinct \"contact_recordtype_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          77 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_first_name__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_first_name__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_first_name__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_first_name__c\") as distinct_count,\n          count(distinct \"contact_first_name__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          78 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_gp_email__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_gp_email__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_gp_email__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_gp_email__c\") as distinct_count,\n          count(distinct \"contact_gp_email__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          79 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_isdeleted') as column_name,\n          nullif(lower('boolean'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_isdeleted\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_isdeleted\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_isdeleted\") as distinct_count,\n          count(distinct \"contact_isdeleted\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          80 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('contact_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"contact_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"contact_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"contact_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"contact_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"contact_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"contact_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          81 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_assigned_to_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_assigned_to_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_assigned_to_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_assigned_to_id\") as distinct_count,\n          count(distinct \"gp_user_assigned_to_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          82 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_assigned_to_ownerid') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_assigned_to_ownerid\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_assigned_to_ownerid\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_assigned_to_ownerid\") as distinct_count,\n          count(distinct \"gp_user_assigned_to_ownerid\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          83 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_assigned_to_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_assigned_to_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_assigned_to_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_assigned_to_name\") as distinct_count,\n          count(distinct \"gp_user_assigned_to_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          84 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_assigned_to_role__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_assigned_to_role__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_assigned_to_role__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_assigned_to_role__c\") as distinct_count,\n          count(distinct \"gp_user_assigned_to_role__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          85 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_assigned_to_email__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_assigned_to_email__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_assigned_to_email__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_assigned_to_email__c\") as distinct_count,\n          count(distinct \"gp_user_assigned_to_email__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          86 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_related_to_id') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_related_to_id\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_related_to_id\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_related_to_id\") as distinct_count,\n          count(distinct \"gp_user_related_to_id\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          87 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_related_to_ownerid') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_related_to_ownerid\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_related_to_ownerid\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_related_to_ownerid\") as distinct_count,\n          count(distinct \"gp_user_related_to_ownerid\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          88 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_related_to_name') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_related_to_name\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_related_to_name\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_related_to_name\") as distinct_count,\n          count(distinct \"gp_user_related_to_name\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          89 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_related_to_role__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_related_to_role__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_related_to_role__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_related_to_role__c\") as distinct_count,\n          count(distinct \"gp_user_related_to_role__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          90 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('gp_user_related_to_email__c') as column_name,\n          nullif(lower('text'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"gp_user_related_to_email__c\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"gp_user_related_to_email__c\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"gp_user_related_to_email__c\") as distinct_count,\n          count(distinct \"gp_user_related_to_email__c\") = count(*) as is_unique,\n          null as min,\n          null as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          91 as _column_position\n        from source_data\n\n        union all\n      \n        \n        select \n          lower('_airbyte_emitted_at') as column_name,\n          nullif(lower('timestamp with time zone'), '') as data_type,\n          cast(count(*) as numeric) as row_count,\n          sum(case when \"_airbyte_emitted_at\" is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          count(distinct \"_airbyte_emitted_at\") / cast(count(*) as numeric) as distinct_proportion,\n          count(distinct \"_airbyte_emitted_at\") as distinct_count,\n          count(distinct \"_airbyte_emitted_at\") = count(*) as is_unique,\n          cast(min(\"_airbyte_emitted_at\") as varchar) as min,\n          cast(max(\"_airbyte_emitted_at\") as varchar) as max,\n          cast(null as numeric) as avg,\n          cast(null as numeric) as std_dev_population,\n          cast(null as numeric) as std_dev_sample,\n          cast(current_timestamp as varchar) as profiled_at,\n          92 as _column_position\n        from source_data\n\n        \n      \n    )\n\n    select\n      column_name,\n      data_type,\n      \n        row_count,\n      \n        not_null_proportion,\n      \n        distinct_proportion,\n      \n        distinct_count,\n      \n        is_unique,\n      \n        min,\n      \n        max,\n      \n        avg,\n      \n        std_dev_population,\n      \n        std_dev_sample,\n      \n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".profiles.\"salesforce_patients_abt_profile\""}, "model.smartpill.accounts": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        jsonb_extract_path_text(_airbyte_data, 'AcctNum') as account_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubAccount') as bool) as is_sub_account,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'AccountType') as account_type,\n        jsonb_extract_path_text(_airbyte_data, 'AccountSubType') as account_sub_type,\n        jsonb_extract_path_text(_airbyte_data, 'Classification') as classification,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalance') as decimal) as balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalanceWithSubAccounts') as decimal) as balance_with_sub_accounts,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'Description') as description\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_accounts') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "accounts"], "unique_id": "model.smartpill.accounts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/accounts.sql", "original_file_path": "models/quickbooks/bronze/accounts.sql", "name": "accounts", "alias": "accounts", "checksum": {"name": "sha256", "checksum": "e96318fc6fa08041e2e0a4b03104895095ed945f2fdec2fbdbb04eb54ddb6fc2"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_accounts"]], "metrics": [], "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.\n", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "Refresh timestamp for the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6088586, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        jsonb_extract_path_text(_airbyte_data, 'AcctNum') as account_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubAccount') as bool) as is_sub_account,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'AccountType') as account_type,\n        jsonb_extract_path_text(_airbyte_data, 'AccountSubType') as account_sub_type,\n        jsonb_extract_path_text(_airbyte_data, 'Classification') as classification,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalance') as decimal) as balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalanceWithSubAccounts') as decimal) as balance_with_sub_accounts,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'Description') as description\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_accounts\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"accounts\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"accounts\""}, "model.smartpill.bill_payments": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','BankAccountRef','value') as check_bank_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','PrintStatus') as check_print_status,\n        jsonb_extract_path_text(_airbyte_data, 'CreditCardPayment','CCAccountRef','value') as credit_card_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'PayType') as pay_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_bill_payments') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "bill_payments"], "unique_id": "model.smartpill.bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/bill_payments.sql", "original_file_path": "models/quickbooks/bronze/bill_payments.sql", "name": "bill_payments", "alias": "bill_payments", "checksum": {"name": "sha256", "checksum": "303814d1f52b6dba72fec95c2040cb47f20c3e770b17b07f1023439980e5ad26"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_bill_payments"]], "metrics": [], "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/bill_payments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6146526, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','BankAccountRef','value') as check_bank_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','PrintStatus') as check_print_status,\n        jsonb_extract_path_text(_airbyte_data, 'CreditCardPayment','CCAccountRef','value') as credit_card_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'PayType') as pay_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_bill_payments\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"bill_payments\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"bill_payments\""}, "model.smartpill.bill_payments_lines": {"raw_sql": "with bill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        _airbyte_emitted_at,\n        id as bill_payment_id,\n\t\tjsonb_extract_path_text(line, 'Id') as id,\n\t\tcast(jsonb_extract_path_text(line, 'Amount') as decimal) as amount,\n\t\ttrim(both '\"' from cast(line->'LinkedTxn'->0->'TxnId' as text)) as transaction_id,\n\t\tcast(line->'linkedtxn'->0 as text) as transaction_type\n    from {{ ref('bill_payments') }}\n    cross join jsonb_array_elements(line) as line\n    where \n        line is not null\n    {% if is_incremental() %}\n        and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n    {% endif %}\n)\nselect\n    *,\n\tcase when transaction_type = 'Bill' then transaction_id else null end as bill_id,\n\tcase when transaction_type = 'Deposit' then transaction_id else null end as deposit_id,\n\tcase when transaction_type = 'JournalEntry' then transaction_id else null end as journal_entry_id,\n\tcase when transaction_type = 'Expense' then transaction_id else null end as expense_id\nfrom bill_payment", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "bill_payments_lines"], "unique_id": "model.smartpill.bill_payments_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/bill_payments_lines.sql", "original_file_path": "models/quickbooks/bronze/bill_payments_lines.sql", "name": "bill_payments_lines", "alias": "bill_payments_lines", "checksum": {"name": "sha256", "checksum": "b64337eb1a080ec0e089c8a78a8f33c48409ae013bc37824bdd230910d4f1158"}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "Entity identifier of the parent bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_payment_hash_id": {"name": "_bill_payment_hash_id", "description": "Unique identifier for the parent bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Unique identifier of the transaction record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type of transaction associated to the bill payment line (Bill/Deposit/JournalEntry/Expense)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the deposit record associated with the expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/bill_payments_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6223793, "compiled_sql": "with bill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        _airbyte_emitted_at,\n        id as bill_payment_id,\n\t\tjsonb_extract_path_text(line, 'Id') as id,\n\t\tcast(jsonb_extract_path_text(line, 'Amount') as decimal) as amount,\n\t\ttrim(both '\"' from cast(line->'LinkedTxn'->0->'TxnId' as text)) as transaction_id,\n\t\tcast(line->'linkedtxn'->0 as text) as transaction_type\n    from \"datawarehouse\".quickbooks.\"bill_payments\"\n    cross join jsonb_array_elements(line) as line\n    where \n        line is not null\n    \n        and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"bill_payments_lines\")\n    \n)\nselect\n    *,\n\tcase when transaction_type = 'Bill' then transaction_id else null end as bill_id,\n\tcase when transaction_type = 'Deposit' then transaction_id else null end as deposit_id,\n\tcase when transaction_type = 'JournalEntry' then transaction_id else null end as journal_entry_id,\n\tcase when transaction_type = 'Expense' then transaction_id else null end as expense_id\nfrom bill_payment", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"bill_payments_lines\""}, "model.smartpill.bills": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balance,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'DueDate') as timestamp) as due_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'APAccountRef','value') as payable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_bills') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_bills"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "bills"], "unique_id": "model.smartpill.bills", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/bills.sql", "original_file_path": "models/quickbooks/bronze/bills.sql", "name": "bills", "alias": "bills", "checksum": {"name": "sha256", "checksum": "e81c947492f4561e8e321f9398d8ed0759907eb85095d2eae0bf22f9ee73e2ab"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_bills"]], "metrics": [], "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/bills.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6285162, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balance,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'DueDate') as timestamp) as due_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'APAccountRef','value') as payable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_bills\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"bills\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"bills\""}, "model.smartpill.bills_lines": {"raw_sql": "select\n    _hash_id as _bill_hash_id,\n    _airbyte_emitted_at,\n    id as bill_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','BillableStatus') as account_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ClassRef','value') as item_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','CustomerRef','value') as item_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom {{ ref('bills') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "bills_lines"], "unique_id": "model.smartpill.bills_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/bills_lines.sql", "original_file_path": "models/quickbooks/bronze/bills_lines.sql", "name": "bills_lines", "alias": "bills_lines", "checksum": {"name": "sha256", "checksum": "1c061931d4881c129f325f7a55a26edb2814b3e1f4eedc5e112df3361a7b6cc6"}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Entity identifier of the parent bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_hash_id": {"name": "_bill_hash_id", "description": "Unique identifier for the parent bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_class_status": {"name": "item_expense_class_status", "description": "The class reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/bills_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6360137, "compiled_sql": "select\n    _hash_id as _bill_hash_id,\n    _airbyte_emitted_at,\n    id as bill_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','BillableStatus') as account_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ClassRef','value') as item_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','CustomerRef','value') as item_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom \"datawarehouse\".quickbooks.\"bills\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"bills_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"bills_lines\""}, "model.smartpill.classes": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubClass') as bool) as is_subclass\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_classes') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_classes"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "classes"], "unique_id": "model.smartpill.classes", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/classes.sql", "original_file_path": "models/quickbooks/bronze/classes.sql", "name": "classes", "alias": "classes", "checksum": {"name": "sha256", "checksum": "401aa4049d73f1ae5291f4e2115fa70f5f9b35de12a9959519c07cba61918482"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_classes"]], "metrics": [], "description": "Table containing classes of incomes and expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_class (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/classes.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6519046, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubClass') as bool) as is_subclass\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_classes\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"classes\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"classes\""}, "model.smartpill.credit_memos": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'BillAddr','value') as bill_address,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_credit_memos') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_credit_memos"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "credit_memos"], "unique_id": "model.smartpill.credit_memos", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/credit_memos.sql", "original_file_path": "models/quickbooks/bronze/credit_memos.sql", "name": "credit_memos", "alias": "credit_memos", "checksum": {"name": "sha256", "checksum": "6bf3df12d0d65d37f798e809ba2f62c1342adfdbebf038f6d4bddd8165b2f374"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_credit_memos"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/credit_memos.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.7889862, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'BillAddr','value') as bill_address,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_credit_memos\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"credit_memos\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"credit_memos\""}, "model.smartpill.credit_memos_lines": {"raw_sql": "select\n    _hash_id as _credit_memo_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','AccountRef','value') as sales_item_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom {{ ref('credit_memos') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n    and jsonb_extract_path_text(_airbyte_nested_data, 'Id') is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.credit_memos"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "credit_memos_lines"], "unique_id": "model.smartpill.credit_memos_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/credit_memos_lines.sql", "original_file_path": "models/quickbooks/bronze/credit_memos_lines.sql", "name": "credit_memos_lines", "alias": "credit_memos_lines", "checksum": {"name": "sha256", "checksum": "66768225389f46594fc6e19dea316727ac3cd6ee6377caf026a00ecc50b938c7"}, "tags": [], "refs": [["credit_memos"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/credit_memos_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.7984846, "compiled_sql": "select\n    _hash_id as _credit_memo_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','AccountRef','value') as sales_item_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom \"datawarehouse\".quickbooks.\"credit_memos\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n    and jsonb_extract_path_text(_airbyte_nested_data, 'Id') is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"credit_memos_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"credit_memos_lines\""}, "model.smartpill.customers": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BalanceWithJobs') as decimal) as balance_with_jobs,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BillWithParent') as bool) bill_with_parent,\n        jsonb_extract_path_text(_airbyte_data, 'CompanyName') as company_name,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'DisplayName') as display_name,\n        jsonb_extract_path_text(_airbyte_data, 'WebAddr','URI') as website,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as bool) as taxable\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_customers') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_customers"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "customers"], "unique_id": "model.smartpill.customers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/customers.sql", "original_file_path": "models/quickbooks/bronze/customers.sql", "name": "customers", "alias": "customers", "checksum": {"name": "sha256", "checksum": "d2d8634005c29f9c7c899a68c199f920878ea88dfe2e6e6685631d38542e19f7"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_customers"]], "metrics": [], "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website url associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.646628, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BalanceWithJobs') as decimal) as balance_with_jobs,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BillWithParent') as bool) bill_with_parent,\n        jsonb_extract_path_text(_airbyte_data, 'CompanyName') as company_name,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'DisplayName') as display_name,\n        jsonb_extract_path_text(_airbyte_data, 'WebAddr','URI') as website,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as bool) as taxable\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_customers\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"customers\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"customers\""}, "model.smartpill.deleted_objects": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'Type') as object_type\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_deleted_objects') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "deleted_objects"], "unique_id": "model.smartpill.deleted_objects", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/deleted_objects.sql", "original_file_path": "models/quickbooks/bronze/deleted_objects.sql", "name": "deleted_objects", "alias": "deleted_objects", "checksum": {"name": "sha256", "checksum": "ca20a2f430130024740a70bb2b5fde42cba5529aab20b615d019bae1f55ad23e"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_deleted_objects"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/deleted_objects.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.8299549, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'Type') as object_type\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_deleted_objects\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"deleted_objects\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"deleted_objects\""}, "model.smartpill.deposits": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_deposits') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "deposits"], "unique_id": "model.smartpill.deposits", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/deposits.sql", "original_file_path": "models/quickbooks/bronze/deposits.sql", "name": "deposits", "alias": "deposits", "checksum": {"name": "sha256", "checksum": "82860d4088d94b58789e2ba9c224830c4982b040f4213da207fd2701a2bb9c5e"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_deposits"]], "metrics": [], "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/deposits.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6627343, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as \"created_at\",\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as \"updated_at\",\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_deposits\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"deposits\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"deposits\""}, "model.smartpill.deposits_lines": {"raw_sql": "select\n    _hash_id as _deposit_hash_id,\n    _airbyte_emitted_at,\n    id as deposit_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'LineNum') as line_num\nfrom {{ ref('deposits') }}\n    cross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "deposits_lines"], "unique_id": "model.smartpill.deposits_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/deposits_lines.sql", "original_file_path": "models/quickbooks/bronze/deposits_lines.sql", "name": "deposits_lines", "alias": "deposits_lines", "checksum": {"name": "sha256", "checksum": "d08d0561a48f486e36684438f81ee547e7092c427a9498a5856e02b8bcd00831"}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "Table containing individual line items comprising the deposit.", "columns": {"id": {"name": "id", "description": "Identifier of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_num": {"name": "line_num", "description": "Line number given for the deposit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_deposit_hash_id": {"name": "_deposit_hash_id", "description": "Unique identifier for the parent deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/deposits_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.65604, "compiled_sql": "select\n    _hash_id as _deposit_hash_id,\n    _airbyte_emitted_at,\n    id as deposit_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'DepositLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'LineNum') as line_num\nfrom \"datawarehouse\".quickbooks.\"deposits\"\n    cross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"deposits_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"deposits_lines\""}, "model.smartpill.invoices": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balace,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'DueDate') as timestamp) as due_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_invoices') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "invoices"], "unique_id": "model.smartpill.invoices", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/invoices.sql", "original_file_path": "models/quickbooks/bronze/invoices.sql", "name": "invoices", "alias": "invoices", "checksum": {"name": "sha256", "checksum": "4e2b4883e45c87642a9c3f742034a85a07739c338d6d95f2acef3796d797b1d1"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_invoices"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.904661, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as decimal) as balace,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        cast(jsonb_extract_path_text(_airbyte_data, 'DueDate') as timestamp) as due_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_invoices\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"invoices\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"invoices\""}, "model.smartpill.invoices_lines": {"raw_sql": "select\n    _hash_id as _invoice_hash_id,\n    _airbyte_emitted_at,\n    id as invoice_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemAccountRef','value') as sales_item_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','Qty') as sales_item_quantity,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','UnitPrice') as sales_item_unit_price,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    jsonb_extract_path_text(_airbyte_nested_data, 'LineNum') as line_num\nfrom {{ ref('invoices') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "invoices_lines"], "unique_id": "model.smartpill.invoices_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/invoices_lines.sql", "original_file_path": "models/quickbooks/bronze/invoices_lines.sql", "name": "invoices_lines", "alias": "invoices_lines", "checksum": {"name": "sha256", "checksum": "0f936d9c3d37bf183bd1258a2588cd44f0f49b306527f0a65cf2dc4734f3cf8c"}, "tags": [], "refs": [["invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/invoices_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.9209464, "compiled_sql": "select\n    _hash_id as _invoice_hash_id,\n    _airbyte_emitted_at,\n    id as invoice_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemAccountRef','value') as sales_item_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','Qty') as sales_item_quantity,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','UnitPrice') as sales_item_unit_price,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    jsonb_extract_path_text(_airbyte_nested_data, 'LineNum') as line_num\nfrom \"datawarehouse\".quickbooks.\"invoices\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"invoices_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"invoices_lines\""}, "model.smartpill.items": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'AssetAccountRef','value') as asset_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'ExpenseAccountRef','value') as expense_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Description') as description,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        jsonb_extract_path_text(_airbyte_data, 'IncomeAccountRef','value') as income_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_item_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'PurchaseCost') as decimal) as purchase_cost,\n        jsonb_extract_path_text(_airbyte_data, 'PurchaseDesc') as purchase_description,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubItem') as int) as sub_item,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as bool) as taxable,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TrackQtyOnHand') as bool) as track_quantity_on_hand,\n        jsonb_extract_path_text(_airbyte_data, 'Type') as type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnitPrice') as decimal) as unit_price\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_items') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_items"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "items"], "unique_id": "model.smartpill.items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/items.sql", "original_file_path": "models/quickbooks/bronze/items.sql", "name": "items", "alias": "items", "checksum": {"name": "sha256", "checksum": "9595c7bd7bf4e9e67477acc799a6e6b7be0851c98d303534c5ecd10ce13fee5e"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_items"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/items.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.9384794, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as bool) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'AssetAccountRef','value') as asset_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'ExpenseAccountRef','value') as expense_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Description') as description,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        jsonb_extract_path_text(_airbyte_data, 'IncomeAccountRef','value') as income_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_item_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'PurchaseCost') as decimal) as purchase_cost,\n        jsonb_extract_path_text(_airbyte_data, 'PurchaseDesc') as purchase_description,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubItem') as int) as sub_item,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as bool) as taxable,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TrackQtyOnHand') as bool) as track_quantity_on_hand,\n        jsonb_extract_path_text(_airbyte_data, 'Type') as type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnitPrice') as decimal) as unit_price\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_items\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"items\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"items\""}, "model.smartpill.journal_entries": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Adjustment') as bool) as is_adjustment,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path(_airbyte_data, 'Line') as line,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_journal_entries') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "journal_entries"], "unique_id": "model.smartpill.journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/journal_entries.sql", "original_file_path": "models/quickbooks/bronze/journal_entries.sql", "name": "journal_entries", "alias": "journal_entries", "checksum": {"name": "sha256", "checksum": "3f45d49e3beded236c07b52c8383c23956b55980fabc94cf92a215eefa3c04c2"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_journal_entries"]], "metrics": [], "description": "Table containing journal entry transactions.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment": {"name": "adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the journal entry was transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/journal_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6793716, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Adjustment') as bool) as is_adjustment,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path(_airbyte_data, 'Line') as line,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_journal_entries\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"journal_entries\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"journal_entries\""}, "model.smartpill.journal_entries_lines": {"raw_sql": "select\n    _hash_id as _journal_entry_hash_id,\n    _airbyte_emitted_at,\n    id as journal_entry_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','PostingType') as posting_type,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description\nfrom {{ ref('journal_entries') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "journal_entries_lines"], "unique_id": "model.smartpill.journal_entries_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/journal_entries_lines.sql", "original_file_path": "models/quickbooks/bronze/journal_entries_lines.sql", "name": "journal_entries_lines", "alias": "journal_entries_lines", "checksum": {"name": "sha256", "checksum": "288dadbc964e2c2e091f6c43ef140376707e4587422462a0541d9bb8221bb9dd"}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"id": {"name": "id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_journal_entry_hash_id": {"name": "_journal_entry_hash_id", "description": "Unique identifier for the parent journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/journal_entries_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6850753, "compiled_sql": "select\n    _hash_id as _journal_entry_hash_id,\n    _airbyte_emitted_at,\n    id as journal_entry_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'JournalEntryLineDetail','PostingType') as posting_type,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"journal_entries_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"journal_entries_lines\""}, "model.smartpill.payments": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'ARAccountRef','value') as receivable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as deposit_to_account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnappliedAmt') as decimal) as unapplied_amount,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_payments') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_payments"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "payments"], "unique_id": "model.smartpill.payments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/payments.sql", "original_file_path": "models/quickbooks/bronze/payments.sql", "name": "payments", "alias": "payments", "checksum": {"name": "sha256", "checksum": "b67823df10934f89ba0a175f4cd5961a4c896602cf300aa90e5b3973ca53b9df"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_payments"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/payments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701089.9828682, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'ARAccountRef','value') as receivable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as deposit_to_account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnappliedAmt') as decimal) as unapplied_amount,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_payments\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"payments\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"payments\""}, "model.smartpill.purchases": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'AccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'Credit') as credit,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        jsonb_extract_path_text(_airbyte_data, 'PaymentType') as payment_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','value') as entity_id,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','type') as entity_type,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_purchases') }}\n)\nselect\n    *,\n\tcase when entity_type = 'Customer' then entity_id else null end as customer_id,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "purchases"], "unique_id": "model.smartpill.purchases", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/purchases.sql", "original_file_path": "models/quickbooks/bronze/purchases.sql", "name": "purchases", "alias": "purchases", "checksum": {"name": "sha256", "checksum": "bf264f53b17ede4e3a2098fb15fc99774e42db596d6b574ee1501498a412eba5"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_purchases"]], "metrics": [], "description": "Table containing records of purchase expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.6741238, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'AccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'Credit') as credit,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        jsonb_extract_path_text(_airbyte_data, 'PaymentType') as payment_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','value') as entity_id,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','type') as entity_type,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_purchases\n)\nselect\n    *,\n\tcase when entity_type = 'Customer' then entity_id else null end as customer_id,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"purchases\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"purchases\""}, "model.smartpill.purchases_lines": {"raw_sql": "select\n    _hash_id as _purchase_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom {{ ref('purchases') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "purchases_lines"], "unique_id": "model.smartpill.purchases_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/purchases_lines.sql", "original_file_path": "models/quickbooks/bronze/purchases_lines.sql", "name": "purchases_lines", "alias": "purchases_lines", "checksum": {"name": "sha256", "checksum": "7b093bcc411982957f0c021be05d450153c82fb3751481fb55bf1914abbf731a"}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"id": {"name": "id", "description": "Identifier of the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class which the purchase line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_purchase_hash_id": {"name": "_purchase_hash_id", "description": "Unique identifier for the parent purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/bronze/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/purchases_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701091.667997, "compiled_sql": "select\n    _hash_id as _purchase_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom \"datawarehouse\".quickbooks.\"purchases\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"purchases_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"purchases_lines\""}, "model.smartpill.sales_receipts": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as deposit_to_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_sales_receipts') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "sales_receipts"], "unique_id": "model.smartpill.sales_receipts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/sales_receipts.sql", "original_file_path": "models/quickbooks/bronze/sales_receipts.sql", "name": "sales_receipts", "alias": "sales_receipts", "checksum": {"name": "sha256", "checksum": "252ee36fd26449f13bda741215d6e38ec0a7378981ab1de2b447ae47f26905cf"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_sales_receipts"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/sales_receipts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701090.0334773, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as deposit_to_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_sales_receipts\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"sales_receipts\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"sales_receipts\""}, "model.smartpill.sales_receipts_lines": {"raw_sql": "select\n    _hash_id as _sales_receipts_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom {{ ref('sales_receipts') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n    and jsonb_extract_path_text(_airbyte_nested_data, 'Id') is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.sales_receipts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "sales_receipts_lines"], "unique_id": "model.smartpill.sales_receipts_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/sales_receipts_lines.sql", "original_file_path": "models/quickbooks/bronze/sales_receipts_lines.sql", "name": "sales_receipts_lines", "alias": "sales_receipts_lines", "checksum": {"name": "sha256", "checksum": "659d655bb680b4fd7f097539bd7b676a22fcb52d1dd33224a66f6efb881d875a"}, "tags": [], "refs": [["sales_receipts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/sales_receipts_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701090.0435786, "compiled_sql": "select\n    _hash_id as _sales_receipts_hash_id,\n    _airbyte_emitted_at,\n    id as purchase_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom \"datawarehouse\".quickbooks.\"sales_receipts\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n    and jsonb_extract_path_text(_airbyte_nested_data, 'Id') is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"sales_receipts_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"sales_receipts_lines\""}, "model.smartpill.transfers": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'ToAccountRef', 'value') as to_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'FromAccountRef', 'value') as from_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Amount') as decimal) as amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_transfers') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "transfers"], "unique_id": "model.smartpill.transfers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/transfers.sql", "original_file_path": "models/quickbooks/bronze/transfers.sql", "name": "transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "e411888067b7392108c1673a866dde4d5f7c7e459aa5de81f3de8df7b36195f9"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_transfers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701090.0546432, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        jsonb_extract_path_text(_airbyte_data, 'ToAccountRef', 'value') as to_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'FromAccountRef', 'value') as from_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Amount') as decimal) as amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_transfers\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"transfers\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"transfers\""}, "model.smartpill.vendor_credits": {"raw_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'VendorRef', 'value') as vendor_id,\n        jsonb_extract_path_text(_airbyte_data, 'APAccountRef','value') as payable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbooks_vendor_credits') }}\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n{% if is_incremental() %}\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "vendor_credits"], "unique_id": "model.smartpill.vendor_credits", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/vendor_credits.sql", "original_file_path": "models/quickbooks/bronze/vendor_credits.sql", "name": "vendor_credits", "alias": "vendor_credits", "checksum": {"name": "sha256", "checksum": "c2105f4d106384b29465f7fe545b0577fef76c46cc8ab6d6a43e4d90d5909bf5"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_quickbooks_vendor_credits"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/vendor_credits.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701090.072279, "compiled_sql": "with final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime') as timestamp) as created_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime') as timestamp) as updated_at,\n        _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'VendorRef', 'value') as vendor_id,\n        jsonb_extract_path_text(_airbyte_data, 'APAccountRef','value') as payable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'ExchangeRate') as decimal) as exchange_rate,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as decimal) as total_amount,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TxnDate') as timestamp) as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_vendor_credits\n)\nselect\n    *,\n    md5(\"id\" || '-' || \"_airbyte_emitted_at\") as _hash_id\nfrom\n    final\n\nwhere\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"vendor_credits\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"vendor_credits\""}, "model.smartpill.vendor_credits_lines": {"raw_sql": "select\n    _hash_id as _vendor_credit_hash_id,\n    _airbyte_emitted_at,\n    id as bill_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','BillableStatus') as account_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom {{ ref('vendor_credits') }}\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.vendor_credits"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "bronze", "vendor_credits_lines"], "unique_id": "model.smartpill.vendor_credits_lines", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/bronze/vendor_credits_lines.sql", "original_file_path": "models/quickbooks/bronze/vendor_credits_lines.sql", "name": "vendor_credits_lines", "alias": "vendor_credits_lines", "checksum": {"name": "sha256", "checksum": "badb41f53d139a5a938a8097af3a817299df38dda8407942c4671efdd97e1a56"}, "tags": [], "refs": [["vendor_credits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/vendor_credits_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "incremental"}, "created_at": 1703701090.0873833, "compiled_sql": "select\n    _hash_id as _vendor_credit_hash_id,\n    _airbyte_emitted_at,\n    id as bill_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Id') as id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(_airbyte_nested_data, 'AccountBasedExpenseLineDetail','BillableStatus') as account_expense_billable_status,\n    jsonb_extract_path_text(_airbyte_nested_data, 'Description') as description,\n    cast(jsonb_extract_path_text(_airbyte_nested_data, 'Amount') as decimal) as amount\nfrom \"datawarehouse\".quickbooks.\"vendor_credits\"\ncross join jsonb_array_elements(line) as _airbyte_nested_data\nwhere\n    line is not null\n\n    and _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".quickbooks.\"vendor_credits_lines\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"vendor_credits_lines\""}, "model.smartpill.accounts_top_level": {"raw_sql": "with recursive accounts as (\n     select distinct on (id)\n         *\n     from {{ ref('accounts') }}\n     order by id, _airbyte_emitted_at desc\n),\ntree as (\n    select id,\n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "gold", "accounts_top_level"], "unique_id": "model.smartpill.accounts_top_level", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/gold/accounts_top_level.sql", "original_file_path": "models/quickbooks/gold/accounts_top_level.sql", "name": "accounts_top_level", "alias": "accounts_top_level", "checksum": {"name": "sha256", "checksum": "b8e07275faaba2c77219fee5e71c4b817f1c5379e395c2f32e97396c884f1fed"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/gold/accounts_top_level.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "table"}, "created_at": 1703701090.1003425, "compiled_sql": "with recursive accounts as (\n     select distinct on (id)\n         *\n     from \"datawarehouse\".quickbooks.\"accounts\"\n     order by id, _airbyte_emitted_at desc\n),\ntree as (\n    select id,\n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".quickbooks.\"accounts_top_level\""}, "model.smartpill.general_ledger_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n\t\"{{ create_general_ledger_abt_view() }}\",\n\t\"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nwith gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        class_id,\n        customer_id\n    from {{ref('int__purchase_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__deposit_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__journal_entry_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__bill_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__invoice_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__bill_payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__payroll_check_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__sales_receipts_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__credit_memo_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__transfer_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int__vendor_credit_double_entry')}}\n),\n\naccounts as (\n    select *\n    from {{ref('int__account_classifications')}}\n),\n\n\nqgl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.account_id,\n        accounts.financial_statement_helper as report_type,\n        accounts.classification as account_type_top,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as amount\n    from gl_union\n\n    inner join accounts\n        on gl_union.account_id = accounts.id\n\n    where accounts.classification is not null\n),\n\nqcl as (\n    select distinct on (id)\n        *\n    from {{ ref('classes') }}\n    order by id, _airbyte_emitted_at desc\n),\n\nqcu as (\n    select distinct on (id)\n        *\n    from {{ ref('customers') }}\n    order by id, _airbyte_emitted_at desc\n)\n\nselect\n    qgl.*,\n    qcl.fully_qualified_name as class_full,\n    qcl.name as class,\n    qa.name as account_sub,\n    qa.fully_qualified_name as account_full,\n    qa.account_type as account_type_sub,\n    qa.account_number as account_number,\n    qa.top_level_id as account_top_id,\n    qa.parent_account_id as account_parent_id,\n    qap.name as account_top,\n    qap.account_number as account_top_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom qgl\nleft join qcl on (qcl.id = qgl.class_id)\nleft join {{ ref('accounts_top_level') }} qa on (qa.id = qgl.account_id)\nleft join {{ ref('accounts_top_level') }} qap on (qap.id = qa.top_level_id)\nleft join qcu on (qcu.id = qgl.customer_id)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.create_general_ledger_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.int__purchase_double_entry", "model.smartpill.int__deposit_double_entry", "model.smartpill.int__journal_entry_double_entry", "model.smartpill.int__payment_double_entry", "model.smartpill.int__bill_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__bill_payment_double_entry", "model.smartpill.int__payroll_check_double_entry", "model.smartpill.int__sales_receipts_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__transfer_double_entry", "model.smartpill.int__vendor_credit_double_entry", "model.smartpill.int__account_classifications", "model.smartpill.classes", "model.smartpill.customers", "model.smartpill.accounts_top_level", "model.smartpill.accounts_top_level"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ create_general_ledger_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "gold", "general_ledger_abt"], "unique_id": "model.smartpill.general_ledger_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/gold/general_ledger_abt.sql", "original_file_path": "models/quickbooks/gold/general_ledger_abt.sql", "name": "general_ledger_abt", "alias": "general_ledger_abt", "checksum": {"name": "sha256", "checksum": "744ce870e1b9cf66407035f85798c4caf5960e11be7323bb5d720925cd488d9b"}, "tags": [], "refs": [["int__purchase_double_entry"], ["int__deposit_double_entry"], ["int__journal_entry_double_entry"], ["int__payment_double_entry"], ["int__bill_double_entry"], ["int__invoice_double_entry"], ["int__bill_payment_double_entry"], ["int__payroll_check_double_entry"], ["int__sales_receipts_double_entry"], ["int__credit_memo_double_entry"], ["int__transfer_double_entry"], ["int__vendor_credit_double_entry"], ["int__account_classifications"], ["classes"], ["customers"], ["accounts_top_level"], ["accounts_top_level"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/gold/general_ledger_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "table", "post-hook": ["{{ create_general_ledger_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701090.1040924, "compiled_sql": "\nwith  __dbt__cte__int__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select distinct on (p.id)\n            p.*\n        from \"datawarehouse\".quickbooks.\"purchases\" p\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Purchase' and p.id = del.id\n        where del.id is null or p.updated_at > del.updated_at\n\n        order by p.id, p._airbyte_emitted_at desc\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (item.id)\n            item.*\n        from \"datawarehouse\".quickbooks.\"items\" item\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n        where del.id is null or item.updated_at > del.updated_at\n\n        order by item.id, item._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount * purchases.exchange_rate as amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'credit' else 'debit' end as payed_to_transaction_type,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select distinct on (d.id)\n            d.*\n        from \"datawarehouse\".quickbooks.\"deposits\" d\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Deposit' and d.id = del.id\n        where del.id is null or d.updated_at > del.updated_at\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount * deposits.exchange_rate as amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        deposit_lines.class_id\n    from deposits\n\n    inner join deposit_lines\n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select distinct on (j.id)\n        j.*\n    from \"datawarehouse\".quickbooks.\"journal_entries\" j\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'JournalEntry' and j.id = del.id\n    where del.id is null or j.updated_at > del.updated_at\n\n    order by j.id, j._airbyte_emitted_at desc\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount * journal_entries.exchange_rate as amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__payment_double_entry as (\nwith payment as (\n    select distinct on (p.id)\n        p.id as transaction_id,\n        transaction_date,\n        total_amount * exchange_rate as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id\n    from \"datawarehouse\".quickbooks.\"payments\" p\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Payment' and p.id = del.id\n    where del.id is null or p.updated_at > del.updated_at\n\n    order by p.id, p._airbyte_emitted_at desc\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select distinct on (b.id)\n            b.*\n        from \"datawarehouse\".quickbooks.\"bills\" b\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Bill' and b.id = del.id\n        where del.id is null or b.updated_at > del.updated_at\n        order by b.id, b._airbyte_emitted_at desc\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"bills_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i \n        where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'Item' and i.updated_at <= del.updated_at)\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id,\n        bills.transaction_date,\n        bill_lines.amount * bills.exchange_rate as amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n\n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"invoices\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Invoice' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"invoices_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount * invoices.exchange_rate\n            else invoices.total_amount * invoices.exchange_rate\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null\n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select distinct on (bp.id)\n            bp.*\n        from \"datawarehouse\".quickbooks.\"bill_payments\" bp\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'BillPayment' and bp.id = del.id\n        where del.id is null or bp.updated_at > del.updated_at\n        order by bp.id, bp._airbyte_emitted_at desc\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n\n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount * bill_payments.exchange_rate as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount,\n        account_number,\n        account_fully_qualified_name\n    from \"datawarehouse\".\"raw\".quickbooks_payroll_checks\n),\n\naccounts as (\n    select distinct on (id)\n        id,\n        account_number,\n        fully_qualified_name\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        a.id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from payroll_check pc\n    inner join accounts a on pc.account_number = a.account_number or pc.account_fully_qualified_name = a.fully_qualified_name\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__sales_receipts_double_entry as (\nwith sales_receipts as (\n    select distinct on (s.id)\n        s.*\n    from \"datawarehouse\".quickbooks.\"sales_receipts\" s\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'SalesReceipt' and s.id = del.id\n    where del.id is null or s.updated_at > del.updated_at\n\n    order by s.id, s._airbyte_emitted_at desc\n),\n\nsales_receipt_lines as (\n    select\n        *\n    from \"datawarehouse\".quickbooks.\"sales_receipts_lines\"\n),\n\nitems as (\n    select distinct on (item.id)\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"datawarehouse\".quickbooks.\"items\" item\n    left join \"datawarehouse\".quickbooks.\"items\" parent\n        on item.parent_item_id = parent.id\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n    where del.id is null or item.updated_at > del.updated_at\n\n    order by item.id, item._airbyte_emitted_at desc\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount * sales_receipts.exchange_rate as amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        sales_receipt_lines.sales_item_class_id as class_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts._hash_id = sales_receipt_lines._sales_receipts_hash_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.id\n\n    where coalesce(sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__credit_memo_double_entry as (\nwith credit_memos as (\n    select distinct on (c.id)\n        c.*\n    from \"datawarehouse\".quickbooks.\"credit_memos\" c\n    where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'CreditMemo' and c.updated_at <= del.updated_at)\n    order by c.id, c._airbyte_emitted_at desc\n),\n\ncredit_memo_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"credit_memos_lines\"\n),\n\nitems as (\n    select distinct on (i.id) \n        i.*\n    from \"datawarehouse\".quickbooks.\"items\" i \n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n    where del.id is null or i.updated_at > del.updated_at\n    order by i.id, i._airbyte_emitted_at desc\n),\n\naccounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\ndf_accounts as (\n    select\n        id as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount * credit_memos.exchange_rate as amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        credit_memo_lines.sales_item_class_id as class_id\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos._hash_id = credit_memo_lines._credit_memo_hash_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.id\n\n    where coalesce(credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__transfer_double_entry as (\nwith transfers as (\n    select distinct on (t.id)\n        t.*\n    from \"datawarehouse\".quickbooks.\"transfers\" t\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Transfer' and t.id = del.id\n    where del.id is null or t.updated_at > del.updated_at\n\n    order by t.id, t._airbyte_emitted_at desc\n),\n\ntransfer_body as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount * exchange_rate as amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__vendor_credit_double_entry as (\nwith vendor_credits as (\n    select distinct on (v.id)\n        v.*\n    from \"datawarehouse\".quickbooks.\"vendor_credits\" v\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'VendorCredit' and v.id = del.id\n    where del.id is null or v.updated_at > del.updated_at\n\n    order by v.id, v._airbyte_emitted_at desc\n),\n\nvendor_credit_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"vendor_credits_lines\"\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount * vendor_credits.exchange_rate as amount,\n        vendor_credit_lines.account_expense_class_id as class_id,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        vendor_credit_lines.account_expense_account_id as credit_account_id,\n        account_expense_customer_id as customer_id,\n        vendor_credits.vendor_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits._hash_id = vendor_credit_lines._vendor_credit_hash_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int__account_classifications as (\nwith accounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\nclassification_fix as (\n    select\n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select\n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\nwhere financial_statement_helper = 'income_statement' and classification is not null\n),gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        class_id,\n        customer_id\n    from __dbt__cte__int__purchase_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__deposit_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__journal_entry_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__bill_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__invoice_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__bill_payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__payroll_check_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__sales_receipts_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__credit_memo_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__transfer_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int__vendor_credit_double_entry\n),\n\naccounts as (\n    select *\n    from __dbt__cte__int__account_classifications\n),\n\n\nqgl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.account_id,\n        accounts.financial_statement_helper as report_type,\n        accounts.classification as account_type_top,\n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as amount\n    from gl_union\n\n    inner join accounts\n        on gl_union.account_id = accounts.id\n\n    where accounts.classification is not null\n),\n\nqcl as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"classes\"\n    order by id, _airbyte_emitted_at desc\n),\n\nqcu as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"customers\"\n    order by id, _airbyte_emitted_at desc\n)\n\nselect\n    qgl.*,\n    qcl.fully_qualified_name as class_full,\n    qcl.name as class,\n    qa.name as account_sub,\n    qa.fully_qualified_name as account_full,\n    qa.account_type as account_type_sub,\n    qa.account_number as account_number,\n    qa.top_level_id as account_top_id,\n    qa.parent_account_id as account_parent_id,\n    qap.name as account_top,\n    qap.account_number as account_top_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom qgl\nleft join qcl on (qcl.id = qgl.class_id)\nleft join \"datawarehouse\".quickbooks.\"accounts_top_level\" qa on (qa.id = qgl.account_id)\nleft join \"datawarehouse\".quickbooks.\"accounts_top_level\" qap on (qap.id = qa.top_level_id)\nleft join qcu on (qcu.id = qgl.customer_id)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.int__purchase_double_entry", "sql": " __dbt__cte__int__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select distinct on (p.id)\n            p.*\n        from \"datawarehouse\".quickbooks.\"purchases\" p\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Purchase' and p.id = del.id\n        where del.id is null or p.updated_at > del.updated_at\n\n        order by p.id, p._airbyte_emitted_at desc\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (item.id)\n            item.*\n        from \"datawarehouse\".quickbooks.\"items\" item\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n        where del.id is null or item.updated_at > del.updated_at\n\n        order by item.id, item._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount * purchases.exchange_rate as amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'credit' else 'debit' end as payed_to_transaction_type,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__deposit_double_entry", "sql": " __dbt__cte__int__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select distinct on (d.id)\n            d.*\n        from \"datawarehouse\".quickbooks.\"deposits\" d\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Deposit' and d.id = del.id\n        where del.id is null or d.updated_at > del.updated_at\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount * deposits.exchange_rate as amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        deposit_lines.class_id\n    from deposits\n\n    inner join deposit_lines\n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__journal_entry_double_entry", "sql": " __dbt__cte__int__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select distinct on (j.id)\n        j.*\n    from \"datawarehouse\".quickbooks.\"journal_entries\" j\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'JournalEntry' and j.id = del.id\n    where del.id is null or j.updated_at > del.updated_at\n\n    order by j.id, j._airbyte_emitted_at desc\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount * journal_entries.exchange_rate as amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__payment_double_entry", "sql": " __dbt__cte__int__payment_double_entry as (\nwith payment as (\n    select distinct on (p.id)\n        p.id as transaction_id,\n        transaction_date,\n        total_amount * exchange_rate as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id\n    from \"datawarehouse\".quickbooks.\"payments\" p\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Payment' and p.id = del.id\n    where del.id is null or p.updated_at > del.updated_at\n\n    order by p.id, p._airbyte_emitted_at desc\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__bill_double_entry", "sql": " __dbt__cte__int__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select distinct on (b.id)\n            b.*\n        from \"datawarehouse\".quickbooks.\"bills\" b\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Bill' and b.id = del.id\n        where del.id is null or b.updated_at > del.updated_at\n        order by b.id, b._airbyte_emitted_at desc\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"bills_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i \n        where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'Item' and i.updated_at <= del.updated_at)\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id,\n        bills.transaction_date,\n        bill_lines.amount * bills.exchange_rate as amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n\n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__invoice_double_entry", "sql": " __dbt__cte__int__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"invoices\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Invoice' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"invoices_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount * invoices.exchange_rate\n            else invoices.total_amount * invoices.exchange_rate\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null\n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__bill_payment_double_entry", "sql": " __dbt__cte__int__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select distinct on (bp.id)\n            bp.*\n        from \"datawarehouse\".quickbooks.\"bill_payments\" bp\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'BillPayment' and bp.id = del.id\n        where del.id is null or bp.updated_at > del.updated_at\n        order by bp.id, bp._airbyte_emitted_at desc\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n\n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount * bill_payments.exchange_rate as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__payroll_check_double_entry", "sql": " __dbt__cte__int__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount,\n        account_number,\n        account_fully_qualified_name\n    from \"datawarehouse\".\"raw\".quickbooks_payroll_checks\n),\n\naccounts as (\n    select distinct on (id)\n        id,\n        account_number,\n        fully_qualified_name\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        a.id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from payroll_check pc\n    inner join accounts a on pc.account_number = a.account_number or pc.account_fully_qualified_name = a.fully_qualified_name\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__sales_receipts_double_entry", "sql": " __dbt__cte__int__sales_receipts_double_entry as (\nwith sales_receipts as (\n    select distinct on (s.id)\n        s.*\n    from \"datawarehouse\".quickbooks.\"sales_receipts\" s\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'SalesReceipt' and s.id = del.id\n    where del.id is null or s.updated_at > del.updated_at\n\n    order by s.id, s._airbyte_emitted_at desc\n),\n\nsales_receipt_lines as (\n    select\n        *\n    from \"datawarehouse\".quickbooks.\"sales_receipts_lines\"\n),\n\nitems as (\n    select distinct on (item.id)\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"datawarehouse\".quickbooks.\"items\" item\n    left join \"datawarehouse\".quickbooks.\"items\" parent\n        on item.parent_item_id = parent.id\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n    where del.id is null or item.updated_at > del.updated_at\n\n    order by item.id, item._airbyte_emitted_at desc\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount * sales_receipts.exchange_rate as amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        sales_receipt_lines.sales_item_class_id as class_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts._hash_id = sales_receipt_lines._sales_receipts_hash_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.id\n\n    where coalesce(sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__credit_memo_double_entry", "sql": " __dbt__cte__int__credit_memo_double_entry as (\nwith credit_memos as (\n    select distinct on (c.id)\n        c.*\n    from \"datawarehouse\".quickbooks.\"credit_memos\" c\n    where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'CreditMemo' and c.updated_at <= del.updated_at)\n    order by c.id, c._airbyte_emitted_at desc\n),\n\ncredit_memo_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"credit_memos_lines\"\n),\n\nitems as (\n    select distinct on (i.id) \n        i.*\n    from \"datawarehouse\".quickbooks.\"items\" i \n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n    where del.id is null or i.updated_at > del.updated_at\n    order by i.id, i._airbyte_emitted_at desc\n),\n\naccounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\ndf_accounts as (\n    select\n        id as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount * credit_memos.exchange_rate as amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        credit_memo_lines.sales_item_class_id as class_id\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos._hash_id = credit_memo_lines._credit_memo_hash_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.id\n\n    where coalesce(credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__transfer_double_entry", "sql": " __dbt__cte__int__transfer_double_entry as (\nwith transfers as (\n    select distinct on (t.id)\n        t.*\n    from \"datawarehouse\".quickbooks.\"transfers\" t\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Transfer' and t.id = del.id\n    where del.id is null or t.updated_at > del.updated_at\n\n    order by t.id, t._airbyte_emitted_at desc\n),\n\ntransfer_body as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount * exchange_rate as amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__vendor_credit_double_entry", "sql": " __dbt__cte__int__vendor_credit_double_entry as (\nwith vendor_credits as (\n    select distinct on (v.id)\n        v.*\n    from \"datawarehouse\".quickbooks.\"vendor_credits\" v\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'VendorCredit' and v.id = del.id\n    where del.id is null or v.updated_at > del.updated_at\n\n    order by v.id, v._airbyte_emitted_at desc\n),\n\nvendor_credit_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"vendor_credits_lines\"\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount * vendor_credits.exchange_rate as amount,\n        vendor_credit_lines.account_expense_class_id as class_id,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        vendor_credit_lines.account_expense_account_id as credit_account_id,\n        account_expense_customer_id as customer_id,\n        vendor_credits.vendor_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits._hash_id = vendor_credit_lines._vendor_credit_hash_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int__account_classifications", "sql": " __dbt__cte__int__account_classifications as (\nwith accounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\nclassification_fix as (\n    select\n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select\n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\nwhere financial_statement_helper = 'income_statement' and classification is not null\n)"}], "relation_name": "\"datawarehouse\".quickbooks.\"general_ledger_abt\""}, "model.smartpill.int__account_classifications": {"raw_sql": "with accounts as (\n    select distinct on (id)\n        *\n    from {{ ref('accounts') }}\n    order by id, _airbyte_emitted_at desc\n),\n\nclassification_fix as (\n    select\n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select\n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\nwhere financial_statement_helper = 'income_statement' and classification is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__account_classifications"], "unique_id": "model.smartpill.int__account_classifications", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__account_classifications.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__account_classifications.sql", "name": "int__account_classifications", "alias": "int__account_classifications", "checksum": {"name": "sha256", "checksum": "92dbaa54b5d15199035899275772c5bf54869c890375f7ff9a7eabe8577a2c9d"}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__account_classifications.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.1219664, "compiled_sql": "with accounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\nclassification_fix as (\n    select\n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select\n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\nwhere financial_statement_helper = 'income_statement' and classification is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__bill_double_entry": {"raw_sql": "with bill_join as (\n    with bills as (\n        select distinct on (b.id)\n            b.*\n        from {{ ref('bills') }} b\n        left join {{ ref('deleted_objects') }} del on object_type = 'Bill' and b.id = del.id\n        where del.id is null or b.updated_at > del.updated_at\n        order by b.id, b._airbyte_emitted_at desc\n    ),\n\n    bill_lines as (\n        select *\n        from {{ ref('bills_lines') }}\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from {{ ref('items') }} i \n        where id not in (select id from {{ ref('deleted_objects') }} del where object_type = 'Item' and i.updated_at <= del.updated_at)\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id,\n        bills.transaction_date,\n        bill_lines.amount * bills.exchange_rate as amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n\n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.bills", "model.smartpill.deleted_objects", "model.smartpill.bills_lines", "model.smartpill.items", "model.smartpill.deleted_objects"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__bill_double_entry"], "unique_id": "model.smartpill.int__bill_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__bill_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__bill_double_entry.sql", "name": "int__bill_double_entry", "alias": "int__bill_double_entry", "checksum": {"name": "sha256", "checksum": "438f983b2e44eee4d0e9ce903821eee6fb468a376f56d86c16646faeddb801b3"}, "tags": [], "refs": [["bills"], ["deleted_objects"], ["bills_lines"], ["items"], ["deleted_objects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__bill_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.127324, "compiled_sql": "with bill_join as (\n    with bills as (\n        select distinct on (b.id)\n            b.*\n        from \"datawarehouse\".quickbooks.\"bills\" b\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Bill' and b.id = del.id\n        where del.id is null or b.updated_at > del.updated_at\n        order by b.id, b._airbyte_emitted_at desc\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"bills_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i \n        where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'Item' and i.updated_at <= del.updated_at)\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id,\n        bills.transaction_date,\n        bill_lines.amount * bills.exchange_rate as amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n\n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__bill_payment_double_entry": {"raw_sql": "with bill_payment_join as (\n    with bill_payments as (\n        select distinct on (bp.id)\n            bp.*\n        from {{ ref('bill_payments') }} bp\n        left join {{ ref('deleted_objects') }} del on object_type = 'BillPayment' and bp.id = del.id\n        where del.id is null or bp.updated_at > del.updated_at\n        order by bp.id, bp._airbyte_emitted_at desc\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from {{ ref('accounts') }}\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n\n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount * bill_payments.exchange_rate as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.bill_payments", "model.smartpill.deleted_objects", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__bill_payment_double_entry"], "unique_id": "model.smartpill.int__bill_payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__bill_payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__bill_payment_double_entry.sql", "name": "int__bill_payment_double_entry", "alias": "int__bill_payment_double_entry", "checksum": {"name": "sha256", "checksum": "e36f6fcf10100e25ba042b5e2d170e4e7a95fbc81d7ac661795499d58d820c08"}, "tags": [], "refs": [["bill_payments"], ["deleted_objects"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__bill_payment_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.135654, "compiled_sql": "with bill_payment_join as (\n    with bill_payments as (\n        select distinct on (bp.id)\n            bp.*\n        from \"datawarehouse\".quickbooks.\"bill_payments\" bp\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'BillPayment' and bp.id = del.id\n        where del.id is null or bp.updated_at > del.updated_at\n        order by bp.id, bp._airbyte_emitted_at desc\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n\n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount * bill_payments.exchange_rate as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__credit_memo_double_entry": {"raw_sql": "with credit_memos as (\n    select distinct on (c.id)\n        c.*\n    from {{ref('credit_memos')}} c\n    where id not in (select id from {{ ref('deleted_objects') }} del where object_type = 'CreditMemo' and c.updated_at <= del.updated_at)\n    order by c.id, c._airbyte_emitted_at desc\n),\n\ncredit_memo_lines as (\n    select *\n    from {{ref('credit_memos_lines')}}\n),\n\nitems as (\n    select distinct on (i.id) \n        i.*\n    from {{ref('items')}} i \n    left join {{ ref('deleted_objects') }} del on object_type = 'Item' and i.id = del.id\n    where del.id is null or i.updated_at > del.updated_at\n    order by i.id, i._airbyte_emitted_at desc\n),\n\naccounts as (\n    select distinct on (id)\n        *\n    from {{ ref('accounts') }}\n    order by id, _airbyte_emitted_at desc\n),\n\ndf_accounts as (\n    select\n        id as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount * credit_memos.exchange_rate as amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        credit_memo_lines.sales_item_class_id as class_id\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos._hash_id = credit_memo_lines._credit_memo_hash_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.id\n\n    where coalesce(credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.credit_memos", "model.smartpill.deleted_objects", "model.smartpill.credit_memos_lines", "model.smartpill.items", "model.smartpill.deleted_objects", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__credit_memo_double_entry"], "unique_id": "model.smartpill.int__credit_memo_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__credit_memo_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__credit_memo_double_entry.sql", "name": "int__credit_memo_double_entry", "alias": "int__credit_memo_double_entry", "checksum": {"name": "sha256", "checksum": "327ae736434b7d7e3e50905ce6498ba37fc96a34807d81159a80721e5b449f7b"}, "tags": [], "refs": [["credit_memos"], ["deleted_objects"], ["credit_memos_lines"], ["items"], ["deleted_objects"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__credit_memo_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.1431825, "compiled_sql": "with credit_memos as (\n    select distinct on (c.id)\n        c.*\n    from \"datawarehouse\".quickbooks.\"credit_memos\" c\n    where id not in (select id from \"datawarehouse\".quickbooks.\"deleted_objects\" del where object_type = 'CreditMemo' and c.updated_at <= del.updated_at)\n    order by c.id, c._airbyte_emitted_at desc\n),\n\ncredit_memo_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"credit_memos_lines\"\n),\n\nitems as (\n    select distinct on (i.id) \n        i.*\n    from \"datawarehouse\".quickbooks.\"items\" i \n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n    where del.id is null or i.updated_at > del.updated_at\n    order by i.id, i._airbyte_emitted_at desc\n),\n\naccounts as (\n    select distinct on (id)\n        *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at desc\n),\n\ndf_accounts as (\n    select\n        id as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount * credit_memos.exchange_rate as amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id,\n        credit_memos.customer_id,\n        credit_memo_lines.sales_item_class_id as class_id\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos._hash_id = credit_memo_lines._credit_memo_hash_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.id\n\n    where coalesce(credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source,\n        class_id,\n        customer_id\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__deposit_double_entry": {"raw_sql": "with deposit_join as (\n    with deposits as (\n        select distinct on (d.id)\n            d.*\n        from {{ ref('deposits') }} d\n        left join {{ ref('deleted_objects') }} del on object_type = 'Deposit' and d.id = del.id\n        where del.id is null or d.updated_at > del.updated_at\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    deposit_lines as (\n        select *\n        from {{ ref('deposits_lines') }}\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from {{ ref('accounts') }}\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount * deposits.exchange_rate as amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        deposit_lines.class_id\n    from deposits\n\n    inner join deposit_lines\n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.deposits", "model.smartpill.deleted_objects", "model.smartpill.deposits_lines", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__deposit_double_entry"], "unique_id": "model.smartpill.int__deposit_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__deposit_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__deposit_double_entry.sql", "name": "int__deposit_double_entry", "alias": "int__deposit_double_entry", "checksum": {"name": "sha256", "checksum": "f2f5202ed9625084d0a65174d738a9a0039c19a85832e1fd59f45511389f8f43"}, "tags": [], "refs": [["deposits"], ["deleted_objects"], ["deposits_lines"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__deposit_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.15827, "compiled_sql": "with deposit_join as (\n    with deposits as (\n        select distinct on (d.id)\n            d.*\n        from \"datawarehouse\".quickbooks.\"deposits\" d\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Deposit' and d.id = del.id\n        where del.id is null or d.updated_at > del.updated_at\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount * deposits.exchange_rate as amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        deposit_lines.class_id\n    from deposits\n\n    inner join deposit_lines\n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__invoice_double_entry": {"raw_sql": "with invoice_join as (\n    with invoices as (\n        select distinct on (i.id)\n            i.*\n        from {{ ref('invoices') }} i\n        left join {{ ref('deleted_objects') }} del on object_type = 'Invoice' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    invoice_lines as (\n        select *\n        from {{ ref('invoices_lines') }}\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from {{ ref('items') }} i\n        left join {{ ref('deleted_objects') }} del on object_type = 'Item' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from {{ ref('accounts') }}\n        order by id, _airbyte_emitted_at desc\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount * invoices.exchange_rate\n            else invoices.total_amount * invoices.exchange_rate\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null\n\n),\n\nar_accounts as (\n    select *\n    from {{ ref('accounts') }}\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.invoices", "model.smartpill.deleted_objects", "model.smartpill.invoices_lines", "model.smartpill.items", "model.smartpill.deleted_objects", "model.smartpill.accounts", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__invoice_double_entry"], "unique_id": "model.smartpill.int__invoice_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__invoice_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__invoice_double_entry.sql", "name": "int__invoice_double_entry", "alias": "int__invoice_double_entry", "checksum": {"name": "sha256", "checksum": "eedfe8f30a634218307d47cf8750bfeba919996960157b87e92c5d16a4d197eb"}, "tags": [], "refs": [["invoices"], ["deleted_objects"], ["invoices_lines"], ["items"], ["deleted_objects"], ["accounts"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__invoice_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.1669583, "compiled_sql": "with invoice_join as (\n    with invoices as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"invoices\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Invoice' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"invoices_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (i.id)\n            i.*\n        from \"datawarehouse\".quickbooks.\"items\" i\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and i.id = del.id\n        where del.id is null or i.updated_at > del.updated_at\n        order by i.id, i._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select distinct on (id)\n            *\n        from \"datawarehouse\".quickbooks.\"accounts\"\n        order by id, _airbyte_emitted_at desc\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount * invoices.exchange_rate\n            else invoices.total_amount * invoices.exchange_rate\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null\n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".quickbooks.\"accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__journal_entry_double_entry": {"raw_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select distinct on (j.id)\n        j.*\n    from {{ ref('journal_entries') }} j\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'JournalEntry' and j.id = del.id\n    where del.id is null or j.updated_at > del.updated_at\n\n    order by j.id, j._airbyte_emitted_at desc\n),\n\njournal_entry_lines as (\n    select *\n    from {{ref('journal_entries_lines')}}\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount * journal_entries.exchange_rate as amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.journal_entries", "model.smartpill.deleted_objects", "model.smartpill.journal_entries_lines"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__journal_entry_double_entry"], "unique_id": "model.smartpill.int__journal_entry_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__journal_entry_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__journal_entry_double_entry.sql", "name": "int__journal_entry_double_entry", "alias": "int__journal_entry_double_entry", "checksum": {"name": "sha256", "checksum": "c3e9c9f1e0eef1a082015d03bc4eb0134b6037420749193e6d26f22df0247f3d"}, "tags": [], "refs": [["journal_entries"], ["deleted_objects"], ["journal_entries_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__journal_entry_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.1778448, "compiled_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select distinct on (j.id)\n        j.*\n    from \"datawarehouse\".quickbooks.\"journal_entries\" j\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'JournalEntry' and j.id = del.id\n    where del.id is null or j.updated_at > del.updated_at\n\n    order by j.id, j._airbyte_emitted_at desc\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount * journal_entries.exchange_rate as amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__payment_double_entry": {"raw_sql": "with payment as (\n    select distinct on (p.id)\n        p.id as transaction_id,\n        transaction_date,\n        total_amount * exchange_rate as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id\n    from {{ref('payments')}} p\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'Payment' and p.id = del.id\n    where del.id is null or p.updated_at > del.updated_at\n\n    order by p.id, p._airbyte_emitted_at desc\n),\n\nar_accounts as (\n    select\n        id\n    from {{ref('accounts')}}\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.payments", "model.smartpill.deleted_objects", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__payment_double_entry"], "unique_id": "model.smartpill.int__payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__payment_double_entry.sql", "name": "int__payment_double_entry", "alias": "int__payment_double_entry", "checksum": {"name": "sha256", "checksum": "2d80d1c238e58906dd077fcffdac123ce43855864e4595add6ba8cbec2227743"}, "tags": [], "refs": [["payments"], ["deleted_objects"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__payment_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.1888292, "compiled_sql": "with payment as (\n    select distinct on (p.id)\n        p.id as transaction_id,\n        transaction_date,\n        total_amount * exchange_rate as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id\n    from \"datawarehouse\".quickbooks.\"payments\" p\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Payment' and p.id = del.id\n    where del.id is null or p.updated_at > del.updated_at\n\n    order by p.id, p._airbyte_emitted_at desc\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        null as class_id,\n        customer_id\n    from payment\n\n    cross join ar_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__payroll_check_double_entry": {"raw_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount,\n        account_number,\n        account_fully_qualified_name\n    from {{source('raw', 'quickbooks_payroll_checks')}}\n),\n\naccounts as (\n    select distinct on (id)\n        id,\n        account_number,\n        fully_qualified_name\n    from {{ ref('accounts') }}\n    order by id, _airbyte_emitted_at\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        a.id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from payroll_check pc\n    inner join accounts a on pc.account_number = a.account_number or pc.account_fully_qualified_name = a.fully_qualified_name\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw.quickbooks_payroll_checks", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__payroll_check_double_entry"], "unique_id": "model.smartpill.int__payroll_check_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__payroll_check_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__payroll_check_double_entry.sql", "name": "int__payroll_check_double_entry", "alias": "int__payroll_check_double_entry", "checksum": {"name": "sha256", "checksum": "aa0972c0d4b7deb7aa3aff0a7530810d6a78b43a9b8f35d67357fc0d3270a0d2"}, "tags": [], "refs": [["accounts"]], "sources": [["raw", "quickbooks_payroll_checks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__payroll_check_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.196252, "compiled_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount,\n        account_number,\n        account_fully_qualified_name\n    from \"datawarehouse\".\"raw\".quickbooks_payroll_checks\n),\n\naccounts as (\n    select distinct on (id)\n        id,\n        account_number,\n        fully_qualified_name\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    order by id, _airbyte_emitted_at\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        a.id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        null as class_id,\n        null as customer_id\n    from payroll_check pc\n    inner join accounts a on pc.account_number = a.account_number or pc.account_fully_qualified_name = a.fully_qualified_name\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__purchase_double_entry": {"raw_sql": "with purchase_join as (\n    with purchases as (\n        select distinct on (p.id)\n            p.*\n        from {{ ref('purchases') }} p\n\n        left join {{ ref('deleted_objects') }} del on object_type = 'Purchase' and p.id = del.id\n        where del.id is null or p.updated_at > del.updated_at\n\n        order by p.id, p._airbyte_emitted_at desc\n    ),\n\n    purchase_lines as (\n        select *\n        from {{ref('purchases_lines')}}\n    ),\n\n    items_stg as (\n        select distinct on (item.id)\n            item.*\n        from {{ ref('items') }} item\n\n        left join {{ ref('deleted_objects') }} del on object_type = 'Item' and item.id = del.id\n        where del.id is null or item.updated_at > del.updated_at\n\n        order by item.id, item._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount * purchases.exchange_rate as amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'credit' else 'debit' end as payed_to_transaction_type,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.purchases", "model.smartpill.deleted_objects", "model.smartpill.purchases_lines", "model.smartpill.items", "model.smartpill.deleted_objects"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__purchase_double_entry"], "unique_id": "model.smartpill.int__purchase_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__purchase_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__purchase_double_entry.sql", "name": "int__purchase_double_entry", "alias": "int__purchase_double_entry", "checksum": {"name": "sha256", "checksum": "8b8b43096408d05c2fa5f36e205d44afc34db2784bf4ee018821f2d7d4a9b27c"}, "tags": [], "refs": [["purchases"], ["deleted_objects"], ["purchases_lines"], ["items"], ["deleted_objects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__purchase_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.2149897, "compiled_sql": "with purchase_join as (\n    with purchases as (\n        select distinct on (p.id)\n            p.*\n        from \"datawarehouse\".quickbooks.\"purchases\" p\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Purchase' and p.id = del.id\n        where del.id is null or p.updated_at > del.updated_at\n\n        order by p.id, p._airbyte_emitted_at desc\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    ),\n\n    items_stg as (\n        select distinct on (item.id)\n            item.*\n        from \"datawarehouse\".quickbooks.\"items\" item\n\n        left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n        where del.id is null or item.updated_at > del.updated_at\n\n        order by item.id, item._airbyte_emitted_at desc\n    ),\n\n    items as (\n        select\n            item.*,\n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount * purchases.exchange_rate as amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, 'false') = 'true' then 'credit' else 'debit' end as payed_to_transaction_type,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n\n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__sales_receipts_double_entry": {"raw_sql": "with sales_receipts as (\n    select distinct on (s.id)\n        s.*\n    from {{ref('sales_receipts')}} s\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'SalesReceipt' and s.id = del.id\n    where del.id is null or s.updated_at > del.updated_at\n\n    order by s.id, s._airbyte_emitted_at desc\n),\n\nsales_receipt_lines as (\n    select\n        *\n    from {{ref('sales_receipts_lines')}}\n),\n\nitems as (\n    select distinct on (item.id)\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from {{ ref('items') }} item\n    left join {{ ref('items') }} parent\n        on item.parent_item_id = parent.id\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'Item' and item.id = del.id\n    where del.id is null or item.updated_at > del.updated_at\n\n    order by item.id, item._airbyte_emitted_at desc\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount * sales_receipts.exchange_rate as amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        sales_receipt_lines.sales_item_class_id as class_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts._hash_id = sales_receipt_lines._sales_receipts_hash_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.id\n\n    where coalesce(sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.sales_receipts", "model.smartpill.deleted_objects", "model.smartpill.sales_receipts_lines", "model.smartpill.items", "model.smartpill.items", "model.smartpill.deleted_objects"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__sales_receipts_double_entry"], "unique_id": "model.smartpill.int__sales_receipts_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__sales_receipts_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__sales_receipts_double_entry.sql", "name": "int__sales_receipts_double_entry", "alias": "int__sales_receipts_double_entry", "checksum": {"name": "sha256", "checksum": "f77355758c151d39e1cc565e08ad47ccd39661849ab5eea6dc8115708571fb76"}, "tags": [], "refs": [["sales_receipts"], ["deleted_objects"], ["sales_receipts_lines"], ["items"], ["items"], ["deleted_objects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__sales_receipts_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.238638, "compiled_sql": "with sales_receipts as (\n    select distinct on (s.id)\n        s.*\n    from \"datawarehouse\".quickbooks.\"sales_receipts\" s\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'SalesReceipt' and s.id = del.id\n    where del.id is null or s.updated_at > del.updated_at\n\n    order by s.id, s._airbyte_emitted_at desc\n),\n\nsales_receipt_lines as (\n    select\n        *\n    from \"datawarehouse\".quickbooks.\"sales_receipts_lines\"\n),\n\nitems as (\n    select distinct on (item.id)\n        item.*,\n        parent.income_account_id as parent_income_account_id\n    from \"datawarehouse\".quickbooks.\"items\" item\n    left join \"datawarehouse\".quickbooks.\"items\" parent\n        on item.parent_item_id = parent.id\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Item' and item.id = del.id\n    where del.id is null or item.updated_at > del.updated_at\n\n    order by item.id, item._airbyte_emitted_at desc\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount * sales_receipts.exchange_rate as amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(items.parent_income_account_id, items.income_account_id) as credit_to_account_id,\n        sales_receipts.customer_id,\n        sales_receipt_lines.sales_item_class_id as class_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts._hash_id = sales_receipt_lines._sales_receipts_hash_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.id\n\n    where coalesce(sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source,\n        class_id,\n        customer_id\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__transfer_double_entry": {"raw_sql": "with transfers as (\n    select distinct on (t.id)\n        t.*\n    from {{ref('transfers')}} t\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'Transfer' and t.id = del.id\n    where del.id is null or t.updated_at > del.updated_at\n\n    order by t.id, t._airbyte_emitted_at desc\n),\n\ntransfer_body as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount * exchange_rate as amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.transfers", "model.smartpill.deleted_objects"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__transfer_double_entry"], "unique_id": "model.smartpill.int__transfer_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__transfer_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__transfer_double_entry.sql", "name": "int__transfer_double_entry", "alias": "int__transfer_double_entry", "checksum": {"name": "sha256", "checksum": "4830a49826920b6ca5e4a3456742ea4a8536f6460fc53631446563bb5e872c3d"}, "tags": [], "refs": [["transfers"], ["deleted_objects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__transfer_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.244203, "compiled_sql": "with transfers as (\n    select distinct on (t.id)\n        t.*\n    from \"datawarehouse\".quickbooks.\"transfers\" t\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'Transfer' and t.id = del.id\n    where del.id is null or t.updated_at > del.updated_at\n\n    order by t.id, t._airbyte_emitted_at desc\n),\n\ntransfer_body as (\n    select\n        id as transaction_id,\n        transaction_date,\n        amount * exchange_rate as amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source,\n        null::varchar as class_id,\n        null::varchar as customer_id\n    from transfer_body\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int__vendor_credit_double_entry": {"raw_sql": "with vendor_credits as (\n    select distinct on (v.id)\n        v.*\n    from {{ref('vendor_credits')}} v\n\n    left join {{ ref('deleted_objects') }} del on object_type = 'VendorCredit' and v.id = del.id\n    where del.id is null or v.updated_at > del.updated_at\n\n    order by v.id, v._airbyte_emitted_at desc\n),\n\nvendor_credit_lines as (\n    select *\n    from {{ref('vendor_credits_lines')}}\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount * vendor_credits.exchange_rate as amount,\n        vendor_credit_lines.account_expense_class_id as class_id,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        vendor_credit_lines.account_expense_account_id as credit_account_id,\n        account_expense_customer_id as customer_id,\n        vendor_credits.vendor_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits._hash_id = vendor_credit_lines._vendor_credit_hash_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.vendor_credits", "model.smartpill.deleted_objects", "model.smartpill.vendor_credits_lines"]}, "config": {"enabled": true, "alias": null, "schema": "quickbooks", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "quickbooks", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int__vendor_credit_double_entry"], "unique_id": "model.smartpill.int__vendor_credit_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "quickbooks/intermediate_tables/int__vendor_credit_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int__vendor_credit_double_entry.sql", "name": "int__vendor_credit_double_entry", "alias": "int__vendor_credit_double_entry", "checksum": {"name": "sha256", "checksum": "eaa0ff2a13304cf7f38c024ae61bfdc91ea91f7e445cb64d8959fe0ce53c3e3c"}, "tags": [], "refs": [["vendor_credits"], ["deleted_objects"], ["vendor_credits_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int__vendor_credit_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks", "materialized": "ephemeral"}, "created_at": 1703701090.2485876, "compiled_sql": "with vendor_credits as (\n    select distinct on (v.id)\n        v.*\n    from \"datawarehouse\".quickbooks.\"vendor_credits\" v\n\n    left join \"datawarehouse\".quickbooks.\"deleted_objects\" del on object_type = 'VendorCredit' and v.id = del.id\n    where del.id is null or v.updated_at > del.updated_at\n\n    order by v.id, v._airbyte_emitted_at desc\n),\n\nvendor_credit_lines as (\n    select *\n    from \"datawarehouse\".quickbooks.\"vendor_credits_lines\"\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount * vendor_credits.exchange_rate as amount,\n        vendor_credit_lines.account_expense_class_id as class_id,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        vendor_credit_lines.account_expense_account_id as credit_account_id,\n        account_expense_customer_id as customer_id,\n        vendor_credits.vendor_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits._hash_id = vendor_credit_lines._vendor_credit_hash_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source,\n        class_id,\n        customer_id\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.contact_deletions_history": {"raw_sql": "SELECT d.\"Id\" as contact_id, now() as timestamp\nFROM {{ ref('patient_to_contact_deletions')}} d\nLEFT JOIN {{ ref('patients_contact' )}} pc ON d.\"Id\" = pc.contact_id\nWHERE pc.contact_isdeleted = true -- its deleted from Salesforce\n\n-- Salesforce ingestion has a soft delete feature, can find the deleted Contact there, using the contact_id.", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_to_contact_deletions", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "deletions", "contact_deletions_history"], "unique_id": "model.smartpill.contact_deletions_history", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/deletions/contact_deletions_history.sql", "original_file_path": "models/reverse_etl/patient_to_contact/deletions/contact_deletions_history.sql", "name": "contact_deletions_history", "alias": "contact_deletions_history", "checksum": {"name": "sha256", "checksum": "22c7328cadcc5682ed1365bbf9ee14e8d23bcab2783d5e6769442e441df0e8a2"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_deletions"], ["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/deletions/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/deletions/contact_deletions_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.011813, "compiled_sql": "SELECT d.\"Id\" as contact_id, now() as timestamp\nFROM \"datawarehouse\".reverse_etl.\"patient_to_contact_deletions\" d\nLEFT JOIN \"datawarehouse\".salesforce.\"patients_contact\" pc ON d.\"Id\" = pc.contact_id\nWHERE pc.contact_isdeleted = true -- its deleted from Salesforce\n\n-- Salesforce ingestion has a soft delete feature, can find the deleted Contact there, using the contact_id.", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"contact_deletions_history\""}, "model.smartpill.contact_to_patient_deleted_contact_info": {"raw_sql": "WITH deletions as (\n    SELECT d.\"Id\" as contact_id, d.\"Description\"\n    FROM {{ ref('patient_to_contact_deletions')}} d\n    LEFT JOIN {{ ref('patients_contact' )}} pc ON d.\"Id\" = pc.contact_id\n    WHERE pc.contact_isdeleted = true -- its deleted from Salesforce\n),\npatient_merge_cp_x_contacts as (\n    SELECT distinct\n        source_patient_id_cp,\n        source_patient_contact_id,\n        target_patient_id_cp,\n        target_patient_contact_id\n    FROM {{ ref('patient_to_contact_tasks_to_migrate' )}}\n)\nSELECT\n    null as \"Id\", --create new task\n    pm_x_c.target_patient_contact_id as \"WhoId\",\n    d.\"Description\",\n    'Salesforce patient contact merged with existing contact' as \"Subject\",\n    'a001M00000aT1igQAC' as \"Assigned_To__c\", --.Testing\n    'a001M00000aT1igQAC' as \"WhatId\", --.Testing\n    'Completed' as \"Status\",\n    to_char(now(), 'YYYY-MM-dd') as \"ActivityDate\"\nFROM deletions d\nLEFT JOIN patient_merge_cp_x_contacts pm_x_c ON d.contact_id = pm_x_c.source_patient_contact_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_to_contact_deletions", "model.smartpill.patients_contact", "model.smartpill.patient_to_contact_tasks_to_migrate"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "deletions", "contact_to_patient_deleted_contact_info"], "unique_id": "model.smartpill.contact_to_patient_deleted_contact_info", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/deletions/contact_to_patient_deleted_contact_info.sql", "original_file_path": "models/reverse_etl/patient_to_contact/deletions/contact_to_patient_deleted_contact_info.sql", "name": "contact_to_patient_deleted_contact_info", "alias": "contact_to_patient_deleted_contact_info", "checksum": {"name": "sha256", "checksum": "ed9ceec05bbe0bae50f2c2ba58710c1fd9ea7da297d9ad130430d1f1c2563f94"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_deletions"], ["patients_contact"], ["patient_to_contact_tasks_to_migrate"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/deletions/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/deletions/contact_to_patient_deleted_contact_info.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0146964, "compiled_sql": "WITH deletions as (\n    SELECT d.\"Id\" as contact_id, d.\"Description\"\n    FROM \"datawarehouse\".reverse_etl.\"patient_to_contact_deletions\" d\n    LEFT JOIN \"datawarehouse\".salesforce.\"patients_contact\" pc ON d.\"Id\" = pc.contact_id\n    WHERE pc.contact_isdeleted = true -- its deleted from Salesforce\n),\npatient_merge_cp_x_contacts as (\n    SELECT distinct\n        source_patient_id_cp,\n        source_patient_contact_id,\n        target_patient_id_cp,\n        target_patient_contact_id\n    FROM \"datawarehouse\".reverse_etl.\"patient_to_contact_tasks_to_migrate\"\n)\nSELECT\n    null as \"Id\", --create new task\n    pm_x_c.target_patient_contact_id as \"WhoId\",\n    d.\"Description\",\n    'Salesforce patient contact merged with existing contact' as \"Subject\",\n    'a001M00000aT1igQAC' as \"Assigned_To__c\", --.Testing\n    'a001M00000aT1igQAC' as \"WhatId\", --.Testing\n    'Completed' as \"Status\",\n    to_char(now(), 'YYYY-MM-dd') as \"ActivityDate\"\nFROM deletions d\nLEFT JOIN patient_merge_cp_x_contacts pm_x_c ON d.contact_id = pm_x_c.source_patient_contact_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"contact_to_patient_deleted_contact_info\""}, "model.smartpill.patient_to_contact_deletions": {"raw_sql": "with\nupdated_tasks as (\n    select task_id, task_contact_id from {{ ref('patients_task') }} pt\n\twhere task_is_deleted = false\n),\ntasks_to_migrate as (\n\tselect * from {{ ref('patient_to_contact_tasks_to_migrate') }}\n\twhere task_id is not null\n),\ntasks_to_migrate_failures as (\n\tselect\n\t\ttm.*,\n\t\tSUM (CASE WHEN pt.task_contact_id is distinct from tm.target_patient_contact_id THEN 1 ELSE 0 END)\n\t\t\tOVER(PARTITION BY tm.target_patient_contact_id) as migration_failure_sum\n\tfrom tasks_to_migrate tm\n\tleft join updated_tasks pt using (task_id)\n),\ndeletions as (\n\tselect distinct source_patient_contact_id as \"Id\"\n\tfrom tasks_to_migrate_failures\n\twhere migration_failure_sum = 0\n\n\tUNION\n\n\t-- patients to delete with no task assigned\n\tselect distinct source_patient_contact_id as \"Id\"\n\tfrom {{ ref('patient_to_contact_tasks_to_migrate') }}\n\twhere task_id is null\n\n),\nfinal as (\n    SELECT\n        d.\"Id\",\n\t\tCONCAT(\n\t\t\t'Deleted patient contact information:', E'\\n',\n\t\t\t'contact name: ' , coalesce(contact_name, '[null]') , E'\\n',\n\t\t\t'salesforce id: ' , coalesce(contact_id, '[null]') , E'\\n',\n\t\t\t'patient_id_cp: ' , coalesce(contact_gp_patient_id_cp__c::varchar, '[null]') , E'\\n',\n\t\t\t'email: ' , coalesce(contact_gp_email__c, contact_email, '[null]') , E'\\n' ,\n\t\t\t'patient_address1: ' , coalesce(contact_gp_patient_address1__c, '[null]') , E'\\n' ,\n\t\t\t'patient_address2: ' , coalesce(contact_gp_patient_address2__c, '[null]') , E'\\n' ,\n\t\t\t'patient_city: ' , coalesce(contact_gp_patient_city__c, '[null]') , E'\\n' ,\n\t\t\t'patient_state: ' , coalesce(contact_gp_patient_state__c, '[null]') , E'\\n' ,\n\t\t\t'patient_zip: ' , coalesce(contact_gp_patient_zip__c, '[null]') , E'\\n' ,\n\t\t\t'phone1: ' , coalesce(contact_gp_phone1__c, '[null]') , E'\\n' ,\n\t\t\t'phone2: ' , coalesce(contact_gp_phone2__c, '[null]')\n\t\t) as \"Description\"\n    FROM deletions d\n    LEFT JOIN {{ ref('patients_contact' )}} pc ON d.\"Id\" = pc.contact_id\n\twhere pc.contact_isdeleted = false\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patients_task", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "deletions", "patient_to_contact_deletions"], "unique_id": "model.smartpill.patient_to_contact_deletions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/deletions/patient_to_contact_deletions.sql", "original_file_path": "models/reverse_etl/patient_to_contact/deletions/patient_to_contact_deletions.sql", "name": "patient_to_contact_deletions", "alias": "patient_to_contact_deletions", "checksum": {"name": "sha256", "checksum": "0c0b3c93e09c5fba36245c4d4f14b4b27344a7f9c5cdd5c73aa2436a0473783f"}, "tags": ["reverse_etl"], "refs": [["patients_task"], ["patient_to_contact_tasks_to_migrate"], ["patient_to_contact_tasks_to_migrate"], ["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/deletions/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/deletions/patient_to_contact_deletions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0044792, "compiled_sql": "with\nupdated_tasks as (\n    select task_id, task_contact_id from \"datawarehouse\".salesforce.\"patients_task\" pt\n\twhere task_is_deleted = false\n),\ntasks_to_migrate as (\n\tselect * from \"datawarehouse\".reverse_etl.\"patient_to_contact_tasks_to_migrate\"\n\twhere task_id is not null\n),\ntasks_to_migrate_failures as (\n\tselect\n\t\ttm.*,\n\t\tSUM (CASE WHEN pt.task_contact_id is distinct from tm.target_patient_contact_id THEN 1 ELSE 0 END)\n\t\t\tOVER(PARTITION BY tm.target_patient_contact_id) as migration_failure_sum\n\tfrom tasks_to_migrate tm\n\tleft join updated_tasks pt using (task_id)\n),\ndeletions as (\n\tselect distinct source_patient_contact_id as \"Id\"\n\tfrom tasks_to_migrate_failures\n\twhere migration_failure_sum = 0\n\n\tUNION\n\n\t-- patients to delete with no task assigned\n\tselect distinct source_patient_contact_id as \"Id\"\n\tfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_tasks_to_migrate\"\n\twhere task_id is null\n\n),\nfinal as (\n    SELECT\n        d.\"Id\",\n\t\tCONCAT(\n\t\t\t'Deleted patient contact information:', E'\\n',\n\t\t\t'contact name: ' , coalesce(contact_name, '[null]') , E'\\n',\n\t\t\t'salesforce id: ' , coalesce(contact_id, '[null]') , E'\\n',\n\t\t\t'patient_id_cp: ' , coalesce(contact_gp_patient_id_cp__c::varchar, '[null]') , E'\\n',\n\t\t\t'email: ' , coalesce(contact_gp_email__c, contact_email, '[null]') , E'\\n' ,\n\t\t\t'patient_address1: ' , coalesce(contact_gp_patient_address1__c, '[null]') , E'\\n' ,\n\t\t\t'patient_address2: ' , coalesce(contact_gp_patient_address2__c, '[null]') , E'\\n' ,\n\t\t\t'patient_city: ' , coalesce(contact_gp_patient_city__c, '[null]') , E'\\n' ,\n\t\t\t'patient_state: ' , coalesce(contact_gp_patient_state__c, '[null]') , E'\\n' ,\n\t\t\t'patient_zip: ' , coalesce(contact_gp_patient_zip__c, '[null]') , E'\\n' ,\n\t\t\t'phone1: ' , coalesce(contact_gp_phone1__c, '[null]') , E'\\n' ,\n\t\t\t'phone2: ' , coalesce(contact_gp_phone2__c, '[null]')\n\t\t) as \"Description\"\n    FROM deletions d\n    LEFT JOIN \"datawarehouse\".salesforce.\"patients_contact\" pc ON d.\"Id\" = pc.contact_id\n\twhere pc.contact_isdeleted = false\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_deletions\""}, "model.smartpill.patient_to_contact_tasks_to_migrate": {"raw_sql": "with patient_merge as (\n\tselect distinct source_patient_id_cp, target_patient_id_cp\n    from {{ ref('patient_merge_cp') }}\n\twhere\n\tsource_patient_id_cp is distinct from target_patient_id_cp --skip patients merged to itself\n\t{%- if var(\"migration_filter_disabled\") != 'True'-%} -- feature flag\n\t\tAND source_patient_id_cp = {{ var(\"migration_filter_id_cp_value\") }}\n\t{%- endif -%}\n\n--\tunion\n--\tselect distinct *\n--  from ref('patient_merge_wc')\n),\npatients_contact_safe as (\n\tselect * from {{ ref('patients_contact') }}\n\twhere contact_isdeleted = false\n),\npatient_merge_safe as (\n\tselect\n        pm.*,\n        pc_source.contact_id as source_patient_contact_id,\n        pc_target.contact_id as target_patient_contact_id\n\tfrom patient_merge pm\n\tleft join patients_contact_safe pc_source on pm.source_patient_id_cp = pc_source.contact_gp_patient_id_cp__c\n\tleft join patients_contact_safe pc_target on pm.target_patient_id_cp = pc_target.contact_gp_patient_id_cp__c\n\tleft join {{ ref('patients') }} p_source on pm.source_patient_id_cp = p_source.patient_id_cp\n\tleft join {{ ref('patients') }} p_target on pm.target_patient_id_cp = p_target.patient_id_cp\n\twhere\n\tp_source.patient_id_cp is null and -- its deleted from goodpill\n\tp_target.patient_id_cp is not null -- target patient exists in goodpill\n\tand (\n\t\tpc_source.contact_gp_patient_id_cp__c is not null and\n\t\tpc_target.contact_gp_patient_id_cp__c is not null\n\t) -- both patients exists in saleforce. (we can migrate tasks or its ok deleting one of the two.)\n),\ntasks_with_id_cp as (\n    select task_id, contact_gp_patient_id_cp__c\n    from {{ ref('patients_task') }} pt\n    inner join patients_contact_safe pc on pc.contact_id = pt.task_contact_id\n\twhere task_is_deleted = false\n),\nfinal as (\n    select pm.*, task_id\n    from patient_merge_safe pm\n    left join tasks_with_id_cp pt on pm.source_patient_id_cp = pt.contact_gp_patient_id_cp__c\n\t--left join because I want to keep patient with no tasks assigned, but needs to be deleted.\n)\nselect distinct * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_merge_cp", "model.smartpill.patients_contact", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients_task"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "deletions", "patient_to_contact_tasks_to_migrate"], "unique_id": "model.smartpill.patient_to_contact_tasks_to_migrate", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/deletions/patient_to_contact_tasks_to_migrate.sql", "original_file_path": "models/reverse_etl/patient_to_contact/deletions/patient_to_contact_tasks_to_migrate.sql", "name": "patient_to_contact_tasks_to_migrate", "alias": "patient_to_contact_tasks_to_migrate", "checksum": {"name": "sha256", "checksum": "63fb81bcad43304bc975577754afebeb5b879cfee8dcbdba2aaf2ca6a83256ae"}, "tags": ["reverse_etl"], "refs": [["patient_merge_cp"], ["patients_contact"], ["patients"], ["patients"], ["patients_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/deletions/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/deletions/patient_to_contact_tasks_to_migrate.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0076568, "compiled_sql": "with patient_merge as (\n\tselect distinct source_patient_id_cp, target_patient_id_cp\n    from \"datawarehouse\".goodpill.\"patient_merge_cp\"\n\twhere\n\tsource_patient_id_cp is distinct from target_patient_id_cp --skip patients merged to itself-- feature flag\n\t\tAND source_patient_id_cp = --\tunion\n--\tselect distinct *\n--  from ref('patient_merge_wc')\n),\npatients_contact_safe as (\n\tselect * from \"datawarehouse\".salesforce.\"patients_contact\"\n\twhere contact_isdeleted = false\n),\npatient_merge_safe as (\n\tselect\n        pm.*,\n        pc_source.contact_id as source_patient_contact_id,\n        pc_target.contact_id as target_patient_contact_id\n\tfrom patient_merge pm\n\tleft join patients_contact_safe pc_source on pm.source_patient_id_cp = pc_source.contact_gp_patient_id_cp__c\n\tleft join patients_contact_safe pc_target on pm.target_patient_id_cp = pc_target.contact_gp_patient_id_cp__c\n\tleft join \"datawarehouse\".goodpill.\"patients\" p_source on pm.source_patient_id_cp = p_source.patient_id_cp\n\tleft join \"datawarehouse\".goodpill.\"patients\" p_target on pm.target_patient_id_cp = p_target.patient_id_cp\n\twhere\n\tp_source.patient_id_cp is null and -- its deleted from goodpill\n\tp_target.patient_id_cp is not null -- target patient exists in goodpill\n\tand (\n\t\tpc_source.contact_gp_patient_id_cp__c is not null and\n\t\tpc_target.contact_gp_patient_id_cp__c is not null\n\t) -- both patients exists in saleforce. (we can migrate tasks or its ok deleting one of the two.)\n),\ntasks_with_id_cp as (\n    select task_id, contact_gp_patient_id_cp__c\n    from \"datawarehouse\".salesforce.\"patients_task\" pt\n    inner join patients_contact_safe pc on pc.contact_id = pt.task_contact_id\n\twhere task_is_deleted = false\n),\nfinal as (\n    select pm.*, task_id\n    from patient_merge_safe pm\n    left join tasks_with_id_cp pt on pm.source_patient_id_cp = pt.contact_gp_patient_id_cp__c\n\t--left join because I want to keep patient with no tasks assigned, but needs to be deleted.\n)\nselect distinct * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_tasks_to_migrate\""}, "model.smartpill.contact_notifications_history": {"raw_sql": "select \"WhoId\" as \"Id\", 'DUMMY' notif_type, now() as timestamp\nfrom {{ ref('patient_to_contact_dummies')}}\nUNION\nselect \"WhoId\" as \"Id\", 'NON MERGED' notif_type, now() as timestamp\nfrom {{ ref('patient_to_contact_deletions_non_merged')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_to_contact_dummies", "model.smartpill.patient_to_contact_deletions_non_merged"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "monitoring", "contact_notifications_history"], "unique_id": "model.smartpill.contact_notifications_history", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/monitoring/contact_notifications_history.sql", "original_file_path": "models/reverse_etl/patient_to_contact/monitoring/contact_notifications_history.sql", "name": "contact_notifications_history", "alias": "contact_notifications_history", "checksum": {"name": "sha256", "checksum": "93518712bf90d66e6656f9ec93bf9560f8860a9811f84af18fcaf98284df800e"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_dummies"], ["patient_to_contact_deletions_non_merged"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/monitoring/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/monitoring/contact_notifications_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0265756, "compiled_sql": "select \"WhoId\" as \"Id\", 'DUMMY' notif_type, now() as timestamp\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_dummies\"\nUNION\nselect \"WhoId\" as \"Id\", 'NON MERGED' notif_type, now() as timestamp\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_deletions_non_merged\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"contact_notifications_history\""}, "model.smartpill.patient_to_contact_deletions_non_merged": {"raw_sql": "with deletions as (\n    select contact_id, contact_gp_patient_id_cp__c\n    from {{ ref('patients_contact') }} pc\n    left join {{ ref('patients') }} p on pc.contact_gp_patient_id_cp__c = p.patient_id_cp\n    where\n        p.patient_id_cp is null\n        AND contact_gp_patient_id_cp__c is not null\n        AND to_char(contact_created_date, 'YYYY-MM-DD') > '{{ var(\"start_date_salesforce_notifications\") }}'\n        and pc.contact_isdeleted = false\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n        and contact_id not in (\n            select \"Id\" from {{ source('reverse_etl', 'contact_notifications_history') }}\n            where notif_type = 'NON MERGED'\n        )\n        and contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ndeletions_without_merge as (\n    select contact_id\n    from deletions d\n    left join {{ ref('patient_merge_cp') }} pm ON d.contact_gp_patient_id_cp__c = pm.source_patient_id_cp\n    where pm.source_patient_id_cp is null --the deletion was not merged\n),\nfinal as (\n    select\n        null as \"Id\", -- create new task\n        contact_id as \"WhoId\",\n        'Carepoint patient deleted BUT not due to a merge action' as \"Subject\",\n        'This patient exists in Salesforce but can not be found in Carepoint matching by CP ID. It was NOT deleted by a merge action either (according to the gp_patient_merge_cp table).\\nPlease validate if the patient exists in CP and WC.' as \"Description\",\n        'a001M00000aT1igQAC' as \"WhatId\",\n        'a001M00000aT1igQAC' as \"Assigned_To__c\"\n    from deletions_without_merge\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.contact_notifications_history", "model.smartpill.patients_contact", "model.smartpill.patients", "model.smartpill.patient_merge_cp"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "monitoring", "patient_to_contact_deletions_non_merged"], "unique_id": "model.smartpill.patient_to_contact_deletions_non_merged", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/monitoring/patient_to_contact_deletions_non_merged.sql", "original_file_path": "models/reverse_etl/patient_to_contact/monitoring/patient_to_contact_deletions_non_merged.sql", "name": "patient_to_contact_deletions_non_merged", "alias": "patient_to_contact_deletions_non_merged", "checksum": {"name": "sha256", "checksum": "a6eb34748a15c5a16d72614ff3001b5369361df3246acbb2c0c200335c0489b5"}, "tags": ["reverse_etl"], "refs": [["patients_contact"], ["patients"], ["patient_merge_cp"]], "sources": [["reverse_etl", "contact_notifications_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/monitoring/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/monitoring/patient_to_contact_deletions_non_merged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0183685, "compiled_sql": "with deletions as (\n    select contact_id, contact_gp_patient_id_cp__c\n    from \"datawarehouse\".salesforce.\"patients_contact\" pc\n    left join \"datawarehouse\".goodpill.\"patients\" p on pc.contact_gp_patient_id_cp__c = p.patient_id_cp\n    where\n        p.patient_id_cp is null\n        AND contact_gp_patient_id_cp__c is not null\n        AND to_char(contact_created_date, 'YYYY-MM-DD') > ''\n        and pc.contact_isdeleted = false\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n        and contact_id not in (\n            select \"Id\" from \"datawarehouse\".\"reverse_etl\".\"contact_notifications_history\"\n            where notif_type = 'NON MERGED'\n        )\n        and contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ndeletions_without_merge as (\n    select contact_id\n    from deletions d\n    left join \"datawarehouse\".goodpill.\"patient_merge_cp\" pm ON d.contact_gp_patient_id_cp__c = pm.source_patient_id_cp\n    where pm.source_patient_id_cp is null --the deletion was not merged\n),\nfinal as (\n    select\n        null as \"Id\", -- create new task\n        contact_id as \"WhoId\",\n        'Carepoint patient deleted BUT not due to a merge action' as \"Subject\",\n        'This patient exists in Salesforce but can not be found in Carepoint matching by CP ID. It was NOT deleted by a merge action either (according to the gp_patient_merge_cp table).\\nPlease validate if the patient exists in CP and WC.' as \"Description\",\n        'a001M00000aT1igQAC' as \"WhatId\",\n        'a001M00000aT1igQAC' as \"Assigned_To__c\"\n    from deletions_without_merge\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_deletions_non_merged\""}, "model.smartpill.patient_to_contact_dummies": {"raw_sql": "with dummies as (\n    select\n        contact_id\n    from {{ ref('patients_contact') }} pc\n    where\n        -- (\n        --     contact_name ~ '\\d{4}-\\d{2}-\\d{2}'\n        --     or contact_birthdate is not null\n        -- )\n        contact_gp_patient_id_cp__c is null\n        and contact_isdeleted = false\n        and contact_last_modified_date < (now() - interval '30' DAY)\n        AND to_char(contact_created_date, 'YYYY-MM-DD') > '{{ var(\"start_date_salesforce_notifications\") }}'\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n        and contact_id not in (\n            select \"Id\" from {{ source('reverse_etl', 'contact_notifications_history') }}\n            where notif_type = 'DUMMY'\n        )\n        and contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\nfinal as (\n    select\n        null as \"Id\", -- create new task\n        contact_id as \"WhoId\",\n        'Salesforce patient not matched to Carepoint patient' as \"Subject\",\n        'This Salesforce patient has no CP ID and was created 30 days ago. Please validate if the patient exists in CP and WC.' as \"Description\",\n        'a001M00000aT1igQAC' as \"WhatId\",\n        'a001M00000aT1igQAC' as \"Assigned_To__c\"\n    from dummies\n)\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.contact_notifications_history", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "monitoring", "patient_to_contact_dummies"], "unique_id": "model.smartpill.patient_to_contact_dummies", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/monitoring/patient_to_contact_dummies.sql", "original_file_path": "models/reverse_etl/patient_to_contact/monitoring/patient_to_contact_dummies.sql", "name": "patient_to_contact_dummies", "alias": "patient_to_contact_dummies", "checksum": {"name": "sha256", "checksum": "5c9bb75a19cdd0bd98f9c2aff38b25d7ab440aa67cd3bdc2b895679800e749b7"}, "tags": ["reverse_etl"], "refs": [["patients_contact"]], "sources": [["reverse_etl", "contact_notifications_history"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/monitoring/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/monitoring/patient_to_contact_dummies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0234537, "compiled_sql": "with dummies as (\n    select\n        contact_id\n    from \"datawarehouse\".salesforce.\"patients_contact\" pc\n    where\n        -- (\n        --     contact_name ~ '\\d{4}-\\d{2}-\\d{2}'\n        --     or contact_birthdate is not null\n        -- )\n        contact_gp_patient_id_cp__c is null\n        and contact_isdeleted = false\n        and contact_last_modified_date < (now() - interval '30' DAY)\n        AND to_char(contact_created_date, 'YYYY-MM-DD') > ''\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n        and contact_id not in (\n            select \"Id\" from \"datawarehouse\".\"reverse_etl\".\"contact_notifications_history\"\n            where notif_type = 'DUMMY'\n        )\n        and contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\nfinal as (\n    select\n        null as \"Id\", -- create new task\n        contact_id as \"WhoId\",\n        'Salesforce patient not matched to Carepoint patient' as \"Subject\",\n        'This Salesforce patient has no CP ID and was created 30 days ago. Please validate if the patient exists in CP and WC.' as \"Description\",\n        'a001M00000aT1igQAC' as \"WhatId\",\n        'a001M00000aT1igQAC' as \"Assigned_To__c\"\n    from dummies\n)\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_dummies\""}, "model.smartpill.patient_to_contact_additions": {"raw_sql": "with patients as (\n    select *\n\t, (trim(lower(p.first_name || ' ' || p.last_name || ' ' || date(p.birth_date)))) as contact_name_trim\n    from {{ ref('patients') }} p\n),\ncontact as (\n    select \n\tcontact_id\n\t, contact_gp_patient_id_cp__c as patient_id_cp\n\t, trim(lower(psf.contact_name)) as contact_name_trim\n    from {{ ref('patients_contact') }} psf\n\twhere contact_isdeleted = false\n),\npatients_x_contact as (\n\t-- first we match by the ones that didnt join using id cp\n\tselect p.*, psf.contact_id\n\tfrom patients p \n\tleft join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n\twhere (psf.patient_id_cp is null) -- is new patient\n),\npatients_x_contact_final as (\n\t-- then from the remaining ones (just a few) we match by name+DOB\n\tselect p.* from patients_x_contact p\n\tleft join contact psf on (p.contact_name_trim = psf.contact_name_trim)\n\twhere (psf.contact_name_trim is null) -- is new patient\n)\nselect\n\tcontact_id as \"Id\", -- is null because it didnt join\n\tpatient_id_cp as gp_patient_id_cp__c,\n\tpatient_id_wc as gp_patient_id_wc__c,\n\t'0011M00002Mnf3QQAR' as \"AccountId\", -- GoodPill Home Delivery Id\n\t'0121M000001BQ4dQAG' as \"RecordTypeId\", -- Goodpill Layout Id\n\n\tlast_name || ' ' || date(birth_date) as \"LastName\",\n\tdate(birth_date) as \"Birthdate\",\n\n\tfirst_name as first_name__c,\n\tfirst_name as \"FirstName\",\n\n\temail as gp_email__c,\n\temail as \"Email\",\n\n\tlanguage as gp_language__c,\n\tpatient_address1 as gp_patient_address1__c,\n\tpatient_address2 as gp_patient_address2__c,\n\tpatient_autofill as gp_patient_autofill__c,\n\n\tpatient_city as gp_patient_city__c,\n\tto_char(patient_date_added, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_added__c,\n\tto_char(patient_date_changed, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_changed__c,\n\n\tregexp_replace( substring(lower(patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ) as gp_patient_note__c,\n\n\tpatient_state as gp_patient_state__c,\n\tpatient_inactive as gp_patient_status__c,\n\tpatient_zip as gp_patient_zip__c,\n\n\tto_char(payment_card_date_expired, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_payment_card_date_expired__c,\n\tpayment_card_last4 as gp_payment_card_last4__c,\n\tpayment_card_type as gp_payment_card_type__c,\n\n\tpayment_coupon as gp_payment_coupon__c,\n\tpayment_method_default as gp_payment_method__c,\n\n\tpharmacy_fax as gp_pharmacy_fax__c,\n\tpharmacy_npi as gp_pharmacy_npi__c,\n\tpharmacy_name as gp_pharmacy_name__c,\n\tpharmacy_phone as gp_pharmacy_phone__c,\n\tpharmacy_address as gp_pharmacy_address__c,\n\n\tphone1 as gp_phone1__c,\n\tphone2 as gp_phone2__c,\n\n\trefills_used as gp_refills_used__c,\n\ttracking_coupon as gp_tracking_coupon__c\n\nfrom patients_x_contact_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patients", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_additions"], "unique_id": "model.smartpill.patient_to_contact_additions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_additions.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_additions.sql", "name": "patient_to_contact_additions", "alias": "patient_to_contact_additions", "checksum": {"name": "sha256", "checksum": "7f425630084ce7bd36f8c9042a8795bb28997651f1d2d692a6d7380e5a0da8cb"}, "tags": ["reverse_etl"], "refs": [["patients"], ["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_additions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.03071, "compiled_sql": "with patients as (\n    select *\n\t, (trim(lower(p.first_name || ' ' || p.last_name || ' ' || date(p.birth_date)))) as contact_name_trim\n    from \"datawarehouse\".goodpill.\"patients\" p\n),\ncontact as (\n    select \n\tcontact_id\n\t, contact_gp_patient_id_cp__c as patient_id_cp\n\t, trim(lower(psf.contact_name)) as contact_name_trim\n    from \"datawarehouse\".salesforce.\"patients_contact\" psf\n\twhere contact_isdeleted = false\n),\npatients_x_contact as (\n\t-- first we match by the ones that didnt join using id cp\n\tselect p.*, psf.contact_id\n\tfrom patients p \n\tleft join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n\twhere (psf.patient_id_cp is null) -- is new patient\n),\npatients_x_contact_final as (\n\t-- then from the remaining ones (just a few) we match by name+DOB\n\tselect p.* from patients_x_contact p\n\tleft join contact psf on (p.contact_name_trim = psf.contact_name_trim)\n\twhere (psf.contact_name_trim is null) -- is new patient\n)\nselect\n\tcontact_id as \"Id\", -- is null because it didnt join\n\tpatient_id_cp as gp_patient_id_cp__c,\n\tpatient_id_wc as gp_patient_id_wc__c,\n\t'0011M00002Mnf3QQAR' as \"AccountId\", -- GoodPill Home Delivery Id\n\t'0121M000001BQ4dQAG' as \"RecordTypeId\", -- Goodpill Layout Id\n\n\tlast_name || ' ' || date(birth_date) as \"LastName\",\n\tdate(birth_date) as \"Birthdate\",\n\n\tfirst_name as first_name__c,\n\tfirst_name as \"FirstName\",\n\n\temail as gp_email__c,\n\temail as \"Email\",\n\n\tlanguage as gp_language__c,\n\tpatient_address1 as gp_patient_address1__c,\n\tpatient_address2 as gp_patient_address2__c,\n\tpatient_autofill as gp_patient_autofill__c,\n\n\tpatient_city as gp_patient_city__c,\n\tto_char(patient_date_added, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_added__c,\n\tto_char(patient_date_changed, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_changed__c,\n\n\tregexp_replace( substring(lower(patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ) as gp_patient_note__c,\n\n\tpatient_state as gp_patient_state__c,\n\tpatient_inactive as gp_patient_status__c,\n\tpatient_zip as gp_patient_zip__c,\n\n\tto_char(payment_card_date_expired, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_payment_card_date_expired__c,\n\tpayment_card_last4 as gp_payment_card_last4__c,\n\tpayment_card_type as gp_payment_card_type__c,\n\n\tpayment_coupon as gp_payment_coupon__c,\n\tpayment_method_default as gp_payment_method__c,\n\n\tpharmacy_fax as gp_pharmacy_fax__c,\n\tpharmacy_npi as gp_pharmacy_npi__c,\n\tpharmacy_name as gp_pharmacy_name__c,\n\tpharmacy_phone as gp_pharmacy_phone__c,\n\tpharmacy_address as gp_pharmacy_address__c,\n\n\tphone1 as gp_phone1__c,\n\tphone2 as gp_phone2__c,\n\n\trefills_used as gp_refills_used__c,\n\ttracking_coupon as gp_tracking_coupon__c\n\nfrom patients_x_contact_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_additions\""}, "model.smartpill.patient_to_contact_editions": {"raw_sql": "with patients as (\n    select *\n    from {{ ref('patients') }}\n),\ncontact as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from {{ ref('patients_contact') }}\n\twhere contact_gp_patient_id_cp__c is not null --filter dummy cases\n\tand contact_isdeleted = false\n),\ncontact_dummies as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from {{ ref('patients_contact') }}\n\twhere contact_gp_patient_id_cp__c is null --match dummy cases\n\tand contact_isdeleted = false\n),\npatients_x_contacts as (\n\tselect\n\tp.*\n\t, psf.contact_account_id\n\t, psf.contact_last_modified_date\n\t, psf.contact_id\n\t, psf.contact_recordtype_id\n\t, case when (\n\t\t{{ contacts_is_edited_logic_macro() }}\n\t) then 1 else 0 end as need_update\n\n\tfrom patients p\n\tinner join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n),\npatients_x_dummy_contacts as (\n\tselect\n\tp.*\n\t, psf.contact_account_id\n\t, psf.contact_last_modified_date\n\t, psf.contact_id\n\t, psf.contact_recordtype_id\n\t, case when (\n\t\t{{ contacts_is_edited_logic_macro() }}\n\t) then 1 else 0 end as need_update\n\t\n\tfrom patients p\n\tinner join contact_dummies psf on (\n\t\t(trim(lower(p.first_name || ' ' || p.last_name || ' ' || date(p.birth_date))) = trim(lower(psf.contact_name))) \n\t)\n),\njoin_patients as (\n\tselect * from patients_x_contacts\n\tunion all\n\tselect * from patients_x_dummy_contacts\n)\nselect\n\tcontact_id as \"Id\",\n\tpatient_id_cp as gp_patient_id_cp__c,\n\tpatient_id_wc as gp_patient_id_wc__c,\n\tcontact_account_id as \"AccountId\",\n\tcontact_recordtype_id as \"RecordTypeId\",\n\n\tlast_name || ' ' || date(birth_date) as \"LastName\",\n\tdate(birth_date) as \"Birthdate\",\n\n\tfirst_name as first_name__c,\n\tfirst_name as \"FirstName\",\n\n\temail as gp_email__c,\n\temail as \"Email\",\n\n\tlanguage as gp_language__c,\n\tpatient_address1 as gp_patient_address1__c,\n\tpatient_address2 as gp_patient_address2__c,\n\tpatient_autofill as gp_patient_autofill__c,\n\n\tpatient_city as gp_patient_city__c,\n\tto_char(patient_date_added, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_added__c,\n\tto_char(patient_date_changed, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_changed__c,\n\tregexp_replace( substring(lower(patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ) as gp_patient_note__c,\n\tpatient_state as gp_patient_state__c,\n\tpatient_inactive as gp_patient_status__c,\n\tpatient_zip as gp_patient_zip__c,\n\n\tto_char(payment_card_date_expired, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_payment_card_date_expired__c,\n\tpayment_card_last4 as gp_payment_card_last4__c,\n\tpayment_card_type as gp_payment_card_type__c,\n\n\tpayment_coupon as gp_payment_coupon__c,\n\tpayment_method_default as gp_payment_method__c,\n\n\tpharmacy_fax as gp_pharmacy_fax__c,\n\tpharmacy_npi as gp_pharmacy_npi__c,\n\tpharmacy_name as gp_pharmacy_name__c,\n\tpharmacy_phone as gp_pharmacy_phone__c,\n\tpharmacy_address as gp_pharmacy_address__c,\n\n\tphone1 as gp_phone1__c,\n\tphone2 as gp_phone2__c,\n\n\trefills_used as gp_refills_used__c,\n\ttracking_coupon as gp_tracking_coupon__c\n\nfrom join_patients\nwhere need_update = 1\norder by contact_last_modified_date desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.contacts_is_edited_logic_macro"], "nodes": ["model.smartpill.patients", "model.smartpill.patients_contact", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_editions"], "unique_id": "model.smartpill.patient_to_contact_editions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_editions.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_editions.sql", "name": "patient_to_contact_editions", "alias": "patient_to_contact_editions", "checksum": {"name": "sha256", "checksum": "299c9c76da11fe854850940b58055f5b194b291250264130393ba6111d9450d8"}, "tags": ["reverse_etl"], "refs": [["patients"], ["patients_contact"], ["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_editions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0380108, "compiled_sql": "with patients as (\n    select *\n    from \"datawarehouse\".goodpill.\"patients\"\n),\ncontact as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from \"datawarehouse\".salesforce.\"patients_contact\"\n\twhere contact_gp_patient_id_cp__c is not null --filter dummy cases\n\tand contact_isdeleted = false\n),\ncontact_dummies as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from \"datawarehouse\".salesforce.\"patients_contact\"\n\twhere contact_gp_patient_id_cp__c is null --match dummy cases\n\tand contact_isdeleted = false\n),\npatients_x_contacts as (\n\tselect\n\tp.*\n\t, psf.contact_account_id\n\t, psf.contact_last_modified_date\n\t, psf.contact_id\n\t, psf.contact_recordtype_id\n\t, case when (\n\t\tlower(p.first_name) is distinct from lower(psf.contact_firstname)\nor lower(p.first_name) is distinct from lower(psf.contact_first_name__c)\n\nor lower(p.email) is distinct from lower(psf.contact_email)\nor lower(p.email) is distinct from lower(psf.contact_gp_email__c)\n\nor p.patient_id_wc is distinct from psf.contact_gp_patient_id_wc__c\nor lower(p.language) is distinct from lower(psf.contact_gp_language__c)\nor lower(p.patient_address1) is distinct from lower(psf.contact_gp_patient_address1__c)\nor lower(p.patient_address2) is distinct from lower(psf.contact_gp_patient_address2__c)\nor p.patient_autofill is distinct from psf.contact_gp_patient_autofill__c::float::int\n\nor lower(p.patient_city) is distinct from lower(psf.contact_gp_patient_city__c)\n-- \tdate_added__c & date_changed__c may are updated because a related entity changed. So it\n--\tdoesnt mean that the record itself changed (Adam)\n--\tor p.patient_date_added is distinct from psf.contact_gp_patient_date_added__c\n--\tor p.patient_date_changed is distinct from psf.contact_gp_patient_date_changed__c\n\n-- Salesforce Next Line char is not equal to MariaDB Next Line char, so I replace all variations to be equal\n-- https://stackoverflow.com/questions/7836906/how-to-remove-carriage-returns-and-new-lines-in-postgresql\n-- https://en.wikipedia.org/wiki/Newline#Unicode\nor trim(regexp_replace( substring(lower(p.patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' )) is distinct from trim(regexp_replace( substring(lower(psf.contact_gp_patient_note__c),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ))\n\nor lower(p.patient_state) is distinct from lower(psf.contact_gp_patient_state__c)\nor lower(p.patient_inactive) is distinct from lower(psf.contact_gp_patient_status__c)\nor lower(p.patient_zip) is distinct from lower(psf.contact_gp_patient_zip__c)\n\nor p.payment_card_date_expired is distinct from psf.contact_gp_payment_card_date_expired__c\nor lower(p.payment_card_last4) is distinct from lower(psf.contact_gp_payment_card_last4__c)\nor lower(p.payment_card_type) is distinct from lower(psf.contact_gp_payment_card_type__c)\n\nor lower(p.payment_coupon) is distinct from lower(psf.contact_gp_payment_coupon__c)\nor lower(p.payment_method_default) is distinct from lower(psf.contact_gp_payment_method__c)\n\nor lower(p.pharmacy_fax) is distinct from lower(psf.contact_gp_pharmacy_fax__c)\nor lower(p.pharmacy_npi) is distinct from lower(psf.contact_gp_pharmacy_npi__c)\nor lower(p.pharmacy_name) is distinct from lower(psf.contact_gp_pharmacy_name__c)\nor lower(p.pharmacy_phone) is distinct from lower(psf.contact_gp_pharmacy_phone__c)\nor lower(p.pharmacy_address) is distinct from lower(psf.contact_gp_pharmacy_address__c)\n\nor p.phone1 is distinct from psf.contact_gp_phone1__c\nor p.phone2 is distinct from psf.contact_gp_phone2__c\n\nor p.refills_used is distinct from psf.contact_gp_refills_used__c::numeric(5,2)\nor p.tracking_coupon is distinct from psf.contact_gp_tracking_coupon__c\n\t) then 1 else 0 end as need_update\n\n\tfrom patients p\n\tinner join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n),\npatients_x_dummy_contacts as (\n\tselect\n\tp.*\n\t, psf.contact_account_id\n\t, psf.contact_last_modified_date\n\t, psf.contact_id\n\t, psf.contact_recordtype_id\n\t, case when (\n\t\tlower(p.first_name) is distinct from lower(psf.contact_firstname)\nor lower(p.first_name) is distinct from lower(psf.contact_first_name__c)\n\nor lower(p.email) is distinct from lower(psf.contact_email)\nor lower(p.email) is distinct from lower(psf.contact_gp_email__c)\n\nor p.patient_id_wc is distinct from psf.contact_gp_patient_id_wc__c\nor lower(p.language) is distinct from lower(psf.contact_gp_language__c)\nor lower(p.patient_address1) is distinct from lower(psf.contact_gp_patient_address1__c)\nor lower(p.patient_address2) is distinct from lower(psf.contact_gp_patient_address2__c)\nor p.patient_autofill is distinct from psf.contact_gp_patient_autofill__c::float::int\n\nor lower(p.patient_city) is distinct from lower(psf.contact_gp_patient_city__c)\n-- \tdate_added__c & date_changed__c may are updated because a related entity changed. So it\n--\tdoesnt mean that the record itself changed (Adam)\n--\tor p.patient_date_added is distinct from psf.contact_gp_patient_date_added__c\n--\tor p.patient_date_changed is distinct from psf.contact_gp_patient_date_changed__c\n\n-- Salesforce Next Line char is not equal to MariaDB Next Line char, so I replace all variations to be equal\n-- https://stackoverflow.com/questions/7836906/how-to-remove-carriage-returns-and-new-lines-in-postgresql\n-- https://en.wikipedia.org/wiki/Newline#Unicode\nor trim(regexp_replace( substring(lower(p.patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' )) is distinct from trim(regexp_replace( substring(lower(psf.contact_gp_patient_note__c),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ))\n\nor lower(p.patient_state) is distinct from lower(psf.contact_gp_patient_state__c)\nor lower(p.patient_inactive) is distinct from lower(psf.contact_gp_patient_status__c)\nor lower(p.patient_zip) is distinct from lower(psf.contact_gp_patient_zip__c)\n\nor p.payment_card_date_expired is distinct from psf.contact_gp_payment_card_date_expired__c\nor lower(p.payment_card_last4) is distinct from lower(psf.contact_gp_payment_card_last4__c)\nor lower(p.payment_card_type) is distinct from lower(psf.contact_gp_payment_card_type__c)\n\nor lower(p.payment_coupon) is distinct from lower(psf.contact_gp_payment_coupon__c)\nor lower(p.payment_method_default) is distinct from lower(psf.contact_gp_payment_method__c)\n\nor lower(p.pharmacy_fax) is distinct from lower(psf.contact_gp_pharmacy_fax__c)\nor lower(p.pharmacy_npi) is distinct from lower(psf.contact_gp_pharmacy_npi__c)\nor lower(p.pharmacy_name) is distinct from lower(psf.contact_gp_pharmacy_name__c)\nor lower(p.pharmacy_phone) is distinct from lower(psf.contact_gp_pharmacy_phone__c)\nor lower(p.pharmacy_address) is distinct from lower(psf.contact_gp_pharmacy_address__c)\n\nor p.phone1 is distinct from psf.contact_gp_phone1__c\nor p.phone2 is distinct from psf.contact_gp_phone2__c\n\nor p.refills_used is distinct from psf.contact_gp_refills_used__c::numeric(5,2)\nor p.tracking_coupon is distinct from psf.contact_gp_tracking_coupon__c\n\t) then 1 else 0 end as need_update\n\t\n\tfrom patients p\n\tinner join contact_dummies psf on (\n\t\t(trim(lower(p.first_name || ' ' || p.last_name || ' ' || date(p.birth_date))) = trim(lower(psf.contact_name))) \n\t)\n),\njoin_patients as (\n\tselect * from patients_x_contacts\n\tunion all\n\tselect * from patients_x_dummy_contacts\n)\nselect\n\tcontact_id as \"Id\",\n\tpatient_id_cp as gp_patient_id_cp__c,\n\tpatient_id_wc as gp_patient_id_wc__c,\n\tcontact_account_id as \"AccountId\",\n\tcontact_recordtype_id as \"RecordTypeId\",\n\n\tlast_name || ' ' || date(birth_date) as \"LastName\",\n\tdate(birth_date) as \"Birthdate\",\n\n\tfirst_name as first_name__c,\n\tfirst_name as \"FirstName\",\n\n\temail as gp_email__c,\n\temail as \"Email\",\n\n\tlanguage as gp_language__c,\n\tpatient_address1 as gp_patient_address1__c,\n\tpatient_address2 as gp_patient_address2__c,\n\tpatient_autofill as gp_patient_autofill__c,\n\n\tpatient_city as gp_patient_city__c,\n\tto_char(patient_date_added, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_added__c,\n\tto_char(patient_date_changed, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_patient_date_changed__c,\n\tregexp_replace( substring(lower(patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ) as gp_patient_note__c,\n\tpatient_state as gp_patient_state__c,\n\tpatient_inactive as gp_patient_status__c,\n\tpatient_zip as gp_patient_zip__c,\n\n\tto_char(payment_card_date_expired, 'YYYY-MM-DDThh24:mi:ss.0000Z') as gp_payment_card_date_expired__c,\n\tpayment_card_last4 as gp_payment_card_last4__c,\n\tpayment_card_type as gp_payment_card_type__c,\n\n\tpayment_coupon as gp_payment_coupon__c,\n\tpayment_method_default as gp_payment_method__c,\n\n\tpharmacy_fax as gp_pharmacy_fax__c,\n\tpharmacy_npi as gp_pharmacy_npi__c,\n\tpharmacy_name as gp_pharmacy_name__c,\n\tpharmacy_phone as gp_pharmacy_phone__c,\n\tpharmacy_address as gp_pharmacy_address__c,\n\n\tphone1 as gp_phone1__c,\n\tphone2 as gp_phone2__c,\n\n\trefills_used as gp_refills_used__c,\n\ttracking_coupon as gp_tracking_coupon__c\n\nfrom join_patients\nwhere need_update = 1\norder by contact_last_modified_date desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_editions\""}, "model.smartpill.patient_to_contact_new_additions": {"raw_sql": "select *\nfrom {{ ref('patient_to_contact_additions') }}\nwhere\ngp_patient_id_cp__c not in (\n\tselect patient_id_cp\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nand (\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%test%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%fake%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%user%'\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_additions"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_new_additions"], "unique_id": "model.smartpill.patient_to_contact_new_additions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_new_additions.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_new_additions.sql", "name": "patient_to_contact_new_additions", "alias": "patient_to_contact_new_additions", "checksum": {"name": "sha256", "checksum": "6b52f9c31fad356ac573285bc4059d6aa268e0c6642583d618d5e9d169332b97"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_additions"]], "sources": [["reverse_etl", "patient_to_contact_non_updated"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_new_additions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0349066, "compiled_sql": "select *\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_additions\"\nwhere\ngp_patient_id_cp__c not in (\n\tselect patient_id_cp\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nand (\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%test%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%fake%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%user%'\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_new_additions\""}, "model.smartpill.patient_to_contact_new_editions": {"raw_sql": "select *\nfrom {{ ref('patient_to_contact_editions') }}\nwhere\ngp_patient_id_cp__c not in (\n\tselect patient_id_cp\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nand \"Id\" not in (\n\tselect salesforce_contact_id\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand salesforce_contact_id is not null\n)\nand (\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%test%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%fake%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%user%'\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_editions"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_new_editions"], "unique_id": "model.smartpill.patient_to_contact_new_editions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_new_editions.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_new_editions.sql", "name": "patient_to_contact_new_editions", "alias": "patient_to_contact_new_editions", "checksum": {"name": "sha256", "checksum": "9c14dcd0d60c67a75f2e604b250d7c8e62b790931471502b87bce8257458d8c4"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_editions"]], "sources": [["reverse_etl", "patient_to_contact_non_updated"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_new_editions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.042848, "compiled_sql": "select *\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_editions\"\nwhere\ngp_patient_id_cp__c not in (\n\tselect patient_id_cp\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nand \"Id\" not in (\n\tselect salesforce_contact_id\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand salesforce_contact_id is not null\n)\nand (\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%test%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%fake%' and\n\t(lower(\"FirstName\") || ' ' || lower(\"LastName\")) not like '%user%'\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_new_editions\""}, "model.smartpill.patient_to_contact_non_updated": {"raw_sql": "WITH\n--IDS TO UPDATE\nids_to_update_table as (\n    SELECT \"Id\" as id, gp_email__c, gp_patient_id_cp__c\n    FROM {{ ref('patient_to_contact_new_editions') }}\n),\n--IDS TO INSERT\nids_to_insert_table as (\n    SELECT cast (cast (gp_patient_id_cp__c as float) as int) as id, gp_email__c\n    FROM {{ ref('patient_to_contact_new_additions') }}\n),\n--BAD EMAILS\nfailed_ids_bad_email as (\n    SELECT\n        gp_patient_id_cp__c as patient_id_cp,\n        id as salesforce_contact_id,\n        'UPDATE' as \"bulk_action\",\n        'BAD_EMAIL' as \"error_type\"\n    FROM ids_to_update_table\n    WHERE gp_email__c !~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'\n    UNION ALL\n    SELECT\n        id as patient_id_cp,\n        NULL as salesforce_contact_id,\n        'INSERT' as \"bulk_action\",\n        'BAD_EMAIL' as \"error_type\"\n    FROM ids_to_insert_table\n    WHERE gp_email__c !~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'\n),\n--FAILED EDITIONS\nfailed_ids_to_update_table as (\n    SELECT\n        c.contact_gp_patient_id_cp__c as patient_id_cp,\n        c.contact_id as salesforce_contact_id,\n        'UPDATE' as \"bulk_action\",\n        NULL as \"error_type\"\n    FROM {{ ref('patients_contact')}} as c\n    WHERE\n    c.contact_last_modified_date < now() - INTERVAL '10' MINUTE -- NON UPDATED ONES\n    AND c.contact_id IN (SELECT id FROM ids_to_update_table)\n    and c.contact_isdeleted = false\n),\n--FAILED INSERTIONS\nsuccess_ids_to_insert_table as (\n    SELECT psf.contact_gp_patient_id_cp__c as id\n    FROM {{ ref('patients_contact')}} as psf\n    WHERE\n    psf.contact_gp_patient_id_cp__c IN (SELECT id FROM ids_to_insert_table)\n    and psf.contact_isdeleted = false\n),\n\nfailed_ids_to_insert_table as (\n    SELECT\n    \tid as patient_id_cp,\n        NULL as salesforce_contact_id,\n        'INSERT' as \"bulk_action\",\n        NULL as \"error_type\"\n    FROM ids_to_insert_table\n    WHERE id NOT IN (SELECT * FROM success_ids_to_insert_table)\n),\n--FINAL RESULTS\nfinal as (\n\tSELECT *\n\tFROM failed_ids_to_update_table\n\tUNION\n\tSELECT *\n\tFROM failed_ids_to_insert_table\n\tUNION\n\tSELECT *\n\tFROM failed_ids_bad_email)\nSELECT\n    patient_id_cp, salesforce_contact_id, bulk_action, STRING_AGG(error_type, ', ') AS error_type,\n    '{{ var(\"execution_date\") }}' as execution_date,\n    '{{ run_started_at }}'::timestamp as batch_timestamp,\n    FALSE as its_fixed\nFROM final\nGROUP BY patient_id_cp, salesforce_contact_id, bulk_action, execution_date, batch_timestamp\nORDER BY patient_id_cp, salesforce_contact_id, bulk_action, execution_date, batch_timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_to_contact_new_editions", "model.smartpill.patient_to_contact_new_additions", "model.smartpill.patients_contact", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_non_updated"], "unique_id": "model.smartpill.patient_to_contact_non_updated", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_non_updated.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_non_updated.sql", "name": "patient_to_contact_non_updated", "alias": "patient_to_contact_non_updated", "checksum": {"name": "sha256", "checksum": "a96e1574ba1adf43f4b226f6a7e62d89fbffa6154d2bd5a49dca61e9ad212d9f"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_new_editions"], ["patient_to_contact_new_additions"], ["patients_contact"], ["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_non_updated.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0622866, "compiled_sql": "WITH\n--IDS TO UPDATE\nids_to_update_table as (\n    SELECT \"Id\" as id, gp_email__c, gp_patient_id_cp__c\n    FROM \"datawarehouse\".reverse_etl.\"patient_to_contact_new_editions\"\n),\n--IDS TO INSERT\nids_to_insert_table as (\n    SELECT cast (cast (gp_patient_id_cp__c as float) as int) as id, gp_email__c\n    FROM \"datawarehouse\".reverse_etl.\"patient_to_contact_new_additions\"\n),\n--BAD EMAILS\nfailed_ids_bad_email as (\n    SELECT\n        gp_patient_id_cp__c as patient_id_cp,\n        id as salesforce_contact_id,\n        'UPDATE' as \"bulk_action\",\n        'BAD_EMAIL' as \"error_type\"\n    FROM ids_to_update_table\n    WHERE gp_email__c !~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'\n    UNION ALL\n    SELECT\n        id as patient_id_cp,\n        NULL as salesforce_contact_id,\n        'INSERT' as \"bulk_action\",\n        'BAD_EMAIL' as \"error_type\"\n    FROM ids_to_insert_table\n    WHERE gp_email__c !~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'\n),\n--FAILED EDITIONS\nfailed_ids_to_update_table as (\n    SELECT\n        c.contact_gp_patient_id_cp__c as patient_id_cp,\n        c.contact_id as salesforce_contact_id,\n        'UPDATE' as \"bulk_action\",\n        NULL as \"error_type\"\n    FROM \"datawarehouse\".salesforce.\"patients_contact\" as c\n    WHERE\n    c.contact_last_modified_date < now() - INTERVAL '10' MINUTE -- NON UPDATED ONES\n    AND c.contact_id IN (SELECT id FROM ids_to_update_table)\n    and c.contact_isdeleted = false\n),\n--FAILED INSERTIONS\nsuccess_ids_to_insert_table as (\n    SELECT psf.contact_gp_patient_id_cp__c as id\n    FROM \"datawarehouse\".salesforce.\"patients_contact\" as psf\n    WHERE\n    psf.contact_gp_patient_id_cp__c IN (SELECT id FROM ids_to_insert_table)\n    and psf.contact_isdeleted = false\n),\n\nfailed_ids_to_insert_table as (\n    SELECT\n    \tid as patient_id_cp,\n        NULL as salesforce_contact_id,\n        'INSERT' as \"bulk_action\",\n        NULL as \"error_type\"\n    FROM ids_to_insert_table\n    WHERE id NOT IN (SELECT * FROM success_ids_to_insert_table)\n),\n--FINAL RESULTS\nfinal as (\n\tSELECT *\n\tFROM failed_ids_to_update_table\n\tUNION\n\tSELECT *\n\tFROM failed_ids_to_insert_table\n\tUNION\n\tSELECT *\n\tFROM failed_ids_bad_email)\nSELECT\n    patient_id_cp, salesforce_contact_id, bulk_action, STRING_AGG(error_type, ', ') AS error_type,\n    'now()' as execution_date,\n    '2023-12-27 18:18:07.289510+00:00'::timestamp as batch_timestamp,\n    FALSE as its_fixed\nFROM final\nGROUP BY patient_id_cp, salesforce_contact_id, bulk_action, execution_date, batch_timestamp\nORDER BY patient_id_cp, salesforce_contact_id, bulk_action, execution_date, batch_timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_non_updated\""}, "model.smartpill.patient_to_contact_null_records": {"raw_sql": "with patients as (\n    select * from {{ ref('patients') }}\n    where patient_id_cp in (select gp_patient_id_cp__c from {{ ref('patient_to_contact_editions') }})\n),\ncontact as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from {{ ref('patients_contact') }}\n\twhere contact_gp_patient_id_cp__c is not null --filter dummy cases\n\tand contact_isdeleted = false\n),\npatients_null_cases as (\n\tselect p.*, psf.* from patients p\n\tinner join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n    where\n    (\n        (email is null and contact_email is not null)\n        or (email is null and contact_gp_email__c is not null)\n        or (patient_address1 is null and contact_gp_patient_address1__c is not null)\n        or (patient_address2 is null and contact_gp_patient_address2__c is not null)\n        or (payment_card_date_expired is null and contact_gp_payment_card_date_expired__c is not null)\n        or (payment_card_last4 is null and contact_gp_payment_card_last4__c is not null)\n        or (payment_card_type is null and contact_gp_payment_card_type__c is not null)\n        or (payment_coupon is null and contact_gp_payment_coupon__c is not null)\n        or (pharmacy_fax is null and contact_gp_pharmacy_fax__c is not null)\n        or (pharmacy_npi is null and contact_gp_pharmacy_npi__c is not null)\n        or (pharmacy_name is null and contact_gp_pharmacy_name__c is not null)\n        or (pharmacy_phone is null and contact_gp_pharmacy_phone__c is not null)\n        or (pharmacy_address is null and contact_gp_pharmacy_address__c is not null)\n        or (phone1 is null and contact_gp_phone1__c is not null)\n        or (phone2 is null and contact_gp_phone2__c is not null)\n        or (language is null and contact_gp_language__c is not null)\n        or (patient_city is null and contact_gp_patient_city__c is not null)\n        or (patient_state is null and contact_gp_patient_state__c is not null)\n        or (patient_zip is null and contact_gp_patient_zip__c is not null)\n        or (payment_method_default is null and contact_gp_payment_method__c is not null)\n        or (tracking_coupon is null and contact_gp_tracking_coupon__c is not null)\n    )\n    AND (\n        p.patient_id_cp not in (\n            select patient_id_cp\n            from {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n            where its_fixed = false\n            and patient_id_cp is not null\n        )\n        and contact_id not in (\n            select salesforce_contact_id\n            from {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n            where its_fixed = false\n            and salesforce_contact_id is not null\n        )\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n    )\n)\nselect\n    contact_id as \"WhoId\"\n    , 'Patient information removed from Webform' as \"Subject\"\n    , 'a001M00000aT1ZoQAK' as \"WhatId\" -- \".Missing Contact Info\"\n    , 'a001M00000aT1ZoQAK' as \"Assigned_To__c\" -- \".Missing Contact Info\"\n    , to_char(now(), 'YYYY-MM-dd') as \"ActivityDate\"\n    , CONCAT(\n        'Patient had additional information in Salesforce that was NOT in Webform. Please review the additional information and determine if it needs to be added to Webform. You may need to call the patient to verify. Related fields: ', E'\\n',\n        case when ((email is null and contact_email is not null) or (email is null and contact_gp_email__c is not null)) then '- email: ' || contact_gp_email__c || E'\\n' end,\n        case when (patient_address1 is null and contact_gp_patient_address1__c is not null) then '- patient_address1: ' || contact_gp_patient_address1__c || E'\\n' end,\n        case when (patient_address2 is null and contact_gp_patient_address2__c is not null) then '- patient_address2: ' || contact_gp_patient_address2__c || E'\\n' end,\n        case when (payment_card_date_expired is null and contact_gp_payment_card_date_expired__c is not null) then '- payment_card_date_expired: ' || contact_gp_payment_card_date_expired__c || E'\\n' end,\n        case when (payment_card_last4 is null and contact_gp_payment_card_last4__c is not null) then '- payment_card_last4: ' || contact_gp_payment_card_last4__c || E'\\n' end,\n        case when (payment_card_type is null and contact_gp_payment_card_type__c is not null) then '- payment_card_type: ' || contact_gp_payment_card_type__c || E'\\n' end,\n        case when (payment_coupon is null and contact_gp_payment_coupon__c is not null) then '- payment_coupon: ' || contact_gp_payment_coupon__c || E'\\n' end,\n        case when (pharmacy_fax is null and contact_gp_pharmacy_fax__c is not null) then '- pharmacy_fax: ' || contact_gp_pharmacy_fax__c || E'\\n' end,\n        case when (pharmacy_npi is null and contact_gp_pharmacy_npi__c is not null) then '- pharmacy_npi: ' || contact_gp_pharmacy_npi__c || E'\\n' end,\n        case when (pharmacy_name is null and contact_gp_pharmacy_name__c is not null) then '- pharmacy_name: ' || contact_gp_pharmacy_name__c || E'\\n' end,\n        case when (pharmacy_phone is null and contact_gp_pharmacy_phone__c is not null) then '- pharmacy_phone: ' || contact_gp_pharmacy_phone__c || E'\\n' end,\n        case when (pharmacy_address is null and contact_gp_pharmacy_address__c is not null) then '- pharmacy_address: ' || contact_gp_pharmacy_address__c || E'\\n' end,\n        case when (phone1 is null and contact_gp_phone1__c is not null) then '- phone1: ' || contact_gp_phone1__c || E'\\n' end,\n        case when (phone2 is null and contact_gp_phone2__c is not null) then '- phone2: ' || contact_gp_phone2__c || E'\\n' end,\n        case when (language is null and contact_gp_language__c is not null) then '- language: ' || contact_gp_language__c || E'\\n' end,\n        case when (patient_city is null and contact_gp_patient_city__c is not null) then '- patient_city: ' || contact_gp_patient_city__c || E'\\n' end,\n        case when (patient_state is null and contact_gp_patient_state__c is not null) then '- patient_state: ' || contact_gp_patient_state__c || E'\\n' end,\n        case when (patient_zip is null and contact_gp_patient_zip__c is not null) then '- patient_zip: ' || contact_gp_patient_zip__c || E'\\n' end,\n        case when (payment_method_default is null and contact_gp_payment_method__c is not null) then '- payment_method_default: ' || contact_gp_payment_method__c || E'\\n' end,\n        case when (tracking_coupon is null and contact_gp_tracking_coupon__c is not null) then '- tracking_coupon: ' || contact_gp_tracking_coupon__c || E'\\n' end\n    ) as \"Description\"\nfrom patients_null_cases", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.patient_to_contact_non_updated", "model.smartpill.patients", "model.smartpill.patient_to_contact_editions", "model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_null_records"], "unique_id": "model.smartpill.patient_to_contact_null_records", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_null_records.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_null_records.sql", "name": "patient_to_contact_null_records", "alias": "patient_to_contact_null_records", "checksum": {"name": "sha256", "checksum": "b1cd321d8b4342de3e8f0ccb4f7adcf27c687b76785792c9140ee94890c54943"}, "tags": ["reverse_etl"], "refs": [["patients"], ["patient_to_contact_editions"], ["patients_contact"]], "sources": [["reverse_etl", "patient_to_contact_non_updated"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_null_records.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0659173, "compiled_sql": "with patients as (\n    select * from \"datawarehouse\".goodpill.\"patients\"\n    where patient_id_cp in (select gp_patient_id_cp__c from \"datawarehouse\".reverse_etl.\"patient_to_contact_editions\")\n),\ncontact as (\n    select *, contact_gp_patient_id_cp__c as patient_id_cp\n    from \"datawarehouse\".salesforce.\"patients_contact\"\n\twhere contact_gp_patient_id_cp__c is not null --filter dummy cases\n\tand contact_isdeleted = false\n),\npatients_null_cases as (\n\tselect p.*, psf.* from patients p\n\tinner join contact psf on (p.patient_id_cp = psf.patient_id_cp)\n    where\n    (\n        (email is null and contact_email is not null)\n        or (email is null and contact_gp_email__c is not null)\n        or (patient_address1 is null and contact_gp_patient_address1__c is not null)\n        or (patient_address2 is null and contact_gp_patient_address2__c is not null)\n        or (payment_card_date_expired is null and contact_gp_payment_card_date_expired__c is not null)\n        or (payment_card_last4 is null and contact_gp_payment_card_last4__c is not null)\n        or (payment_card_type is null and contact_gp_payment_card_type__c is not null)\n        or (payment_coupon is null and contact_gp_payment_coupon__c is not null)\n        or (pharmacy_fax is null and contact_gp_pharmacy_fax__c is not null)\n        or (pharmacy_npi is null and contact_gp_pharmacy_npi__c is not null)\n        or (pharmacy_name is null and contact_gp_pharmacy_name__c is not null)\n        or (pharmacy_phone is null and contact_gp_pharmacy_phone__c is not null)\n        or (pharmacy_address is null and contact_gp_pharmacy_address__c is not null)\n        or (phone1 is null and contact_gp_phone1__c is not null)\n        or (phone2 is null and contact_gp_phone2__c is not null)\n        or (language is null and contact_gp_language__c is not null)\n        or (patient_city is null and contact_gp_patient_city__c is not null)\n        or (patient_state is null and contact_gp_patient_state__c is not null)\n        or (patient_zip is null and contact_gp_patient_zip__c is not null)\n        or (payment_method_default is null and contact_gp_payment_method__c is not null)\n        or (tracking_coupon is null and contact_gp_tracking_coupon__c is not null)\n    )\n    AND (\n        p.patient_id_cp not in (\n            select patient_id_cp\n            from \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n            where its_fixed = false\n            and patient_id_cp is not null\n        )\n        and contact_id not in (\n            select salesforce_contact_id\n            from \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n            where its_fixed = false\n            and salesforce_contact_id is not null\n        )\n        and (\n            lower(contact_lastname) not like '%test%'\n            and lower(contact_name) not like '%test%'\n            and lower(contact_name) not like '%fake%'\n            and lower(contact_name) not like '%user%'\n            and lower(contact_email) not like '%test%'\n        )\n    )\n)\nselect\n    contact_id as \"WhoId\"\n    , 'Patient information removed from Webform' as \"Subject\"\n    , 'a001M00000aT1ZoQAK' as \"WhatId\" -- \".Missing Contact Info\"\n    , 'a001M00000aT1ZoQAK' as \"Assigned_To__c\" -- \".Missing Contact Info\"\n    , to_char(now(), 'YYYY-MM-dd') as \"ActivityDate\"\n    , CONCAT(\n        'Patient had additional information in Salesforce that was NOT in Webform. Please review the additional information and determine if it needs to be added to Webform. You may need to call the patient to verify. Related fields: ', E'\\n',\n        case when ((email is null and contact_email is not null) or (email is null and contact_gp_email__c is not null)) then '- email: ' || contact_gp_email__c || E'\\n' end,\n        case when (patient_address1 is null and contact_gp_patient_address1__c is not null) then '- patient_address1: ' || contact_gp_patient_address1__c || E'\\n' end,\n        case when (patient_address2 is null and contact_gp_patient_address2__c is not null) then '- patient_address2: ' || contact_gp_patient_address2__c || E'\\n' end,\n        case when (payment_card_date_expired is null and contact_gp_payment_card_date_expired__c is not null) then '- payment_card_date_expired: ' || contact_gp_payment_card_date_expired__c || E'\\n' end,\n        case when (payment_card_last4 is null and contact_gp_payment_card_last4__c is not null) then '- payment_card_last4: ' || contact_gp_payment_card_last4__c || E'\\n' end,\n        case when (payment_card_type is null and contact_gp_payment_card_type__c is not null) then '- payment_card_type: ' || contact_gp_payment_card_type__c || E'\\n' end,\n        case when (payment_coupon is null and contact_gp_payment_coupon__c is not null) then '- payment_coupon: ' || contact_gp_payment_coupon__c || E'\\n' end,\n        case when (pharmacy_fax is null and contact_gp_pharmacy_fax__c is not null) then '- pharmacy_fax: ' || contact_gp_pharmacy_fax__c || E'\\n' end,\n        case when (pharmacy_npi is null and contact_gp_pharmacy_npi__c is not null) then '- pharmacy_npi: ' || contact_gp_pharmacy_npi__c || E'\\n' end,\n        case when (pharmacy_name is null and contact_gp_pharmacy_name__c is not null) then '- pharmacy_name: ' || contact_gp_pharmacy_name__c || E'\\n' end,\n        case when (pharmacy_phone is null and contact_gp_pharmacy_phone__c is not null) then '- pharmacy_phone: ' || contact_gp_pharmacy_phone__c || E'\\n' end,\n        case when (pharmacy_address is null and contact_gp_pharmacy_address__c is not null) then '- pharmacy_address: ' || contact_gp_pharmacy_address__c || E'\\n' end,\n        case when (phone1 is null and contact_gp_phone1__c is not null) then '- phone1: ' || contact_gp_phone1__c || E'\\n' end,\n        case when (phone2 is null and contact_gp_phone2__c is not null) then '- phone2: ' || contact_gp_phone2__c || E'\\n' end,\n        case when (language is null and contact_gp_language__c is not null) then '- language: ' || contact_gp_language__c || E'\\n' end,\n        case when (patient_city is null and contact_gp_patient_city__c is not null) then '- patient_city: ' || contact_gp_patient_city__c || E'\\n' end,\n        case when (patient_state is null and contact_gp_patient_state__c is not null) then '- patient_state: ' || contact_gp_patient_state__c || E'\\n' end,\n        case when (patient_zip is null and contact_gp_patient_zip__c is not null) then '- patient_zip: ' || contact_gp_patient_zip__c || E'\\n' end,\n        case when (payment_method_default is null and contact_gp_payment_method__c is not null) then '- payment_method_default: ' || contact_gp_payment_method__c || E'\\n' end,\n        case when (tracking_coupon is null and contact_gp_tracking_coupon__c is not null) then '- tracking_coupon: ' || contact_gp_tracking_coupon__c || E'\\n' end\n    ) as \"Description\"\nfrom patients_null_cases", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_null_records\""}, "model.smartpill.patient_to_contact_retries": {"raw_sql": "select *\nfrom {{ ref('patient_to_contact_editions') }}\nwhere\ngp_patient_id_cp__c in (\n\tselect patient_id_cp\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nOR \"Id\" in (\n\tselect salesforce_contact_id\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand salesforce_contact_id is not null\n)\n\nUNION\n\nselect *\nfrom {{ ref('patient_to_contact_additions') }}\nwhere\ngp_patient_id_cp__c in (\n\tselect patient_id_cp\n\tfrom {{ source('reverse_etl', 'patient_to_contact_non_updated') }}\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.reverse_etl.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_editions", "model.smartpill.patient_to_contact_additions"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_retries"], "unique_id": "model.smartpill.patient_to_contact_retries", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_retries.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_retries.sql", "name": "patient_to_contact_retries", "alias": "patient_to_contact_retries", "checksum": {"name": "sha256", "checksum": "97f8c1b78c6019ee7321571e27a699be31d502ee168517372714965e89c2d6a9"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_editions"], ["patient_to_contact_additions"]], "sources": [["reverse_etl", "patient_to_contact_non_updated"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_retries.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0478363, "compiled_sql": "select *\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_editions\"\nwhere\ngp_patient_id_cp__c in (\n\tselect patient_id_cp\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)\nOR \"Id\" in (\n\tselect salesforce_contact_id\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand salesforce_contact_id is not null\n)\n\nUNION\n\nselect *\nfrom \"datawarehouse\".reverse_etl.\"patient_to_contact_additions\"\nwhere\ngp_patient_id_cp__c in (\n\tselect patient_id_cp\n\tfrom \"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"\n\twhere its_fixed = false\n\tand patient_id_cp is not null\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_retries\""}, "model.smartpill.patient_to_contact_upserts": {"raw_sql": "SELECT *\nFROM {{ ref('patient_to_contact_new_additions') }}\nUNION\nSELECT *\nFROM {{ ref('patient_to_contact_new_editions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.patient_to_contact_new_additions", "model.smartpill.patient_to_contact_new_editions"]}, "config": {"enabled": true, "alias": null, "schema": "reverse_etl", "database": null, "tags": ["reverse_etl"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "reverse_etl", "fqn": ["smartpill", "reverse_etl", "patient_to_contact", "upserts", "patient_to_contact_upserts"], "unique_id": "model.smartpill.patient_to_contact_upserts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "reverse_etl/patient_to_contact/upserts/patient_to_contact_upserts.sql", "original_file_path": "models/reverse_etl/patient_to_contact/upserts/patient_to_contact_upserts.sql", "name": "patient_to_contact_upserts", "alias": "patient_to_contact_upserts", "checksum": {"name": "sha256", "checksum": "0cbd434aa43c4bd3d6335b282af430b432b5b3ba7495c5d9fb86798f11e5e092"}, "tags": ["reverse_etl"], "refs": [["patient_to_contact_new_additions"], ["patient_to_contact_new_editions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/reverse_etl/patient_to_contact/upserts/models.yml", "compiled_path": "target/compiled/smartpill/models/reverse_etl/patient_to_contact/upserts/patient_to_contact_upserts.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "reverse_etl", "materialized": "incremental"}, "created_at": 1703701092.0548253, "compiled_sql": "SELECT *\nFROM \"datawarehouse\".reverse_etl.\"patient_to_contact_new_additions\"\nUNION\nSELECT *\nFROM \"datawarehouse\".reverse_etl.\"patient_to_contact_new_editions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".reverse_etl.\"patient_to_contact_upserts\""}, "model.smartpill.donors_contact": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _contact as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_donors_contact') }}\n\t{% if is_incremental() %}\n        where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\t\tselect max(contact_last_modified_date) from {{ this }}\n\t\t)\n    {% endif %}\n),\ncontact as (\n    select\n\t-- ids\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as contact_id,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as contact_owner_id,\n\t-- data\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as contact_name,\n\tjsonb_extract_path_text(_airbyte_data, 'Birthdate') as contact_birthdate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastName') as contact_lastname,\n\tjsonb_extract_path_text(_airbyte_data, 'FirstName') as contact_firstname,\n\tjsonb_extract_path_text(_airbyte_data, 'Email') as contact_email,\n\tjsonb_extract_path_text(_airbyte_data, 'Phone') as contact_phone,\n\tjsonb_extract_path_text(_airbyte_data, 'Title') as contact_title,\n\tjsonb_extract_path_text(_airbyte_data, 'Description') as contact_description,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as contact_last_modified_date,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as contact_isdeleted,\n\t_airbyte_emitted_at as contact_airbyte_emitted_at\n\tfrom _contact\n\twhere id_row_number = 1\n)\nselect * from contact", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_donors_contact"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contact_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "donors", "bronze", "donors_contact"], "unique_id": "model.smartpill.donors_contact", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/donors/bronze/donors_contact.sql", "original_file_path": "models/salesforce/donors/bronze/donors_contact.sql", "name": "donors_contact", "alias": "donors_contact", "checksum": {"name": "sha256", "checksum": "cb941e91ec834d6ce14a12e9f4d584f0436020294783674693110affbdc28d4d"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_donors_contact"]], "metrics": [], "description": "Salesforce donors contacts", "columns": {"contact_id": {"name": "contact_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/donors/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/donors_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.0704472, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _contact as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_contact\n\t\n        where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\t\tselect max(contact_last_modified_date) from \"datawarehouse\".salesforce.\"donors_contact\"\n\t\t)\n    \n),\ncontact as (\n    select\n\t-- ids\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as contact_id,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as contact_owner_id,\n\t-- data\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as contact_name,\n\tjsonb_extract_path_text(_airbyte_data, 'Birthdate') as contact_birthdate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastName') as contact_lastname,\n\tjsonb_extract_path_text(_airbyte_data, 'FirstName') as contact_firstname,\n\tjsonb_extract_path_text(_airbyte_data, 'Email') as contact_email,\n\tjsonb_extract_path_text(_airbyte_data, 'Phone') as contact_phone,\n\tjsonb_extract_path_text(_airbyte_data, 'Title') as contact_title,\n\tjsonb_extract_path_text(_airbyte_data, 'Description') as contact_description,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as contact_last_modified_date,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as contact_isdeleted,\n\t_airbyte_emitted_at as contact_airbyte_emitted_at\n\tfrom _contact\n\twhere id_row_number = 1\n)\nselect * from contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"donors_contact\""}, "model.smartpill.donors_task": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _task as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_donors_task') }}\n    {% if is_incremental() %}\n        where _airbyte_emitted_at > (\n\t\t\tselect max(task_airbyte_emitted_at) from {{ this }}\n\t\t)\n    {% endif %}\n),\n\ntask as (\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as task_id,\n    jsonb_extract_path_text(_airbyte_data, 'OwnerId') as task_user_id, --refers to user\n    jsonb_extract_path_text(_airbyte_data, 'WhoId') as task_contact_id, --refers to contact, lead\n    jsonb_extract_path_text(_airbyte_data, 'WhatId') as task_what_id, -- to gp_user\n    jsonb_extract_path_text(_airbyte_data, 'Assigned_To__c') as task_assigned_to__c, -- didnt found a join\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Subject') as task_subject,\n    jsonb_extract_path_text(_airbyte_data, 'Priority') as task_priority,\n    coalesce (\n        jsonb_extract_path_text(_airbyte_data, 'Types__c'),\n        jsonb_extract_path_text(_airbyte_data, 'Type')\n    ) as task_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp) as task_created_date,\n\n    (case when\n        jsonb_extract_path_text(_airbyte_data, 'Status') = 'Completed'\n        and jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') is null\n    then cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp)\n    else cast(jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') as timestamp)\n    end) as task_completed_datetime,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'ActivityDate') as timestamp) as task_due_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CallDurationInSeconds') as integer) as call_duration_in_seconds,\n\n    jsonb_extract_path_text(_airbyte_data, 'Touch_Reason__c') as task_touch_reason__c,\n    jsonb_extract_path_text(_airbyte_data, 'Status') as task_status,\n    jsonb_extract_path_text(_airbyte_data, 'Notes__c') as task_notes,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_Notes__c') as task_follow_up_notes__c,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_2__c') as task_follow_up_2__c,\n    jsonb_extract_path_text(_airbyte_data, 'Description') as task_description,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as task_last_modified_date,\n\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as task_is_deleted,\n    _airbyte_emitted_at as task_airbyte_emitted_at\n\n    from _task\n    where id_row_number = 1\n\n)\nselect * from task", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_donors_task"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "task_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "donors", "bronze", "donors_task"], "unique_id": "model.smartpill.donors_task", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/donors/bronze/donors_task.sql", "original_file_path": "models/salesforce/donors/bronze/donors_task.sql", "name": "donors_task", "alias": "donors_task", "checksum": {"name": "sha256", "checksum": "7960c09008cb676982ad418128a5e7aab2039704dce31100d830a43bd28bbf11"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_donors_task"]], "metrics": [], "description": "Salesforce donors tasks", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/donors/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/donors_task.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.0771623, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _task as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_task\n    \n        where _airbyte_emitted_at > (\n\t\t\tselect max(task_airbyte_emitted_at) from \"datawarehouse\".salesforce.\"donors_task\"\n\t\t)\n    \n),\n\ntask as (\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as task_id,\n    jsonb_extract_path_text(_airbyte_data, 'OwnerId') as task_user_id, --refers to user\n    jsonb_extract_path_text(_airbyte_data, 'WhoId') as task_contact_id, --refers to contact, lead\n    jsonb_extract_path_text(_airbyte_data, 'WhatId') as task_what_id, -- to gp_user\n    jsonb_extract_path_text(_airbyte_data, 'Assigned_To__c') as task_assigned_to__c, -- didnt found a join\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Subject') as task_subject,\n    jsonb_extract_path_text(_airbyte_data, 'Priority') as task_priority,\n    coalesce (\n        jsonb_extract_path_text(_airbyte_data, 'Types__c'),\n        jsonb_extract_path_text(_airbyte_data, 'Type')\n    ) as task_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp) as task_created_date,\n\n    (case when\n        jsonb_extract_path_text(_airbyte_data, 'Status') = 'Completed'\n        and jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') is null\n    then cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp)\n    else cast(jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') as timestamp)\n    end) as task_completed_datetime,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'ActivityDate') as timestamp) as task_due_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CallDurationInSeconds') as integer) as call_duration_in_seconds,\n\n    jsonb_extract_path_text(_airbyte_data, 'Touch_Reason__c') as task_touch_reason__c,\n    jsonb_extract_path_text(_airbyte_data, 'Status') as task_status,\n    jsonb_extract_path_text(_airbyte_data, 'Notes__c') as task_notes,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_Notes__c') as task_follow_up_notes__c,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_2__c') as task_follow_up_2__c,\n    jsonb_extract_path_text(_airbyte_data, 'Description') as task_description,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as task_last_modified_date,\n\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as task_is_deleted,\n    _airbyte_emitted_at as task_airbyte_emitted_at\n\n    from _task\n    where id_row_number = 1\n\n)\nselect * from task", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"donors_task\""}, "model.smartpill.donors_user": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _donors_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_donors_user') }}\n    {% if is_incremental() %}\n        where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\t\tselect max(user_last_modified_date) from {{ this }}\n\t\t)\n    {% endif %}\n),\ndonors_user as (\n\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as user_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Fax') as user_fax,\n    jsonb_extract_path_text(_airbyte_data, 'City') as user_city,\n    jsonb_extract_path_text(_airbyte_data, 'Name') as user_name,\n    jsonb_extract_path_text(_airbyte_data, 'Alias') as user_alias,\n    jsonb_extract_path_text(_airbyte_data, 'Email') as user_email,\n    jsonb_extract_path_text(_airbyte_data, 'Phone') as user_phone,\n    jsonb_extract_path_text(_airbyte_data, 'State') as user_state,\n    jsonb_extract_path_text(_airbyte_data, 'Title') as user_title,\n    jsonb_extract_path_text(_airbyte_data, 'Street') as user_street,\n    jsonb_extract_path_text(_airbyte_data, 'AboutMe') as user_about_me,\n\n    _airbyte_data -> 'Address' -> 'city' as city,\n    _airbyte_data -> 'Address' -> 'state' as state,\n    _airbyte_data -> 'Address' -> 'street' as street,\n    _airbyte_data -> 'Address' -> 'country' as country,\n    _airbyte_data -> 'Address' -> 'latitude' as latitude,\n    _airbyte_data -> 'Address' -> 'longitude' as longitude,\n    _airbyte_data -> 'Address' -> 'postalCode' as postal_code,\n    _airbyte_data -> 'Address' -> 'geocodeAccuracy' as geocode_accuracy,\n\n    jsonb_extract_path_text(_airbyte_data, 'Country') as user_country,\n    jsonb_extract_path_text(_airbyte_data, 'LastName') as user_lastname,\n    jsonb_extract_path_text(_airbyte_data, 'UserType') as user_usertype,\n    jsonb_extract_path_text(_airbyte_data, 'Username') as user_username,\n    jsonb_extract_path_text(_airbyte_data, 'FirstName') as user_firstname,\n    jsonb_extract_path_text(_airbyte_data, 'PostalCode') as user_postal_code,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as user_last_modified_date,\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as user_isdeleted,\n    _airbyte_emitted_at as user_airbyte_emitted_at\n    from _donors_user\n    where id_row_number = 1\n)\nselect distinct * from donors_user", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_donors_user"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "donors", "bronze", "donors_user"], "unique_id": "model.smartpill.donors_user", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/donors/bronze/donors_user.sql", "original_file_path": "models/salesforce/donors/bronze/donors_user.sql", "name": "donors_user", "alias": "donors_user", "checksum": {"name": "sha256", "checksum": "95548463a03df02a346e7828cb0cd790414f0cad7d22c0f638410ba57fc09ddf"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_donors_user"]], "metrics": [], "description": "Salesforce donors tasks", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/donors/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/donors_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.0823355, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _donors_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_user\n    \n        where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\t\tselect max(user_last_modified_date) from \"datawarehouse\".salesforce.\"donors_user\"\n\t\t)\n    \n),\ndonors_user as (\n\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as user_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Fax') as user_fax,\n    jsonb_extract_path_text(_airbyte_data, 'City') as user_city,\n    jsonb_extract_path_text(_airbyte_data, 'Name') as user_name,\n    jsonb_extract_path_text(_airbyte_data, 'Alias') as user_alias,\n    jsonb_extract_path_text(_airbyte_data, 'Email') as user_email,\n    jsonb_extract_path_text(_airbyte_data, 'Phone') as user_phone,\n    jsonb_extract_path_text(_airbyte_data, 'State') as user_state,\n    jsonb_extract_path_text(_airbyte_data, 'Title') as user_title,\n    jsonb_extract_path_text(_airbyte_data, 'Street') as user_street,\n    jsonb_extract_path_text(_airbyte_data, 'AboutMe') as user_about_me,\n\n    _airbyte_data -> 'Address' -> 'city' as city,\n    _airbyte_data -> 'Address' -> 'state' as state,\n    _airbyte_data -> 'Address' -> 'street' as street,\n    _airbyte_data -> 'Address' -> 'country' as country,\n    _airbyte_data -> 'Address' -> 'latitude' as latitude,\n    _airbyte_data -> 'Address' -> 'longitude' as longitude,\n    _airbyte_data -> 'Address' -> 'postalCode' as postal_code,\n    _airbyte_data -> 'Address' -> 'geocodeAccuracy' as geocode_accuracy,\n\n    jsonb_extract_path_text(_airbyte_data, 'Country') as user_country,\n    jsonb_extract_path_text(_airbyte_data, 'LastName') as user_lastname,\n    jsonb_extract_path_text(_airbyte_data, 'UserType') as user_usertype,\n    jsonb_extract_path_text(_airbyte_data, 'Username') as user_username,\n    jsonb_extract_path_text(_airbyte_data, 'FirstName') as user_firstname,\n    jsonb_extract_path_text(_airbyte_data, 'PostalCode') as user_postal_code,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as user_last_modified_date,\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as user_isdeleted,\n    _airbyte_emitted_at as user_airbyte_emitted_at\n    from _donors_user\n    where id_row_number = 1\n)\nselect distinct * from donors_user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"donors_user\""}, "model.smartpill.salesforce_donors_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n    \"{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}\",\n\t\"{{ create_salesforce_donors_abt_view() }}\",\n    \"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nwith task as (\n\tselect *\n    from {{ ref('donors_task') }}\n),\ncontact as (\n\tselect *\n    from {{ ref('donors_contact') }} as c\n    where\n        contact_isdeleted = false\n        and c.contact_firstname not like '%Test%'\n        and c.contact_firstname not like '%test%'\n        and c.contact_name not like '%Test%'\n        and c.contact_name not like '%test%'\n),\ngp_user as (\n    select\n        Id as gp_user_id,\n        OwnerId as gp_user_ownerid,\n        Name as gp_user_name,\n        Role__c as gp_user_role__c,\n        Email__c as gp_user_email__c,\n        gp_user_airbyte_emitted_at,\n        isdeleted as gp_user_isdeleted\n    from {{ ref('patients_gp_user__c') }}\n    where isdeleted = false\n),\nfinal as (\n    select\n    *,\n    greatest(\n        task.task_airbyte_emitted_at,\n        contact.contact_airbyte_emitted_at,\n        gp_user.gp_user_airbyte_emitted_at\n    ) as _airbyte_emitted_at\n\n    from task\n    full outer join contact on contact.contact_id = task.task_contact_id\n    left join gp_user on task.task_what_id = gp_user.gp_user_Id\n)\nselect * from final\n{% if is_incremental() %}\nwhere _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.smartpill.pg_create_index", "macro.smartpill.create_salesforce_donors_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.donors_task", "model.smartpill.donors_contact", "model.smartpill.patients_gp_user__c"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["task_id"], "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}", "transaction": true, "index": null}, {"sql": "{{ create_salesforce_donors_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "donors", "gold", "salesforce_donors_abt"], "unique_id": "model.smartpill.salesforce_donors_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/donors/gold/salesforce_donors_abt.sql", "original_file_path": "models/salesforce/donors/gold/salesforce_donors_abt.sql", "name": "salesforce_donors_abt", "alias": "salesforce_donors_abt", "checksum": {"name": "sha256", "checksum": "bb22b46a70fa4b5c889db9f19d4cf6f69ce1995f992cbbcbb36843fe911a6aeb"}, "tags": ["salesforce"], "refs": [["donors_task"], ["donors_contact"], ["patients_gp_user__c"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "salesforce donors abt.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/donors/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/donors/gold/salesforce_donors_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce", "post-hook": ["{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}", "{{ create_salesforce_donors_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701092.1231117, "compiled_sql": "\nwith task as (\n\tselect *\n    from \"datawarehouse\".salesforce.\"donors_task\"\n),\ncontact as (\n\tselect *\n    from \"datawarehouse\".salesforce.\"donors_contact\" as c\n    where\n        contact_isdeleted = false\n        and c.contact_firstname not like '%Test%'\n        and c.contact_firstname not like '%test%'\n        and c.contact_name not like '%Test%'\n        and c.contact_name not like '%test%'\n),\ngp_user as (\n    select\n        Id as gp_user_id,\n        OwnerId as gp_user_ownerid,\n        Name as gp_user_name,\n        Role__c as gp_user_role__c,\n        Email__c as gp_user_email__c,\n        gp_user_airbyte_emitted_at,\n        isdeleted as gp_user_isdeleted\n    from \"datawarehouse\".salesforce.\"patients_gp_user__c\"\n    where isdeleted = false\n),\nfinal as (\n    select\n    *,\n    greatest(\n        task.task_airbyte_emitted_at,\n        contact.contact_airbyte_emitted_at,\n        gp_user.gp_user_airbyte_emitted_at\n    ) as _airbyte_emitted_at\n\n    from task\n    full outer join contact on contact.contact_id = task.task_contact_id\n    left join gp_user on task.task_what_id = gp_user.gp_user_Id\n)\nselect * from final\n\nwhere _airbyte_emitted_at > (select max(_airbyte_emitted_at) from \"datawarehouse\".salesforce.\"salesforce_donors_abt\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"salesforce_donors_abt\""}, "model.smartpill.patients_contact": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _contact as (\n\tselect *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_contact') }}\n\t{% if is_incremental() %}\n\twhere jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\tselect max(contact_last_modified_date) from {{ this }}\n\t)\n    {% endif %}\n),\ncontact as (\n    select\n\t-- ids\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as contact_id,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as contact_owner_id,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_id_cp__c')::float::int as contact_gp_patient_id_cp__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_id_wc__c')::float::int as contact_gp_patient_id_wc__c,\n\t-- data\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as contact_name,\n\tjsonb_extract_path_text(_airbyte_data, 'Birthdate') as contact_birthdate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastName') as contact_lastname,\n\tjsonb_extract_path_text(_airbyte_data, 'FirstName') as contact_firstname,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedDate')::timestamp as contact_created_date,\n\tjsonb_extract_path_text(_airbyte_data, 'Email') as contact_email,\n\tjsonb_extract_path_text(_airbyte_data, 'Phone') as contact_phone,\n\tjsonb_extract_path_text(_airbyte_data, 'Title') as contact_title,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_card_type__c') as contact_gp_payment_card_type__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Description') as contact_description,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as contact_last_modified_date,\n\tjsonb_extract_path_text(_airbyte_data, 'AccountId') as contact_account_id,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_language__c') as contact_gp_language__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_address1__c') as contact_gp_patient_address1__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_address2__c') as contact_gp_patient_address2__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_autofill__c') as contact_gp_patient_autofill__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_city__c') as contact_gp_patient_city__c,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_patient_date_added__c') as timestamp) as contact_gp_patient_date_added__c,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_patient_date_changed__c') as timestamp) as contact_gp_patient_date_changed__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_note__c') as contact_gp_patient_note__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_state__c') as contact_gp_patient_state__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_status__c') as contact_gp_patient_status__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_zip__c') as contact_gp_patient_zip__c,\n\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_payment_card_date_expired__c') as timestamp) as contact_gp_payment_card_date_expired__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_card_last4__c') as contact_gp_payment_card_last4__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_coupon__c') as contact_gp_payment_coupon__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_method__c') as contact_gp_payment_method__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_fax__c') as contact_gp_pharmacy_fax__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_npi__c') as contact_gp_pharmacy_npi__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_name__c') as contact_gp_pharmacy_name__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_phone__c') as contact_gp_pharmacy_phone__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_address__c') as contact_gp_pharmacy_address__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_phone1__c') as contact_gp_phone1__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_phone2__c') as contact_gp_phone2__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_refills_used__c') as contact_gp_refills_used__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_tracking_coupon__c') as contact_gp_tracking_coupon__c,\n\tjsonb_extract_path_text(_airbyte_data, 'RecordTypeId') as contact_recordtype_id,\n\tjsonb_extract_path_text(_airbyte_data, 'first_name__c') as contact_first_name__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_email__c') as contact_gp_email__c,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as contact_isdeleted,\n\t_airbyte_emitted_at as contact_airbyte_emitted_at\n\n\tfrom _contact\n\twhere id_row_number = 1\n)\nselect * from contact", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_contact"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contact_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "patients", "bronze", "patients_contact"], "unique_id": "model.smartpill.patients_contact", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/patients/bronze/patients_contact.sql", "original_file_path": "models/salesforce/patients/bronze/patients_contact.sql", "name": "patients_contact", "alias": "patients_contact", "checksum": {"name": "sha256", "checksum": "304ddc3b5ad71bf8a450813a49143781f2efdfc0454509afb75887502e3e6c15"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_contact"]], "metrics": [], "description": "Salesforce patients contacts", "columns": {"contact_id": {"name": "contact_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/patients/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/patients_contact.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.1274753, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _contact as (\n\tselect *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_contact\n\t\n\twhere jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\tselect max(contact_last_modified_date) from \"datawarehouse\".salesforce.\"patients_contact\"\n\t)\n    \n),\ncontact as (\n    select\n\t-- ids\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as contact_id,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as contact_owner_id,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_id_cp__c')::float::int as contact_gp_patient_id_cp__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_id_wc__c')::float::int as contact_gp_patient_id_wc__c,\n\t-- data\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as contact_name,\n\tjsonb_extract_path_text(_airbyte_data, 'Birthdate') as contact_birthdate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastName') as contact_lastname,\n\tjsonb_extract_path_text(_airbyte_data, 'FirstName') as contact_firstname,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedDate')::timestamp as contact_created_date,\n\tjsonb_extract_path_text(_airbyte_data, 'Email') as contact_email,\n\tjsonb_extract_path_text(_airbyte_data, 'Phone') as contact_phone,\n\tjsonb_extract_path_text(_airbyte_data, 'Title') as contact_title,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_card_type__c') as contact_gp_payment_card_type__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Description') as contact_description,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as contact_last_modified_date,\n\tjsonb_extract_path_text(_airbyte_data, 'AccountId') as contact_account_id,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_language__c') as contact_gp_language__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_address1__c') as contact_gp_patient_address1__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_address2__c') as contact_gp_patient_address2__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_autofill__c') as contact_gp_patient_autofill__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_city__c') as contact_gp_patient_city__c,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_patient_date_added__c') as timestamp) as contact_gp_patient_date_added__c,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_patient_date_changed__c') as timestamp) as contact_gp_patient_date_changed__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_note__c') as contact_gp_patient_note__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_state__c') as contact_gp_patient_state__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_status__c') as contact_gp_patient_status__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_patient_zip__c') as contact_gp_patient_zip__c,\n\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gp_payment_card_date_expired__c') as timestamp) as contact_gp_payment_card_date_expired__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_card_last4__c') as contact_gp_payment_card_last4__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_coupon__c') as contact_gp_payment_coupon__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_payment_method__c') as contact_gp_payment_method__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_fax__c') as contact_gp_pharmacy_fax__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_npi__c') as contact_gp_pharmacy_npi__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_name__c') as contact_gp_pharmacy_name__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_phone__c') as contact_gp_pharmacy_phone__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_pharmacy_address__c') as contact_gp_pharmacy_address__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_phone1__c') as contact_gp_phone1__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_phone2__c') as contact_gp_phone2__c,\n\n\tjsonb_extract_path_text(_airbyte_data, 'gp_refills_used__c') as contact_gp_refills_used__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_tracking_coupon__c') as contact_gp_tracking_coupon__c,\n\tjsonb_extract_path_text(_airbyte_data, 'RecordTypeId') as contact_recordtype_id,\n\tjsonb_extract_path_text(_airbyte_data, 'first_name__c') as contact_first_name__c,\n\tjsonb_extract_path_text(_airbyte_data, 'gp_email__c') as contact_gp_email__c,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as contact_isdeleted,\n\t_airbyte_emitted_at as contact_airbyte_emitted_at\n\n\tfrom _contact\n\twhere id_row_number = 1\n)\nselect * from contact", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"patients_contact\""}, "model.smartpill.patients_gp_user__c": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _gp_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_gp_user__c') }}\n\t{% if is_incremental() %}\n\twhere jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\tselect max(lastmodifieddate) from {{ this }}\n\t)\n    {% endif %}\n),\ngp_user as (\n    select\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as Id,\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as Name,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as OwnerId,\n\tjsonb_extract_path_text(_airbyte_data, 'Role__c') as Role__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Email__c') as Email__c,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as IsDeleted,\n\tjsonb_extract_path_text(_airbyte_data, 'Account__c') as Account__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Archived__c') as Archived__c,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedById') as CreatedById,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedDate') as CreatedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'Is_Human__c') as Is_Human__c,\n\tjsonb_extract_path_text(_airbyte_data, 'RecordTypeId') as RecordTypeId,\n\tjsonb_extract_path_text(_airbyte_data, 'LastViewedDate') as LastViewedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'SystemModstamp') as SystemModstamp,\n\tjsonb_extract_path_text(_airbyte_data, 'LastActivityDate') as LastActivityDate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastModifiedById') as LastModifiedById,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as LastModifiedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastReferencedDate') as LastReferencedDate,\n\t_airbyte_emitted_at as gp_user_airbyte_emitted_at\n\tfrom _gp_user\n\twhere id_row_number = 1\n)\nselect * from gp_user", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_gp_user__c"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "patients", "bronze", "patients_gp_user__c"], "unique_id": "model.smartpill.patients_gp_user__c", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/patients/bronze/patients_gp_user__c.sql", "original_file_path": "models/salesforce/patients/bronze/patients_gp_user__c.sql", "name": "patients_gp_user__c", "alias": "patients_gp_user__c", "checksum": {"name": "sha256", "checksum": "c343c419a3153594fe40d40d9404febf4d93ea88bd2c9643f074659d09132563"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_gp_user__c"]], "metrics": [], "description": "Salesforce patients goodpill users", "columns": {"Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/patients/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/patients_gp_user__c.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.1318133, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _gp_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_gp_user__c\n\t\n\twhere jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n\t\tselect max(lastmodifieddate) from \"datawarehouse\".salesforce.\"patients_gp_user__c\"\n\t)\n    \n),\ngp_user as (\n    select\n\tjsonb_extract_path_text(_airbyte_data, 'Id') as Id,\n\tjsonb_extract_path_text(_airbyte_data, 'Name') as Name,\n\tjsonb_extract_path_text(_airbyte_data, 'OwnerId') as OwnerId,\n\tjsonb_extract_path_text(_airbyte_data, 'Role__c') as Role__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Email__c') as Email__c,\n\tjsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as IsDeleted,\n\tjsonb_extract_path_text(_airbyte_data, 'Account__c') as Account__c,\n\tjsonb_extract_path_text(_airbyte_data, 'Archived__c') as Archived__c,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedById') as CreatedById,\n\tjsonb_extract_path_text(_airbyte_data, 'CreatedDate') as CreatedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'Is_Human__c') as Is_Human__c,\n\tjsonb_extract_path_text(_airbyte_data, 'RecordTypeId') as RecordTypeId,\n\tjsonb_extract_path_text(_airbyte_data, 'LastViewedDate') as LastViewedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'SystemModstamp') as SystemModstamp,\n\tjsonb_extract_path_text(_airbyte_data, 'LastActivityDate') as LastActivityDate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastModifiedById') as LastModifiedById,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as LastModifiedDate,\n\tjsonb_extract_path_text(_airbyte_data, 'LastReferencedDate') as LastReferencedDate,\n\t_airbyte_emitted_at as gp_user_airbyte_emitted_at\n\tfrom _gp_user\n\twhere id_row_number = 1\n)\nselect * from gp_user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"patients_gp_user__c\""}, "model.smartpill.patients_sf_user": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _sf_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_user') }}\n    {% if is_incremental() %}\n    where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n        select max(user_last_modified_date) from {{ this }}\n    )\n    {% endif %}\n),\nsf_user as (\n\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as user_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Fax') as user_fax,\n    jsonb_extract_path_text(_airbyte_data, 'City') as user_city,\n    jsonb_extract_path_text(_airbyte_data, 'Name') as user_name,\n    jsonb_extract_path_text(_airbyte_data, 'Alias') as user_alias,\n    jsonb_extract_path_text(_airbyte_data, 'Email') as user_email,\n    jsonb_extract_path_text(_airbyte_data, 'Phone') as user_phone,\n    jsonb_extract_path_text(_airbyte_data, 'State') as user_state,\n    jsonb_extract_path_text(_airbyte_data, 'Title') as user_title,\n    jsonb_extract_path_text(_airbyte_data, 'Street') as user_street,\n    jsonb_extract_path_text(_airbyte_data, 'AboutMe') as user_about_me,\n\n    _airbyte_data -> 'Address' -> 'city' as city,\n    _airbyte_data -> 'Address' -> 'state' as state,\n    _airbyte_data -> 'Address' -> 'street' as street,\n    _airbyte_data -> 'Address' -> 'country' as country,\n    _airbyte_data -> 'Address' -> 'latitude' as latitude,\n    _airbyte_data -> 'Address' -> 'longitude' as longitude,\n    _airbyte_data -> 'Address' -> 'postalCode' as postal_code,\n    _airbyte_data -> 'Address' -> 'geocodeAccuracy' as geocode_accuracy,\n\n    jsonb_extract_path_text(_airbyte_data, 'Country') as user_country,\n    jsonb_extract_path_text(_airbyte_data, 'LastName') as user_lastname,\n    jsonb_extract_path_text(_airbyte_data, 'UserType') as user_usertype,\n    jsonb_extract_path_text(_airbyte_data, 'Username') as user_username,\n    jsonb_extract_path_text(_airbyte_data, 'FirstName') as user_firstname,\n    jsonb_extract_path_text(_airbyte_data, 'PostalCode') as user_postal_code,\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as user_isdeleted,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as user_last_modified_date,\n    _airbyte_emitted_at as user_airbyte_emitted_at\n\n    from _sf_user\n    where id_row_number = 1\n\n)\nselect *\nfrom sf_user", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_user"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "user_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "patients", "bronze", "patients_sf_user"], "unique_id": "model.smartpill.patients_sf_user", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/patients/bronze/patients_sf_user.sql", "original_file_path": "models/salesforce/patients/bronze/patients_sf_user.sql", "name": "patients_sf_user", "alias": "patients_sf_user", "checksum": {"name": "sha256", "checksum": "44aa5b780f22bbc9541a432cac3a55e523a67942fc1c8a47f9de9fdb5c1d8d22"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_user"]], "metrics": [], "description": "Salesforce patients tasks", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/patients/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/patients_sf_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.1402552, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _sf_user as (\n\tselect *,\n\tROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_user\n    \n    where jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate')::timestamp > (\n        select max(user_last_modified_date) from \"datawarehouse\".salesforce.\"patients_sf_user\"\n    )\n    \n),\nsf_user as (\n\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as user_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Fax') as user_fax,\n    jsonb_extract_path_text(_airbyte_data, 'City') as user_city,\n    jsonb_extract_path_text(_airbyte_data, 'Name') as user_name,\n    jsonb_extract_path_text(_airbyte_data, 'Alias') as user_alias,\n    jsonb_extract_path_text(_airbyte_data, 'Email') as user_email,\n    jsonb_extract_path_text(_airbyte_data, 'Phone') as user_phone,\n    jsonb_extract_path_text(_airbyte_data, 'State') as user_state,\n    jsonb_extract_path_text(_airbyte_data, 'Title') as user_title,\n    jsonb_extract_path_text(_airbyte_data, 'Street') as user_street,\n    jsonb_extract_path_text(_airbyte_data, 'AboutMe') as user_about_me,\n\n    _airbyte_data -> 'Address' -> 'city' as city,\n    _airbyte_data -> 'Address' -> 'state' as state,\n    _airbyte_data -> 'Address' -> 'street' as street,\n    _airbyte_data -> 'Address' -> 'country' as country,\n    _airbyte_data -> 'Address' -> 'latitude' as latitude,\n    _airbyte_data -> 'Address' -> 'longitude' as longitude,\n    _airbyte_data -> 'Address' -> 'postalCode' as postal_code,\n    _airbyte_data -> 'Address' -> 'geocodeAccuracy' as geocode_accuracy,\n\n    jsonb_extract_path_text(_airbyte_data, 'Country') as user_country,\n    jsonb_extract_path_text(_airbyte_data, 'LastName') as user_lastname,\n    jsonb_extract_path_text(_airbyte_data, 'UserType') as user_usertype,\n    jsonb_extract_path_text(_airbyte_data, 'Username') as user_username,\n    jsonb_extract_path_text(_airbyte_data, 'FirstName') as user_firstname,\n    jsonb_extract_path_text(_airbyte_data, 'PostalCode') as user_postal_code,\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as user_isdeleted,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as user_last_modified_date,\n    _airbyte_emitted_at as user_airbyte_emitted_at\n\n    from _sf_user\n    where id_row_number = 1\n\n)\nselect *\nfrom sf_user", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"patients_sf_user\""}, "model.smartpill.patients_task": {"raw_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _task as (\n\tselect *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom {{ source('raw', '_airbyte_raw_salesforce_task') }}\n    {% if is_incremental() %}\n    where _airbyte_emitted_at > (\n        select max(task_airbyte_emitted_at) from {{ this }}\n    )\n    {% endif %}\n),\ntask as (\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as task_id,\n    jsonb_extract_path_text(_airbyte_data, 'OwnerId') as task_user_id, --refers to user\n    jsonb_extract_path_text(_airbyte_data, 'WhoId') as task_contact_id, --refers to contact, lead\n    jsonb_extract_path_text(_airbyte_data, 'WhatId') as task_what_id,\n    jsonb_extract_path_text(_airbyte_data, 'Related_to_ID__c') as task_related_to_id__c,\n    jsonb_extract_path_text(_airbyte_data, 'Assigned_To__c') as task_assigned_to__c,\n    jsonb_extract_path_text(_airbyte_data, 'AccountId') as task_account_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Subject') as task_subject,\n    jsonb_extract_path_text(_airbyte_data, 'Priority') as task_priority,\n    coalesce (\n        jsonb_extract_path_text(_airbyte_data, 'Types__c'),\n        jsonb_extract_path_text(_airbyte_data, 'Type')\n    ) as task_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp) as task_created_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as task_last_modified_date,\n\n    (case when\n        jsonb_extract_path_text(_airbyte_data, 'Status') = 'Completed'\n        and jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') is null\n    then cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp)\n    else cast(jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') as timestamp)\n    end) as task_completed_datetime,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'ActivityDate') as timestamp) as task_due_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CallDurationInSeconds') as integer) as call_duration_in_seconds,\n\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Country__c') as aircall__country__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Timezone__c') as aircall__timezone__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Answered_by__c') as aircall__answered_by__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Is_Voicemail__c') as aircall__is_voicemail__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Phone_number__c') as aircall__phone_number__c,\n    cast(jsonb_extract_path_text(_airbyte_data, 'aircall__Waiting_Time__c') as decimal(10,3)) as aircall__waiting_time__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Detailed_type__c') as aircall__detailed_type__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Has_connected__c') as aircall__has_connected__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Call_Recording__c') as aircall__call_recording__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Is_Missed_call__c') as aircall__is_missed_call__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Transferred_to__c') as aircall__transferred_to__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Hour_of_the_day__c') as aircall__hour_of_the_day__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Connection_status__c') as aircall__connection_status__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Missed_Call_Ratio__c') as aircall__missed_call_ratio__c,\n\n    jsonb_extract_path_text(_airbyte_data, 'Status') as task_status,\n    jsonb_extract_path_text(_airbyte_data, 'Notes__c') as task_notes,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_Notes__c') as task_follow_up_notes__c,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_2__c') as task_follow_up_2__c,\n    jsonb_extract_path_text(_airbyte_data, 'Description') as task_description,\n\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as task_is_deleted,\n    _airbyte_emitted_at as task_airbyte_emitted_at\n\n    from _task where id_row_number = 1\n)\nselect * from task", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.raw._airbyte_raw_salesforce_task"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "task_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "patients", "bronze", "patients_task"], "unique_id": "model.smartpill.patients_task", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/patients/bronze/patients_task.sql", "original_file_path": "models/salesforce/patients/bronze/patients_task.sql", "name": "patients_task", "alias": "patients_task", "checksum": {"name": "sha256", "checksum": "e34adc1a335e8d3133697e54f82120d7a6d340e87f7312f07cd1c8ca8aeabc3c"}, "tags": ["salesforce"], "refs": [], "sources": [["raw", "_airbyte_raw_salesforce_task"]], "metrics": [], "description": "Salesforce patients tasks", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/patients/bronze/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/patients_task.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce"}, "created_at": 1703701092.1358979, "compiled_sql": "-- in case of full-refresh need to filter incremental rows from raw source!\nwith _task as (\n\tselect *, ROW_NUMBER() OVER(\n\t\tpartition by jsonb_extract_path_text(_airbyte_data, 'Id')\n\t\torder by \"_airbyte_emitted_at\" desc\n\t) as id_row_number\n\tfrom \"datawarehouse\".\"raw\"._airbyte_raw_salesforce_task\n    \n    where _airbyte_emitted_at > (\n        select max(task_airbyte_emitted_at) from \"datawarehouse\".salesforce.\"patients_task\"\n    )\n    \n),\ntask as (\n    select\n    --ids\n    jsonb_extract_path_text(_airbyte_data, 'Id') as task_id,\n    jsonb_extract_path_text(_airbyte_data, 'OwnerId') as task_user_id, --refers to user\n    jsonb_extract_path_text(_airbyte_data, 'WhoId') as task_contact_id, --refers to contact, lead\n    jsonb_extract_path_text(_airbyte_data, 'WhatId') as task_what_id,\n    jsonb_extract_path_text(_airbyte_data, 'Related_to_ID__c') as task_related_to_id__c,\n    jsonb_extract_path_text(_airbyte_data, 'Assigned_To__c') as task_assigned_to__c,\n    jsonb_extract_path_text(_airbyte_data, 'AccountId') as task_account_id,\n    --data\n    jsonb_extract_path_text(_airbyte_data, 'Subject') as task_subject,\n    jsonb_extract_path_text(_airbyte_data, 'Priority') as task_priority,\n    coalesce (\n        jsonb_extract_path_text(_airbyte_data, 'Types__c'),\n        jsonb_extract_path_text(_airbyte_data, 'Type')\n    ) as task_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp) as task_created_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'LastModifiedDate') as timestamp) as task_last_modified_date,\n\n    (case when\n        jsonb_extract_path_text(_airbyte_data, 'Status') = 'Completed'\n        and jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') is null\n    then cast(jsonb_extract_path_text(_airbyte_data, 'CreatedDate') as timestamp)\n    else cast(jsonb_extract_path_text(_airbyte_data, 'CompletedDateTime') as timestamp)\n    end) as task_completed_datetime,\n\n    cast(jsonb_extract_path_text(_airbyte_data, 'ActivityDate') as timestamp) as task_due_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'CallDurationInSeconds') as integer) as call_duration_in_seconds,\n\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Country__c') as aircall__country__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Timezone__c') as aircall__timezone__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Answered_by__c') as aircall__answered_by__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Is_Voicemail__c') as aircall__is_voicemail__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Phone_number__c') as aircall__phone_number__c,\n    cast(jsonb_extract_path_text(_airbyte_data, 'aircall__Waiting_Time__c') as decimal(10,3)) as aircall__waiting_time__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Detailed_type__c') as aircall__detailed_type__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Has_connected__c') as aircall__has_connected__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Call_Recording__c') as aircall__call_recording__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Is_Missed_call__c') as aircall__is_missed_call__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Transferred_to__c') as aircall__transferred_to__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Hour_of_the_day__c') as aircall__hour_of_the_day__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Connection_status__c') as aircall__connection_status__c,\n    jsonb_extract_path_text(_airbyte_data, 'aircall__Missed_Call_Ratio__c') as aircall__missed_call_ratio__c,\n\n    jsonb_extract_path_text(_airbyte_data, 'Status') as task_status,\n    jsonb_extract_path_text(_airbyte_data, 'Notes__c') as task_notes,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_Notes__c') as task_follow_up_notes__c,\n    jsonb_extract_path_text(_airbyte_data, 'Follow_Up_2__c') as task_follow_up_2__c,\n    jsonb_extract_path_text(_airbyte_data, 'Description') as task_description,\n\n    jsonb_extract_path_text(_airbyte_data, 'IsDeleted')::bool as task_is_deleted,\n    _airbyte_emitted_at as task_airbyte_emitted_at\n\n    from _task where id_row_number = 1\n)\nselect * from task", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"patients_task\""}, "model.smartpill.salesforce_patients_abt": {"raw_sql": "{{\n  config(\n  post_hook = [\n    \"{{ pg_create_index(this = this, name='task_by_person', schema='salesforce', columns=['task_id', 'task_completed_datetime'], includes = ['gp_user_related_to_name', 'task_follow_up_notes__c']) }}\",\n    \"{{ pg_create_index(this = this, name='aircall_and_calls_by_person', schema='salesforce', columns=['call_duration_in_seconds', 'aircall__waiting_time__c', 'task_completed_datetime'], includes = ['aircall__detailed_type__c', 'task_subject', 'aircall__transferred_to__c', 'aircall__answered_by__c']) }}\",\n    \"{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}\",\n    \"{{ create_salesforce_patients_abt_view() }}\",\n    \"{{ create_sirum_dwh_view() }}\"\n    ]\n) }}\nwith task as (\n\tselect *\n    from {{ ref('patients_task') }}\n    where task_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ncontact as (\n\tselect *\n    from {{ ref('patients_contact') }} as c\n    where\n        c.contact_gp_patient_id_cp__c is not null\n        and c.contact_isdeleted = false\n        and contact_isdeleted = false\n        and c.contact_firstname not like '%Test%'\n        and c.contact_firstname not like '%test%'\n        and c.contact_name not like '%Test%'\n        and c.contact_name not like '%test%'\n        and c.contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ngp_user as (\n    select\n        Id as gp_user_id,\n        OwnerId as gp_user_ownerid,\n        Name as gp_user_name,\n        Role__c as gp_user_role__c,\n        Email__c as gp_user_email__c,\n        gp_user_airbyte_emitted_at\n    from {{ ref('patients_gp_user__c') }}\n    where isdeleted = false\n),\ngp_user_assigned_to as (\n\tselect * from gp_user\n),\ngp_user_related_to as (\n\tselect * from gp_user\n),\ntasks_x_contact as (\n    select *\n    from task\n    full outer join contact on contact.contact_id = task.task_contact_id\n),\nfinal as (\n    select\n    tasks_x_contact.*,\n\n\tgp_user_assigned_to.gp_user_id as gp_user_assigned_to_id,\n\tgp_user_assigned_to.gp_user_ownerid as gp_user_assigned_to_ownerid,\n    gp_user_assigned_to.gp_user_name as gp_user_assigned_to_name,\n\tgp_user_assigned_to.gp_user_role__c as gp_user_assigned_to_role__c,\n\tgp_user_assigned_to.gp_user_email__c as gp_user_assigned_to_email__c,\n\n    gp_user_related_to.gp_user_id as gp_user_related_to_id,\n\tgp_user_related_to.gp_user_ownerid as gp_user_related_to_ownerid,\n    gp_user_related_to.gp_user_name as gp_user_related_to_name,\n\tgp_user_related_to.gp_user_role__c as gp_user_related_to_role__c,\n\tgp_user_related_to.gp_user_email__c as gp_user_related_to_email__c,\n\n    greatest(\n        tasks_x_contact.task_airbyte_emitted_at,\n        tasks_x_contact.contact_airbyte_emitted_at,\n        gp_user_assigned_to.gp_user_airbyte_emitted_at,\n        gp_user_related_to.gp_user_airbyte_emitted_at\n    ) as _airbyte_emitted_at\n\n    from tasks_x_contact\n    left join gp_user_assigned_to on tasks_x_contact.task_assigned_to__c = gp_user_assigned_to.gp_user_id\n    left join gp_user_related_to on tasks_x_contact.task_what_id = gp_user_related_to.gp_user_Id\n)\nselect * from final\n{% if is_incremental() %}\nwhere final._airbyte_emitted_at > (select max(t._airbyte_emitted_at) from {{ this }} t)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.smartpill.pg_create_index", "macro.smartpill.create_salesforce_patients_abt_view", "macro.smartpill.create_sirum_dwh_view"], "nodes": ["source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "model.smartpill.patients_task", "model.smartpill.patients_contact", "model.smartpill.patients_gp_user__c"]}, "config": {"enabled": true, "alias": null, "schema": "salesforce", "database": null, "tags": ["salesforce"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["task_id"], "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{{ pg_create_index(this = this, name='task_by_person', schema='salesforce', columns=['task_id', 'task_completed_datetime'], includes = ['gp_user_related_to_name', 'task_follow_up_notes__c']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='aircall_and_calls_by_person', schema='salesforce', columns=['call_duration_in_seconds', 'aircall__waiting_time__c', 'task_completed_datetime'], includes = ['aircall__detailed_type__c', 'task_subject', 'aircall__transferred_to__c', 'aircall__answered_by__c']) }}", "transaction": true, "index": null}, {"sql": "{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}", "transaction": true, "index": null}, {"sql": "{{ create_salesforce_patients_abt_view() }}", "transaction": true, "index": null}, {"sql": "{{ create_sirum_dwh_view() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "datawarehouse", "schema": "salesforce", "fqn": ["smartpill", "salesforce", "patients", "gold", "salesforce_patients_abt"], "unique_id": "model.smartpill.salesforce_patients_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "salesforce/patients/gold/salesforce_patients_abt.sql", "original_file_path": "models/salesforce/patients/gold/salesforce_patients_abt.sql", "name": "salesforce_patients_abt", "alias": "salesforce_patients_abt", "checksum": {"name": "sha256", "checksum": "6b8ad8b903fa660e9280a657fdbae0d4c6a5336b6f976d608e4faad33e2e2c46"}, "tags": ["salesforce"], "refs": [["patients_task"], ["patients_contact"], ["patients_gp_user__c"]], "sources": [["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"], ["dwh", "general_ledger_abt_view"], ["salesforce", "salesforce_patients_abt_view"], ["salesforce", "salesforce_donors_abt_view"], ["goodpill", "active_orders_abt_view"], ["goodpill", "goodpill_abt_view"], ["goodpill", "patient_comms_view"], ["goodpill", "gp_pharmacy_actions_abt"]], "metrics": [], "description": "salesforce patients abt.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/salesforce/patients/gold/models.yml", "compiled_path": "target/compiled/smartpill/models/salesforce/patients/gold/salesforce_patients_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "salesforce", "post-hook": ["{{ pg_create_index(this = this, name='task_by_person', schema='salesforce', columns=['task_id', 'task_completed_datetime'], includes = ['gp_user_related_to_name', 'task_follow_up_notes__c']) }}", "{{ pg_create_index(this = this, name='aircall_and_calls_by_person', schema='salesforce', columns=['call_duration_in_seconds', 'aircall__waiting_time__c', 'task_completed_datetime'], includes = ['aircall__detailed_type__c', 'task_subject', 'aircall__transferred_to__c', 'aircall__answered_by__c']) }}", "{{ pg_create_index(this = this, name='task_index', schema='salesforce', columns=['task_id']) }}", "{{ create_salesforce_patients_abt_view() }}", "{{ create_sirum_dwh_view() }}"]}, "created_at": 1703701092.183871, "compiled_sql": "\nwith task as (\n\tselect *\n    from \"datawarehouse\".salesforce.\"patients_task\"\n    where task_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ncontact as (\n\tselect *\n    from \"datawarehouse\".salesforce.\"patients_contact\" as c\n    where\n        c.contact_gp_patient_id_cp__c is not null\n        and c.contact_isdeleted = false\n        and contact_isdeleted = false\n        and c.contact_firstname not like '%Test%'\n        and c.contact_firstname not like '%test%'\n        and c.contact_name not like '%Test%'\n        and c.contact_name not like '%test%'\n        and c.contact_account_id = '0011M00002Mnf3QQAR' -- Good Pill Home Delivery\n),\ngp_user as (\n    select\n        Id as gp_user_id,\n        OwnerId as gp_user_ownerid,\n        Name as gp_user_name,\n        Role__c as gp_user_role__c,\n        Email__c as gp_user_email__c,\n        gp_user_airbyte_emitted_at\n    from \"datawarehouse\".salesforce.\"patients_gp_user__c\"\n    where isdeleted = false\n),\ngp_user_assigned_to as (\n\tselect * from gp_user\n),\ngp_user_related_to as (\n\tselect * from gp_user\n),\ntasks_x_contact as (\n    select *\n    from task\n    full outer join contact on contact.contact_id = task.task_contact_id\n),\nfinal as (\n    select\n    tasks_x_contact.*,\n\n\tgp_user_assigned_to.gp_user_id as gp_user_assigned_to_id,\n\tgp_user_assigned_to.gp_user_ownerid as gp_user_assigned_to_ownerid,\n    gp_user_assigned_to.gp_user_name as gp_user_assigned_to_name,\n\tgp_user_assigned_to.gp_user_role__c as gp_user_assigned_to_role__c,\n\tgp_user_assigned_to.gp_user_email__c as gp_user_assigned_to_email__c,\n\n    gp_user_related_to.gp_user_id as gp_user_related_to_id,\n\tgp_user_related_to.gp_user_ownerid as gp_user_related_to_ownerid,\n    gp_user_related_to.gp_user_name as gp_user_related_to_name,\n\tgp_user_related_to.gp_user_role__c as gp_user_related_to_role__c,\n\tgp_user_related_to.gp_user_email__c as gp_user_related_to_email__c,\n\n    greatest(\n        tasks_x_contact.task_airbyte_emitted_at,\n        tasks_x_contact.contact_airbyte_emitted_at,\n        gp_user_assigned_to.gp_user_airbyte_emitted_at,\n        gp_user_related_to.gp_user_airbyte_emitted_at\n    ) as _airbyte_emitted_at\n\n    from tasks_x_contact\n    left join gp_user_assigned_to on tasks_x_contact.task_assigned_to__c = gp_user_assigned_to.gp_user_id\n    left join gp_user_related_to on tasks_x_contact.task_what_id = gp_user_related_to.gp_user_Id\n)\nselect * from final\n\nwhere final._airbyte_emitted_at > (select max(t._airbyte_emitted_at) from \"datawarehouse\".salesforce.\"salesforce_patients_abt\" t)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".salesforce.\"salesforce_patients_abt\""}, "snapshot.smartpill.clinic_coupons_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='coupon_code',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('clinic_coupons') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.clinic_coupons"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "coupon_code", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "clinic_coupons", "clinic_coupons_snapshot"], "unique_id": "snapshot.smartpill.clinic_coupons_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/clinic_coupons.sql", "original_file_path": "snapshots/goodpill/bronze/clinic_coupons.sql", "name": "clinic_coupons_snapshot", "alias": "clinic_coupons_snapshot", "checksum": {"name": "sha256", "checksum": "235cc03fb9cf3867fca3ac65fed721106786c275903ad74f1473533d313b32de"}, "tags": [], "refs": [["clinic_coupons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "coupon_code", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.4680214, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"clinic_coupons\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"clinic_coupons_snapshot\""}, "snapshot.smartpill.clinics_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='clinic_name_cp',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('clinics') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_name_cp", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "clinics", "clinics_snapshot"], "unique_id": "snapshot.smartpill.clinics_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/clinics.sql", "original_file_path": "snapshots/goodpill/bronze/clinics.sql", "name": "clinics_snapshot", "alias": "clinics_snapshot", "checksum": {"name": "sha256", "checksum": "af047c76e15be47308f84e50ffb030dfae250cadfee6596adf3dbf1b07ad84a4"}, "tags": [], "refs": [["clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "clinic_name_cp", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.4799376, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"clinics\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"clinics_snapshot\""}, "snapshot.smartpill.drugs_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='drug_generic',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('drugs') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.drugs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "drug_generic", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "drugs", "drugs_snapshot"], "unique_id": "snapshot.smartpill.drugs_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/drugs.sql", "original_file_path": "snapshots/goodpill/bronze/drugs.sql", "name": "drugs_snapshot", "alias": "drugs_snapshot", "checksum": {"name": "sha256", "checksum": "de0ecd28eca3467d14cff115f3e0c714ee11012d8bf62a6f8e094f3c993f599a"}, "tags": [], "refs": [["drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "drug_generic", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.5554388, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"drugs\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"drugs_snapshot\""}, "snapshot.smartpill.dw_clinic_groups_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='clinic_group_id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('dw_clinic_groups') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.dw_clinic_groups"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_group_id", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_clinic_groups", "dw_clinic_groups_snapshot"], "unique_id": "snapshot.smartpill.dw_clinic_groups_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_clinic_groups.sql", "original_file_path": "snapshots/goodpill/bronze/dw_clinic_groups.sql", "name": "dw_clinic_groups_snapshot", "alias": "dw_clinic_groups_snapshot", "checksum": {"name": "sha256", "checksum": "887fcf0c3e9e0266dbff9fde615b5135a2bc3c8bef5561ae2d839aadce2a42fa"}, "tags": [], "refs": [["dw_clinic_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "clinic_group_id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.5622168, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"dw_clinic_groups\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_clinic_groups_snapshot\""}, "snapshot.smartpill.dw_clinics_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='clinic_id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('dw_clinics') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.dw_clinics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "clinic_id", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_clinics", "dw_clinics_snapshot"], "unique_id": "snapshot.smartpill.dw_clinics_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_clinics.sql", "original_file_path": "snapshots/goodpill/bronze/dw_clinics.sql", "name": "dw_clinics_snapshot", "alias": "dw_clinics_snapshot", "checksum": {"name": "sha256", "checksum": "fa2a653905d2361a6082e685433d98a91f45906bf95a30c106207d5478c06200"}, "tags": [], "refs": [["dw_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "clinic_id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.5680397, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"dw_clinics\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_clinics_snapshot\""}, "snapshot.smartpill.dw_providers_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='provider_id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('dw_providers') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.dw_providers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "provider_id", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_providers", "dw_providers_snapshot"], "unique_id": "snapshot.smartpill.dw_providers_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_providers.sql", "original_file_path": "snapshots/goodpill/bronze/dw_providers.sql", "name": "dw_providers_snapshot", "alias": "dw_providers_snapshot", "checksum": {"name": "sha256", "checksum": "8067cfbefe05832d6a7be585a8fdb40dfbab3488086cb8fe822492a47e6ba46a"}, "tags": [], "refs": [["dw_providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "provider_id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.5735755, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"dw_providers\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_providers_snapshot\""}, "snapshot.smartpill.dw_providers_clinics_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='provider_clinic_id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('dw_providers_clinics') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.dw_providers_clinics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "provider_clinic_id", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "dw_providers_clinics", "dw_providers_clinics_snapshot"], "unique_id": "snapshot.smartpill.dw_providers_clinics_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/dw_providers_clinics.sql", "original_file_path": "snapshots/goodpill/bronze/dw_providers_clinics.sql", "name": "dw_providers_clinics_snapshot", "alias": "dw_providers_clinics_snapshot", "checksum": {"name": "sha256", "checksum": "29af9b76ce7afdc168242c4789dc0b68aac904f3956903ea60bb176e8491b824"}, "tags": [], "refs": [["dw_providers_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "provider_clinic_id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.5790482, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"dw_providers_clinics\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"dw_providers_clinics_snapshot\""}, "snapshot.smartpill.order_items_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='line_id',\n\n      strategy='check',\n      check_cols=['updated_at','pend_initial_at','pend_updated_at', 'unpended_at'],\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('order_items') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.order_items"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "line_id", "on_schema_change": "ignore", "grants": {}, "strategy": "check", "target_schema": "goodpill", "target_database": "datawarehouse", "check_cols": ["updated_at", "pend_initial_at", "pend_updated_at", "unpended_at"], "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "order_items", "order_items_snapshot"], "unique_id": "snapshot.smartpill.order_items_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/order_items.sql", "original_file_path": "snapshots/goodpill/bronze/order_items.sql", "name": "order_items_snapshot", "alias": "order_items_snapshot", "checksum": {"name": "sha256", "checksum": "a80aa5436e9734a8b43255b6b40c5083ff181ff3cddeb868996a6b3f15c59dc8"}, "tags": [], "refs": [["order_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "line_id", "strategy": "check", "check_cols": ["updated_at", "pend_initial_at", "pend_updated_at", "unpended_at"], "invalidate_hard_deletes": true}, "created_at": 1703701090.5845048, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"order_items\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"order_items_snapshot\""}, "snapshot.smartpill.orders_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='invoice_number',\n      strategy='check',\n      check_cols=['updated_at', 'order_date_updated','order_date_changed', 'payment_default_updated_at', 'rx_group_removals_checked_at', 'rx_group_additions_checked_at'],\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('orders') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "invoice_number", "on_schema_change": "ignore", "grants": {}, "strategy": "check", "target_schema": "goodpill", "target_database": "datawarehouse", "check_cols": ["updated_at", "order_date_updated", "order_date_changed", "payment_default_updated_at", "rx_group_removals_checked_at", "rx_group_additions_checked_at"], "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "orders", "orders_snapshot"], "unique_id": "snapshot.smartpill.orders_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/orders.sql", "original_file_path": "snapshots/goodpill/bronze/orders.sql", "name": "orders_snapshot", "alias": "orders_snapshot", "checksum": {"name": "sha256", "checksum": "53362e07fa67009f7e90a5b2cdfa11513804689e1c6c1e9db70b4ad5dafd10d6"}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "invoice_number", "strategy": "check", "check_cols": ["updated_at", "order_date_updated", "order_date_changed", "payment_default_updated_at", "rx_group_removals_checked_at", "rx_group_additions_checked_at"], "invalidate_hard_deletes": true}, "created_at": 1703701090.5917215, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"orders\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"orders_snapshot\""}, "snapshot.smartpill.patients_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='patient_id_cp',\n\n      strategy='check',\n      check_cols=['first_name', 'last_name', 'birth_date', 'language', 'phone1', 'phone2', 'patient_address1', 'patient_address2', 'patient_city', 'patient_state', 'patient_zip', 'payment_card_type', 'payment_card_last4', 'payment_card_date_expired', 'payment_card_autopay', 'payment_method_default', 'payment_coupon', 'tracking_coupon', 'patient_date_registered', 'patient_date_reviewed', 'patient_date_added', 'patient_date_changed', 'patient_date_first_rx_received', 'patient_date_first_dispensed', 'patient_date_first_expected_by', 'refills_used', 'pharmacy_npi', 'pharmacy_name', 'pharmacy_phone', 'pharmacy_fax', 'pharmacy_address', 'patient_inactive', 'patient_deleted', 'patient_id_wc', 'email', 'patient_autofill', 'patient_note', 'initial_invoice_number', 'allergies_none', 'allergies_cephalosporins', 'allergies_sulfa', 'allergies_aspirin', 'allergies_penicillin', 'allergies_erythromycin', 'allergies_codeine', 'allergies_nsaids', 'allergies_salicylates', 'allergies_azithromycin', 'allergies_amoxicillin', 'allergies_tetracycline', 'allergies_other', 'medications_other', 'patient_date_updated'],\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('patients') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.patients"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id_cp", "on_schema_change": "ignore", "grants": {}, "strategy": "check", "target_schema": "goodpill", "target_database": "datawarehouse", "check_cols": ["first_name", "last_name", "birth_date", "language", "phone1", "phone2", "patient_address1", "patient_address2", "patient_city", "patient_state", "patient_zip", "payment_card_type", "payment_card_last4", "payment_card_date_expired", "payment_card_autopay", "payment_method_default", "payment_coupon", "tracking_coupon", "patient_date_registered", "patient_date_reviewed", "patient_date_added", "patient_date_changed", "patient_date_first_rx_received", "patient_date_first_dispensed", "patient_date_first_expected_by", "refills_used", "pharmacy_npi", "pharmacy_name", "pharmacy_phone", "pharmacy_fax", "pharmacy_address", "patient_inactive", "patient_deleted", "patient_id_wc", "email", "patient_autofill", "patient_note", "initial_invoice_number", "allergies_none", "allergies_cephalosporins", "allergies_sulfa", "allergies_aspirin", "allergies_penicillin", "allergies_erythromycin", "allergies_codeine", "allergies_nsaids", "allergies_salicylates", "allergies_azithromycin", "allergies_amoxicillin", "allergies_tetracycline", "allergies_other", "medications_other", "patient_date_updated"], "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "patients", "patients_snapshot"], "unique_id": "snapshot.smartpill.patients_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/patients.sql", "original_file_path": "snapshots/goodpill/bronze/patients.sql", "name": "patients_snapshot", "alias": "patients_snapshot", "checksum": {"name": "sha256", "checksum": "0f13fe4e86a3761dac657d0bd6273eb80a72d725b4b41a4d42bb468790b10de7"}, "tags": [], "refs": [["patients"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "patient_id_cp", "strategy": "check", "check_cols": ["first_name", "last_name", "birth_date", "language", "phone1", "phone2", "patient_address1", "patient_address2", "patient_city", "patient_state", "patient_zip", "payment_card_type", "payment_card_last4", "payment_card_date_expired", "payment_card_autopay", "payment_method_default", "payment_coupon", "tracking_coupon", "patient_date_registered", "patient_date_reviewed", "patient_date_added", "patient_date_changed", "patient_date_first_rx_received", "patient_date_first_dispensed", "patient_date_first_expected_by", "refills_used", "pharmacy_npi", "pharmacy_name", "pharmacy_phone", "pharmacy_fax", "pharmacy_address", "patient_inactive", "patient_deleted", "patient_id_wc", "email", "patient_autofill", "patient_note", "initial_invoice_number", "allergies_none", "allergies_cephalosporins", "allergies_sulfa", "allergies_aspirin", "allergies_penicillin", "allergies_erythromycin", "allergies_codeine", "allergies_nsaids", "allergies_salicylates", "allergies_azithromycin", "allergies_amoxicillin", "allergies_tetracycline", "allergies_other", "medications_other", "patient_date_updated"], "invalidate_hard_deletes": true}, "created_at": 1703701090.5989985, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"patients\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patients_snapshot\""}, "snapshot.smartpill.providers_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='npi',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('providers') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.providers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "npi", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "providers", "providers_snapshot"], "unique_id": "snapshot.smartpill.providers_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/providers.sql", "original_file_path": "snapshots/goodpill/bronze/providers.sql", "name": "providers_snapshot", "alias": "providers_snapshot", "checksum": {"name": "sha256", "checksum": "d89d7b492764883d87761cbd7f8ad140e76775e34ac20e8ca82dc5d930c2f98a"}, "tags": [], "refs": [["providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "npi", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.6071255, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"providers\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"providers_snapshot\""}, "snapshot.smartpill.rxs_grouped_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='group_id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('rxs_grouped') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.rxs_grouped"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "group_id", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "rxs_grouped", "rxs_grouped_snapshot"], "unique_id": "snapshot.smartpill.rxs_grouped_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/rxs_grouped.sql", "original_file_path": "snapshots/goodpill/bronze/rxs_grouped.sql", "name": "rxs_grouped_snapshot", "alias": "rxs_grouped_snapshot", "checksum": {"name": "sha256", "checksum": "bf78912b60a07533dd82c982171dc9e3cb165ad9da115f4ec2526c811c8aaa13"}, "tags": [], "refs": [["rxs_grouped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "group_id", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.6126688, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"rxs_grouped\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"rxs_grouped_snapshot\""}, "snapshot.smartpill.rxs_single_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema='goodpill',\n      unique_key='rx_number',\n      strategy='timestamp',\n      updated_at='updated_at',\n      invalidate_hard_deletes=True\n    )\n}}\n\nselect * from {{ ref('rxs_single') }}\n\n", "compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.smartpill.rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "snapshot", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "rx_number", "on_schema_change": "ignore", "grants": {}, "strategy": "timestamp", "target_schema": "goodpill", "target_database": "datawarehouse", "updated_at": "updated_at", "invalidate_hard_deletes": true, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "goodpill", "bronze", "rxs_single", "rxs_single_snapshot"], "unique_id": "snapshot.smartpill.rxs_single_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "goodpill/bronze/rxs_single.sql", "original_file_path": "snapshots/goodpill/bronze/rxs_single.sql", "name": "rxs_single_snapshot", "alias": "rxs_single_snapshot", "checksum": {"name": "sha256", "checksum": "632ee95795a1f113f6343959a69dca735bd10b35ed707256b70713f249fca2da"}, "tags": [], "refs": [["rxs_single"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "{{ target.database }}", "target_schema": "goodpill", "unique_key": "rx_number", "strategy": "timestamp", "updated_at": "updated_at", "invalidate_hard_deletes": true}, "created_at": 1703701090.6182077, "compiled_sql": "\n\n\n\nselect * from \"datawarehouse\".goodpill.\"rxs_single\"\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"rxs_single_snapshot\""}, "seed.smartpill.patient_events": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "goodpill", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "goodpill", "fqn": ["smartpill", "patient_events"], "unique_id": "seed.smartpill.patient_events", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "patient_events.csv", "original_file_path": "seeds/patient_events.csv", "name": "patient_events", "alias": "patient_events", "checksum": {"name": "sha256", "checksum": "369be1a70bfe7cdad9f2d39f06e658578329e5f09afcda0a4a1cc56a5e0c197e"}, "tags": ["goodpill"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "goodpill"}, "created_at": 1703701090.6722956, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".goodpill.\"patient_events\""}, "test.smartpill.unique_v2_accounts_id.3a8c7b7210": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_accounts_id"], "unique_id": "test.smartpill.unique_v2_accounts_id.3a8c7b7210", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_accounts_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_accounts_id", "alias": "unique_v2_accounts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_accounts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.8579607, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_accounts\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_accounts"}, "test.smartpill.not_empty_v2_accounts_.51135668b6": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_accounts_"], "unique_id": "test.smartpill.not_empty_v2_accounts_.51135668b6", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_accounts_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_accounts_", "alias": "not_empty_v2_accounts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_accounts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.8648703, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_accounts\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_accounts"}, "test.smartpill.unique_v2_accounts_ordered_id.54621e9db9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_accounts_ordered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_accounts_ordered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_accounts_ordered_id"], "unique_id": "test.smartpill.unique_v2_accounts_ordered_id.54621e9db9", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_accounts_ordered_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_accounts_ordered_id", "alias": "unique_v2_accounts_ordered_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_accounts_ordered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_accounts_ordered_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.8802562, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_accounts_ordered\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_accounts_ordered"}, "test.smartpill.not_empty_v2_accounts_ordered_.c1a644b2c6": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_accounts_ordered')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_accounts_ordered"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_accounts_ordered_"], "unique_id": "test.smartpill.not_empty_v2_accounts_ordered_.c1a644b2c6", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_accounts_ordered_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_accounts_ordered_", "alias": "not_empty_v2_accounts_ordered_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_accounts_ordered"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_accounts_ordered_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.8829434, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_accounts_ordered\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_accounts_ordered"}, "test.smartpill.unique_v2_drug_generics_id.6bbab260eb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_drug_generics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drug_generics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_drug_generics_id"], "unique_id": "test.smartpill.unique_v2_drug_generics_id.6bbab260eb", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_drug_generics_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_drug_generics_id", "alias": "unique_v2_drug_generics_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drug_generics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_drug_generics_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.889361, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_drug_generics\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_drug_generics"}, "test.smartpill.not_empty_v2_drug_generics_.2f09c49309": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_drug_generics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drug_generics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_drug_generics_"], "unique_id": "test.smartpill.not_empty_v2_drug_generics_.2f09c49309", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_drug_generics_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_drug_generics_", "alias": "not_empty_v2_drug_generics_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drug_generics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_drug_generics_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.8930278, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_drug_generics\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_drug_generics"}, "test.smartpill.unique_v2_drug_gsns_id.1ea442144d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_drug_gsns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drug_gsns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_drug_gsns_id"], "unique_id": "test.smartpill.unique_v2_drug_gsns_id.1ea442144d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_drug_gsns_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_drug_gsns_id", "alias": "unique_v2_drug_gsns_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drug_gsns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_drug_gsns_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9009204, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_drug_gsns\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_drug_gsns"}, "test.smartpill.not_empty_v2_drug_gsns_.de54fd18e7": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_drug_gsns')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drug_gsns"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_drug_gsns_"], "unique_id": "test.smartpill.not_empty_v2_drug_gsns_.de54fd18e7", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_drug_gsns_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_drug_gsns_", "alias": "not_empty_v2_drug_gsns_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drug_gsns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_drug_gsns_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9035285, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_drug_gsns\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_drug_gsns"}, "test.smartpill.unique_v2_drugs_id.b546286cbe": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_drugs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_drugs_id"], "unique_id": "test.smartpill.unique_v2_drugs_id.b546286cbe", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_drugs_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_drugs_id", "alias": "unique_v2_drugs_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_drugs_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9103124, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_drugs\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_drugs"}, "test.smartpill.not_empty_v2_drugs_.b331f2e8ae": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_drugs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_drugs_"], "unique_id": "test.smartpill.not_empty_v2_drugs_.b331f2e8ae", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_drugs_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_drugs_", "alias": "not_empty_v2_drugs_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_drugs_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9132652, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_drugs\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_drugs"}, "test.smartpill.unique_v2_failed_imports_id.9466209e5f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_failed_imports')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_failed_imports"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_failed_imports_id"], "unique_id": "test.smartpill.unique_v2_failed_imports_id.9466209e5f", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_failed_imports_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_failed_imports_id", "alias": "unique_v2_failed_imports_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_failed_imports"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_failed_imports_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.91917, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_failed_imports\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_failed_imports"}, "test.smartpill.not_empty_v2_failed_imports_.4071632124": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_failed_imports')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_failed_imports"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_failed_imports_"], "unique_id": "test.smartpill.not_empty_v2_failed_imports_.4071632124", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_failed_imports_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_failed_imports_", "alias": "not_empty_v2_failed_imports_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_failed_imports"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_failed_imports_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9225845, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_failed_imports\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_failed_imports"}, "test.smartpill.unique_v2_shipments_id.d00a275819": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_shipments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_shipments_id"], "unique_id": "test.smartpill.unique_v2_shipments_id.d00a275819", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_shipments_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_shipments_id", "alias": "unique_v2_shipments_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_shipments_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9285786, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_shipments\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_shipments"}, "test.smartpill.not_empty_v2_shipments_.acab72c220": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_shipments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_shipments_"], "unique_id": "test.smartpill.not_empty_v2_shipments_.acab72c220", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_shipments_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_shipments_", "alias": "not_empty_v2_shipments_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_shipments_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9318426, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_shipments\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_shipments"}, "test.smartpill.not_empty_v2_sync_status_.5f30ac6bcf": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_sync_status')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_sync_status"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_sync_status_"], "unique_id": "test.smartpill.not_empty_v2_sync_status_.5f30ac6bcf", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_sync_status_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_sync_status_", "alias": "not_empty_v2_sync_status_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_sync_status"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_sync_status_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9379218, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_sync_status\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_sync_status"}, "test.smartpill.unique_v2_shipment_items_id.a41caec0e9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_shipment_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipment_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_shipment_items_id"], "unique_id": "test.smartpill.unique_v2_shipment_items_id.a41caec0e9", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_shipment_items_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_shipment_items_id", "alias": "unique_v2_shipment_items_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipment_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_shipment_items_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9434187, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_shipment_items\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_shipment_items"}, "test.smartpill.not_empty_v2_shipment_items_.f5089b01f8": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_shipment_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipment_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_shipment_items_"], "unique_id": "test.smartpill.not_empty_v2_shipment_items_.f5089b01f8", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_shipment_items_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_shipment_items_", "alias": "not_empty_v2_shipment_items_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipment_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_shipment_items_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9454646, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_shipment_items\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_shipment_items"}, "test.smartpill.unique_v2_shipment_item_stages_id.9253b51d35": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('v2_shipment_item_stages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipment_item_stages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "unique_v2_shipment_item_stages_id"], "unique_id": "test.smartpill.unique_v2_shipment_item_stages_id.9253b51d35", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_v2_shipment_item_stages_id.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "unique_v2_shipment_item_stages_id", "alias": "unique_v2_shipment_item_stages_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipment_item_stages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/unique_v2_shipment_item_stages_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9508924, "compiled_sql": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".cortex.\"v2_shipment_item_stages\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.v2_shipment_item_stages"}, "test.smartpill.not_empty_v2_shipment_item_stages_.16d9b6ccb9": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('v2_shipment_item_stages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.v2_shipment_item_stages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "cortex", "bronze", "not_empty_v2_shipment_item_stages_"], "unique_id": "test.smartpill.not_empty_v2_shipment_item_stages_.16d9b6ccb9", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_v2_shipment_item_stages_.sql", "original_file_path": "models/cortex/bronze/models.yml", "name": "not_empty_v2_shipment_item_stages_", "alias": "not_empty_v2_shipment_item_stages_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["v2_shipment_item_stages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/cortex/bronze/models.yml/not_empty_v2_shipment_item_stages_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701090.9532955, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".cortex.\"v2_shipment_item_stages\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.v2_shipment_item_stages"}, "test.smartpill.not_empty_clinic_coupons_.37a00908df": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('clinic_coupons')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.clinic_coupons"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_clinic_coupons_"], "unique_id": "test.smartpill.not_empty_clinic_coupons_.37a00908df", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_clinic_coupons_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_clinic_coupons_", "alias": "not_empty_clinic_coupons_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["clinic_coupons"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_clinic_coupons_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3096316, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"clinic_coupons\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.clinic_coupons"}, "test.smartpill.not_empty_clinics_.3cfce17578": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('clinics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_clinics_"], "unique_id": "test.smartpill.not_empty_clinics_.3cfce17578", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_clinics_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_clinics_", "alias": "not_empty_clinics_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_clinics_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3159747, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"clinics\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.clinics"}, "test.smartpill.not_empty_dw_clinics_.567803ea76": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('dw_clinics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.dw_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_dw_clinics_"], "unique_id": "test.smartpill.not_empty_dw_clinics_.567803ea76", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_dw_clinics_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_dw_clinics_", "alias": "not_empty_dw_clinics_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dw_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_dw_clinics_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3226395, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"dw_clinics\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.dw_clinics"}, "test.smartpill.not_empty_dw_clinic_groups_.4973771295": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('dw_clinic_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.dw_clinic_groups"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_dw_clinic_groups_"], "unique_id": "test.smartpill.not_empty_dw_clinic_groups_.4973771295", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_dw_clinic_groups_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_dw_clinic_groups_", "alias": "not_empty_dw_clinic_groups_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dw_clinic_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_dw_clinic_groups_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3290722, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"dw_clinic_groups\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.dw_clinic_groups"}, "test.smartpill.not_empty_dw_providers_.216d2d8ae8": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('dw_providers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.dw_providers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_dw_providers_"], "unique_id": "test.smartpill.not_empty_dw_providers_.216d2d8ae8", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_dw_providers_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_dw_providers_", "alias": "not_empty_dw_providers_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dw_providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_dw_providers_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3351943, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"dw_providers\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.dw_providers"}, "test.smartpill.not_empty_dw_providers_clinics_.395aa93f31": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('dw_providers_clinics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.dw_providers_clinics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_dw_providers_clinics_"], "unique_id": "test.smartpill.not_empty_dw_providers_clinics_.395aa93f31", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_dw_providers_clinics_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_dw_providers_clinics_", "alias": "not_empty_dw_providers_clinics_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dw_providers_clinics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_dw_providers_clinics_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.341262, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"dw_providers_clinics\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.dw_providers_clinics"}, "test.smartpill.not_empty_drugs_.508222ea4d": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('drugs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.drugs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_drugs_"], "unique_id": "test.smartpill.not_empty_drugs_.508222ea4d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_drugs_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_drugs_", "alias": "not_empty_drugs_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["drugs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_drugs_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3466039, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"drugs\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.drugs"}, "test.smartpill.not_empty_order_items_.7cf03218ba": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('order_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.order_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_order_items_"], "unique_id": "test.smartpill.not_empty_order_items_.7cf03218ba", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_order_items_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_order_items_", "alias": "not_empty_order_items_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["order_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_order_items_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3519235, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"order_items\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.order_items"}, "test.smartpill.not_empty_orders_.a22716be47": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_orders_"], "unique_id": "test.smartpill.not_empty_orders_.a22716be47", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_orders_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_orders_", "alias": "not_empty_orders_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_orders_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3579865, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"orders\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.orders"}, "test.smartpill.not_empty_providers_.865a437d88": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('providers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.providers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_providers_"], "unique_id": "test.smartpill.not_empty_providers_.865a437d88", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_providers_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_providers_", "alias": "not_empty_providers_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["providers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_providers_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3631117, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"providers\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.providers"}, "test.smartpill.not_empty_rxs_grouped_.8975a78d37": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('rxs_grouped')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.rxs_grouped"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_rxs_grouped_"], "unique_id": "test.smartpill.not_empty_rxs_grouped_.8975a78d37", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_rxs_grouped_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_rxs_grouped_", "alias": "not_empty_rxs_grouped_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["rxs_grouped"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_rxs_grouped_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3692951, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"rxs_grouped\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.rxs_grouped"}, "test.smartpill.not_empty_rxs_single_.a0b28942c2": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('rxs_single')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_rxs_single_"], "unique_id": "test.smartpill.not_empty_rxs_single_.a0b28942c2", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_rxs_single_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_rxs_single_", "alias": "not_empty_rxs_single_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["rxs_single"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_rxs_single_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3749228, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"rxs_single\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.rxs_single"}, "test.smartpill.not_empty_patients_.15ff0c36f5": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patients')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_patients_"], "unique_id": "test.smartpill.not_empty_patients_.15ff0c36f5", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patients_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_patients_", "alias": "not_empty_patients_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_patients_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3804262, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"patients\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patients"}, "test.smartpill.not_empty_patient_comms_.a293dd91b1": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patient_comms')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patient_comms"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_patient_comms_"], "unique_id": "test.smartpill.not_empty_patient_comms_.a293dd91b1", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patient_comms_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_patient_comms_", "alias": "not_empty_patient_comms_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patient_comms"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_patient_comms_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3861146, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"patient_comms\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patient_comms"}, "test.smartpill.not_empty_patient_merge_cp_.a7b4d3419b": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patient_merge_cp')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patient_merge_cp"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_patient_merge_cp_"], "unique_id": "test.smartpill.not_empty_patient_merge_cp_.a7b4d3419b", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patient_merge_cp_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_patient_merge_cp_", "alias": "not_empty_patient_merge_cp_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patient_merge_cp"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_patient_merge_cp_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3913074, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"patient_merge_cp\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patient_merge_cp"}, "test.smartpill.not_empty_gp_order_items_inventory_items_.2e64acd642": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('gp_order_items_inventory_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.gp_order_items_inventory_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_gp_order_items_inventory_items_"], "unique_id": "test.smartpill.not_empty_gp_order_items_inventory_items_.2e64acd642", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_gp_order_items_inventory_items_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_gp_order_items_inventory_items_", "alias": "not_empty_gp_order_items_inventory_items_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gp_order_items_inventory_items"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_gp_order_items_inventory_items_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.3986306, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"gp_order_items_inventory_items\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gp_order_items_inventory_items"}, "test.smartpill.not_empty_gp_pend_group_.3e24204e52": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('gp_pend_group')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.gp_pend_group"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_gp_pend_group_"], "unique_id": "test.smartpill.not_empty_gp_pend_group_.3e24204e52", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_gp_pend_group_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_gp_pend_group_", "alias": "not_empty_gp_pend_group_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gp_pend_group"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_gp_pend_group_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.404483, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"gp_pend_group\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gp_pend_group"}, "test.smartpill.not_empty_gp_pharmacy_actions_.168af80755": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('gp_pharmacy_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.gp_pharmacy_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_gp_pharmacy_actions_"], "unique_id": "test.smartpill.not_empty_gp_pharmacy_actions_.168af80755", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_gp_pharmacy_actions_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_gp_pharmacy_actions_", "alias": "not_empty_gp_pharmacy_actions_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gp_pharmacy_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_gp_pharmacy_actions_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.4102316, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"gp_pharmacy_actions\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gp_pharmacy_actions"}, "test.smartpill.not_empty_gp_stock_live_.b5dacacee7": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('gp_stock_live')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.gp_stock_live"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "goodpill", "bronze", "not_empty_gp_stock_live_"], "unique_id": "test.smartpill.not_empty_gp_stock_live_.b5dacacee7", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_gp_stock_live_.sql", "original_file_path": "models/goodpill/bronze/models.yml", "name": "not_empty_gp_stock_live_", "alias": "not_empty_gp_stock_live_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gp_stock_live"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/goodpill/bronze/models.yml/not_empty_gp_stock_live_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.4161382, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".goodpill.\"gp_stock_live\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.gp_stock_live"}, "test.smartpill.not_null_accounts_id.521ffc790d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_accounts_id"], "unique_id": "test.smartpill.not_null_accounts_id.521ffc790d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_accounts_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_accounts_id", "alias": "not_null_accounts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_accounts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.686387, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.accounts"}, "test.smartpill.not_null_accounts_created_at.838209f9ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_accounts_created_at"], "unique_id": "test.smartpill.not_null_accounts_created_at.838209f9ec", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_accounts_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_accounts_created_at", "alias": "not_null_accounts_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_accounts_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.6890194, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.accounts"}, "test.smartpill.not_null_accounts_updated_at.14fb57dff4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_accounts_updated_at"], "unique_id": "test.smartpill.not_null_accounts_updated_at.14fb57dff4", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_accounts_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_accounts_updated_at", "alias": "not_null_accounts_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_accounts_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.6917841, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.accounts"}, "test.smartpill.not_null_accounts__hash_id.598ab47030": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_accounts__hash_id"], "unique_id": "test.smartpill.not_null_accounts__hash_id.598ab47030", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_accounts__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_accounts__hash_id", "alias": "not_null_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_accounts__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.6945746, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.accounts"}, "test.smartpill.unique_accounts__hash_id.dd80c713cf": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_accounts__hash_id"], "unique_id": "test.smartpill.unique_accounts__hash_id.dd80c713cf", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_accounts__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_accounts__hash_id", "alias": "unique_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_accounts__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.698568, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.accounts"}, "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "parent_account_id", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_accounts_parent_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_accounts_parent_account_id__id__ref_accounts_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_accounts_parent_account_id__id__ref_accounts_", "alias": "relationships_accounts_parent_account_id__id__ref_accounts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_accounts_parent_account_id__id__ref_accounts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7015007, "compiled_sql": "\n    \n    \n\nwith child as (\n    select parent_account_id as from_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n    where parent_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "parent_account_id", "file_key_name": "models.accounts"}, "test.smartpill.not_null_accounts_balance.0e14c0a4ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ get_where_subquery(ref('accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_accounts_balance"], "unique_id": "test.smartpill.not_null_accounts_balance.0e14c0a4ac", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_accounts_balance.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_accounts_balance", "alias": "not_null_accounts_balance", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_accounts_balance.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7135015, "compiled_sql": "\n    \n    \n\n\n\nselect balance\nfrom \"datawarehouse\".quickbooks.\"accounts\"\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance", "file_key_name": "models.accounts"}, "test.smartpill.not_null_bill_payments_id.5457ffd4bd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bill_payments_id"], "unique_id": "test.smartpill.not_null_bill_payments_id.5457ffd4bd", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bill_payments_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bill_payments_id", "alias": "not_null_bill_payments_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bill_payments_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7158892, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"bill_payments\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.bill_payments"}, "test.smartpill.not_null_bill_payments_created_at.33f9f3d309": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bill_payments_created_at"], "unique_id": "test.smartpill.not_null_bill_payments_created_at.33f9f3d309", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bill_payments_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bill_payments_created_at", "alias": "not_null_bill_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bill_payments_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.718362, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"bill_payments\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.bill_payments"}, "test.smartpill.not_null_bill_payments_updated_at.d4039c9771": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bill_payments_updated_at"], "unique_id": "test.smartpill.not_null_bill_payments_updated_at.d4039c9771", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bill_payments_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bill_payments_updated_at", "alias": "not_null_bill_payments_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bill_payments_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7220979, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"bill_payments\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.bill_payments"}, "test.smartpill.not_null_bill_payments__hash_id.c202a9b218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bill_payments__hash_id"], "unique_id": "test.smartpill.not_null_bill_payments__hash_id.c202a9b218", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bill_payments__hash_id", "alias": "not_null_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bill_payments__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7269788, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"bill_payments\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.bill_payments"}, "test.smartpill.unique_bill_payments__hash_id.94aa7f831e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_bill_payments__hash_id"], "unique_id": "test.smartpill.unique_bill_payments__hash_id.94aa7f831e", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_bill_payments__hash_id", "alias": "unique_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_bill_payments__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7298868, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"bill_payments\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.bill_payments"}, "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('bills')", "field": "id", "column_name": "bill_payment_id", "model": "{{ get_where_subquery(ref('bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills", "model.smartpill.bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bill_payments_lines_bill_payment_id__id__ref_bills_"], "unique_id": "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bill_payments_lines_bill_payment_id__id__ref_bills_", "alias": "relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"], ["bill_payments_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_bill_payments_li_fe12ece821dbb9d9b40ffda835d121e5"}, "created_at": 1703701091.7341619, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_payment_id as from_field\n    from \"datawarehouse\".quickbooks.\"bill_payments_lines\"\n    where bill_payment_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id", "file_key_name": "models.bill_payments_lines"}, "test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_bill_payments_li_e230897605786db6cf439372eae38eac\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('bill_payments')", "field": "_hash_id", "column_name": "_bill_payment_hash_id", "model": "{{ get_where_subquery(ref('bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bill_payments", "model.smartpill.bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_bill_payments_li_e230897605786db6cf439372eae38eac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_"], "unique_id": "test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bill_payments_li_e230897605786db6cf439372eae38eac.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_", "alias": "relationships_bill_payments_li_e230897605786db6cf439372eae38eac", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bill_payments"], ["bill_payments_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bill_payments_li_e230897605786db6cf439372eae38eac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_bill_payments_li_e230897605786db6cf439372eae38eac"}, "created_at": 1703701091.7430978, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _bill_payment_hash_id as from_field\n    from \"datawarehouse\".quickbooks.\"bill_payments_lines\"\n    where _bill_payment_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".quickbooks.\"bill_payments\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_payment_hash_id", "file_key_name": "models.bill_payments_lines"}, "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('bills')", "field": "id", "column_name": "bill_id", "model": "{{ get_where_subquery(ref('bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills", "model.smartpill.bill_payments_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bill_payments_lines_bill_id__id__ref_bills_"], "unique_id": "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bill_payments_lines_bill_id__id__ref_bills_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bill_payments_lines_bill_id__id__ref_bills_", "alias": "relationships_bill_payments_lines_bill_id__id__ref_bills_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"], ["bill_payments_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bill_payments_lines_bill_id__id__ref_bills_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7515595, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_id as from_field\n    from \"datawarehouse\".quickbooks.\"bill_payments_lines\"\n    where bill_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id", "file_key_name": "models.bill_payments_lines"}, "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('deposits')", "field": "id", "column_name": "deposit_id", "model": "{{ get_where_subquery(ref('bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits", "model.smartpill.bill_payments_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bill_payments_lines_deposit_id__id__ref_deposits_"], "unique_id": "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bill_payments_lines_deposit_id__id__ref_deposits_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bill_payments_lines_deposit_id__id__ref_deposits_", "alias": "relationships_bill_payments_lines_deposit_id__id__ref_deposits_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"], ["bill_payments_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bill_payments_lines_deposit_id__id__ref_deposits_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7593622, "compiled_sql": "\n    \n    \n\nwith child as (\n    select deposit_id as from_field\n    from \"datawarehouse\".quickbooks.\"bill_payments_lines\"\n    where deposit_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"deposits\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id", "file_key_name": "models.bill_payments_lines"}, "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('journal_entries')", "field": "id", "column_name": "journal_entry_id", "model": "{{ get_where_subquery(ref('bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries", "model.smartpill.bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_"], "unique_id": "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_", "alias": "relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"], ["bill_payments_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_bill_payments_li_6fc906e5c1455c11c73110fb03c6bdbf"}, "created_at": 1703701091.7670848, "compiled_sql": "\n    \n    \n\nwith child as (\n    select journal_entry_id as from_field\n    from \"datawarehouse\".quickbooks.\"bill_payments_lines\"\n    where journal_entry_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"journal_entries\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id", "file_key_name": "models.bill_payments_lines"}, "test.smartpill.not_null_bills_id.675a636e7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bills_id"], "unique_id": "test.smartpill.not_null_bills_id.675a636e7d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bills_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bills_id", "alias": "not_null_bills_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bills_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7907853, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"bills\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.bills"}, "test.smartpill.not_null_bills_created_at.d062431487": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bills_created_at"], "unique_id": "test.smartpill.not_null_bills_created_at.d062431487", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bills_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bills_created_at", "alias": "not_null_bills_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bills_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.794979, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"bills\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.bills"}, "test.smartpill.not_null_bills_updated_at.2f034195c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bills_updated_at"], "unique_id": "test.smartpill.not_null_bills_updated_at.2f034195c7", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bills_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bills_updated_at", "alias": "not_null_bills_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bills_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.7981896, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"bills\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.bills"}, "test.smartpill.not_null_bills__hash_id.cd4ca98a0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_bills__hash_id"], "unique_id": "test.smartpill.not_null_bills__hash_id.cd4ca98a0b", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_bills__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_bills__hash_id", "alias": "not_null_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_bills__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8012261, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"bills\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.bills"}, "test.smartpill.unique_bills__hash_id.846f3f83e6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_bills__hash_id"], "unique_id": "test.smartpill.unique_bills__hash_id.846f3f83e6", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_bills__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_bills__hash_id", "alias": "unique_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_bills__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8043768, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"bills\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.bills"}, "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('bills')", "field": "id", "column_name": "bill_id", "model": "{{ get_where_subquery(ref('bills_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills", "model.smartpill.bills_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bills_lines_bill_id__id__ref_bills_"], "unique_id": "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bills_lines_bill_id__id__ref_bills_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bills_lines_bill_id__id__ref_bills_", "alias": "relationships_bills_lines_bill_id__id__ref_bills_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"], ["bills_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bills_lines_bill_id__id__ref_bills_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8065093, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_id as from_field\n    from \"datawarehouse\".quickbooks.\"bills_lines\"\n    where bill_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id", "file_key_name": "models.bills_lines"}, "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('bills')", "field": "_hash_id", "column_name": "_bill_hash_id", "model": "{{ get_where_subquery(ref('bills_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.bills", "model.smartpill.bills_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_bills_lines__bill_hash_id___hash_id__ref_bills_"], "unique_id": "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_bills_lines__bill_hash_id___hash_id__ref_bills_", "alias": "relationships_bills_lines__bill_hash_id___hash_id__ref_bills_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["bills"], ["bills_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8154502, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _bill_hash_id as from_field\n    from \"datawarehouse\".quickbooks.\"bills_lines\"\n    where _bill_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".quickbooks.\"bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_hash_id", "file_key_name": "models.bills_lines"}, "test.smartpill.not_null_customers_id.422908bfae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_customers_id"], "unique_id": "test.smartpill.not_null_customers_id.422908bfae", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_customers_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_customers_id", "alias": "not_null_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_customers_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8229237, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"customers\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.customers"}, "test.smartpill.not_null_customers_created_at.377cb5ef44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_customers_created_at"], "unique_id": "test.smartpill.not_null_customers_created_at.377cb5ef44", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_customers_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_customers_created_at", "alias": "not_null_customers_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_customers_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.826021, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"customers\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.customers"}, "test.smartpill.not_null_customers_updated_at.035cb5dbb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_customers_updated_at"], "unique_id": "test.smartpill.not_null_customers_updated_at.035cb5dbb9", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_customers_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_customers_updated_at", "alias": "not_null_customers_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_customers_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8283212, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"customers\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.customers"}, "test.smartpill.not_null_customers__hash_id.b9041e1adb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_customers__hash_id"], "unique_id": "test.smartpill.not_null_customers__hash_id.b9041e1adb", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_customers__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_customers__hash_id", "alias": "not_null_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_customers__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8311083, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"customers\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.customers"}, "test.smartpill.unique_customers__hash_id.e701bc0a38": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_customers__hash_id"], "unique_id": "test.smartpill.unique_customers__hash_id.e701bc0a38", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_customers__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_customers__hash_id", "alias": "unique_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_customers__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8335252, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"customers\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.customers"}, "test.smartpill.not_null_classes_id.9a555c4854": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_classes_id"], "unique_id": "test.smartpill.not_null_classes_id.9a555c4854", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_classes_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_classes_id", "alias": "not_null_classes_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_classes_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8364036, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"classes\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.classes"}, "test.smartpill.not_null_classes_created_at.f1923ff5e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_classes_created_at"], "unique_id": "test.smartpill.not_null_classes_created_at.f1923ff5e1", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_classes_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_classes_created_at", "alias": "not_null_classes_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_classes_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8388119, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"classes\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.classes"}, "test.smartpill.not_null_classes_updated_at.ef34f9da7f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_classes_updated_at"], "unique_id": "test.smartpill.not_null_classes_updated_at.ef34f9da7f", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_classes_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_classes_updated_at", "alias": "not_null_classes_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_classes_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8420005, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"classes\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.classes"}, "test.smartpill.not_null_classes__hash_id.f24b1ee3bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_classes__hash_id"], "unique_id": "test.smartpill.not_null_classes__hash_id.f24b1ee3bf", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_classes__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_classes__hash_id", "alias": "not_null_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_classes__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.845626, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"classes\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.classes"}, "test.smartpill.unique_classes__hash_id.a800d006c1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_classes__hash_id"], "unique_id": "test.smartpill.unique_classes__hash_id.a800d006c1", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_classes__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_classes__hash_id", "alias": "unique_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_classes__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8482184, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"classes\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.classes"}, "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('classes')", "field": "id", "column_name": "class_id", "model": "{{ get_where_subquery(ref('deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes", "model.smartpill.deposits_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_deposits_lines_class_id__id__ref_classes_"], "unique_id": "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_deposits_lines_class_id__id__ref_classes_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_deposits_lines_class_id__id__ref_classes_", "alias": "relationships_deposits_lines_class_id__id__ref_classes_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"], ["deposits_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_deposits_lines_class_id__id__ref_classes_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8506222, "compiled_sql": "\n    \n    \n\nwith child as (\n    select class_id as from_field\n    from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    where class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.deposits_lines"}, "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.deposits_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_deposits_lines_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_deposits_lines_account_id__id__ref_accounts_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_deposits_lines_account_id__id__ref_accounts_", "alias": "relationships_deposits_lines_account_id__id__ref_accounts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["deposits_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_deposits_lines_account_id__id__ref_accounts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8576498, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.deposits_lines"}, "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers", "model.smartpill.deposits_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_deposits_lines_customer_id__id__ref_customers_"], "unique_id": "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_deposits_lines_customer_id__id__ref_customers_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_deposits_lines_customer_id__id__ref_customers_", "alias": "relationships_deposits_lines_customer_id__id__ref_customers_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"], ["deposits_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_deposits_lines_customer_id__id__ref_customers_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8668168, "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    where customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.deposits_lines"}, "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('deposits')", "field": "_hash_id", "column_name": "_deposit_hash_id", "model": "{{ get_where_subquery(ref('deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits", "model.smartpill.deposits_lines"]}, "config": {"enabled": true, "alias": "relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_"], "unique_id": "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_", "alias": "relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"], ["deposits_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_deposits_lines_f81281080b305ff4494a00e08a8ea765"}, "created_at": 1703701091.8740008, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _deposit_hash_id as from_field\n    from \"datawarehouse\".quickbooks.\"deposits_lines\"\n    where _deposit_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".quickbooks.\"deposits\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_deposit_hash_id", "file_key_name": "models.deposits_lines"}, "test.smartpill.not_null_deposits_id.b088049b9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_deposits_id"], "unique_id": "test.smartpill.not_null_deposits_id.b088049b9e", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_deposits_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_deposits_id", "alias": "not_null_deposits_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_deposits_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.882096, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"deposits\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.deposits"}, "test.smartpill.not_null_deposits_created_at.083b2848dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_deposits_created_at"], "unique_id": "test.smartpill.not_null_deposits_created_at.083b2848dc", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_deposits_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_deposits_created_at", "alias": "not_null_deposits_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_deposits_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.884481, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"deposits\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.deposits"}, "test.smartpill.not_null_deposits_updated_at.41e69936d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_deposits_updated_at"], "unique_id": "test.smartpill.not_null_deposits_updated_at.41e69936d4", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_deposits_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_deposits_updated_at", "alias": "not_null_deposits_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_deposits_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8874981, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"deposits\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.deposits"}, "test.smartpill.not_null_deposits__hash_id.4283b963be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_deposits__hash_id"], "unique_id": "test.smartpill.not_null_deposits__hash_id.4283b963be", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_deposits__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_deposits__hash_id", "alias": "not_null_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_deposits__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8895442, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"deposits\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.deposits"}, "test.smartpill.unique_deposits__hash_id.6731b07827": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_deposits__hash_id"], "unique_id": "test.smartpill.unique_deposits__hash_id.6731b07827", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_deposits__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_deposits__hash_id", "alias": "unique_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_deposits__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8920832, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"deposits\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.deposits"}, "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_deposits_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_deposits_account_id__id__ref_accounts_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_deposits_account_id__id__ref_accounts_", "alias": "relationships_deposits_account_id__id__ref_accounts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["deposits"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_deposits_account_id__id__ref_accounts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.8947196, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".quickbooks.\"deposits\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.deposits"}, "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "account_expense_account_id", "model": "{{ get_where_subquery(ref('purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_purchases_lines_account_expense_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_purchases_lines_account_expense_account_id__id__ref_accounts_", "alias": "relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["purchases_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_purchases_lines_38b5addb61607b8d8a67045f77684f40"}, "created_at": 1703701091.9035609, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_account_id as from_field\n    from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    where account_expense_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_account_id", "file_key_name": "models.purchases_lines"}, "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('classes')", "field": "id", "column_name": "account_expense_class_id", "model": "{{ get_where_subquery(ref('purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes", "model.smartpill.purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_purchases_lines_account_expense_class_id__id__ref_classes_"], "unique_id": "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_purchases_lines_account_expense_class_id__id__ref_classes_", "alias": "relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"], ["purchases_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_purchases_lines_db09d2edd2a5a7a16b439df37e464003"}, "created_at": 1703701091.9117012, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_class_id as from_field\n    from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    where account_expense_class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_class_id", "file_key_name": "models.purchases_lines"}, "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "id", "column_name": "account_expense_customer_id", "model": "{{ get_where_subquery(ref('purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers", "model.smartpill.purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_purchases_lines_account_expense_customer_id__id__ref_customers_"], "unique_id": "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_purchases_lines_account_expense_customer_id__id__ref_customers_", "alias": "relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"], ["purchases_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_purchases_lines_aa19f70fb474ca0275cb1464726d7d6a"}, "created_at": 1703701091.9196033, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_customer_id as from_field\n    from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    where account_expense_customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_customer_id", "file_key_name": "models.purchases_lines"}, "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('purchases')", "field": "_hash_id", "column_name": "_purchase_hash_id", "model": "{{ get_where_subquery(ref('purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases", "model.smartpill.purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_"], "unique_id": "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_", "alias": "relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"], ["purchases_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_purchases_lines_dd8e19c9077bcda0b85402ea847a259d"}, "created_at": 1703701091.928241, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _purchase_hash_id as from_field\n    from \"datawarehouse\".quickbooks.\"purchases_lines\"\n    where _purchase_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".quickbooks.\"purchases\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_purchase_hash_id", "file_key_name": "models.purchases_lines"}, "test.smartpill.not_null_purchases_id.2c6aea8f54": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_purchases_id"], "unique_id": "test.smartpill.not_null_purchases_id.2c6aea8f54", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_purchases_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_purchases_id", "alias": "not_null_purchases_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_purchases_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.935838, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"purchases\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.purchases"}, "test.smartpill.not_null_purchases_created_at.420a3d4362": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_purchases_created_at"], "unique_id": "test.smartpill.not_null_purchases_created_at.420a3d4362", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_purchases_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_purchases_created_at", "alias": "not_null_purchases_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_purchases_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9389856, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"purchases\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.purchases"}, "test.smartpill.not_null_purchases_updated_at.8df619fa61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_purchases_updated_at"], "unique_id": "test.smartpill.not_null_purchases_updated_at.8df619fa61", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_purchases_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_purchases_updated_at", "alias": "not_null_purchases_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_purchases_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9422371, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"purchases\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.purchases"}, "test.smartpill.not_null_purchases__hash_id.1767705f4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_purchases__hash_id"], "unique_id": "test.smartpill.not_null_purchases__hash_id.1767705f4e", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_purchases__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_purchases__hash_id", "alias": "not_null_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_purchases__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9447217, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"purchases\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.purchases"}, "test.smartpill.unique_purchases__hash_id.f360789048": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_purchases__hash_id"], "unique_id": "test.smartpill.unique_purchases__hash_id.f360789048", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_purchases__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_purchases__hash_id", "alias": "unique_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_purchases__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9472518, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"purchases\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.purchases"}, "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_purchases_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_purchases_account_id__id__ref_accounts_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_purchases_account_id__id__ref_accounts_", "alias": "relationships_purchases_account_id__id__ref_accounts_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["purchases"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_purchases_account_id__id__ref_accounts_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9497433, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".quickbooks.\"purchases\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.purchases"}, "test.smartpill.not_null_journal_entries_id.189a5cf124": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_journal_entries_id"], "unique_id": "test.smartpill.not_null_journal_entries_id.189a5cf124", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_journal_entries_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_journal_entries_id", "alias": "not_null_journal_entries_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_journal_entries_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9569783, "compiled_sql": "\n    \n    \n\n\n\nselect id\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.journal_entries"}, "test.smartpill.not_null_journal_entries_created_at.522b42cb2d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_journal_entries_created_at"], "unique_id": "test.smartpill.not_null_journal_entries_created_at.522b42cb2d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_journal_entries_created_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_journal_entries_created_at", "alias": "not_null_journal_entries_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_journal_entries_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9598527, "compiled_sql": "\n    \n    \n\n\n\nselect created_at\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.journal_entries"}, "test.smartpill.not_null_journal_entries_updated_at.72e0520337": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_journal_entries_updated_at"], "unique_id": "test.smartpill.not_null_journal_entries_updated_at.72e0520337", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_journal_entries_updated_at.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_journal_entries_updated_at", "alias": "not_null_journal_entries_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_journal_entries_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.962564, "compiled_sql": "\n    \n    \n\n\n\nselect updated_at\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.journal_entries"}, "test.smartpill.not_null_journal_entries__hash_id.58bd70d62b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "not_null_journal_entries__hash_id"], "unique_id": "test.smartpill.not_null_journal_entries__hash_id.58bd70d62b", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_null_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "not_null_journal_entries__hash_id", "alias": "not_null_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/not_null_journal_entries__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9649158, "compiled_sql": "\n    \n    \n\n\n\nselect _hash_id\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.journal_entries"}, "test.smartpill.unique_journal_entries__hash_id.e8c4c3a4b3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "unique_journal_entries__hash_id"], "unique_id": "test.smartpill.unique_journal_entries__hash_id.e8c4c3a4b3", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "unique_journal_entries__hash_id", "alias": "unique_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/unique_journal_entries__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9675312, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".quickbooks.\"journal_entries\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.journal_entries"}, "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_journal_entries__c704e170058f07f262b578569484fdd9\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.accounts", "model.smartpill.journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_journal_entries__c704e170058f07f262b578569484fdd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_journal_entries_lines_account_id__id__ref_accounts_"], "unique_id": "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_journal_entries__c704e170058f07f262b578569484fdd9.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_journal_entries_lines_account_id__id__ref_accounts_", "alias": "relationships_journal_entries__c704e170058f07f262b578569484fdd9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["accounts"], ["journal_entries_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_journal_entries__c704e170058f07f262b578569484fdd9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_journal_entries__c704e170058f07f262b578569484fdd9"}, "created_at": 1703701091.969658, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.journal_entries_lines"}, "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('classes')", "field": "id", "column_name": "class_id", "model": "{{ get_where_subquery(ref('journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.classes", "model.smartpill.journal_entries_lines"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_journal_entries_lines_class_id__id__ref_classes_"], "unique_id": "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_journal_entries_lines_class_id__id__ref_classes_.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_journal_entries_lines_class_id__id__ref_classes_", "alias": "relationships_journal_entries_lines_class_id__id__ref_classes_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["classes"], ["journal_entries_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_journal_entries_lines_class_id__id__ref_classes_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701091.9782646, "compiled_sql": "\n    \n    \n\nwith child as (\n    select class_id as from_field\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n    where class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.journal_entries_lines"}, "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.customers", "model.smartpill.journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_journal_entries_lines_customer_id__id__ref_customers_"], "unique_id": "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_journal_entries_lines_customer_id__id__ref_customers_", "alias": "relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["customers"], ["journal_entries_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_journal_entries__d6957aa0df56b53f254b5ebab5cc8eb8"}, "created_at": 1703701091.985547, "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n    where customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".quickbooks.\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.journal_entries_lines"}, "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('journal_entries')", "field": "_hash_id", "column_name": "_journal_entry_hash_id", "model": "{{ get_where_subquery(ref('journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.journal_entries", "model.smartpill.journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "bronze", "relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_"], "unique_id": "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c.sql", "original_file_path": "models/quickbooks/bronze/quickbooks.yml", "name": "relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_", "alias": "relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["journal_entries"], ["journal_entries_lines"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/bronze/quickbooks.yml/relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_journal_entries__6228e2af8b7cea5ad6b1d13014ba368c"}, "created_at": 1703701091.993896, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _journal_entry_hash_id as from_field\n    from \"datawarehouse\".quickbooks.\"journal_entries_lines\"\n    where _journal_entry_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".quickbooks.\"journal_entries\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_journal_entry_hash_id", "file_key_name": "models.journal_entries_lines"}, "test.smartpill.unique_donors_contact_contact_id.7dc2a74127": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('donors_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "unique_donors_contact_contact_id"], "unique_id": "test.smartpill.unique_donors_contact_contact_id.7dc2a74127", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_donors_contact_contact_id.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "unique_donors_contact_contact_id", "alias": "unique_donors_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/unique_donors_contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.0835505, "compiled_sql": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"donors_contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.donors_contact"}, "test.smartpill.not_empty_donors_contact_.359dce62ca": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('donors_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "not_empty_donors_contact_"], "unique_id": "test.smartpill.not_empty_donors_contact_.359dce62ca", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_donors_contact_.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "not_empty_donors_contact_", "alias": "not_empty_donors_contact_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/not_empty_donors_contact_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.0865731, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"donors_contact\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.donors_contact"}, "test.smartpill.unique_donors_task_task_id.aa62a9d0f4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('donors_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "unique_donors_task_task_id"], "unique_id": "test.smartpill.unique_donors_task_task_id.aa62a9d0f4", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_donors_task_task_id.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "unique_donors_task_task_id", "alias": "unique_donors_task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/unique_donors_task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.09467, "compiled_sql": "\n    \n    \n\nselect\n    task_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"donors_task\"\nwhere task_id is not null\ngroup by task_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.donors_task"}, "test.smartpill.not_empty_donors_task_.c46f7bc64b": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('donors_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "not_empty_donors_task_"], "unique_id": "test.smartpill.not_empty_donors_task_.c46f7bc64b", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_donors_task_.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "not_empty_donors_task_", "alias": "not_empty_donors_task_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/not_empty_donors_task_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.0977616, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"donors_task\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.donors_task"}, "test.smartpill.unique_donors_user_user_id.e6d83e2212": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('donors_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "unique_donors_user_user_id"], "unique_id": "test.smartpill.unique_donors_user_user_id.e6d83e2212", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_donors_user_user_id.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "unique_donors_user_user_id", "alias": "unique_donors_user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/unique_donors_user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1059933, "compiled_sql": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"donors_user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.donors_user"}, "test.smartpill.not_empty_donors_user_.5a41996209": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('donors_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.donors_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "donors", "bronze", "not_empty_donors_user_"], "unique_id": "test.smartpill.not_empty_donors_user_.5a41996209", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_donors_user_.sql", "original_file_path": "models/salesforce/donors/bronze/models.yml", "name": "not_empty_donors_user_", "alias": "not_empty_donors_user_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["donors_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/donors/bronze/models.yml/not_empty_donors_user_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.108368, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"donors_user\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.donors_user"}, "test.smartpill.unique_patients_contact_contact_id.05857d358e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('patients_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "unique_patients_contact_contact_id"], "unique_id": "test.smartpill.unique_patients_contact_contact_id.05857d358e", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_patients_contact_contact_id.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "unique_patients_contact_contact_id", "alias": "unique_patients_contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/unique_patients_contact_contact_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1414492, "compiled_sql": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"patients_contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contact_id", "file_key_name": "models.patients_contact"}, "test.smartpill.not_empty_patients_contact_.47a29ff9a6": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patients_contact')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_contact"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "not_empty_patients_contact_"], "unique_id": "test.smartpill.not_empty_patients_contact_.47a29ff9a6", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patients_contact_.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "not_empty_patients_contact_", "alias": "not_empty_patients_contact_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_contact"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/not_empty_patients_contact_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1437333, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"patients_contact\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patients_contact"}, "test.smartpill.unique_patients_gp_user__c_Id.1e1e8af894": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(ref('patients_gp_user__c')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_gp_user__c"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "unique_patients_gp_user__c_Id"], "unique_id": "test.smartpill.unique_patients_gp_user__c_Id.1e1e8af894", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_patients_gp_user__c_Id.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "unique_patients_gp_user__c_Id", "alias": "unique_patients_gp_user__c_Id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_gp_user__c"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/unique_patients_gp_user__c_Id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1490347, "compiled_sql": "\n    \n    \n\nselect\n    Id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"patients_gp_user__c\"\nwhere Id is not null\ngroup by Id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "Id", "file_key_name": "models.patients_gp_user__c"}, "test.smartpill.not_empty_patients_gp_user__c_.6d74dc1122": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patients_gp_user__c')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_gp_user__c"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "not_empty_patients_gp_user__c_"], "unique_id": "test.smartpill.not_empty_patients_gp_user__c_.6d74dc1122", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patients_gp_user__c_.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "not_empty_patients_gp_user__c_", "alias": "not_empty_patients_gp_user__c_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_gp_user__c"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/not_empty_patients_gp_user__c_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1512318, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"patients_gp_user__c\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patients_gp_user__c"}, "test.smartpill.unique_patients_task_task_id.3283cfe735": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('patients_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "unique_patients_task_task_id"], "unique_id": "test.smartpill.unique_patients_task_task_id.3283cfe735", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_patients_task_task_id.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "unique_patients_task_task_id", "alias": "unique_patients_task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/unique_patients_task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1570456, "compiled_sql": "\n    \n    \n\nselect\n    task_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"patients_task\"\nwhere task_id is not null\ngroup by task_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.patients_task"}, "test.smartpill.not_empty_patients_task_.fc8027d541": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patients_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "not_empty_patients_task_"], "unique_id": "test.smartpill.not_empty_patients_task_.fc8027d541", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patients_task_.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "not_empty_patients_task_", "alias": "not_empty_patients_task_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/not_empty_patients_task_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1591218, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"patients_task\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patients_task"}, "test.smartpill.unique_patients_sf_user_user_id.825801e838": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('patients_sf_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_sf_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "unique_patients_sf_user_user_id"], "unique_id": "test.smartpill.unique_patients_sf_user_user_id.825801e838", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "unique_patients_sf_user_user_id.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "unique_patients_sf_user_user_id", "alias": "unique_patients_sf_user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_sf_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/unique_patients_sf_user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1641877, "compiled_sql": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".salesforce.\"patients_sf_user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.patients_sf_user"}, "test.smartpill.not_empty_patients_sf_user_.064471468e": {"raw_sql": "{{ test_not_empty(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_empty", "kwargs": {"model": "{{ get_where_subquery(ref('patients_sf_user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.smartpill.test_not_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.patients_sf_user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "salesforce", "patients", "bronze", "not_empty_patients_sf_user_"], "unique_id": "test.smartpill.not_empty_patients_sf_user_.064471468e", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "not_empty_patients_sf_user_.sql", "original_file_path": "models/salesforce/patients/bronze/models.yml", "name": "not_empty_patients_sf_user_", "alias": "not_empty_patients_sf_user_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["patients_sf_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/salesforce/patients/bronze/models.yml/not_empty_patients_sf_user_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1703701092.1663973, "compiled_sql": "\n\n    select\n        count(1) as row_count\n    from \"datawarehouse\".salesforce.\"patients_sf_user\"\n    having count(1) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.patients_sf_user"}}, "sources": {"source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_drugs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_drugs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_drugs", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_drugs` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_drugs](/#!/model/model.smartpill.gp_drugs) for the normalization of the table.\n", "columns": {"_airbyte_ab_id": {"name": "_airbyte_ab_id", "description": "a uuid assigned by Airbyte to each event that is processed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_data": {"name": "_airbyte_data", "description": "a json blob representing with the event data", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "a timestamp representing when the event was pulled from the data source", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_drugs", "created_at": 1703701092.1844528}, "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_order_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_order_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_order_items", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_order_items` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_order_items](/#!/model/model.smartpill.gp_order_items) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_order_items", "created_at": 1703701092.1846464}, "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_orders"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_orders", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_orders", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_orders", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_orders` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_orders](/#!/model/model.smartpill.gp_orders) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_orders", "created_at": 1703701092.1847823}, "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_patients"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_patients", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_patients", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_patients` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_patients](/#!/model/model.smartpill.gp_patients) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_patients", "created_at": 1703701092.1849003}, "source.smartpill.raw._airbyte_raw_goodpill_gp_providers": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_providers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_providers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_providers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_providers", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_providers` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_providers](/#!/model/model.smartpill.gp_providers) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_providers", "created_at": 1703701092.1850135}, "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_rxs_grouped"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_rxs_grouped", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_rxs_grouped", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_rxs_grouped` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_rxs_grouped](/#!/model/model.smartpill.gp_rxs_grouped) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_rxs_grouped", "created_at": 1703701092.1851246}, "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_rxs_single"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_rxs_single", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_rxs_single", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_rxs_single` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_rxs_single](/#!/model/model.smartpill.gp_rxs_single) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_rxs_single", "created_at": 1703701092.185302}, "source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_clinic_coupons"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_clinic_coupons", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_clinic_coupons", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_clinic_coupons", "created_at": 1703701092.1854312}, "source.smartpill.raw._airbyte_raw_goodpill_gp_clinics": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_clinics"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_clinics", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_clinics", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_clinics", "created_at": 1703701092.1855416}, "source.smartpill.raw._airbyte_raw_goodpill_dw_clinics": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_dw_clinics"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_dw_clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_dw_clinics", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_dw_clinics", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_clinics", "created_at": 1703701092.1856468}, "source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_dw_clinic_groups"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_dw_clinic_groups", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_dw_clinic_groups", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_clinic_groups", "created_at": 1703701092.185766}, "source.smartpill.raw._airbyte_raw_goodpill_dw_providers": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_dw_providers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_dw_providers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_dw_providers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_dw_providers", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_providers", "created_at": 1703701092.1858735}, "source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_dw_providers_clinics"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_dw_providers_clinics", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_dw_providers_clinics", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_dw_providers_clinics", "created_at": 1703701092.185977}, "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_order_items_inventory_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_order_items_inventory_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_order_items_inventory_items", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_order_items_inventory_items", "created_at": 1703701092.1860785}, "source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_pend_group"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_pend_group", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_pend_group", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_pend_group", "created_at": 1703701092.1861806}, "source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_stock_live"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_stock_live", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_stock_live", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_stock_live", "created_at": 1703701092.1862814}, "source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_pharmacy_actions"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_pharmacy_actions", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_pharmacy_actions", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_pharmacy_actions", "created_at": 1703701092.1865125}, "source.smartpill.raw._airbyte_raw_quickbooks_accounts": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_accounts"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_accounts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_accounts", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_accounts", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_accounts", "created_at": 1703701092.1866229}, "source.smartpill.raw._airbyte_raw_quickbooks_bill_payments": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_bill_payments"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_bill_payments", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_bill_payments", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_bill_payments", "created_at": 1703701092.1867285}, "source.smartpill.raw._airbyte_raw_quickbooks_bills": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_bills"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_bills", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_bills", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_bills", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_bills", "created_at": 1703701092.1868353}, "source.smartpill.raw._airbyte_raw_quickbooks_credit_memos": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_credit_memos"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_credit_memos", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_credit_memos", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_credit_memos", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_credit_memos", "created_at": 1703701092.1869388}, "source.smartpill.raw._airbyte_raw_quickbooks_classes": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_classes"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_classes", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_classes", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_classes", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_classes", "created_at": 1703701092.1870408}, "source.smartpill.raw._airbyte_raw_quickbooks_customers": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_customers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_customers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_customers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_customers", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_customers", "created_at": 1703701092.187156}, "source.smartpill.raw._airbyte_raw_quickbooks_deposits": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_deposits"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_deposits", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_deposits", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_deposits", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_deposits", "created_at": 1703701092.1876335}, "source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_deleted_objects"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_deleted_objects", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_deleted_objects", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_deleted_objects", "created_at": 1703701092.1877747}, "source.smartpill.raw._airbyte_raw_quickbooks_invoices": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_invoices"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_invoices", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_invoices", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_invoices", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_invoices", "created_at": 1703701092.1878955}, "source.smartpill.raw._airbyte_raw_quickbooks_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_items", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_items", "created_at": 1703701092.1880107}, "source.smartpill.raw._airbyte_raw_quickbooks_journal_entries": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_journal_entries"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_journal_entries", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_journal_entries", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_journal_entries", "created_at": 1703701092.1882064}, "source.smartpill.raw._airbyte_raw_quickbooks_payments": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_payments"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_payments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_payments", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_payments", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_payments", "created_at": 1703701092.1883185}, "source.smartpill.raw._airbyte_raw_quickbooks_purchases": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_purchases"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_purchases", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_purchases", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_purchases", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_purchases", "created_at": 1703701092.188426}, "source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_sales_receipts"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_sales_receipts", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_sales_receipts", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_sales_receipts", "created_at": 1703701092.1886094}, "source.smartpill.raw._airbyte_raw_quickbooks_transfers": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_transfers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_transfers", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_transfers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_transfers", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_transfers", "created_at": 1703701092.1887298}, "source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbooks_vendor_credits"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbooks_vendor_credits", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbooks_vendor_credits", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_quickbooks_vendor_credits", "created_at": 1703701092.1888404}, "source.smartpill.raw.quickbooks_payroll_checks": {"fqn": ["smartpill", "raw", "quickbooks_payroll_checks"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw.quickbooks_payroll_checks", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "quickbooks_payroll_checks", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "quickbooks_payroll_checks", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\".quickbooks_payroll_checks", "created_at": 1703701092.188946}, "source.smartpill.raw._airbyte_raw_salesforce_task": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_task"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_task", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_task", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_task", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_task", "created_at": 1703701092.1890502}, "source.smartpill.raw._airbyte_raw_salesforce_gp_user__c": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_gp_user__c"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_gp_user__c", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_gp_user__c", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_gp_user__c", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_gp_user__c", "created_at": 1703701092.1891525}, "source.smartpill.raw._airbyte_raw_salesforce_contact": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_contact"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_contact", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_contact", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_contact", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_contact", "created_at": 1703701092.1892543}, "source.smartpill.raw._airbyte_raw_salesforce_user": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_user"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_user", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_user", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_user", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_user", "created_at": 1703701092.1893582}, "source.smartpill.raw._airbyte_raw_salesforce_donors_task": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_donors_task"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_donors_task", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_donors_task", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_donors_task", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_task", "created_at": 1703701092.189471}, "source.smartpill.raw._airbyte_raw_salesforce_donors_user": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_donors_user"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_donors_user", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_donors_user", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_donors_user", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_user", "created_at": 1703701092.1896574}, "source.smartpill.raw._airbyte_raw_salesforce_donors_contact": {"fqn": ["smartpill", "raw", "_airbyte_raw_salesforce_donors_contact"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_salesforce_donors_contact", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_salesforce_donors_contact", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_salesforce_donors_contact", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["salesforce"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_salesforce_donors_contact", "created_at": 1703701092.1897774}, "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_patient_merge_cp"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_patient_merge_cp", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_patient_merge_cp", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_patient_merge_cp", "created_at": 1703701092.1898856}, "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_wc": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_patient_merge_wc"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_wc", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_patient_merge_wc", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_patient_merge_wc", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_goodpill_gp_patient_merge_wc", "created_at": 1703701092.1899962}, "source.smartpill.raw._airbyte_raw_cortex_v2_accounts": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_accounts"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_accounts", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_accounts", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_accounts", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_accounts", "created_at": 1703701092.1901114}, "source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_accounts_ordered"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_accounts_ordered", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_accounts_ordered", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_accounts_ordered", "created_at": 1703701092.1902246}, "source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_drug_generics"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_drug_generics", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_drug_generics", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drug_generics", "created_at": 1703701092.1903367}, "source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_drug_gsns"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_drug_gsns", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_drug_gsns", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drug_gsns", "created_at": 1703701092.1904447}, "source.smartpill.raw._airbyte_raw_cortex_v2_drugs": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_drugs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_drugs", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_drugs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_drugs", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_drugs", "created_at": 1703701092.1905508}, "source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_failed_imports"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_failed_imports", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_failed_imports", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_failed_imports", "created_at": 1703701092.1907465}, "source.smartpill.raw._airbyte_raw_cortex_v2_shipments": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_shipments"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_shipments", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_shipments", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_shipments", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipments", "created_at": 1703701092.1908658}, "source.smartpill.raw._airbyte_raw_cortex_v2_sync_status": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_sync_status"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_sync_status", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_sync_status", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_sync_status", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_sync_status", "created_at": 1703701092.1909773}, "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_shipment_item_stages"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_shipment_item_stages", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_shipment_item_stages", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipment_item_stages", "created_at": 1703701092.1910808}, "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_cortex_v2_shipment_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_cortex_v2_shipment_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_cortex_v2_shipment_items", "resource_type": "source", "quoting": {"database": true, "schema": null, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["cortex"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"raw\"._airbyte_raw_cortex_v2_shipment_items", "created_at": 1703701092.1911833}, "source.smartpill.reverse_etl.patient_to_contact_non_updated": {"fqn": ["smartpill", "reverse_etl", "patient_to_contact_non_updated"], "database": "datawarehouse", "schema": "reverse_etl", "unique_id": "source.smartpill.reverse_etl.patient_to_contact_non_updated", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "patient_to_contact_non_updated", "source_name": "reverse_etl", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "patient_to_contact_non_updated", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"reverse_etl\".\"patient_to_contact_non_updated\"", "created_at": 1703701092.1912875}, "source.smartpill.reverse_etl.contact_notifications_history": {"fqn": ["smartpill", "reverse_etl", "contact_notifications_history"], "database": "datawarehouse", "schema": "reverse_etl", "unique_id": "source.smartpill.reverse_etl.contact_notifications_history", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "contact_notifications_history", "source_name": "reverse_etl", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "contact_notifications_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"reverse_etl\".\"contact_notifications_history\"", "created_at": 1703701092.191419}, "source.smartpill.dwh.active_orders_abt_view": {"fqn": ["smartpill", "dwh", "active_orders_abt_view"], "database": "datawarehouse", "schema": "dwh", "unique_id": "source.smartpill.dwh.active_orders_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "active_orders_abt_view", "source_name": "dwh", "source_description": "", "loader": "", "identifier": "active_orders_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"dwh\".\"active_orders_abt_view\"", "created_at": 1703701092.1915545}, "source.smartpill.dwh.general_ledger_abt_view": {"fqn": ["smartpill", "dwh", "general_ledger_abt_view"], "database": "datawarehouse", "schema": "dwh", "unique_id": "source.smartpill.dwh.general_ledger_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "general_ledger_abt_view", "source_name": "dwh", "source_description": "", "loader": "", "identifier": "general_ledger_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"dwh\".\"general_ledger_abt_view\"", "created_at": 1703701092.1916616}, "source.smartpill.dwh.goodpill_abt_view": {"fqn": ["smartpill", "dwh", "goodpill_abt_view"], "database": "datawarehouse", "schema": "dwh", "unique_id": "source.smartpill.dwh.goodpill_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_abt_view", "source_name": "dwh", "source_description": "", "loader": "", "identifier": "goodpill_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"dwh\".\"goodpill_abt_view\"", "created_at": 1703701092.1918538}, "source.smartpill.salesforce.salesforce_donors_abt_view": {"fqn": ["smartpill", "salesforce", "salesforce_donors_abt_view"], "database": "datawarehouse", "schema": "salesforce", "unique_id": "source.smartpill.salesforce.salesforce_donors_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "salesforce_donors_abt_view", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "salesforce_donors_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"salesforce\".\"salesforce_donors_abt_view\"", "created_at": 1703701092.1919649}, "source.smartpill.salesforce.salesforce_patients_abt_view": {"fqn": ["smartpill", "salesforce", "salesforce_patients_abt_view"], "database": "datawarehouse", "schema": "salesforce", "unique_id": "source.smartpill.salesforce.salesforce_patients_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "salesforce_patients_abt_view", "source_name": "salesforce", "source_description": "", "loader": "", "identifier": "salesforce_patients_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"salesforce\".\"salesforce_patients_abt_view\"", "created_at": 1703701092.1921294}, "source.smartpill.goodpill.gp_pharmacy_actions_abt": {"fqn": ["smartpill", "goodpill", "gp_pharmacy_actions_abt"], "database": "datawarehouse", "schema": "goodpill", "unique_id": "source.smartpill.goodpill.gp_pharmacy_actions_abt", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gp_pharmacy_actions_abt", "source_name": "goodpill", "source_description": "", "loader": "", "identifier": "gp_pharmacy_actions_abt", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"goodpill\".\"gp_pharmacy_actions_abt\"", "created_at": 1703701092.1922414}, "source.smartpill.goodpill.patient_comms_view": {"fqn": ["smartpill", "goodpill", "patient_comms_view"], "database": "datawarehouse", "schema": "goodpill", "unique_id": "source.smartpill.goodpill.patient_comms_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "patient_comms_view", "source_name": "goodpill", "source_description": "", "loader": "", "identifier": "patient_comms_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"goodpill\".\"patient_comms_view\"", "created_at": 1703701092.1924608}, "source.smartpill.goodpill.goodpill_abt_view": {"fqn": ["smartpill", "goodpill", "goodpill_abt_view"], "database": "datawarehouse", "schema": "goodpill", "unique_id": "source.smartpill.goodpill.goodpill_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_abt_view", "source_name": "goodpill", "source_description": "", "loader": "", "identifier": "goodpill_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"goodpill\".\"goodpill_abt_view\"", "created_at": 1703701092.1925974}, "source.smartpill.goodpill.active_orders_abt_view": {"fqn": ["smartpill", "goodpill", "active_orders_abt_view"], "database": "datawarehouse", "schema": "goodpill", "unique_id": "source.smartpill.goodpill.active_orders_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "active_orders_abt_view", "source_name": "goodpill", "source_description": "", "loader": "", "identifier": "active_orders_abt_view", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".\"goodpill\".\"active_orders_abt_view\"", "created_at": 1703701092.1927016}}, "macros": {"macro.smartpill.generate_schema_name": {"unique_id": "macro.smartpill.generate_schema_name", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.name -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.610787}, "macro.smartpill.pg_create_index": {"unique_id": "macro.smartpill.pg_create_index", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/pg_create_index.sql", "original_file_path": "macros/pg_create_index.sql", "name": "pg_create_index", "macro_sql": "{% macro pg_create_index(this, name, columns, includes=False, schema='dwh') %}\n\n{% set idx_name = (\n    \"idx_\" + name\n) %}\n\nDROP INDEX if exists {{ schema }}.{{ idx_name }};\n\nCREATE INDEX {{ idx_name }} ON {{ schema }}.{{ this.name }} ({{ columns | join(\",\") }})\n{% if includes -%}\n    include ({{ includes | join(\",\") }})\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6137872}, "macro.smartpill.pg_partition_by": {"unique_id": "macro.smartpill.pg_partition_by", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/pg_partition_by.sql", "original_file_path": "macros/pg_partition_by.sql", "name": "pg_partition_by", "macro_sql": "{% macro pg_partition_by(field, type, partitions) -%}\n\n   {%- if type == 'list'-%}\n    ALTER TABLE {{ this }} RENAME TO {{ identifier }}_old;\n    CREATE TABLE {{ this }} (LIKE {{ database }}.{{ schema }}.{{ identifier }}_old) PARTITION BY LIST ({{ field }});\n    {% for partition in partitions -%}\n    DROP TABLE IF EXISTS {{ database }}.{{ schema }}.{{ identifier }}_p_{{ partition }};\n    CREATE TABLE {{ database }}.{{ schema }}.{{ identifier }}_p_{{ partition }} PARTITION OF {{ this }}\n      FOR VALUES IN ('{{ partition }}');\n    {% endfor %}\n    {# default partition #}\n    DROP TABLE IF EXISTS {{ database }}.{{ schema }}.{{ identifier }}_default;\n    CREATE TABLE {{ database }}.{{ schema }}.{{ identifier }}_default PARTITION OF {{ this }} DEFAULT;\n    INSERT INTO {{ this }} SELECT * FROM {{ database }}.{{ schema }}.{{ identifier }}_old;\n    DROP TABLE {{ database }}.{{ schema }}.{{ identifier }}_old;\n    COMMIT;\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.616991}, "macro.smartpill.test_not_empty": {"unique_id": "macro.smartpill.test_not_empty", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/test_not_empty.sql", "original_file_path": "macros/test_not_empty.sql", "name": "test_not_empty", "macro_sql": "{% macro test_not_empty(model, column_name) %}\n\n    select\n        count(1) as row_count\n    from {{ model }}\n    having count(1) = 0\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.617585}, "macro.smartpill.create_active_orders_abt_view": {"unique_id": "macro.smartpill.create_active_orders_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_active_orders_abt_view.sql", "original_file_path": "macros/abt/create_active_orders_abt_view.sql", "name": "create_active_orders_abt_view", "macro_sql": "{% macro create_active_orders_abt_view() -%}\n\nDROP VIEW IF EXISTS goodpill.active_orders_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW goodpill.active_orders_abt_view AS\nselect\n    day as active_orders_day,\n    active_orders_count,\n    'active_orders' as source_name\nfrom {{ this }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6180642}, "macro.smartpill.create_general_ledger_abt_view": {"unique_id": "macro.smartpill.create_general_ledger_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_general_ledger_abt_view.sql", "original_file_path": "macros/abt/create_general_ledger_abt_view.sql", "name": "create_general_ledger_abt_view", "macro_sql": "{% macro create_general_ledger_abt_view() -%}\n\nDROP VIEW IF EXISTS dwh.general_ledger_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW dwh.general_ledger_abt_view AS\nselect\n    amount as qbo_amount,\n    account_sub as qbo_account_sub,\n    account_full as qbo_account_full,\n    account_top as qbo_account_top,\n    account_type_top as qbo_account_type_top,\n    account_type_sub as qbo_account_type_sub,\n    account_number as qbo_account_number,\n    transaction_date as qbo_transaction_date,\n    'quickbooks' as source_name\nfrom {{ this }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6185627}, "macro.smartpill.create_goodpill_abt_view": {"unique_id": "macro.smartpill.create_goodpill_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_goodpill_abt_view.sql", "original_file_path": "macros/abt/create_goodpill_abt_view.sql", "name": "create_goodpill_abt_view", "macro_sql": "{% macro create_goodpill_abt_view() -%}\n\nDROP VIEW IF EXISTS goodpill.goodpill_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW goodpill.goodpill_abt_view AS\n\nSELECT 'goodpill' as source_name, *\nfrom {{ this }}\nwhere\n    lower(patient_first_name) not like '%test%'\n    and lower(patient_first_name) not like '%user%'\n    and lower(patient_last_name) not like '%test%'\n    and lower(patient_last_name) not like '%user%'\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.619057}, "macro.smartpill.create_patient_comms_view": {"unique_id": "macro.smartpill.create_patient_comms_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_patient_comms_view.sql", "original_file_path": "macros/abt/create_patient_comms_view.sql", "name": "create_patient_comms_view", "macro_sql": "{% macro create_patient_comms_view() -%}\n\nDROP VIEW IF EXISTS goodpill.patient_comms_view CASCADE;\n\nCREATE OR REPLACE VIEW goodpill.patient_comms_view AS\nSELECT *, 'patient_comms' as source_name\nfrom {{ this }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6195436}, "macro.smartpill.create_pharmacy_actions_abt_view": {"unique_id": "macro.smartpill.create_pharmacy_actions_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_pharmacy_actions_abt_view.sql", "original_file_path": "macros/abt/create_pharmacy_actions_abt_view.sql", "name": "create_pharmacy_actions_abt_view", "macro_sql": "{% macro create_pharmacy_actions_abt_view() -%}\n\nDROP VIEW IF EXISTS goodpill.gp_pharmacy_actions_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW goodpill.gp_pharmacy_actions_abt_view AS\nSELECT *, 'pharmacy_actions' as source_name\nfrom {{ this }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6201265}, "macro.smartpill.create_salesforce_donors_abt_view": {"unique_id": "macro.smartpill.create_salesforce_donors_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_salesforce_donors_abt_view.sql", "original_file_path": "macros/abt/create_salesforce_donors_abt_view.sql", "name": "create_salesforce_donors_abt_view", "macro_sql": "{% macro create_salesforce_donors_abt_view() -%}\n\nDROP VIEW IF EXISTS salesforce.salesforce_donors_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW salesforce.salesforce_donors_abt_view AS\nselect\n    -- task\n    task_id as sfdt_task_id,\n    task_user_id as sfdt_task_user_id,\n    task_assigned_to__c as sfdt_task_assigned_to__c,\n    task_subject as sfdt_task_subject,\n    task_priority as sfdt_task_priority,\n    task_type as sfdt_task_type,\n    task_due_date as sfdt_task_due_date,\n    task_touch_reason__c as sfdt_task_touch_reason__c,\n    task_status as sfdt_task_status,\n    task_notes as sfdt_task_notes,\n    task_follow_up_notes__c as sfdt_task_follow_up_notes__c,\n    task_follow_up_2__c as sfdt_task_follow_up_2__c,\n    task_description as sfdt_task_description,\n    task_created_date as sfdt_task_created_date,\n    task_completed_datetime as sfdt_task_completed_datetime,\n    call_duration_in_seconds as sfdt_call_duration_in_seconds,\n    -- contact\n    contact_id as sfdt_contact_id,\n    contact_owner_id as sfdt_contact_owner_id,\n    contact_name as sfdt_contact_name,\n    contact_birthdate as sfdt_contact_birthdate,\n    contact_lastname as sfdt_contact_lastname,\n    contact_firstname as sfdt_contact_firstname,\n    -- gp_user\n    gp_user_id as sfdt_gp_user_id,\n    gp_user_ownerid as sfdt_gp_user_ownerid,\n    gp_user_name as sfdt_gp_user_name,\n    gp_user_role__c as sfdt_gp_user_role__c,\n    gp_user_email__c as sfdt_gp_user_email__c,\n    'salesforce_donors' as source_name\n-- sf_user\n-- wasnt required by Adam.\nfrom {{ this }}\nwhere task_is_deleted = false\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.620873}, "macro.smartpill.create_salesforce_patients_abt_view": {"unique_id": "macro.smartpill.create_salesforce_patients_abt_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_salesforce_patients_abt_view.sql", "original_file_path": "macros/abt/create_salesforce_patients_abt_view.sql", "name": "create_salesforce_patients_abt_view", "macro_sql": "{% macro create_salesforce_patients_abt_view() -%}\n\nDROP VIEW IF EXISTS salesforce.salesforce_patients_abt_view CASCADE;\n\nCREATE OR REPLACE VIEW salesforce.salesforce_patients_abt_view AS\nselect\n        -- task\n        task_id as sfgp_task_id,\n        task_user_id as sfgp_task_user_id,\n        task_related_to_id__c as sfgp_task_related_to_id__c,\n        task_assigned_to__c as sfgp_task_assigned_to__c,\n        task_subject as sfgp_task_subject,\n        task_priority as sfgp_task_priority,\n        task_type as sfgp_task_type,\n        task_due_date as sfgp_task_due_date,\n        task_status as sfgp_task_status,\n        task_notes as sfgp_task_notes,\n        task_follow_up_notes__c as sfgp_task_follow_up_notes__c,\n        task_follow_up_2__c as sfgp_task_follow_up_2__c,\n        task_description as sfgp_task_description,\n        task_created_date as sfgp_task_created_date,\n        task_completed_datetime as sfgp_task_completed_datetime,\n        call_duration_in_seconds as sfgp_call_duration_in_seconds,\n        aircall__country__c as sfgp_aircall__country__c,\n        aircall__timezone__c as sfgp_aircall__timezone__c,\n        aircall__answered_by__c as sfgp_aircall__answered_by__c,\n        aircall__is_voicemail__c as sfgp_aircall__is_voicemail__c,\n        aircall__phone_number__c as sfgp_aircall__phone_number__c,\n        aircall__waiting_time__c as sfgp_aircall__waiting_time__c,\n        aircall__detailed_type__c as sfgp_aircall__detailed_type__c,\n        aircall__has_connected__c as sfgp_aircall__has_connected__c,\n        aircall__call_recording__c as sfgp_aircall__call_recording__c,\n        aircall__is_missed_call__c as sfgp_aircall__is_missed_call__c,\n        aircall__transferred_to__c as sfgp_aircall__transferred_to__c,\n        aircall__hour_of_the_day__c as sfgp_aircall__hour_of_the_day__c,\n        aircall__connection_status__c as sfgp_aircall__connection_status__c,\n        aircall__missed_call_ratio__c as sfgp_aircall__missed_call_ratio__c,\n        -- contact\n        contact_id as sfgp_contact_id,\n        contact_owner_id as sfgp_contact_owner_id,\n        contact_gp_patient_id_cp__c as sfgp_contact_gp_patient_id_cp__c,\n        contact_name as sfgp_contact_name,\n        contact_birthdate as sfgp_contact_birthdate,\n        contact_lastname as sfgp_contact_lastname,\n        contact_firstname as sfgp_contact_firstname,\n        contact_gp_payment_coupon__c as sfgp_contact_gp_payment_coupon__c,\n        contact_gp_payment_method__c as sfgp_contact_gp_payment_method__c,\n        contact_gp_tracking_coupon__c as sfgp_contact_gp_tracking_coupon__c,\n        -- gp_user\n        gp_user_assigned_to_id as sfgp_gp_user_assigned_to_id,\n        gp_user_assigned_to_ownerid as sfgp_gp_user_assigned_to_ownerid,\n        gp_user_assigned_to_name as sfgp_gp_user_assigned_to_name,\n        gp_user_assigned_to_role__c as sfgp_gp_user_assigned_to_role__c,\n        gp_user_related_to_id as sfgp_gp_user_related_to_id,\n        gp_user_related_to_name as sfgp_gp_user_related_to_name,\n        gp_user_related_to_role__c as sfgp_gp_user_related_to_role__c,\n        'salesforce_patients' as source_name\n        -- sf_user\n        -- wasnt required by Adam.\n\n    from {{ this }}\n    where task_is_deleted = false\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6219332}, "macro.smartpill.create_sirum_dwh_view": {"unique_id": "macro.smartpill.create_sirum_dwh_view", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/abt/create_sirum_dwh_view.sql", "original_file_path": "macros/abt/create_sirum_dwh_view.sql", "name": "create_sirum_dwh_view", "macro_sql": "{% macro create_sirum_dwh_view() -%}\n\nCREATE OR REPLACE VIEW dwh.sirum_datawarehouse AS (\n    {{  dbt_utils.union_relations(\n    relations=[\n        source('dwh', 'general_ledger_abt_view'),\n        source('salesforce', 'salesforce_patients_abt_view'),\n        source('salesforce', 'salesforce_donors_abt_view'),\n        source('goodpill', 'active_orders_abt_view'),\n        source('goodpill', 'goodpill_abt_view'),\n        source('goodpill', 'patient_comms_view'),\n        source('goodpill', 'gp_pharmacy_actions_abt')        \n    ],\n    source_column_name=None\n    )\n}}\n)\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6234782}, "macro.smartpill.star": {"unique_id": "macro.smartpill.star", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/analytics_utils/star.sql", "original_file_path": "macros/analytics_utils/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6252637}, "macro.smartpill.default__star": {"unique_id": "macro.smartpill.default__star", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/analytics_utils/star.sql", "original_file_path": "macros/analytics_utils/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n\t\t{%- if col.startswith(prefix) -%}\n\t\t\t{%- set col_name = adapter.quote(col ~ suffix)|trim -%}\n\t\t{%- else -%}\n\t\t\t{%- set col_name = adapter.quote(prefix ~ col ~ suffix)|trim -%}\n\t\t{%- endif -%}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ col_name }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6280375}, "macro.smartpill.format_json_path": {"unique_id": "macro.smartpill.format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "format_json_path", "macro_sql": "{% macro format_json_path(json_path_list) -%}\n    {{ adapter.dispatch('format_json_path')(json_path_list) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6297972}, "macro.smartpill.default__format_json_path": {"unique_id": "macro.smartpill.default__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "default__format_json_path", "macro_sql": "{% macro default__format_json_path(json_path_list) -%}\n    {{ '.' ~ json_path_list|join('.') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6301007}, "macro.smartpill.mysql__format_json_path": {"unique_id": "macro.smartpill.mysql__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__format_json_path", "macro_sql": "{% macro mysql__format_json_path(json_path_list) -%}\n    {# -- '$.\"x\".\"y\".\"z\"' #}\n    {{ \"'$.\\\"\" ~ json_path_list|join(\"\\\".\\\"\") ~ \"\\\"'\" }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.630432}, "macro.smartpill.postgres__format_json_path": {"unique_id": "macro.smartpill.postgres__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__format_json_path", "macro_sql": "{% macro postgres__format_json_path(json_path_list) -%}\n    {%- set str_list = [] -%}\n    {%- for json_path in json_path_list -%}\n        {%- if str_list.append(json_path.replace(\"'\", \"''\")) -%} {%- endif -%}\n    {%- endfor -%}\n    {{ \"'\" ~ str_list|join(\"','\") ~ \"'\" }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6311812}, "macro.smartpill.json_extract": {"unique_id": "macro.smartpill.json_extract", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6315691}, "macro.smartpill.mysql__json_extract": {"unique_id": "macro.smartpill.mysql__json_extract", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract", "macro_sql": "{% macro mysql__json_extract(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.631902}, "macro.smartpill.postgres__json_extract": {"unique_id": "macro.smartpill.postgres__json_extract", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(json_column, normalized_json_path) -%}\n\tjsonb_extract_path({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6322231}, "macro.smartpill.json_extract_scalar": {"unique_id": "macro.smartpill.json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_scalar", "macro_sql": "{% macro json_extract_scalar(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_scalar')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract_scalar"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6325755}, "macro.smartpill.mysql__json_extract_scalar": {"unique_id": "macro.smartpill.mysql__json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_scalar", "macro_sql": "{% macro mysql__json_extract_scalar(json_column, normalized_json_path) -%}\n    json_value({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6329172}, "macro.smartpill.postgres__json_extract_scalar": {"unique_id": "macro.smartpill.postgres__json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract_scalar", "macro_sql": "{% macro postgres__json_extract_scalar(json_column, normalized_json_path) -%}\n    jsonb_extract_path_text({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.633247}, "macro.smartpill.json_extract_array": {"unique_id": "macro.smartpill.json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_array", "macro_sql": "{% macro json_extract_array(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_array')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract_array"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6336026}, "macro.smartpill.mysql__json_extract_array": {"unique_id": "macro.smartpill.mysql__json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_array", "macro_sql": "{% macro mysql__json_extract_array(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6342387}, "macro.smartpill.postgres__json_extract_array": {"unique_id": "macro.smartpill.postgres__json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract_array", "macro_sql": "{% macro postgres__json_extract_array(json_column, normalized_json_path) -%}\n    -- TODO: Fix postgres macros or use dbt-utils\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6347346}, "macro.smartpill.contacts_is_edited_logic_macro": {"unique_id": "macro.smartpill.contacts_is_edited_logic_macro", "package_name": "smartpill", "root_path": "/data/git_repo/dbt", "path": "macros/reverse_etl/contacts_is_edited_logic_macro.sql", "original_file_path": "macros/reverse_etl/contacts_is_edited_logic_macro.sql", "name": "contacts_is_edited_logic_macro", "macro_sql": "{% macro contacts_is_edited_logic_macro() -%}\n\nlower(p.first_name) is distinct from lower(psf.contact_firstname)\nor lower(p.first_name) is distinct from lower(psf.contact_first_name__c)\n\nor lower(p.email) is distinct from lower(psf.contact_email)\nor lower(p.email) is distinct from lower(psf.contact_gp_email__c)\n\nor p.patient_id_wc is distinct from psf.contact_gp_patient_id_wc__c\nor lower(p.language) is distinct from lower(psf.contact_gp_language__c)\nor lower(p.patient_address1) is distinct from lower(psf.contact_gp_patient_address1__c)\nor lower(p.patient_address2) is distinct from lower(psf.contact_gp_patient_address2__c)\nor p.patient_autofill is distinct from psf.contact_gp_patient_autofill__c::float::int\n\nor lower(p.patient_city) is distinct from lower(psf.contact_gp_patient_city__c)\n-- \tdate_added__c & date_changed__c may are updated because a related entity changed. So it\n--\tdoesnt mean that the record itself changed (Adam)\n--\tor p.patient_date_added is distinct from psf.contact_gp_patient_date_added__c\n--\tor p.patient_date_changed is distinct from psf.contact_gp_patient_date_changed__c\n\n-- Salesforce Next Line char is not equal to MariaDB Next Line char, so I replace all variations to be equal\n-- https://stackoverflow.com/questions/7836906/how-to-remove-carriage-returns-and-new-lines-in-postgresql\n-- https://en.wikipedia.org/wiki/Newline#Unicode\nor trim(regexp_replace( substring(lower(p.patient_note),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' )) is distinct from trim(regexp_replace( substring(lower(psf.contact_gp_patient_note__c),1,3000), E'[\\\\n\\\\r\\\\f\\\\u000B\\\\u0085\\\\u2028\\\\u2029]+', ' ', 'g' ))\n\nor lower(p.patient_state) is distinct from lower(psf.contact_gp_patient_state__c)\nor lower(p.patient_inactive) is distinct from lower(psf.contact_gp_patient_status__c)\nor lower(p.patient_zip) is distinct from lower(psf.contact_gp_patient_zip__c)\n\nor p.payment_card_date_expired is distinct from psf.contact_gp_payment_card_date_expired__c\nor lower(p.payment_card_last4) is distinct from lower(psf.contact_gp_payment_card_last4__c)\nor lower(p.payment_card_type) is distinct from lower(psf.contact_gp_payment_card_type__c)\n\nor lower(p.payment_coupon) is distinct from lower(psf.contact_gp_payment_coupon__c)\nor lower(p.payment_method_default) is distinct from lower(psf.contact_gp_payment_method__c)\n\nor lower(p.pharmacy_fax) is distinct from lower(psf.contact_gp_pharmacy_fax__c)\nor lower(p.pharmacy_npi) is distinct from lower(psf.contact_gp_pharmacy_npi__c)\nor lower(p.pharmacy_name) is distinct from lower(psf.contact_gp_pharmacy_name__c)\nor lower(p.pharmacy_phone) is distinct from lower(psf.contact_gp_pharmacy_phone__c)\nor lower(p.pharmacy_address) is distinct from lower(psf.contact_gp_pharmacy_address__c)\n\nor p.phone1 is distinct from psf.contact_gp_phone1__c\nor p.phone2 is distinct from psf.contact_gp_phone2__c\n\nor p.refills_used is distinct from psf.contact_gp_refills_used__c::numeric(5,2)\nor p.tracking_coupon is distinct from psf.contact_gp_tracking_coupon__c\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6358218}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6485639}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6497843}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6504953}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6511757}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_profiler.information_schema", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.652243}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6530652}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.653571}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.654485}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6555493}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6557767}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6561732}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6564007}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6582599}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6587372}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.659476}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6600695}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6609886}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6614752}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.662727}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6631677}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6634717}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6659157}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6673048}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6692264}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6697452}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.670335}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6767495}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6780665}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6796038}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6806655}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6842072}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6844711}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.684848}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6852484}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6860209}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6864305}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6866555}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6871302}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6876287}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6881232}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.688527}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6892512}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6911101}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6915557}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6920807}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.6925602}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.696581}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7001438}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7005317}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7012131}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.701608}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.702333}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7028155}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7043915}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7049863}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7066686}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7079074}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7082314}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7087314}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7096941}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.710875}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7111745}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.711582}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7126565}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7157161}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7162929}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7167084}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7170517}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7174304}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.717953}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7183805}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7190156}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7249148}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7253995}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7270288}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7274222}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.727861}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7282226}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7288418}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7300339}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.736877}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7374194}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.737939}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7385626}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7390764}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.739943}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.740348}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7409325}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7413313}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7420616}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7434342}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.744793}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.745656}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7470567}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7476687}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7480059}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.748429}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7497504}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7504385}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.750946}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7513564}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7553232}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.758145}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7606158}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7612019}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7641585}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7655392}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7662263}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7679718}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7689946}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7702048}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7714338}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7726111}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7732408}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7742066}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.774763}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7760136}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7768183}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7774508}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.778473}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7793221}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7802498}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7830837}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7835963}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7839248}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7842343}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7845418}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7864485}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7876809}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.7897398}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8014007}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8033574}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.814632}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8182838}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8189924}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8206747}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8212512}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.823291}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8332763}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8369045}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.840588}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.842288}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8439271}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8445468}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.845154}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8462274}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8532093}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8573709}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.858515}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8590956}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.859529}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8606272}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8615348}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8621695}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8694232}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.879406}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8815117}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.882027}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8833337}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8838391}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.884136}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8844368}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8846998}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.885428}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.885701}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.887183}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.887775}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8910134}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.8992093}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9072385}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9079454}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9083238}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9086292}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9089723}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.909227}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9098468}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9121869}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.912624}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.913173}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9144397}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9279912}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9294136}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9300284}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9375231}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9379492}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9385903}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9389138}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9396675}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.941269}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9420555}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9424522}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9462738}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9494932}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9509146}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9516337}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.957179}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9582303}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9592946}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9601078}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9604735}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9613202}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9615517}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9624102}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9627967}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9636526}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.963957}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.966447}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9670691}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9674783}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9678268}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9681973}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9687934}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9691527}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9695306}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9698737}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9701993}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9706485}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.970976}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9721057}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9725432}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9736805}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.974052}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9752154}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9756465}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9767108}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9770353}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9776986}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9778802}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9785745}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9789298}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9797606}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9799492}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9813354}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.982067}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9826114}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9836798}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.983934}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9853945}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.986466}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.987339}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9876373}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9886754}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9890957}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9900618}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9904354}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9912035}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9915705}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.992464}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.992902}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9945261}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9948907}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9955902}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.99739}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9980435}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9986613}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701087.9995244}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0011766}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.002599}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0041966}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0050457}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0066812}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0074673}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0091348}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0107253}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.011736}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0121312}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.013491}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0143487}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0153267}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0162177}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.01819}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0205412}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.021769}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0224054}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.023649}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0241523}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0302002}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0340538}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.035253}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0359035}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0373979}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0387957}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0399334}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0409045}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0426843}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0517395}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0533953}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0538058}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0550869}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0557024}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0582278}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0599205}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.060847}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.061322}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.062179}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0626454}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0634599}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0639024}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.066296}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0684748}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0696468}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0701263}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0719862}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0747283}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0791576}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0804992}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0825896}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.083761}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0850682}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.086697}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.089135}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0909925}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.093258}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0946414}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.095509}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0964913}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.0970592}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.09931}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1001909}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.10164}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.104221}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1053762}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1061857}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.107081}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1078699}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1097584}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1114423}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.111973}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.112752}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1182556}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1190114}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.119517}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1199496}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1206608}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1212902}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1223278}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1226432}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1229398}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.126223}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1272094}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1290362}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1305323}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1333096}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1356833}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1367965}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1375873}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1393533}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.141795}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1435504}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1464107}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.152122}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name != none %}\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1592135}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1628866}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1671736}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.170107}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1710987}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1721094}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1725252}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1735425}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1745222}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1754394}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1761715}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1773062}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1786876}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1799736}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.18028}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1806881}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1810787}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1822922}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1825998}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.183045}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1833398}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.184836}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.185378}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1856859}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.185986}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1862867}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.postgres__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1880486}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1887472}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1903005}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1938202}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1941192}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1963463}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1971014}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1972802}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1974382}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1979954}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1982696}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1987545}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.1990902}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.19972}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2008553}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2015812}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2043447}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.20533}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2063062}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2069612}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.207762}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2085407}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.210038}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt_profiler.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2106018}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2110605}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.211655}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2121153}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2129333}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.213302}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2140915}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2144563}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2153802}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2157962}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2168665}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2179615}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2187903}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2199616}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.220893}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2218385}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2225413}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2236493}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2242622}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2250857}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2256517}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2263796}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2270544}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.22822}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2285619}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2289653}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2298636}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2304428}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2315261}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2323692}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2331326}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2337465}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.235007}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2363346}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2388139}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.239612}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2406852}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2425387}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2480712}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2510195}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2529447}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.25364}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2546005}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2554617}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2567053}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2574332}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2586706}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2600744}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.272842}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.274404}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.275189}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.276467}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n  \n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2888315}, "macro.dbt_profiler.type_string": {"unique_id": "macro.dbt_profiler.type_string", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2912254}, "macro.dbt_profiler.default__type_string": {"unique_id": "macro.dbt_profiler.default__type_string", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__type_string", "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.291453}, "macro.dbt_profiler.bigquery__type_string": {"unique_id": "macro.dbt_profiler.bigquery__type_string", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.291636}, "macro.dbt_profiler.databricks__type_string": {"unique_id": "macro.dbt_profiler.databricks__type_string", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "databricks__type_string", "macro_sql": "{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.291797}, "macro.dbt_profiler.is_numeric_dtype": {"unique_id": "macro.dbt_profiler.is_numeric_dtype", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "is_numeric_dtype", "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__is_numeric_dtype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.292199}, "macro.dbt_profiler.default__is_numeric_dtype": {"unique_id": "macro.dbt_profiler.default__is_numeric_dtype", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__is_numeric_dtype", "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2932007}, "macro.dbt_profiler.sqlserver__is_numeric_dtype": {"unique_id": "macro.dbt_profiler.sqlserver__is_numeric_dtype", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "sqlserver__is_numeric_dtype", "macro_sql": "{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2940557}, "macro.dbt_profiler.is_date_or_time_dtype": {"unique_id": "macro.dbt_profiler.is_date_or_time_dtype", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "is_date_or_time_dtype", "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.294476}, "macro.dbt_profiler.default__is_date_or_time_dtype": {"unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__is_date_or_time_dtype", "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2952259}, "macro.dbt_profiler.information_schema": {"unique_id": "macro.dbt_profiler.information_schema", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "information_schema", "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2958794}, "macro.dbt_profiler.default__information_schema": {"unique_id": "macro.dbt_profiler.default__information_schema", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__information_schema", "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2962096}, "macro.dbt_profiler.bigquery__information_schema": {"unique_id": "macro.dbt_profiler.bigquery__information_schema", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "bigquery__information_schema", "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2967765}, "macro.dbt_profiler.select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "select_from_information_schema_columns", "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__select_from_information_schema_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2973225}, "macro.dbt_profiler.default__select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "default__select_from_information_schema_columns", "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2978785}, "macro.dbt_profiler.redshift__select_from_information_schema_columns": {"unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "name": "redshift__select_from_information_schema_columns", "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.2983105}, "macro.dbt_profiler.get_profile": {"unique_id": "macro.dbt_profiler.get_profile", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "name": "get_profile", "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__get_profile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.338889}, "macro.dbt_profiler.default__get_profile": {"unique_id": "macro.dbt_profiler.default__get_profile", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "name": "default__get_profile", "macro_sql": "{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3518353}, "macro.dbt_profiler.databricks__get_profile": {"unique_id": "macro.dbt_profiler.databricks__get_profile", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "name": "databricks__get_profile", "macro_sql": "{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.statement", "macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3641887}, "macro.dbt_profiler.sqlserver__get_profile": {"unique_id": "macro.dbt_profiler.sqlserver__get_profile", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "name": "sqlserver__get_profile", "macro_sql": "{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            round(sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric), 2) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            round(count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric), 2) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            case when count(distinct {{ adapter.quote(column_name) }}) = count(*) THEN 1 ELSE 0 END as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg(cast({{ adapter.quote(column_name) }} as numeric)){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stdevp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stdevp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3762717}, "macro.dbt_profiler.get_profile_table": {"unique_id": "macro.dbt_profiler.get_profile_table", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/get_profile_table.sql", "original_file_path": "macros/get_profile_table.sql", "name": "get_profile_table", "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_relation", "macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3792284}, "macro.dbt_profiler.print_profile": {"unique_id": "macro.dbt_profiler.print_profile", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/print_profile.sql", "original_file_path": "macros/print_profile.sql", "name": "print_profile", "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3816833}, "macro.dbt_profiler.print_profile_docs": {"unique_id": "macro.dbt_profiler.print_profile_docs", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/print_profile_docs.sql", "original_file_path": "macros/print_profile_docs.sql", "name": "print_profile_docs", "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if docs_name is none %}\n  {% set docs_name = 'dbt_profiler__' + relation_name %}\n{% endif %}\n\n{% if execute %}\n  {{ log('{% docs ' + docs_name + '  %}', info=True) }}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n  {{ log('{% enddocs %}', info=True) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3844495}, "macro.dbt_profiler.print_profile_schema": {"unique_id": "macro.dbt_profiler.print_profile_schema", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/print_profile_schema.sql", "original_file_path": "macros/print_profile_schema.sql", "name": "print_profile_schema", "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3894124}, "macro.dbt_profiler.get_relation": {"unique_id": "macro.dbt_profiler.get_relation", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "get_relation", "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3937116}, "macro.dbt_profiler.assert_relation_exists": {"unique_id": "macro.dbt_profiler.assert_relation_exists", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "assert_relation_exists", "macro_sql": "\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_profiler.default__assert_relation_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3941796}, "macro.dbt_profiler.default__assert_relation_exists": {"unique_id": "macro.dbt_profiler.default__assert_relation_exists", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "default__assert_relation_exists", "macro_sql": "{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3945234}, "macro.dbt_profiler.sqlserver__assert_relation_exists": {"unique_id": "macro.dbt_profiler.sqlserver__assert_relation_exists", "package_name": "dbt_profiler", "root_path": "/data/git_repo/dbt/dbt_packages/dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "name": "sqlserver__assert_relation_exists", "macro_sql": "{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1703701088.3949692}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.10/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.smartpill.v2_accounts": ["source.smartpill.raw._airbyte_raw_cortex_v2_accounts"], "model.smartpill.v2_accounts_ordered": ["source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered"], "model.smartpill.v2_drug_generics": ["source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics"], "model.smartpill.v2_drug_gsns": ["source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns"], "model.smartpill.v2_drugs": ["source.smartpill.raw._airbyte_raw_cortex_v2_drugs"], "model.smartpill.v2_failed_imports": ["source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports"], "model.smartpill.v2_shipment_item_stages": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages"], "model.smartpill.v2_shipment_items": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items"], "model.smartpill.v2_shipments": ["source.smartpill.raw._airbyte_raw_cortex_v2_shipments"], "model.smartpill.v2_sync_status": ["source.smartpill.raw._airbyte_raw_cortex_v2_sync_status"], "model.smartpill.clinic_coupons": ["source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons"], "model.smartpill.clinics": ["source.smartpill.raw._airbyte_raw_goodpill_gp_clinics"], "model.smartpill.drugs": ["source.smartpill.raw._airbyte_raw_goodpill_gp_drugs"], "model.smartpill.dw_clinic_groups": ["source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups"], "model.smartpill.dw_clinics": ["source.smartpill.raw._airbyte_raw_goodpill_dw_clinics"], "model.smartpill.dw_providers": ["source.smartpill.raw._airbyte_raw_goodpill_dw_providers"], "model.smartpill.dw_providers_clinics": ["source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics"], "model.smartpill.gp_order_items_inventory_items": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items"], "model.smartpill.gp_pend_group": ["source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group"], "model.smartpill.gp_pharmacy_actions": ["source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions"], "model.smartpill.gp_stock_live": ["source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live"], "model.smartpill.order_items": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items"], "model.smartpill.orders": ["source.smartpill.raw._airbyte_raw_goodpill_gp_orders"], "model.smartpill.patient_comms": [], "model.smartpill.patient_merge_cp": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp"], "model.smartpill.patients": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patients"], "model.smartpill.providers": ["source.smartpill.raw._airbyte_raw_goodpill_gp_providers"], "model.smartpill.rxs_grouped": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped"], "model.smartpill.rxs_single": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"], "model.smartpill.active_orders_abt": ["model.smartpill.orders", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.goodpill_abt": ["model.smartpill.clinic_coupons", "model.smartpill.clinics", "model.smartpill.clinics", "model.smartpill.drugs", "model.smartpill.dw_clinic_groups", "model.smartpill.dw_clinics", "model.smartpill.dw_providers", "model.smartpill.gp_pend_group", "model.smartpill.gp_stock_live", "model.smartpill.order_items", "model.smartpill.orders", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients_status_historic", "model.smartpill.providers", "model.smartpill.rxs_joined", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.gp_pharmacy_actions_abt": ["model.smartpill.gp_pharmacy_actions", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.patient_comms_abt": ["model.smartpill.patient_comms", "model.smartpill.patients", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.raw_gp_rxs_single": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"], "model.smartpill.patients_status_historic": ["model.smartpill.order_items", "model.smartpill.orders", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.rxs_joined", "model.smartpill.rxs_joined", "model.smartpill.rxs_joined"], "model.smartpill.rxs_joined": ["model.smartpill.clinics", "model.smartpill.rxs_grouped", "model.smartpill.rxs_single"], "model.smartpill.v2_accounts_ordered_profile": ["model.smartpill.v2_accounts_ordered"], "model.smartpill.v2_accounts_profile": ["model.smartpill.v2_accounts"], "model.smartpill.v2_drug_generics_profile": ["model.smartpill.v2_drug_generics"], "model.smartpill.v2_drug_gsns_profile": ["model.smartpill.v2_drug_gsns"], "model.smartpill.v2_drugs_profile": ["model.smartpill.v2_drugs"], "model.smartpill.v2_failed_imports_profile": ["model.smartpill.v2_failed_imports"], "model.smartpill.v2_shipment_item_stages_profile": ["model.smartpill.v2_shipment_item_stages"], "model.smartpill.v2_shipment_items_profile": ["model.smartpill.v2_shipment_items"], "model.smartpill.v2_shipments_profile": ["model.smartpill.v2_shipments"], "model.smartpill.v2_sync_status_profile": ["model.smartpill.v2_sync_status"], "model.smartpill.clinic_coupons_profile": ["model.smartpill.clinic_coupons"], "model.smartpill.clinics_profile": ["model.smartpill.clinics"], "model.smartpill.drugs_profile": ["model.smartpill.drugs"], "model.smartpill.dw_clinic_groups_profile": ["model.smartpill.dw_clinic_groups"], "model.smartpill.dw_clinics_profile": ["model.smartpill.dw_clinics"], "model.smartpill.dw_providers_clinics_profile": ["model.smartpill.dw_providers_clinics"], "model.smartpill.dw_providers_profile": ["model.smartpill.dw_providers"], "model.smartpill.order_items_profile": ["model.smartpill.order_items"], "model.smartpill.orders_profile": ["model.smartpill.orders"], "model.smartpill.patients_profile": ["model.smartpill.patients"], "model.smartpill.providers_profile": ["model.smartpill.providers"], "model.smartpill.rxs_grouped_profile": ["model.smartpill.rxs_grouped"], "model.smartpill.rxs_single_profile": ["model.smartpill.rxs_single"], "model.smartpill.goodpill_abt_profile": ["model.smartpill.goodpill_abt"], "model.smartpill.salesforce_donors_abt_profile": ["model.smartpill.salesforce_donors_abt"], "model.smartpill.salesforce_patients_abt_profile": ["model.smartpill.salesforce_patients_abt"], "model.smartpill.accounts": ["source.smartpill.raw._airbyte_raw_quickbooks_accounts"], "model.smartpill.bill_payments": ["source.smartpill.raw._airbyte_raw_quickbooks_bill_payments"], "model.smartpill.bill_payments_lines": ["model.smartpill.bill_payments"], "model.smartpill.bills": ["source.smartpill.raw._airbyte_raw_quickbooks_bills"], "model.smartpill.bills_lines": ["model.smartpill.bills"], "model.smartpill.classes": ["source.smartpill.raw._airbyte_raw_quickbooks_classes"], "model.smartpill.credit_memos": ["source.smartpill.raw._airbyte_raw_quickbooks_credit_memos"], "model.smartpill.credit_memos_lines": ["model.smartpill.credit_memos"], "model.smartpill.customers": ["source.smartpill.raw._airbyte_raw_quickbooks_customers"], "model.smartpill.deleted_objects": ["source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects"], "model.smartpill.deposits": ["source.smartpill.raw._airbyte_raw_quickbooks_deposits"], "model.smartpill.deposits_lines": ["model.smartpill.deposits"], "model.smartpill.invoices": ["source.smartpill.raw._airbyte_raw_quickbooks_invoices"], "model.smartpill.invoices_lines": ["model.smartpill.invoices"], "model.smartpill.items": ["source.smartpill.raw._airbyte_raw_quickbooks_items"], "model.smartpill.journal_entries": ["source.smartpill.raw._airbyte_raw_quickbooks_journal_entries"], "model.smartpill.journal_entries_lines": ["model.smartpill.journal_entries"], "model.smartpill.payments": ["source.smartpill.raw._airbyte_raw_quickbooks_payments"], "model.smartpill.purchases": ["source.smartpill.raw._airbyte_raw_quickbooks_purchases"], "model.smartpill.purchases_lines": ["model.smartpill.purchases"], "model.smartpill.sales_receipts": ["source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts"], "model.smartpill.sales_receipts_lines": ["model.smartpill.sales_receipts"], "model.smartpill.transfers": ["source.smartpill.raw._airbyte_raw_quickbooks_transfers"], "model.smartpill.vendor_credits": ["source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits"], "model.smartpill.vendor_credits_lines": ["model.smartpill.vendor_credits"], "model.smartpill.accounts_top_level": ["model.smartpill.accounts"], "model.smartpill.general_ledger_abt": ["model.smartpill.accounts_top_level", "model.smartpill.accounts_top_level", "model.smartpill.classes", "model.smartpill.customers", "model.smartpill.int__account_classifications", "model.smartpill.int__bill_double_entry", "model.smartpill.int__bill_payment_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__deposit_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__journal_entry_double_entry", "model.smartpill.int__payment_double_entry", "model.smartpill.int__payroll_check_double_entry", "model.smartpill.int__purchase_double_entry", "model.smartpill.int__sales_receipts_double_entry", "model.smartpill.int__transfer_double_entry", "model.smartpill.int__vendor_credit_double_entry", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.int__account_classifications": ["model.smartpill.accounts"], "model.smartpill.int__bill_double_entry": ["model.smartpill.bills", "model.smartpill.bills_lines", "model.smartpill.deleted_objects", "model.smartpill.deleted_objects", "model.smartpill.items"], "model.smartpill.int__bill_payment_double_entry": ["model.smartpill.accounts", "model.smartpill.bill_payments", "model.smartpill.deleted_objects"], "model.smartpill.int__credit_memo_double_entry": ["model.smartpill.accounts", "model.smartpill.credit_memos", "model.smartpill.credit_memos_lines", "model.smartpill.deleted_objects", "model.smartpill.deleted_objects", "model.smartpill.items"], "model.smartpill.int__deposit_double_entry": ["model.smartpill.accounts", "model.smartpill.deleted_objects", "model.smartpill.deposits", "model.smartpill.deposits_lines"], "model.smartpill.int__invoice_double_entry": ["model.smartpill.accounts", "model.smartpill.accounts", "model.smartpill.deleted_objects", "model.smartpill.deleted_objects", "model.smartpill.invoices", "model.smartpill.invoices_lines", "model.smartpill.items"], "model.smartpill.int__journal_entry_double_entry": ["model.smartpill.deleted_objects", "model.smartpill.journal_entries", "model.smartpill.journal_entries_lines"], "model.smartpill.int__payment_double_entry": ["model.smartpill.accounts", "model.smartpill.deleted_objects", "model.smartpill.payments"], "model.smartpill.int__payroll_check_double_entry": ["model.smartpill.accounts", "source.smartpill.raw.quickbooks_payroll_checks"], "model.smartpill.int__purchase_double_entry": ["model.smartpill.deleted_objects", "model.smartpill.deleted_objects", "model.smartpill.items", "model.smartpill.purchases", "model.smartpill.purchases_lines"], "model.smartpill.int__sales_receipts_double_entry": ["model.smartpill.deleted_objects", "model.smartpill.deleted_objects", "model.smartpill.items", "model.smartpill.items", "model.smartpill.sales_receipts", "model.smartpill.sales_receipts_lines"], "model.smartpill.int__transfer_double_entry": ["model.smartpill.deleted_objects", "model.smartpill.transfers"], "model.smartpill.int__vendor_credit_double_entry": ["model.smartpill.deleted_objects", "model.smartpill.vendor_credits", "model.smartpill.vendor_credits_lines"], "model.smartpill.contact_deletions_history": ["model.smartpill.patient_to_contact_deletions", "model.smartpill.patients_contact"], "model.smartpill.contact_to_patient_deleted_contact_info": ["model.smartpill.patient_to_contact_deletions", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patients_contact"], "model.smartpill.patient_to_contact_deletions": ["model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patients_contact", "model.smartpill.patients_task"], "model.smartpill.patient_to_contact_tasks_to_migrate": ["model.smartpill.patient_merge_cp", "model.smartpill.patients", "model.smartpill.patients", "model.smartpill.patients_contact", "model.smartpill.patients_task"], "model.smartpill.contact_notifications_history": ["model.smartpill.patient_to_contact_deletions_non_merged", "model.smartpill.patient_to_contact_dummies"], "model.smartpill.patient_to_contact_deletions_non_merged": ["model.smartpill.patient_merge_cp", "model.smartpill.patients", "model.smartpill.patients_contact", "source.smartpill.reverse_etl.contact_notifications_history"], "model.smartpill.patient_to_contact_dummies": ["model.smartpill.patients_contact", "source.smartpill.reverse_etl.contact_notifications_history"], "model.smartpill.patient_to_contact_additions": ["model.smartpill.patients", "model.smartpill.patients_contact"], "model.smartpill.patient_to_contact_editions": ["model.smartpill.patients", "model.smartpill.patients_contact", "model.smartpill.patients_contact"], "model.smartpill.patient_to_contact_new_additions": ["model.smartpill.patient_to_contact_additions", "source.smartpill.reverse_etl.patient_to_contact_non_updated"], "model.smartpill.patient_to_contact_new_editions": ["model.smartpill.patient_to_contact_editions", "source.smartpill.reverse_etl.patient_to_contact_non_updated"], "model.smartpill.patient_to_contact_non_updated": ["model.smartpill.patient_to_contact_new_additions", "model.smartpill.patient_to_contact_new_editions", "model.smartpill.patients_contact", "model.smartpill.patients_contact"], "model.smartpill.patient_to_contact_null_records": ["model.smartpill.patient_to_contact_editions", "model.smartpill.patients", "model.smartpill.patients_contact", "source.smartpill.reverse_etl.patient_to_contact_non_updated"], "model.smartpill.patient_to_contact_retries": ["model.smartpill.patient_to_contact_additions", "model.smartpill.patient_to_contact_editions", "source.smartpill.reverse_etl.patient_to_contact_non_updated"], "model.smartpill.patient_to_contact_upserts": ["model.smartpill.patient_to_contact_new_additions", "model.smartpill.patient_to_contact_new_editions"], "model.smartpill.donors_contact": ["source.smartpill.raw._airbyte_raw_salesforce_donors_contact"], "model.smartpill.donors_task": ["source.smartpill.raw._airbyte_raw_salesforce_donors_task"], "model.smartpill.donors_user": ["source.smartpill.raw._airbyte_raw_salesforce_donors_user"], "model.smartpill.salesforce_donors_abt": ["model.smartpill.donors_contact", "model.smartpill.donors_task", "model.smartpill.patients_gp_user__c", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "model.smartpill.patients_contact": ["source.smartpill.raw._airbyte_raw_salesforce_contact"], "model.smartpill.patients_gp_user__c": ["source.smartpill.raw._airbyte_raw_salesforce_gp_user__c"], "model.smartpill.patients_sf_user": ["source.smartpill.raw._airbyte_raw_salesforce_user"], "model.smartpill.patients_task": ["source.smartpill.raw._airbyte_raw_salesforce_task"], "model.smartpill.salesforce_patients_abt": ["model.smartpill.patients_contact", "model.smartpill.patients_gp_user__c", "model.smartpill.patients_task", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.dwh.general_ledger_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.active_orders_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.goodpill_abt_view", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.gp_pharmacy_actions_abt", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.goodpill.patient_comms_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_donors_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view", "source.smartpill.salesforce.salesforce_patients_abt_view"], "snapshot.smartpill.clinic_coupons_snapshot": ["model.smartpill.clinic_coupons"], "snapshot.smartpill.clinics_snapshot": ["model.smartpill.clinics"], "snapshot.smartpill.drugs_snapshot": ["model.smartpill.drugs"], "snapshot.smartpill.dw_clinic_groups_snapshot": ["model.smartpill.dw_clinic_groups"], "snapshot.smartpill.dw_clinics_snapshot": ["model.smartpill.dw_clinics"], "snapshot.smartpill.dw_providers_snapshot": ["model.smartpill.dw_providers"], "snapshot.smartpill.dw_providers_clinics_snapshot": ["model.smartpill.dw_providers_clinics"], "snapshot.smartpill.order_items_snapshot": ["model.smartpill.order_items"], "snapshot.smartpill.orders_snapshot": ["model.smartpill.orders"], "snapshot.smartpill.patients_snapshot": ["model.smartpill.patients"], "snapshot.smartpill.providers_snapshot": ["model.smartpill.providers"], "snapshot.smartpill.rxs_grouped_snapshot": ["model.smartpill.rxs_grouped"], "snapshot.smartpill.rxs_single_snapshot": ["model.smartpill.rxs_single"], "seed.smartpill.patient_events": [], "test.smartpill.unique_v2_accounts_id.3a8c7b7210": ["model.smartpill.v2_accounts"], "test.smartpill.not_empty_v2_accounts_.51135668b6": ["model.smartpill.v2_accounts"], "test.smartpill.unique_v2_accounts_ordered_id.54621e9db9": ["model.smartpill.v2_accounts_ordered"], "test.smartpill.not_empty_v2_accounts_ordered_.c1a644b2c6": ["model.smartpill.v2_accounts_ordered"], "test.smartpill.unique_v2_drug_generics_id.6bbab260eb": ["model.smartpill.v2_drug_generics"], "test.smartpill.not_empty_v2_drug_generics_.2f09c49309": ["model.smartpill.v2_drug_generics"], "test.smartpill.unique_v2_drug_gsns_id.1ea442144d": ["model.smartpill.v2_drug_gsns"], "test.smartpill.not_empty_v2_drug_gsns_.de54fd18e7": ["model.smartpill.v2_drug_gsns"], "test.smartpill.unique_v2_drugs_id.b546286cbe": ["model.smartpill.v2_drugs"], "test.smartpill.not_empty_v2_drugs_.b331f2e8ae": ["model.smartpill.v2_drugs"], "test.smartpill.unique_v2_failed_imports_id.9466209e5f": ["model.smartpill.v2_failed_imports"], "test.smartpill.not_empty_v2_failed_imports_.4071632124": ["model.smartpill.v2_failed_imports"], "test.smartpill.unique_v2_shipments_id.d00a275819": ["model.smartpill.v2_shipments"], "test.smartpill.not_empty_v2_shipments_.acab72c220": ["model.smartpill.v2_shipments"], "test.smartpill.not_empty_v2_sync_status_.5f30ac6bcf": ["model.smartpill.v2_sync_status"], "test.smartpill.unique_v2_shipment_items_id.a41caec0e9": ["model.smartpill.v2_shipment_items"], "test.smartpill.not_empty_v2_shipment_items_.f5089b01f8": ["model.smartpill.v2_shipment_items"], "test.smartpill.unique_v2_shipment_item_stages_id.9253b51d35": ["model.smartpill.v2_shipment_item_stages"], "test.smartpill.not_empty_v2_shipment_item_stages_.16d9b6ccb9": ["model.smartpill.v2_shipment_item_stages"], "test.smartpill.not_empty_clinic_coupons_.37a00908df": ["model.smartpill.clinic_coupons"], "test.smartpill.not_empty_clinics_.3cfce17578": ["model.smartpill.clinics"], "test.smartpill.not_empty_dw_clinics_.567803ea76": ["model.smartpill.dw_clinics"], "test.smartpill.not_empty_dw_clinic_groups_.4973771295": ["model.smartpill.dw_clinic_groups"], "test.smartpill.not_empty_dw_providers_.216d2d8ae8": ["model.smartpill.dw_providers"], "test.smartpill.not_empty_dw_providers_clinics_.395aa93f31": ["model.smartpill.dw_providers_clinics"], "test.smartpill.not_empty_drugs_.508222ea4d": ["model.smartpill.drugs"], "test.smartpill.not_empty_order_items_.7cf03218ba": ["model.smartpill.order_items"], "test.smartpill.not_empty_orders_.a22716be47": ["model.smartpill.orders"], "test.smartpill.not_empty_providers_.865a437d88": ["model.smartpill.providers"], "test.smartpill.not_empty_rxs_grouped_.8975a78d37": ["model.smartpill.rxs_grouped"], "test.smartpill.not_empty_rxs_single_.a0b28942c2": ["model.smartpill.rxs_single"], "test.smartpill.not_empty_patients_.15ff0c36f5": ["model.smartpill.patients"], "test.smartpill.not_empty_patient_comms_.a293dd91b1": ["model.smartpill.patient_comms"], "test.smartpill.not_empty_patient_merge_cp_.a7b4d3419b": ["model.smartpill.patient_merge_cp"], "test.smartpill.not_empty_gp_order_items_inventory_items_.2e64acd642": ["model.smartpill.gp_order_items_inventory_items"], "test.smartpill.not_empty_gp_pend_group_.3e24204e52": ["model.smartpill.gp_pend_group"], "test.smartpill.not_empty_gp_pharmacy_actions_.168af80755": ["model.smartpill.gp_pharmacy_actions"], "test.smartpill.not_empty_gp_stock_live_.b5dacacee7": ["model.smartpill.gp_stock_live"], "test.smartpill.not_null_accounts_id.521ffc790d": ["model.smartpill.accounts"], "test.smartpill.not_null_accounts_created_at.838209f9ec": ["model.smartpill.accounts"], "test.smartpill.not_null_accounts_updated_at.14fb57dff4": ["model.smartpill.accounts"], "test.smartpill.not_null_accounts__hash_id.598ab47030": ["model.smartpill.accounts"], "test.smartpill.unique_accounts__hash_id.dd80c713cf": ["model.smartpill.accounts"], "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af": ["model.smartpill.accounts", "model.smartpill.accounts"], "test.smartpill.not_null_accounts_balance.0e14c0a4ac": ["model.smartpill.accounts"], "test.smartpill.not_null_bill_payments_id.5457ffd4bd": ["model.smartpill.bill_payments"], "test.smartpill.not_null_bill_payments_created_at.33f9f3d309": ["model.smartpill.bill_payments"], "test.smartpill.not_null_bill_payments_updated_at.d4039c9771": ["model.smartpill.bill_payments"], "test.smartpill.not_null_bill_payments__hash_id.c202a9b218": ["model.smartpill.bill_payments"], "test.smartpill.unique_bill_payments__hash_id.94aa7f831e": ["model.smartpill.bill_payments"], "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52": ["model.smartpill.bill_payments_lines", "model.smartpill.bills"], "test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7": ["model.smartpill.bill_payments", "model.smartpill.bill_payments_lines"], "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc": ["model.smartpill.bill_payments_lines", "model.smartpill.bills"], "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0": ["model.smartpill.bill_payments_lines", "model.smartpill.deposits"], "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d": ["model.smartpill.bill_payments_lines", "model.smartpill.journal_entries"], "test.smartpill.not_null_bills_id.675a636e7d": ["model.smartpill.bills"], "test.smartpill.not_null_bills_created_at.d062431487": ["model.smartpill.bills"], "test.smartpill.not_null_bills_updated_at.2f034195c7": ["model.smartpill.bills"], "test.smartpill.not_null_bills__hash_id.cd4ca98a0b": ["model.smartpill.bills"], "test.smartpill.unique_bills__hash_id.846f3f83e6": ["model.smartpill.bills"], "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7": ["model.smartpill.bills", "model.smartpill.bills_lines"], "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed": ["model.smartpill.bills", "model.smartpill.bills_lines"], "test.smartpill.not_null_customers_id.422908bfae": ["model.smartpill.customers"], "test.smartpill.not_null_customers_created_at.377cb5ef44": ["model.smartpill.customers"], "test.smartpill.not_null_customers_updated_at.035cb5dbb9": ["model.smartpill.customers"], "test.smartpill.not_null_customers__hash_id.b9041e1adb": ["model.smartpill.customers"], "test.smartpill.unique_customers__hash_id.e701bc0a38": ["model.smartpill.customers"], "test.smartpill.not_null_classes_id.9a555c4854": ["model.smartpill.classes"], "test.smartpill.not_null_classes_created_at.f1923ff5e1": ["model.smartpill.classes"], "test.smartpill.not_null_classes_updated_at.ef34f9da7f": ["model.smartpill.classes"], "test.smartpill.not_null_classes__hash_id.f24b1ee3bf": ["model.smartpill.classes"], "test.smartpill.unique_classes__hash_id.a800d006c1": ["model.smartpill.classes"], "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da": ["model.smartpill.classes", "model.smartpill.deposits_lines"], "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b": ["model.smartpill.accounts", "model.smartpill.deposits_lines"], "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4": ["model.smartpill.customers", "model.smartpill.deposits_lines"], "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a": ["model.smartpill.deposits", "model.smartpill.deposits_lines"], "test.smartpill.not_null_deposits_id.b088049b9e": ["model.smartpill.deposits"], "test.smartpill.not_null_deposits_created_at.083b2848dc": ["model.smartpill.deposits"], "test.smartpill.not_null_deposits_updated_at.41e69936d4": ["model.smartpill.deposits"], "test.smartpill.not_null_deposits__hash_id.4283b963be": ["model.smartpill.deposits"], "test.smartpill.unique_deposits__hash_id.6731b07827": ["model.smartpill.deposits"], "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0": ["model.smartpill.accounts", "model.smartpill.deposits"], "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045": ["model.smartpill.accounts", "model.smartpill.purchases_lines"], "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d": ["model.smartpill.classes", "model.smartpill.purchases_lines"], "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56": ["model.smartpill.customers", "model.smartpill.purchases_lines"], "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3": ["model.smartpill.purchases", "model.smartpill.purchases_lines"], "test.smartpill.not_null_purchases_id.2c6aea8f54": ["model.smartpill.purchases"], "test.smartpill.not_null_purchases_created_at.420a3d4362": ["model.smartpill.purchases"], "test.smartpill.not_null_purchases_updated_at.8df619fa61": ["model.smartpill.purchases"], "test.smartpill.not_null_purchases__hash_id.1767705f4e": ["model.smartpill.purchases"], "test.smartpill.unique_purchases__hash_id.f360789048": ["model.smartpill.purchases"], "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1": ["model.smartpill.accounts", "model.smartpill.purchases"], "test.smartpill.not_null_journal_entries_id.189a5cf124": ["model.smartpill.journal_entries"], "test.smartpill.not_null_journal_entries_created_at.522b42cb2d": ["model.smartpill.journal_entries"], "test.smartpill.not_null_journal_entries_updated_at.72e0520337": ["model.smartpill.journal_entries"], "test.smartpill.not_null_journal_entries__hash_id.58bd70d62b": ["model.smartpill.journal_entries"], "test.smartpill.unique_journal_entries__hash_id.e8c4c3a4b3": ["model.smartpill.journal_entries"], "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad": ["model.smartpill.accounts", "model.smartpill.journal_entries_lines"], "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f": ["model.smartpill.classes", "model.smartpill.journal_entries_lines"], "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83": ["model.smartpill.customers", "model.smartpill.journal_entries_lines"], "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d": ["model.smartpill.journal_entries", "model.smartpill.journal_entries_lines"], "test.smartpill.unique_donors_contact_contact_id.7dc2a74127": ["model.smartpill.donors_contact"], "test.smartpill.not_empty_donors_contact_.359dce62ca": ["model.smartpill.donors_contact"], "test.smartpill.unique_donors_task_task_id.aa62a9d0f4": ["model.smartpill.donors_task"], "test.smartpill.not_empty_donors_task_.c46f7bc64b": ["model.smartpill.donors_task"], "test.smartpill.unique_donors_user_user_id.e6d83e2212": ["model.smartpill.donors_user"], "test.smartpill.not_empty_donors_user_.5a41996209": ["model.smartpill.donors_user"], "test.smartpill.unique_patients_contact_contact_id.05857d358e": ["model.smartpill.patients_contact"], "test.smartpill.not_empty_patients_contact_.47a29ff9a6": ["model.smartpill.patients_contact"], "test.smartpill.unique_patients_gp_user__c_Id.1e1e8af894": ["model.smartpill.patients_gp_user__c"], "test.smartpill.not_empty_patients_gp_user__c_.6d74dc1122": ["model.smartpill.patients_gp_user__c"], "test.smartpill.unique_patients_task_task_id.3283cfe735": ["model.smartpill.patients_task"], "test.smartpill.not_empty_patients_task_.fc8027d541": ["model.smartpill.patients_task"], "test.smartpill.unique_patients_sf_user_user_id.825801e838": ["model.smartpill.patients_sf_user"], "test.smartpill.not_empty_patients_sf_user_.064471468e": ["model.smartpill.patients_sf_user"], "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_providers": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_clinics": [], "source.smartpill.raw._airbyte_raw_goodpill_dw_clinics": [], "source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups": [], "source.smartpill.raw._airbyte_raw_goodpill_dw_providers": [], "source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions": [], "source.smartpill.raw._airbyte_raw_quickbooks_accounts": [], "source.smartpill.raw._airbyte_raw_quickbooks_bill_payments": [], "source.smartpill.raw._airbyte_raw_quickbooks_bills": [], "source.smartpill.raw._airbyte_raw_quickbooks_credit_memos": [], "source.smartpill.raw._airbyte_raw_quickbooks_classes": [], "source.smartpill.raw._airbyte_raw_quickbooks_customers": [], "source.smartpill.raw._airbyte_raw_quickbooks_deposits": [], "source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects": [], "source.smartpill.raw._airbyte_raw_quickbooks_invoices": [], "source.smartpill.raw._airbyte_raw_quickbooks_items": [], "source.smartpill.raw._airbyte_raw_quickbooks_journal_entries": [], "source.smartpill.raw._airbyte_raw_quickbooks_payments": [], "source.smartpill.raw._airbyte_raw_quickbooks_purchases": [], "source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts": [], "source.smartpill.raw._airbyte_raw_quickbooks_transfers": [], "source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits": [], "source.smartpill.raw.quickbooks_payroll_checks": [], "source.smartpill.raw._airbyte_raw_salesforce_task": [], "source.smartpill.raw._airbyte_raw_salesforce_gp_user__c": [], "source.smartpill.raw._airbyte_raw_salesforce_contact": [], "source.smartpill.raw._airbyte_raw_salesforce_user": [], "source.smartpill.raw._airbyte_raw_salesforce_donors_task": [], "source.smartpill.raw._airbyte_raw_salesforce_donors_user": [], "source.smartpill.raw._airbyte_raw_salesforce_donors_contact": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_wc": [], "source.smartpill.raw._airbyte_raw_cortex_v2_accounts": [], "source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered": [], "source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics": [], "source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns": [], "source.smartpill.raw._airbyte_raw_cortex_v2_drugs": [], "source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports": [], "source.smartpill.raw._airbyte_raw_cortex_v2_shipments": [], "source.smartpill.raw._airbyte_raw_cortex_v2_sync_status": [], "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages": [], "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items": [], "source.smartpill.reverse_etl.patient_to_contact_non_updated": [], "source.smartpill.reverse_etl.contact_notifications_history": [], "source.smartpill.dwh.active_orders_abt_view": [], "source.smartpill.dwh.general_ledger_abt_view": [], "source.smartpill.dwh.goodpill_abt_view": [], "source.smartpill.salesforce.salesforce_donors_abt_view": [], "source.smartpill.salesforce.salesforce_patients_abt_view": [], "source.smartpill.goodpill.gp_pharmacy_actions_abt": [], "source.smartpill.goodpill.patient_comms_view": [], "source.smartpill.goodpill.goodpill_abt_view": [], "source.smartpill.goodpill.active_orders_abt_view": []}, "child_map": {"model.smartpill.v2_accounts": ["model.smartpill.v2_accounts_profile", "test.smartpill.not_empty_v2_accounts_.51135668b6", "test.smartpill.unique_v2_accounts_id.3a8c7b7210"], "model.smartpill.v2_accounts_ordered": ["model.smartpill.v2_accounts_ordered_profile", "test.smartpill.not_empty_v2_accounts_ordered_.c1a644b2c6", "test.smartpill.unique_v2_accounts_ordered_id.54621e9db9"], "model.smartpill.v2_drug_generics": ["model.smartpill.v2_drug_generics_profile", "test.smartpill.not_empty_v2_drug_generics_.2f09c49309", "test.smartpill.unique_v2_drug_generics_id.6bbab260eb"], "model.smartpill.v2_drug_gsns": ["model.smartpill.v2_drug_gsns_profile", "test.smartpill.not_empty_v2_drug_gsns_.de54fd18e7", "test.smartpill.unique_v2_drug_gsns_id.1ea442144d"], "model.smartpill.v2_drugs": ["model.smartpill.v2_drugs_profile", "test.smartpill.not_empty_v2_drugs_.b331f2e8ae", "test.smartpill.unique_v2_drugs_id.b546286cbe"], "model.smartpill.v2_failed_imports": ["model.smartpill.v2_failed_imports_profile", "test.smartpill.not_empty_v2_failed_imports_.4071632124", "test.smartpill.unique_v2_failed_imports_id.9466209e5f"], "model.smartpill.v2_shipment_item_stages": ["model.smartpill.v2_shipment_item_stages_profile", "test.smartpill.not_empty_v2_shipment_item_stages_.16d9b6ccb9", "test.smartpill.unique_v2_shipment_item_stages_id.9253b51d35"], "model.smartpill.v2_shipment_items": ["model.smartpill.v2_shipment_items_profile", "test.smartpill.not_empty_v2_shipment_items_.f5089b01f8", "test.smartpill.unique_v2_shipment_items_id.a41caec0e9"], "model.smartpill.v2_shipments": ["model.smartpill.v2_shipments_profile", "test.smartpill.not_empty_v2_shipments_.acab72c220", "test.smartpill.unique_v2_shipments_id.d00a275819"], "model.smartpill.v2_sync_status": ["model.smartpill.v2_sync_status_profile", "test.smartpill.not_empty_v2_sync_status_.5f30ac6bcf"], "model.smartpill.clinic_coupons": ["model.smartpill.clinic_coupons_profile", "model.smartpill.goodpill_abt", "snapshot.smartpill.clinic_coupons_snapshot", "test.smartpill.not_empty_clinic_coupons_.37a00908df"], "model.smartpill.clinics": ["model.smartpill.clinics_profile", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.rxs_joined", "snapshot.smartpill.clinics_snapshot", "test.smartpill.not_empty_clinics_.3cfce17578"], "model.smartpill.drugs": ["model.smartpill.drugs_profile", "model.smartpill.goodpill_abt", "snapshot.smartpill.drugs_snapshot", "test.smartpill.not_empty_drugs_.508222ea4d"], "model.smartpill.dw_clinic_groups": ["model.smartpill.dw_clinic_groups_profile", "model.smartpill.goodpill_abt", "snapshot.smartpill.dw_clinic_groups_snapshot", "test.smartpill.not_empty_dw_clinic_groups_.4973771295"], "model.smartpill.dw_clinics": ["model.smartpill.dw_clinics_profile", "model.smartpill.goodpill_abt", "snapshot.smartpill.dw_clinics_snapshot", "test.smartpill.not_empty_dw_clinics_.567803ea76"], "model.smartpill.dw_providers": ["model.smartpill.dw_providers_profile", "model.smartpill.goodpill_abt", "snapshot.smartpill.dw_providers_snapshot", "test.smartpill.not_empty_dw_providers_.216d2d8ae8"], "model.smartpill.dw_providers_clinics": ["model.smartpill.dw_providers_clinics_profile", "snapshot.smartpill.dw_providers_clinics_snapshot", "test.smartpill.not_empty_dw_providers_clinics_.395aa93f31"], "model.smartpill.gp_order_items_inventory_items": ["test.smartpill.not_empty_gp_order_items_inventory_items_.2e64acd642"], "model.smartpill.gp_pend_group": ["model.smartpill.goodpill_abt", "test.smartpill.not_empty_gp_pend_group_.3e24204e52"], "model.smartpill.gp_pharmacy_actions": ["model.smartpill.gp_pharmacy_actions_abt", "test.smartpill.not_empty_gp_pharmacy_actions_.168af80755"], "model.smartpill.gp_stock_live": ["model.smartpill.goodpill_abt", "test.smartpill.not_empty_gp_stock_live_.b5dacacee7"], "model.smartpill.order_items": ["model.smartpill.goodpill_abt", "model.smartpill.order_items_profile", "model.smartpill.patients_status_historic", "snapshot.smartpill.order_items_snapshot", "test.smartpill.not_empty_order_items_.7cf03218ba"], "model.smartpill.orders": ["model.smartpill.active_orders_abt", "model.smartpill.goodpill_abt", "model.smartpill.orders_profile", "model.smartpill.patients_status_historic", "snapshot.smartpill.orders_snapshot", "test.smartpill.not_empty_orders_.a22716be47"], "model.smartpill.patient_comms": ["model.smartpill.patient_comms_abt", "test.smartpill.not_empty_patient_comms_.a293dd91b1"], "model.smartpill.patient_merge_cp": ["model.smartpill.patient_to_contact_deletions_non_merged", "model.smartpill.patient_to_contact_tasks_to_migrate", "test.smartpill.not_empty_patient_merge_cp_.a7b4d3419b"], "model.smartpill.patients": ["model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_to_contact_additions", "model.smartpill.patient_to_contact_deletions_non_merged", "model.smartpill.patient_to_contact_editions", "model.smartpill.patient_to_contact_null_records", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.patients_profile", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "snapshot.smartpill.patients_snapshot", "test.smartpill.not_empty_patients_.15ff0c36f5"], "model.smartpill.providers": ["model.smartpill.goodpill_abt", "model.smartpill.providers_profile", "snapshot.smartpill.providers_snapshot", "test.smartpill.not_empty_providers_.865a437d88"], "model.smartpill.rxs_grouped": ["model.smartpill.rxs_grouped_profile", "model.smartpill.rxs_joined", "snapshot.smartpill.rxs_grouped_snapshot", "test.smartpill.not_empty_rxs_grouped_.8975a78d37"], "model.smartpill.rxs_single": ["model.smartpill.rxs_joined", "model.smartpill.rxs_single_profile", "snapshot.smartpill.rxs_single_snapshot", "test.smartpill.not_empty_rxs_single_.a0b28942c2"], "model.smartpill.active_orders_abt": [], "model.smartpill.goodpill_abt": ["model.smartpill.goodpill_abt_profile"], "model.smartpill.gp_pharmacy_actions_abt": [], "model.smartpill.patient_comms_abt": [], "model.smartpill.raw_gp_rxs_single": [], "model.smartpill.patients_status_historic": ["model.smartpill.goodpill_abt"], "model.smartpill.rxs_joined": ["model.smartpill.goodpill_abt", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic"], "model.smartpill.v2_accounts_ordered_profile": [], "model.smartpill.v2_accounts_profile": [], "model.smartpill.v2_drug_generics_profile": [], "model.smartpill.v2_drug_gsns_profile": [], "model.smartpill.v2_drugs_profile": [], "model.smartpill.v2_failed_imports_profile": [], "model.smartpill.v2_shipment_item_stages_profile": [], "model.smartpill.v2_shipment_items_profile": [], "model.smartpill.v2_shipments_profile": [], "model.smartpill.v2_sync_status_profile": [], "model.smartpill.clinic_coupons_profile": [], "model.smartpill.clinics_profile": [], "model.smartpill.drugs_profile": [], "model.smartpill.dw_clinic_groups_profile": [], "model.smartpill.dw_clinics_profile": [], "model.smartpill.dw_providers_clinics_profile": [], "model.smartpill.dw_providers_profile": [], "model.smartpill.order_items_profile": [], "model.smartpill.orders_profile": [], "model.smartpill.patients_profile": [], "model.smartpill.providers_profile": [], "model.smartpill.rxs_grouped_profile": [], "model.smartpill.rxs_single_profile": [], "model.smartpill.goodpill_abt_profile": [], "model.smartpill.salesforce_donors_abt_profile": [], "model.smartpill.salesforce_patients_abt_profile": [], "model.smartpill.accounts": ["model.smartpill.accounts_top_level", "model.smartpill.int__account_classifications", "model.smartpill.int__bill_payment_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__deposit_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__payment_double_entry", "model.smartpill.int__payroll_check_double_entry", "test.smartpill.not_null_accounts__hash_id.598ab47030", "test.smartpill.not_null_accounts_balance.0e14c0a4ac", "test.smartpill.not_null_accounts_created_at.838209f9ec", "test.smartpill.not_null_accounts_id.521ffc790d", "test.smartpill.not_null_accounts_updated_at.14fb57dff4", "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af", "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af", "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0", "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b", "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad", "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1", "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045", "test.smartpill.unique_accounts__hash_id.dd80c713cf"], "model.smartpill.bill_payments": ["model.smartpill.bill_payments_lines", "model.smartpill.int__bill_payment_double_entry", "test.smartpill.not_null_bill_payments__hash_id.c202a9b218", "test.smartpill.not_null_bill_payments_created_at.33f9f3d309", "test.smartpill.not_null_bill_payments_id.5457ffd4bd", "test.smartpill.not_null_bill_payments_updated_at.d4039c9771", "test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7", "test.smartpill.unique_bill_payments__hash_id.94aa7f831e"], "model.smartpill.bill_payments_lines": ["test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7", "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc", "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52", "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0", "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d"], "model.smartpill.bills": ["model.smartpill.bills_lines", "model.smartpill.int__bill_double_entry", "test.smartpill.not_null_bills__hash_id.cd4ca98a0b", "test.smartpill.not_null_bills_created_at.d062431487", "test.smartpill.not_null_bills_id.675a636e7d", "test.smartpill.not_null_bills_updated_at.2f034195c7", "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc", "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52", "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed", "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7", "test.smartpill.unique_bills__hash_id.846f3f83e6"], "model.smartpill.bills_lines": ["model.smartpill.int__bill_double_entry", "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed", "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7"], "model.smartpill.classes": ["model.smartpill.general_ledger_abt", "test.smartpill.not_null_classes__hash_id.f24b1ee3bf", "test.smartpill.not_null_classes_created_at.f1923ff5e1", "test.smartpill.not_null_classes_id.9a555c4854", "test.smartpill.not_null_classes_updated_at.ef34f9da7f", "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da", "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f", "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d", "test.smartpill.unique_classes__hash_id.a800d006c1"], "model.smartpill.credit_memos": ["model.smartpill.credit_memos_lines", "model.smartpill.int__credit_memo_double_entry"], "model.smartpill.credit_memos_lines": ["model.smartpill.int__credit_memo_double_entry"], "model.smartpill.customers": ["model.smartpill.general_ledger_abt", "test.smartpill.not_null_customers__hash_id.b9041e1adb", "test.smartpill.not_null_customers_created_at.377cb5ef44", "test.smartpill.not_null_customers_id.422908bfae", "test.smartpill.not_null_customers_updated_at.035cb5dbb9", "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4", "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83", "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56", "test.smartpill.unique_customers__hash_id.e701bc0a38"], "model.smartpill.deleted_objects": ["model.smartpill.int__bill_double_entry", "model.smartpill.int__bill_double_entry", "model.smartpill.int__bill_payment_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__deposit_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__journal_entry_double_entry", "model.smartpill.int__payment_double_entry", "model.smartpill.int__purchase_double_entry", "model.smartpill.int__purchase_double_entry", "model.smartpill.int__sales_receipts_double_entry", "model.smartpill.int__sales_receipts_double_entry", "model.smartpill.int__transfer_double_entry", "model.smartpill.int__vendor_credit_double_entry"], "model.smartpill.deposits": ["model.smartpill.deposits_lines", "model.smartpill.int__deposit_double_entry", "test.smartpill.not_null_deposits__hash_id.4283b963be", "test.smartpill.not_null_deposits_created_at.083b2848dc", "test.smartpill.not_null_deposits_id.b088049b9e", "test.smartpill.not_null_deposits_updated_at.41e69936d4", "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0", "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0", "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a", "test.smartpill.unique_deposits__hash_id.6731b07827"], "model.smartpill.deposits_lines": ["model.smartpill.int__deposit_double_entry", "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a", "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b", "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da", "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4"], "model.smartpill.invoices": ["model.smartpill.int__invoice_double_entry", "model.smartpill.invoices_lines"], "model.smartpill.invoices_lines": ["model.smartpill.int__invoice_double_entry"], "model.smartpill.items": ["model.smartpill.int__bill_double_entry", "model.smartpill.int__credit_memo_double_entry", "model.smartpill.int__invoice_double_entry", "model.smartpill.int__purchase_double_entry", "model.smartpill.int__sales_receipts_double_entry", "model.smartpill.int__sales_receipts_double_entry"], "model.smartpill.journal_entries": ["model.smartpill.int__journal_entry_double_entry", "model.smartpill.journal_entries_lines", "test.smartpill.not_null_journal_entries__hash_id.58bd70d62b", "test.smartpill.not_null_journal_entries_created_at.522b42cb2d", "test.smartpill.not_null_journal_entries_id.189a5cf124", "test.smartpill.not_null_journal_entries_updated_at.72e0520337", "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d", "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d", "test.smartpill.unique_journal_entries__hash_id.e8c4c3a4b3"], "model.smartpill.journal_entries_lines": ["model.smartpill.int__journal_entry_double_entry", "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d", "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad", "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f", "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83"], "model.smartpill.payments": ["model.smartpill.int__payment_double_entry"], "model.smartpill.purchases": ["model.smartpill.int__purchase_double_entry", "model.smartpill.purchases_lines", "test.smartpill.not_null_purchases__hash_id.1767705f4e", "test.smartpill.not_null_purchases_created_at.420a3d4362", "test.smartpill.not_null_purchases_id.2c6aea8f54", "test.smartpill.not_null_purchases_updated_at.8df619fa61", "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1", "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3", "test.smartpill.unique_purchases__hash_id.f360789048"], "model.smartpill.purchases_lines": ["model.smartpill.int__purchase_double_entry", "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3", "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045", "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d", "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56"], "model.smartpill.sales_receipts": ["model.smartpill.int__sales_receipts_double_entry", "model.smartpill.sales_receipts_lines"], "model.smartpill.sales_receipts_lines": ["model.smartpill.int__sales_receipts_double_entry"], "model.smartpill.transfers": ["model.smartpill.int__transfer_double_entry"], "model.smartpill.vendor_credits": ["model.smartpill.int__vendor_credit_double_entry", "model.smartpill.vendor_credits_lines"], "model.smartpill.vendor_credits_lines": ["model.smartpill.int__vendor_credit_double_entry"], "model.smartpill.accounts_top_level": ["model.smartpill.general_ledger_abt", "model.smartpill.general_ledger_abt"], "model.smartpill.general_ledger_abt": [], "model.smartpill.int__account_classifications": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__bill_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__bill_payment_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__credit_memo_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__deposit_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__invoice_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__journal_entry_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__payment_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__payroll_check_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__purchase_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__sales_receipts_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__transfer_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.int__vendor_credit_double_entry": ["model.smartpill.general_ledger_abt"], "model.smartpill.contact_deletions_history": [], "model.smartpill.contact_to_patient_deleted_contact_info": [], "model.smartpill.patient_to_contact_deletions": ["model.smartpill.contact_deletions_history", "model.smartpill.contact_to_patient_deleted_contact_info"], "model.smartpill.patient_to_contact_tasks_to_migrate": ["model.smartpill.contact_to_patient_deleted_contact_info", "model.smartpill.patient_to_contact_deletions", "model.smartpill.patient_to_contact_deletions"], "model.smartpill.contact_notifications_history": [], "model.smartpill.patient_to_contact_deletions_non_merged": ["model.smartpill.contact_notifications_history"], "model.smartpill.patient_to_contact_dummies": ["model.smartpill.contact_notifications_history"], "model.smartpill.patient_to_contact_additions": ["model.smartpill.patient_to_contact_new_additions", "model.smartpill.patient_to_contact_retries"], "model.smartpill.patient_to_contact_editions": ["model.smartpill.patient_to_contact_new_editions", "model.smartpill.patient_to_contact_null_records", "model.smartpill.patient_to_contact_retries"], "model.smartpill.patient_to_contact_new_additions": ["model.smartpill.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_upserts"], "model.smartpill.patient_to_contact_new_editions": ["model.smartpill.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_upserts"], "model.smartpill.patient_to_contact_non_updated": [], "model.smartpill.patient_to_contact_null_records": [], "model.smartpill.patient_to_contact_retries": [], "model.smartpill.patient_to_contact_upserts": [], "model.smartpill.donors_contact": ["model.smartpill.salesforce_donors_abt", "test.smartpill.not_empty_donors_contact_.359dce62ca", "test.smartpill.unique_donors_contact_contact_id.7dc2a74127"], "model.smartpill.donors_task": ["model.smartpill.salesforce_donors_abt", "test.smartpill.not_empty_donors_task_.c46f7bc64b", "test.smartpill.unique_donors_task_task_id.aa62a9d0f4"], "model.smartpill.donors_user": ["test.smartpill.not_empty_donors_user_.5a41996209", "test.smartpill.unique_donors_user_user_id.e6d83e2212"], "model.smartpill.salesforce_donors_abt": ["model.smartpill.salesforce_donors_abt_profile"], "model.smartpill.patients_contact": ["model.smartpill.contact_deletions_history", "model.smartpill.contact_to_patient_deleted_contact_info", "model.smartpill.patient_to_contact_additions", "model.smartpill.patient_to_contact_deletions", "model.smartpill.patient_to_contact_deletions_non_merged", "model.smartpill.patient_to_contact_dummies", "model.smartpill.patient_to_contact_editions", "model.smartpill.patient_to_contact_editions", "model.smartpill.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_non_updated", "model.smartpill.patient_to_contact_null_records", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.salesforce_patients_abt", "test.smartpill.not_empty_patients_contact_.47a29ff9a6", "test.smartpill.unique_patients_contact_contact_id.05857d358e"], "model.smartpill.patients_gp_user__c": ["model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "test.smartpill.not_empty_patients_gp_user__c_.6d74dc1122", "test.smartpill.unique_patients_gp_user__c_Id.1e1e8af894"], "model.smartpill.patients_sf_user": ["test.smartpill.not_empty_patients_sf_user_.064471468e", "test.smartpill.unique_patients_sf_user_user_id.825801e838"], "model.smartpill.patients_task": ["model.smartpill.patient_to_contact_deletions", "model.smartpill.patient_to_contact_tasks_to_migrate", "model.smartpill.salesforce_patients_abt", "test.smartpill.not_empty_patients_task_.fc8027d541", "test.smartpill.unique_patients_task_task_id.3283cfe735"], "model.smartpill.salesforce_patients_abt": ["model.smartpill.salesforce_patients_abt_profile"], "snapshot.smartpill.clinic_coupons_snapshot": [], "snapshot.smartpill.clinics_snapshot": [], "snapshot.smartpill.drugs_snapshot": [], "snapshot.smartpill.dw_clinic_groups_snapshot": [], "snapshot.smartpill.dw_clinics_snapshot": [], "snapshot.smartpill.dw_providers_snapshot": [], "snapshot.smartpill.dw_providers_clinics_snapshot": [], "snapshot.smartpill.order_items_snapshot": [], "snapshot.smartpill.orders_snapshot": [], "snapshot.smartpill.patients_snapshot": [], "snapshot.smartpill.providers_snapshot": [], "snapshot.smartpill.rxs_grouped_snapshot": [], "snapshot.smartpill.rxs_single_snapshot": [], "seed.smartpill.patient_events": [], "test.smartpill.unique_v2_accounts_id.3a8c7b7210": [], "test.smartpill.not_empty_v2_accounts_.51135668b6": [], "test.smartpill.unique_v2_accounts_ordered_id.54621e9db9": [], "test.smartpill.not_empty_v2_accounts_ordered_.c1a644b2c6": [], "test.smartpill.unique_v2_drug_generics_id.6bbab260eb": [], "test.smartpill.not_empty_v2_drug_generics_.2f09c49309": [], "test.smartpill.unique_v2_drug_gsns_id.1ea442144d": [], "test.smartpill.not_empty_v2_drug_gsns_.de54fd18e7": [], "test.smartpill.unique_v2_drugs_id.b546286cbe": [], "test.smartpill.not_empty_v2_drugs_.b331f2e8ae": [], "test.smartpill.unique_v2_failed_imports_id.9466209e5f": [], "test.smartpill.not_empty_v2_failed_imports_.4071632124": [], "test.smartpill.unique_v2_shipments_id.d00a275819": [], "test.smartpill.not_empty_v2_shipments_.acab72c220": [], "test.smartpill.not_empty_v2_sync_status_.5f30ac6bcf": [], "test.smartpill.unique_v2_shipment_items_id.a41caec0e9": [], "test.smartpill.not_empty_v2_shipment_items_.f5089b01f8": [], "test.smartpill.unique_v2_shipment_item_stages_id.9253b51d35": [], "test.smartpill.not_empty_v2_shipment_item_stages_.16d9b6ccb9": [], "test.smartpill.not_empty_clinic_coupons_.37a00908df": [], "test.smartpill.not_empty_clinics_.3cfce17578": [], "test.smartpill.not_empty_dw_clinics_.567803ea76": [], "test.smartpill.not_empty_dw_clinic_groups_.4973771295": [], "test.smartpill.not_empty_dw_providers_.216d2d8ae8": [], "test.smartpill.not_empty_dw_providers_clinics_.395aa93f31": [], "test.smartpill.not_empty_drugs_.508222ea4d": [], "test.smartpill.not_empty_order_items_.7cf03218ba": [], "test.smartpill.not_empty_orders_.a22716be47": [], "test.smartpill.not_empty_providers_.865a437d88": [], "test.smartpill.not_empty_rxs_grouped_.8975a78d37": [], "test.smartpill.not_empty_rxs_single_.a0b28942c2": [], "test.smartpill.not_empty_patients_.15ff0c36f5": [], "test.smartpill.not_empty_patient_comms_.a293dd91b1": [], "test.smartpill.not_empty_patient_merge_cp_.a7b4d3419b": [], "test.smartpill.not_empty_gp_order_items_inventory_items_.2e64acd642": [], "test.smartpill.not_empty_gp_pend_group_.3e24204e52": [], "test.smartpill.not_empty_gp_pharmacy_actions_.168af80755": [], "test.smartpill.not_empty_gp_stock_live_.b5dacacee7": [], "test.smartpill.not_null_accounts_id.521ffc790d": [], "test.smartpill.not_null_accounts_created_at.838209f9ec": [], "test.smartpill.not_null_accounts_updated_at.14fb57dff4": [], "test.smartpill.not_null_accounts__hash_id.598ab47030": [], "test.smartpill.unique_accounts__hash_id.dd80c713cf": [], "test.smartpill.relationships_accounts_parent_account_id__id__ref_accounts_.7aa27f10af": [], "test.smartpill.not_null_accounts_balance.0e14c0a4ac": [], "test.smartpill.not_null_bill_payments_id.5457ffd4bd": [], "test.smartpill.not_null_bill_payments_created_at.33f9f3d309": [], "test.smartpill.not_null_bill_payments_updated_at.d4039c9771": [], "test.smartpill.not_null_bill_payments__hash_id.c202a9b218": [], "test.smartpill.unique_bill_payments__hash_id.94aa7f831e": [], "test.smartpill.relationships_bill_payments_lines_bill_payment_id__id__ref_bills_.64fa2d8b52": [], "test.smartpill.relationships_bill_payments_lines__bill_payment_hash_id___hash_id__ref_bill_payments_.fbfa5ad8d7": [], "test.smartpill.relationships_bill_payments_lines_bill_id__id__ref_bills_.2caa86babc": [], "test.smartpill.relationships_bill_payments_lines_deposit_id__id__ref_deposits_.c54b6f3fe0": [], "test.smartpill.relationships_bill_payments_lines_journal_entry_id__id__ref_journal_entries_.18969b084d": [], "test.smartpill.not_null_bills_id.675a636e7d": [], "test.smartpill.not_null_bills_created_at.d062431487": [], "test.smartpill.not_null_bills_updated_at.2f034195c7": [], "test.smartpill.not_null_bills__hash_id.cd4ca98a0b": [], "test.smartpill.unique_bills__hash_id.846f3f83e6": [], "test.smartpill.relationships_bills_lines_bill_id__id__ref_bills_.83717016f7": [], "test.smartpill.relationships_bills_lines__bill_hash_id___hash_id__ref_bills_.17f3ddbaed": [], "test.smartpill.not_null_customers_id.422908bfae": [], "test.smartpill.not_null_customers_created_at.377cb5ef44": [], "test.smartpill.not_null_customers_updated_at.035cb5dbb9": [], "test.smartpill.not_null_customers__hash_id.b9041e1adb": [], "test.smartpill.unique_customers__hash_id.e701bc0a38": [], "test.smartpill.not_null_classes_id.9a555c4854": [], "test.smartpill.not_null_classes_created_at.f1923ff5e1": [], "test.smartpill.not_null_classes_updated_at.ef34f9da7f": [], "test.smartpill.not_null_classes__hash_id.f24b1ee3bf": [], "test.smartpill.unique_classes__hash_id.a800d006c1": [], "test.smartpill.relationships_deposits_lines_class_id__id__ref_classes_.9fcb1fb2da": [], "test.smartpill.relationships_deposits_lines_account_id__id__ref_accounts_.110695f38b": [], "test.smartpill.relationships_deposits_lines_customer_id__id__ref_customers_.885c89a5b4": [], "test.smartpill.relationships_deposits_lines__deposit_hash_id___hash_id__ref_deposits_.68a80ff02a": [], "test.smartpill.not_null_deposits_id.b088049b9e": [], "test.smartpill.not_null_deposits_created_at.083b2848dc": [], "test.smartpill.not_null_deposits_updated_at.41e69936d4": [], "test.smartpill.not_null_deposits__hash_id.4283b963be": [], "test.smartpill.unique_deposits__hash_id.6731b07827": [], "test.smartpill.relationships_deposits_account_id__id__ref_accounts_.eb4bbe92e0": [], "test.smartpill.relationships_purchases_lines_account_expense_account_id__id__ref_accounts_.229a014045": [], "test.smartpill.relationships_purchases_lines_account_expense_class_id__id__ref_classes_.8e81b3319d": [], "test.smartpill.relationships_purchases_lines_account_expense_customer_id__id__ref_customers_.69dd26ed56": [], "test.smartpill.relationships_purchases_lines__purchase_hash_id___hash_id__ref_purchases_.3ac14f4bc3": [], "test.smartpill.not_null_purchases_id.2c6aea8f54": [], "test.smartpill.not_null_purchases_created_at.420a3d4362": [], "test.smartpill.not_null_purchases_updated_at.8df619fa61": [], "test.smartpill.not_null_purchases__hash_id.1767705f4e": [], "test.smartpill.unique_purchases__hash_id.f360789048": [], "test.smartpill.relationships_purchases_account_id__id__ref_accounts_.ff6c0349f1": [], "test.smartpill.not_null_journal_entries_id.189a5cf124": [], "test.smartpill.not_null_journal_entries_created_at.522b42cb2d": [], "test.smartpill.not_null_journal_entries_updated_at.72e0520337": [], "test.smartpill.not_null_journal_entries__hash_id.58bd70d62b": [], "test.smartpill.unique_journal_entries__hash_id.e8c4c3a4b3": [], "test.smartpill.relationships_journal_entries_lines_account_id__id__ref_accounts_.8db96a98ad": [], "test.smartpill.relationships_journal_entries_lines_class_id__id__ref_classes_.4c968a4b2f": [], "test.smartpill.relationships_journal_entries_lines_customer_id__id__ref_customers_.5349864b83": [], "test.smartpill.relationships_journal_entries_lines__journal_entry_hash_id___hash_id__ref_journal_entries_.7735458a0d": [], "test.smartpill.unique_donors_contact_contact_id.7dc2a74127": [], "test.smartpill.not_empty_donors_contact_.359dce62ca": [], "test.smartpill.unique_donors_task_task_id.aa62a9d0f4": [], "test.smartpill.not_empty_donors_task_.c46f7bc64b": [], "test.smartpill.unique_donors_user_user_id.e6d83e2212": [], "test.smartpill.not_empty_donors_user_.5a41996209": [], "test.smartpill.unique_patients_contact_contact_id.05857d358e": [], "test.smartpill.not_empty_patients_contact_.47a29ff9a6": [], "test.smartpill.unique_patients_gp_user__c_Id.1e1e8af894": [], "test.smartpill.not_empty_patients_gp_user__c_.6d74dc1122": [], "test.smartpill.unique_patients_task_task_id.3283cfe735": [], "test.smartpill.not_empty_patients_task_.fc8027d541": [], "test.smartpill.unique_patients_sf_user_user_id.825801e838": [], "test.smartpill.not_empty_patients_sf_user_.064471468e": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": ["model.smartpill.drugs"], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": ["model.smartpill.order_items"], "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": ["model.smartpill.orders"], "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": ["model.smartpill.patients"], "source.smartpill.raw._airbyte_raw_goodpill_gp_providers": ["model.smartpill.providers"], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": ["model.smartpill.rxs_grouped"], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": ["model.smartpill.raw_gp_rxs_single", "model.smartpill.rxs_single"], "source.smartpill.raw._airbyte_raw_goodpill_gp_clinic_coupons": ["model.smartpill.clinic_coupons"], "source.smartpill.raw._airbyte_raw_goodpill_gp_clinics": ["model.smartpill.clinics"], "source.smartpill.raw._airbyte_raw_goodpill_dw_clinics": ["model.smartpill.dw_clinics"], "source.smartpill.raw._airbyte_raw_goodpill_dw_clinic_groups": ["model.smartpill.dw_clinic_groups"], "source.smartpill.raw._airbyte_raw_goodpill_dw_providers": ["model.smartpill.dw_providers"], "source.smartpill.raw._airbyte_raw_goodpill_dw_providers_clinics": ["model.smartpill.dw_providers_clinics"], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items_inventory_items": ["model.smartpill.gp_order_items_inventory_items"], "source.smartpill.raw._airbyte_raw_goodpill_gp_pend_group": ["model.smartpill.gp_pend_group"], "source.smartpill.raw._airbyte_raw_goodpill_gp_stock_live": ["model.smartpill.gp_stock_live"], "source.smartpill.raw._airbyte_raw_goodpill_gp_pharmacy_actions": ["model.smartpill.gp_pharmacy_actions"], "source.smartpill.raw._airbyte_raw_quickbooks_accounts": ["model.smartpill.accounts"], "source.smartpill.raw._airbyte_raw_quickbooks_bill_payments": ["model.smartpill.bill_payments"], "source.smartpill.raw._airbyte_raw_quickbooks_bills": ["model.smartpill.bills"], "source.smartpill.raw._airbyte_raw_quickbooks_credit_memos": ["model.smartpill.credit_memos"], "source.smartpill.raw._airbyte_raw_quickbooks_classes": ["model.smartpill.classes"], "source.smartpill.raw._airbyte_raw_quickbooks_customers": ["model.smartpill.customers"], "source.smartpill.raw._airbyte_raw_quickbooks_deposits": ["model.smartpill.deposits"], "source.smartpill.raw._airbyte_raw_quickbooks_deleted_objects": ["model.smartpill.deleted_objects"], "source.smartpill.raw._airbyte_raw_quickbooks_invoices": ["model.smartpill.invoices"], "source.smartpill.raw._airbyte_raw_quickbooks_items": ["model.smartpill.items"], "source.smartpill.raw._airbyte_raw_quickbooks_journal_entries": ["model.smartpill.journal_entries"], "source.smartpill.raw._airbyte_raw_quickbooks_payments": ["model.smartpill.payments"], "source.smartpill.raw._airbyte_raw_quickbooks_purchases": ["model.smartpill.purchases"], "source.smartpill.raw._airbyte_raw_quickbooks_sales_receipts": ["model.smartpill.sales_receipts"], "source.smartpill.raw._airbyte_raw_quickbooks_transfers": ["model.smartpill.transfers"], "source.smartpill.raw._airbyte_raw_quickbooks_vendor_credits": ["model.smartpill.vendor_credits"], "source.smartpill.raw.quickbooks_payroll_checks": ["model.smartpill.int__payroll_check_double_entry"], "source.smartpill.raw._airbyte_raw_salesforce_task": ["model.smartpill.patients_task"], "source.smartpill.raw._airbyte_raw_salesforce_gp_user__c": ["model.smartpill.patients_gp_user__c"], "source.smartpill.raw._airbyte_raw_salesforce_contact": ["model.smartpill.patients_contact"], "source.smartpill.raw._airbyte_raw_salesforce_user": ["model.smartpill.patients_sf_user"], "source.smartpill.raw._airbyte_raw_salesforce_donors_task": ["model.smartpill.donors_task"], "source.smartpill.raw._airbyte_raw_salesforce_donors_user": ["model.smartpill.donors_user"], "source.smartpill.raw._airbyte_raw_salesforce_donors_contact": ["model.smartpill.donors_contact"], "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_cp": ["model.smartpill.patient_merge_cp"], "source.smartpill.raw._airbyte_raw_goodpill_gp_patient_merge_wc": [], "source.smartpill.raw._airbyte_raw_cortex_v2_accounts": ["model.smartpill.v2_accounts"], "source.smartpill.raw._airbyte_raw_cortex_v2_accounts_ordered": ["model.smartpill.v2_accounts_ordered"], "source.smartpill.raw._airbyte_raw_cortex_v2_drug_generics": ["model.smartpill.v2_drug_generics"], "source.smartpill.raw._airbyte_raw_cortex_v2_drug_gsns": ["model.smartpill.v2_drug_gsns"], "source.smartpill.raw._airbyte_raw_cortex_v2_drugs": ["model.smartpill.v2_drugs"], "source.smartpill.raw._airbyte_raw_cortex_v2_failed_imports": ["model.smartpill.v2_failed_imports"], "source.smartpill.raw._airbyte_raw_cortex_v2_shipments": ["model.smartpill.v2_shipments"], "source.smartpill.raw._airbyte_raw_cortex_v2_sync_status": ["model.smartpill.v2_sync_status"], "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_item_stages": ["model.smartpill.v2_shipment_item_stages"], "source.smartpill.raw._airbyte_raw_cortex_v2_shipment_items": ["model.smartpill.v2_shipment_items"], "source.smartpill.reverse_etl.patient_to_contact_non_updated": ["model.smartpill.patient_to_contact_new_additions", "model.smartpill.patient_to_contact_new_editions", "model.smartpill.patient_to_contact_null_records", "model.smartpill.patient_to_contact_retries"], "source.smartpill.reverse_etl.contact_notifications_history": ["model.smartpill.patient_to_contact_deletions_non_merged", "model.smartpill.patient_to_contact_dummies"], "source.smartpill.dwh.active_orders_abt_view": [], "source.smartpill.dwh.general_ledger_abt_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.dwh.goodpill_abt_view": [], "source.smartpill.salesforce.salesforce_donors_abt_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.salesforce.salesforce_patients_abt_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.goodpill.gp_pharmacy_actions_abt": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.goodpill.patient_comms_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.goodpill.goodpill_abt_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"], "source.smartpill.goodpill.active_orders_abt_view": ["model.smartpill.active_orders_abt", "model.smartpill.active_orders_abt", "model.smartpill.general_ledger_abt", "model.smartpill.goodpill_abt", "model.smartpill.goodpill_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.gp_pharmacy_actions_abt", "model.smartpill.patient_comms_abt", "model.smartpill.patient_comms_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_donors_abt", "model.smartpill.salesforce_patients_abt", "model.smartpill.salesforce_patients_abt"]}}