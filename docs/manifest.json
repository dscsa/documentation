{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.0", "generated_at": "2022-02-09T13:38:40.248291Z", "invocation_id": "7f46d042-3f5d-479c-aa26-6f502ecf6526", "env": {}, "project_id": "22783e4b82b06754aa1102df2bed7710", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"model.smartpill.goodpill_historic_abt": {"raw_sql": "select\n\tgph.*,\n\tdrg.brand_name as drug_brand,\n\tdrg.price30 as drug_price30,\n\tdrg.price90 as drug_price90,\n\tdrg.price_retail as drug_price_retail,\n\tdrg.price_goodrx as drug_price_goodrx,\n\tdrg.price_nadac as drug_price_nadac,\n\tdrg.price_coalesced as drug_price_coalesced,\n\tloc.city as location_city,\n\tloc.state as location_state,\n\tloc.zip_code as location_zip_code,\n\tpat.patient_date_registered as patient_date_registered,\n\tpat.patient_date_added as patient_date_added,\n\tpat.fill_next as patient_fill_next,\n\tpat.days_overdue as patient_days_overdue,\n\tpat.first_name as patient_first_name,\n\tpat.last_name as patient_last_name,\n\tpat.birth_date as patient_birth_date,\n\tpat.phone1 as patient_phone1,\n\tpat.phone2 as patient_phone2,\n\tpat.patient_address as patient_address,\n\tpat.patient_city as patient_city,\n\tpat.patient_state as patient_state,\n\tpat.patient_zip as patient_zip,\n\tpat.payment_card_type as patient_payment_card_type,\n\tpat.payment_card_last4 as patient_payment_card_last4,\n\tpat.payment_card_date_expired as patient_payment_card_date_expired,\n\tpat.payment_method_default as patient_payment_method_default,\n\tpat.payment_coupon as patient_payment_coupon,\n\tpat.tracking_coupon as patient_tracking_coupon,\n\tpat.refills_used as patient_refills_used,\n\tphr.pharmacy_npi,\n    phr.pharmacy_name,\n    phr.pharmacy_phone,\n    phr.pharmacy_fax,\n    phr.pharmacy_address,\n\tprv.provider_first_name,\n\tprv.provider_last_name,\n\tprv.provider_phone\nfrom {{ ref('goodpill_historic') }} gph\nleft join {{ ref('drugs') }} drg on gph.drug_generic = drg.generic_name\nleft join {{ ref('locations') }} loc on gph.location_id = loc.id\nleft join {{ ref('providers') }} prv on gph.provider_npi = prv.provider_npi\nleft join {{ ref('patients') }} pat on gph.patient_id_cp = pat.patient_id_cp\nleft join {{ ref('pharmacies') }} phr on pat.pharmacy_id = phr.pharmacy_id\n-- at the moment, without metadata, the clinic join doesn't add info\nleft join {{ ref('clinics') }} cli on gph.clinic_name = cli.name", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.goodpill_historic", "model.smartpill.drugs", "model.smartpill.locations", "model.smartpill.providers", "model.smartpill.patients", "model.smartpill.pharmacies", "model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "analytic_views", "goodpill_historic_abt"], "unique_id": "model.smartpill.goodpill_historic_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/analytic_views/goodpill_historic_abt.sql", "original_file_path": "models/analytics/analytic_views/goodpill_historic_abt.sql", "name": "goodpill_historic_abt", "alias": "goodpill_historic_abt", "checksum": {"name": "sha256", "checksum": "8c39ce582ad19efb000872f491afbc982aade3b50064c5f066f187b2931646c4"}, "tags": ["goodpill", "backfill", "dimension"], "refs": [["goodpill_historic"], ["drugs"], ["locations"], ["providers"], ["patients"], ["pharmacies"], ["clinics"]], "sources": [], "description": "General historic table, joined with the dimension tables.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/analytic_views/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/analytic_views/goodpill_historic_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "analytics"}, "created_at": 1644413949.450537, "compiled_sql": "select\n\tgph.*,\n\tdrg.brand_name as drug_brand,\n\tdrg.price30 as drug_price30,\n\tdrg.price90 as drug_price90,\n\tdrg.price_retail as drug_price_retail,\n\tdrg.price_goodrx as drug_price_goodrx,\n\tdrg.price_nadac as drug_price_nadac,\n\tdrg.price_coalesced as drug_price_coalesced,\n\tloc.city as location_city,\n\tloc.state as location_state,\n\tloc.zip_code as location_zip_code,\n\tpat.patient_date_registered as patient_date_registered,\n\tpat.patient_date_added as patient_date_added,\n\tpat.fill_next as patient_fill_next,\n\tpat.days_overdue as patient_days_overdue,\n\tpat.first_name as patient_first_name,\n\tpat.last_name as patient_last_name,\n\tpat.birth_date as patient_birth_date,\n\tpat.phone1 as patient_phone1,\n\tpat.phone2 as patient_phone2,\n\tpat.patient_address as patient_address,\n\tpat.patient_city as patient_city,\n\tpat.patient_state as patient_state,\n\tpat.patient_zip as patient_zip,\n\tpat.payment_card_type as patient_payment_card_type,\n\tpat.payment_card_last4 as patient_payment_card_last4,\n\tpat.payment_card_date_expired as patient_payment_card_date_expired,\n\tpat.payment_method_default as patient_payment_method_default,\n\tpat.payment_coupon as patient_payment_coupon,\n\tpat.tracking_coupon as patient_tracking_coupon,\n\tpat.refills_used as patient_refills_used,\n\tphr.pharmacy_npi,\n    phr.pharmacy_name,\n    phr.pharmacy_phone,\n    phr.pharmacy_fax,\n    phr.pharmacy_address,\n\tprv.provider_first_name,\n\tprv.provider_last_name,\n\tprv.provider_phone\nfrom \"datawarehouse\".analytics.\"goodpill_historic\" gph\nleft join \"datawarehouse\".analytics.\"drugs\" drg on gph.drug_generic = drg.generic_name\nleft join \"datawarehouse\".analytics.\"locations\" loc on gph.location_id = loc.id\nleft join \"datawarehouse\".analytics.\"providers\" prv on gph.provider_npi = prv.provider_npi\nleft join \"datawarehouse\".analytics.\"patients\" pat on gph.patient_id_cp = pat.patient_id_cp\nleft join \"datawarehouse\".analytics.\"pharmacies\" phr on pat.pharmacy_id = phr.pharmacy_id\n-- at the moment, without metadata, the clinic join doesn't add info\nleft join \"datawarehouse\".analytics.\"clinics\" cli on gph.clinic_name = cli.name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"goodpill_historic_abt\""}, "model.smartpill.goodpill_snapshot_abt": {"raw_sql": "select\n\tgs.*,\n\tdrg.brand_name as drug_brand,\n\tdrg.price30 as drug_price30,\n\tdrg.price90 as drug_price90,\n\tdrg.price_retail as drug_price_retail,\n\tdrg.price_goodrx as drug_price_goodrx,\n\tdrg.price_nadac as drug_price_nadac,\n\tdrg.price_coalesced as drug_price_coalesced,\n\tloc.city as location_city,\n\tloc.state as location_state,\n\tloc.zip_code as location_zip_code,\n\tpat.patient_date_registered as patient_date_registered,\n\tpat.patient_date_added as patient_date_added,\n\tpat.fill_next as patient_fill_next,\n\tpat.days_overdue as patient_days_overdue,\n\tpat.first_name as patient_first_name,\n\tpat.last_name as patient_last_name,\n\tpat.birth_date as patient_birth_date,\n\tpat.phone1 as patient_phone1,\n\tpat.phone2 as patient_phone2,\n\tpat.patient_address as patient_address,\n\tpat.patient_city as patient_city,\n\tpat.patient_state as patient_state,\n\tpat.patient_zip as patient_zip,\n\tpat.payment_card_type as patient_payment_card_type,\n\tpat.payment_card_last4 as patient_payment_card_last4,\n\tpat.payment_card_date_expired as patient_payment_card_date_expired,\n\tpat.payment_method_default as patient_payment_method_default,\n\tpat.payment_coupon as patient_payment_coupon,\n\tpat.tracking_coupon as patient_tracking_coupon,\n\tpat.refills_used as patient_refills_used,\n\tpat.date_first_rx_received as patient_date_first_rx_received,\n\tpat.date_first_dispensed as patient_date_first_dispensed,\n\tpat.date_first_expected_by as patient_date_first_expected_by,\n\tphr.pharmacy_npi,\n    phr.pharmacy_name,\n    phr.pharmacy_phone,\n    phr.pharmacy_fax,\n    phr.pharmacy_address,\n\tprv.provider_first_name,\n\tprv.provider_last_name,\n\tprv.provider_phone\nfrom {{ ref('goodpill_snapshot') }} gs\nleft join {{ ref('drugs') }} drg on gs.rx_drug_generic = drg.generic_name\nleft join {{ ref('locations') }} loc on gs.order_location_id = loc.id\nleft join {{ ref('providers') }} prv on gs.rx_provider_npi = prv.provider_npi\nleft join {{ ref('patients') }} pat on gs.patient_id_cp = pat.patient_id_cp\nleft join {{ ref('pharmacies') }} phr on pat.pharmacy_id = phr.pharmacy_id\n-- at the moment, without metadata, the clinic join doesn't add info\nleft join {{ ref('clinics') }} cli on gs.rx_clinic_name = cli.name", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.goodpill_snapshot", "model.smartpill.drugs", "model.smartpill.locations", "model.smartpill.providers", "model.smartpill.patients", "model.smartpill.pharmacies", "model.smartpill.clinics"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill", "dimension"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "analytic_views", "goodpill_snapshot_abt"], "unique_id": "model.smartpill.goodpill_snapshot_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/analytic_views/goodpill_snapshot_abt.sql", "original_file_path": "models/analytics/analytic_views/goodpill_snapshot_abt.sql", "name": "goodpill_snapshot_abt", "alias": "goodpill_snapshot_abt", "checksum": {"name": "sha256", "checksum": "722c4a4a07dc652e48cf63a0608f84e415ac7ef1c019447802cadea02a03d1fa"}, "tags": ["goodpill", "backfill", "dimension"], "refs": [["goodpill_snapshot"], ["drugs"], ["locations"], ["providers"], ["patients"], ["pharmacies"], ["clinics"]], "sources": [], "description": "General snapshot table, joined with the dimension tables.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/analytic_views/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/analytic_views/goodpill_snapshot_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "analytics"}, "created_at": 1644413949.4620156, "compiled_sql": "select\n\tgs.*,\n\tdrg.brand_name as drug_brand,\n\tdrg.price30 as drug_price30,\n\tdrg.price90 as drug_price90,\n\tdrg.price_retail as drug_price_retail,\n\tdrg.price_goodrx as drug_price_goodrx,\n\tdrg.price_nadac as drug_price_nadac,\n\tdrg.price_coalesced as drug_price_coalesced,\n\tloc.city as location_city,\n\tloc.state as location_state,\n\tloc.zip_code as location_zip_code,\n\tpat.patient_date_registered as patient_date_registered,\n\tpat.patient_date_added as patient_date_added,\n\tpat.fill_next as patient_fill_next,\n\tpat.days_overdue as patient_days_overdue,\n\tpat.first_name as patient_first_name,\n\tpat.last_name as patient_last_name,\n\tpat.birth_date as patient_birth_date,\n\tpat.phone1 as patient_phone1,\n\tpat.phone2 as patient_phone2,\n\tpat.patient_address as patient_address,\n\tpat.patient_city as patient_city,\n\tpat.patient_state as patient_state,\n\tpat.patient_zip as patient_zip,\n\tpat.payment_card_type as patient_payment_card_type,\n\tpat.payment_card_last4 as patient_payment_card_last4,\n\tpat.payment_card_date_expired as patient_payment_card_date_expired,\n\tpat.payment_method_default as patient_payment_method_default,\n\tpat.payment_coupon as patient_payment_coupon,\n\tpat.tracking_coupon as patient_tracking_coupon,\n\tpat.refills_used as patient_refills_used,\n\tpat.date_first_rx_received as patient_date_first_rx_received,\n\tpat.date_first_dispensed as patient_date_first_dispensed,\n\tpat.date_first_expected_by as patient_date_first_expected_by,\n\tphr.pharmacy_npi,\n    phr.pharmacy_name,\n    phr.pharmacy_phone,\n    phr.pharmacy_fax,\n    phr.pharmacy_address,\n\tprv.provider_first_name,\n\tprv.provider_last_name,\n\tprv.provider_phone\nfrom \"datawarehouse\".analytics.\"goodpill_snapshot\" gs\nleft join \"datawarehouse\".analytics.\"drugs\" drg on gs.rx_drug_generic = drg.generic_name\nleft join \"datawarehouse\".analytics.\"locations\" loc on gs.order_location_id = loc.id\nleft join \"datawarehouse\".analytics.\"providers\" prv on gs.rx_provider_npi = prv.provider_npi\nleft join \"datawarehouse\".analytics.\"patients\" pat on gs.patient_id_cp = pat.patient_id_cp\nleft join \"datawarehouse\".analytics.\"pharmacies\" phr on pat.pharmacy_id = phr.pharmacy_id\n-- at the moment, without metadata, the clinic join doesn't add info\nleft join \"datawarehouse\".analytics.\"clinics\" cli on gs.rx_clinic_name = cli.name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"goodpill_snapshot_abt\""}, "model.smartpill.clinics": {"raw_sql": "{{ config(\n\tunique_key='name',\n\tindexes=[\n\t\t{'columns': ['name'], 'unique': True}\n\t]\n)}}\nselect distinct on (provider_clinic) \n    provider_clinic as name,\n    NOW() as date_processed \nfrom {{ ref('gp_rxs_single')}}\nwhere provider_clinic IS NOT NULL AND provider_clinic <> ''\n{% if is_incremental(): %}\n\tand (select COUNT(*) from {{ this }} where name = provider_clinic) = 0\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["name"], "unique": true}], "unique_key": "name", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "clinics"], "unique_id": "model.smartpill.clinics", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/clinics.sql", "original_file_path": "models/analytics/base_tables/clinics.sql", "name": "clinics", "alias": "clinics", "checksum": {"name": "sha256", "checksum": "4a51aa9055d884226a419fb6a63ff062fe8b6c6208c4b4fe71d307f12b617063"}, "tags": ["goodpill", "dimension"], "refs": [["gp_rxs_single"]], "sources": [], "description": "Clinics dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/clinics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "name", "indexes": [{"columns": ["name"], "unique": true}]}, "created_at": 1644413949.546494, "compiled_sql": "\nwith __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n)select distinct on (provider_clinic) \n    provider_clinic as name,\n    NOW() as date_processed \nfrom __dbt__cte__gp_rxs_single\nwhere provider_clinic IS NOT NULL AND provider_clinic <> ''\n\n\tand (select COUNT(*) from \"datawarehouse\".analytics.\"clinics\" where name = provider_clinic) = 0\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_rxs_single", "sql": " __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n)"}], "relation_name": "\"datawarehouse\".analytics.\"clinics\""}, "model.smartpill.drugs": {"raw_sql": "{{ config(\n\tunique_key='generic_name',\n\tindexes=[\n\t\t{'columns': ['generic_name'], 'unique': True}\n\t]\n)}}\nselect distinct on (generic_name)\n    gpd.drug_generic as generic_name,\n    gpd.drug_brand as brand_name,\n    gpd.price30, \n    gpd.price90, \n    gpd.price_retail, \n    gpd.price_goodrx, \n    gpd.price_nadac, \n    coalesce(NULLIF(gpd.price_goodrx, 0), NULLIF(gpd.price_nadac, 0), NULLIF(gpd.price_retail, 0)) * 1 as price_coalesced, \n    NOW() as date_processed\nfrom {{ref('gp_drugs')}} gpd\n{% if is_incremental() %}\nwhere gpd._airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_drugs"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["generic_name"], "unique": true}], "unique_key": "generic_name", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "drugs"], "unique_id": "model.smartpill.drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/drugs.sql", "original_file_path": "models/analytics/base_tables/drugs.sql", "name": "drugs", "alias": "drugs", "checksum": {"name": "sha256", "checksum": "e91827d8330569f12103e1a6dbaaa19519479e06028e88b47478a6a040f06cdd"}, "tags": ["goodpill", "dimension"], "refs": [["gp_drugs"]], "sources": [], "description": "Drugs dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/drugs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "generic_name", "indexes": [{"columns": ["generic_name"], "unique": true}]}, "created_at": 1644413949.645095, "compiled_sql": "\nwith __dbt__cte__gp_drugs as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price30') as int) as price30,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price90') as int) as price90,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_min') as int) as qty_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_min') as int) as days_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as int) as max_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar(255)) as message_display,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_verified') as varchar(255)) as message_verified,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_destroyed') as varchar(255)) as message_destroyed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(10,3)) as price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_nadac') as decimal(10,3)) as price_nadac,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(10,3)) as price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_ndcs') as int) as count_ndcs,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_drugs\n)select distinct on (generic_name)\n    gpd.drug_generic as generic_name,\n    gpd.drug_brand as brand_name,\n    gpd.price30, \n    gpd.price90, \n    gpd.price_retail, \n    gpd.price_goodrx, \n    gpd.price_nadac, \n    coalesce(NULLIF(gpd.price_goodrx, 0), NULLIF(gpd.price_nadac, 0), NULLIF(gpd.price_retail, 0)) * 1 as price_coalesced, \n    NOW() as date_processed\nfrom __dbt__cte__gp_drugs gpd\n\nwhere gpd._airbyte_emitted_at > (select MAX(date_processed) from \"datawarehouse\".analytics.\"drugs\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_drugs", "sql": " __dbt__cte__gp_drugs as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price30') as int) as price30,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price90') as int) as price90,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_min') as int) as qty_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_min') as int) as days_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as int) as max_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar(255)) as message_display,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_verified') as varchar(255)) as message_verified,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_destroyed') as varchar(255)) as message_destroyed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(10,3)) as price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_nadac') as decimal(10,3)) as price_nadac,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(10,3)) as price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_ndcs') as int) as count_ndcs,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_drugs\n)"}], "relation_name": "\"datawarehouse\".analytics.\"drugs\""}, "model.smartpill.goodpill_historic": {"raw_sql": "{{ config(\n\tindexes=[\n\t\t{'columns': ['rx_number', 'invoice_number', 'patient_id_cp', 'event_name']},\n\t\t{'columns': ['rx_number']},\n\t\t{'columns': ['invoice_number']},\n\t\t{'columns': ['patient_id_cp']}\n\t]\n) }}\nwith gph as (\n{{ dbt_utils.union_relations(\n\trelations=[\n\t\tref('orders_historic'),\n\t\tref('rxs_historic'),\n\t\tref('order_items_historic'),\n\t\tref('patients_status_historic')\n\t]\n) }}\n)\nselect\n\t*\nfrom gph\n{% if is_incremental() %}\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.is_incremental"], "nodes": ["model.smartpill.orders_historic", "model.smartpill.rxs_historic", "model.smartpill.order_items_historic", "model.smartpill.patients_status_historic"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["rx_number", "invoice_number", "patient_id_cp", "event_name"]}, {"columns": ["rx_number"]}, {"columns": ["invoice_number"]}, {"columns": ["patient_id_cp"]}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "goodpill_historic"], "unique_id": "model.smartpill.goodpill_historic", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/goodpill_historic.sql", "original_file_path": "models/analytics/base_tables/goodpill_historic.sql", "name": "goodpill_historic", "alias": "goodpill_historic", "checksum": {"name": "sha256", "checksum": "2d5456b7605043e6e6b30c3be64bdff091550b1596df1b4c98c131bf3c26f395"}, "tags": ["goodpill", "backfill"], "refs": [["orders_historic"], ["rxs_historic"], ["order_items_historic"], ["patients_status_historic"]], "sources": [], "description": "General historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/goodpill_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "indexes": [{"columns": ["rx_number", "invoice_number", "patient_id_cp", "event_name"]}, {"columns": ["rx_number"]}, {"columns": ["invoice_number"]}, {"columns": ["patient_id_cp"]}]}, "created_at": 1644413949.6519206, "compiled_sql": "\nwith gph as (\n\n\n        (\n            select\n\n                cast('\"datawarehouse\".analytics.\"orders_historic\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"invoice_number\" as integer) as \"invoice_number\" ,\n                    cast(\"event_name\" as text) as \"event_name\" ,\n                    cast(\"event_date\" as timestamp without time zone) as \"event_date\" ,\n                    cast(\"patient_id_cp\" as integer) as \"patient_id_cp\" ,\n                    cast(\"count_items\" as integer) as \"count_items\" ,\n                    cast(\"count_filled\" as integer) as \"count_filled\" ,\n                    cast(\"count_nofill\" as integer) as \"count_nofill\" ,\n                    cast(\"order_source\" as character varying(80)) as \"order_source\" ,\n                    cast(\"order_stage_cp\" as character varying(80)) as \"order_stage_cp\" ,\n                    cast(\"order_status\" as character varying(80)) as \"order_status\" ,\n                    cast(\"invoice_doc_id\" as character varying(80)) as \"invoice_doc_id\" ,\n                    cast(\"tracking_number\" as character varying(80)) as \"tracking_number\" ,\n                    cast(\"payment_total_default\" as integer) as \"payment_total_default\" ,\n                    cast(\"payment_total_actual\" as integer) as \"payment_total_actual\" ,\n                    cast(\"payment_fee_default\" as integer) as \"payment_fee_default\" ,\n                    cast(\"payment_fee_actual\" as integer) as \"payment_fee_actual\" ,\n                    cast(\"payment_due_default\" as integer) as \"payment_due_default\" ,\n                    cast(\"payment_due_actual\" as integer) as \"payment_due_actual\" ,\n                    cast(\"payment_date_autopay\" as character varying(80)) as \"payment_date_autopay\" ,\n                    cast(\"payment_method_actual\" as character varying(80)) as \"payment_method_actual\" ,\n                    cast(\"coupon_lines\" as character varying(255)) as \"coupon_lines\" ,\n                    cast(\"order_note\" as text) as \"order_note\" ,\n                    cast(\"rph_check\" as character varying(5)) as \"rph_check\" ,\n                    cast(\"tech_fill\" as character varying(5)) as \"tech_fill\" ,\n                    cast(\"_airbyte_emitted_at\" as timestamp with time zone) as \"_airbyte_emitted_at\" ,\n                    cast(\"_airbyte_ab_id\" as character varying(256)) as \"_airbyte_ab_id\" ,\n                    cast(\"_ab_cdc_updated_at\" as timestamp without time zone) as \"_ab_cdc_updated_at\" ,\n                    cast(\"_airbyte_source\" as text) as \"_airbyte_source\" ,\n                    cast(\"unique_event_id\" as text) as \"unique_event_id\" ,\n                    cast(\"location_id\" as character varying(256)) as \"location_id\" ,\n                    cast(null as integer) as \"rx_number\" ,\n                    cast(null as character varying(255)) as \"drug_generic\" ,\n                    cast(null as character varying(255)) as \"clinic_name\" ,\n                    cast(null as character varying(255)) as \"provider_npi\" ,\n                    cast(null as integer) as \"is_refill\" ,\n                    cast(null as integer) as \"rx_autofill\" ,\n                    cast(null as numeric(6,3)) as \"sig_qty_per_day\" ,\n                    cast(null as character varying(80)) as \"rx_message_key\" ,\n                    cast(null as integer) as \"max_gsn\" ,\n                    cast(null as character varying(255)) as \"drug_gsns\" ,\n                    cast(null as numeric(5,2)) as \"refills_total\" ,\n                    cast(null as numeric(5,2)) as \"refills_original\" ,\n                    cast(null as numeric(5,2)) as \"refills_left\" ,\n                    cast(null as date) as \"refill_date_first\" ,\n                    cast(null as date) as \"refill_date_last\" ,\n                    cast(null as date) as \"rx_date_expired\" ,\n                    cast(null as timestamp without time zone) as \"rx_date_changed\" ,\n                    cast(null as numeric(10,3)) as \"qty_left\" ,\n                    cast(null as numeric(10,3)) as \"qty_original\" ,\n                    cast(null as character varying(255)) as \"sig_actual\" ,\n                    cast(null as character varying(255)) as \"sig_initial\" ,\n                    cast(null as character varying(255)) as \"sig_clean\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty\" ,\n                    cast(null as integer) as \"sig_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty_per_day_actual\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty\" ,\n                    cast(null as integer) as \"sig_v2_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty_per_day\" ,\n                    cast(null as character varying(255)) as \"sig_v2_unit\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_conf_score\" ,\n                    cast(null as character varying(255)) as \"sig_v2_dosages\" ,\n                    cast(null as character varying(255)) as \"sig_v2_scores\" ,\n                    cast(null as character varying(255)) as \"sig_v2_frequencies\" ,\n                    cast(null as character varying(255)) as \"sig_v2_durations\" ,\n                    cast(null as date) as \"refill_date_next\" ,\n                    cast(null as date) as \"refill_date_manual\" ,\n                    cast(null as date) as \"refill_date_default\" ,\n                    cast(null as numeric(11,3)) as \"qty_total\" ,\n                    cast(null as character varying(80)) as \"rx_source\" ,\n                    cast(null as character varying(80)) as \"rx_transfer\" ,\n                    cast(null as character varying(255)) as \"groups\" ,\n                    cast(null as integer) as \"rx_dispensed_id\" ,\n                    cast(null as character varying(80)) as \"stock_level_initial\" ,\n                    cast(null as character varying(255)) as \"rx_message_keys_initial\" ,\n                    cast(null as integer) as \"patient_autofill_initial\" ,\n                    cast(null as integer) as \"rx_autofill_initial\" ,\n                    cast(null as character varying(255)) as \"rx_numbers_initial\" ,\n                    cast(null as numeric(6,3)) as \"zscore_initial\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_actual\" ,\n                    cast(null as integer) as \"days_dispensed_default\" ,\n                    cast(null as integer) as \"days_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_default\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_actual\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_total\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_repacks\" ,\n                    cast(null as integer) as \"count_pended_total\" ,\n                    cast(null as integer) as \"count_pended_repacks\" ,\n                    cast(null as character varying(255)) as \"item_message_keys\" ,\n                    cast(null as character varying(255)) as \"item_message_text\" ,\n                    cast(null as character varying(80)) as \"item_type\" ,\n                    cast(null as character varying(80)) as \"item_added_by\" ,\n                    cast(null as timestamp without time zone) as \"item_date_added\" ,\n                    cast(null as timestamp without time zone) as \"refill_target_date\" ,\n                    cast(null as integer) as \"refill_target_days\" ,\n                    cast(null as character varying(255)) as \"refill_target_rxs\" \n\n            from \"datawarehouse\".analytics.\"orders_historic\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"datawarehouse\".analytics.\"rxs_historic\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(null as integer) as \"invoice_number\" ,\n                    cast(\"event_name\" as text) as \"event_name\" ,\n                    cast(\"event_date\" as timestamp without time zone) as \"event_date\" ,\n                    cast(\"patient_id_cp\" as integer) as \"patient_id_cp\" ,\n                    cast(null as integer) as \"count_items\" ,\n                    cast(null as integer) as \"count_filled\" ,\n                    cast(null as integer) as \"count_nofill\" ,\n                    cast(null as character varying(80)) as \"order_source\" ,\n                    cast(null as character varying(80)) as \"order_stage_cp\" ,\n                    cast(null as character varying(80)) as \"order_status\" ,\n                    cast(null as character varying(80)) as \"invoice_doc_id\" ,\n                    cast(null as character varying(80)) as \"tracking_number\" ,\n                    cast(null as integer) as \"payment_total_default\" ,\n                    cast(null as integer) as \"payment_total_actual\" ,\n                    cast(null as integer) as \"payment_fee_default\" ,\n                    cast(null as integer) as \"payment_fee_actual\" ,\n                    cast(null as integer) as \"payment_due_default\" ,\n                    cast(null as integer) as \"payment_due_actual\" ,\n                    cast(null as character varying(80)) as \"payment_date_autopay\" ,\n                    cast(null as character varying(80)) as \"payment_method_actual\" ,\n                    cast(null as character varying(255)) as \"coupon_lines\" ,\n                    cast(null as text) as \"order_note\" ,\n                    cast(null as character varying(5)) as \"rph_check\" ,\n                    cast(null as character varying(5)) as \"tech_fill\" ,\n                    cast(\"_airbyte_emitted_at\" as timestamp with time zone) as \"_airbyte_emitted_at\" ,\n                    cast(\"_airbyte_ab_id\" as character varying(256)) as \"_airbyte_ab_id\" ,\n                    cast(\"_ab_cdc_updated_at\" as timestamp without time zone) as \"_ab_cdc_updated_at\" ,\n                    cast(\"_airbyte_source\" as text) as \"_airbyte_source\" ,\n                    cast(\"unique_event_id\" as text) as \"unique_event_id\" ,\n                    cast(null as character varying(256)) as \"location_id\" ,\n                    cast(\"rx_number\" as integer) as \"rx_number\" ,\n                    cast(\"drug_generic\" as character varying(255)) as \"drug_generic\" ,\n                    cast(\"clinic_name\" as character varying(255)) as \"clinic_name\" ,\n                    cast(\"provider_npi\" as character varying(255)) as \"provider_npi\" ,\n                    cast(\"is_refill\" as integer) as \"is_refill\" ,\n                    cast(\"rx_autofill\" as integer) as \"rx_autofill\" ,\n                    cast(\"sig_qty_per_day\" as numeric(6,3)) as \"sig_qty_per_day\" ,\n                    cast(\"rx_message_key\" as character varying(80)) as \"rx_message_key\" ,\n                    cast(\"max_gsn\" as integer) as \"max_gsn\" ,\n                    cast(\"drug_gsns\" as character varying(255)) as \"drug_gsns\" ,\n                    cast(\"refills_total\" as numeric(5,2)) as \"refills_total\" ,\n                    cast(\"refills_original\" as numeric(5,2)) as \"refills_original\" ,\n                    cast(\"refills_left\" as numeric(5,2)) as \"refills_left\" ,\n                    cast(\"refill_date_first\" as date) as \"refill_date_first\" ,\n                    cast(\"refill_date_last\" as date) as \"refill_date_last\" ,\n                    cast(\"rx_date_expired\" as date) as \"rx_date_expired\" ,\n                    cast(\"rx_date_changed\" as timestamp without time zone) as \"rx_date_changed\" ,\n                    cast(\"qty_left\" as numeric(10,3)) as \"qty_left\" ,\n                    cast(\"qty_original\" as numeric(10,3)) as \"qty_original\" ,\n                    cast(\"sig_actual\" as character varying(255)) as \"sig_actual\" ,\n                    cast(\"sig_initial\" as character varying(255)) as \"sig_initial\" ,\n                    cast(\"sig_clean\" as character varying(255)) as \"sig_clean\" ,\n                    cast(\"sig_qty\" as numeric(10,3)) as \"sig_qty\" ,\n                    cast(\"sig_days\" as integer) as \"sig_days\" ,\n                    cast(\"sig_qty_per_day_actual\" as numeric(10,3)) as \"sig_qty_per_day_actual\" ,\n                    cast(\"sig_v2_qty\" as numeric(10,3)) as \"sig_v2_qty\" ,\n                    cast(\"sig_v2_days\" as integer) as \"sig_v2_days\" ,\n                    cast(\"sig_v2_qty_per_day\" as numeric(10,3)) as \"sig_v2_qty_per_day\" ,\n                    cast(\"sig_v2_unit\" as character varying(255)) as \"sig_v2_unit\" ,\n                    cast(\"sig_v2_conf_score\" as numeric(10,3)) as \"sig_v2_conf_score\" ,\n                    cast(\"sig_v2_dosages\" as character varying(255)) as \"sig_v2_dosages\" ,\n                    cast(\"sig_v2_scores\" as character varying(255)) as \"sig_v2_scores\" ,\n                    cast(\"sig_v2_frequencies\" as character varying(255)) as \"sig_v2_frequencies\" ,\n                    cast(\"sig_v2_durations\" as character varying(255)) as \"sig_v2_durations\" ,\n                    cast(\"refill_date_next\" as date) as \"refill_date_next\" ,\n                    cast(\"refill_date_manual\" as date) as \"refill_date_manual\" ,\n                    cast(\"refill_date_default\" as date) as \"refill_date_default\" ,\n                    cast(\"qty_total\" as numeric(11,3)) as \"qty_total\" ,\n                    cast(\"rx_source\" as character varying(80)) as \"rx_source\" ,\n                    cast(\"rx_transfer\" as character varying(80)) as \"rx_transfer\" ,\n                    cast(null as character varying(255)) as \"groups\" ,\n                    cast(null as integer) as \"rx_dispensed_id\" ,\n                    cast(null as character varying(80)) as \"stock_level_initial\" ,\n                    cast(null as character varying(255)) as \"rx_message_keys_initial\" ,\n                    cast(null as integer) as \"patient_autofill_initial\" ,\n                    cast(null as integer) as \"rx_autofill_initial\" ,\n                    cast(null as character varying(255)) as \"rx_numbers_initial\" ,\n                    cast(null as numeric(6,3)) as \"zscore_initial\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_actual\" ,\n                    cast(null as integer) as \"days_dispensed_default\" ,\n                    cast(null as integer) as \"days_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_default\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_actual\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_total\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_repacks\" ,\n                    cast(null as integer) as \"count_pended_total\" ,\n                    cast(null as integer) as \"count_pended_repacks\" ,\n                    cast(null as character varying(255)) as \"item_message_keys\" ,\n                    cast(null as character varying(255)) as \"item_message_text\" ,\n                    cast(null as character varying(80)) as \"item_type\" ,\n                    cast(null as character varying(80)) as \"item_added_by\" ,\n                    cast(null as timestamp without time zone) as \"item_date_added\" ,\n                    cast(null as timestamp without time zone) as \"refill_target_date\" ,\n                    cast(null as integer) as \"refill_target_days\" ,\n                    cast(null as character varying(255)) as \"refill_target_rxs\" \n\n            from \"datawarehouse\".analytics.\"rxs_historic\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"datawarehouse\".analytics.\"order_items_historic\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(\"invoice_number\" as integer) as \"invoice_number\" ,\n                    cast(\"event_name\" as text) as \"event_name\" ,\n                    cast(\"event_date\" as timestamp without time zone) as \"event_date\" ,\n                    cast(\"patient_id_cp\" as integer) as \"patient_id_cp\" ,\n                    cast(null as integer) as \"count_items\" ,\n                    cast(null as integer) as \"count_filled\" ,\n                    cast(null as integer) as \"count_nofill\" ,\n                    cast(null as character varying(80)) as \"order_source\" ,\n                    cast(null as character varying(80)) as \"order_stage_cp\" ,\n                    cast(null as character varying(80)) as \"order_status\" ,\n                    cast(null as character varying(80)) as \"invoice_doc_id\" ,\n                    cast(null as character varying(80)) as \"tracking_number\" ,\n                    cast(null as integer) as \"payment_total_default\" ,\n                    cast(null as integer) as \"payment_total_actual\" ,\n                    cast(null as integer) as \"payment_fee_default\" ,\n                    cast(null as integer) as \"payment_fee_actual\" ,\n                    cast(null as integer) as \"payment_due_default\" ,\n                    cast(null as integer) as \"payment_due_actual\" ,\n                    cast(null as character varying(80)) as \"payment_date_autopay\" ,\n                    cast(null as character varying(80)) as \"payment_method_actual\" ,\n                    cast(null as character varying(255)) as \"coupon_lines\" ,\n                    cast(null as text) as \"order_note\" ,\n                    cast(null as character varying(5)) as \"rph_check\" ,\n                    cast(null as character varying(5)) as \"tech_fill\" ,\n                    cast(\"_airbyte_emitted_at\" as timestamp with time zone) as \"_airbyte_emitted_at\" ,\n                    cast(\"_airbyte_ab_id\" as character varying(256)) as \"_airbyte_ab_id\" ,\n                    cast(\"_ab_cdc_updated_at\" as timestamp without time zone) as \"_ab_cdc_updated_at\" ,\n                    cast(\"_airbyte_source\" as text) as \"_airbyte_source\" ,\n                    cast(\"unique_event_id\" as text) as \"unique_event_id\" ,\n                    cast(null as character varying(256)) as \"location_id\" ,\n                    cast(\"rx_number\" as integer) as \"rx_number\" ,\n                    cast(null as character varying(255)) as \"drug_generic\" ,\n                    cast(null as character varying(255)) as \"clinic_name\" ,\n                    cast(null as character varying(255)) as \"provider_npi\" ,\n                    cast(null as integer) as \"is_refill\" ,\n                    cast(null as integer) as \"rx_autofill\" ,\n                    cast(null as numeric(6,3)) as \"sig_qty_per_day\" ,\n                    cast(null as character varying(80)) as \"rx_message_key\" ,\n                    cast(null as integer) as \"max_gsn\" ,\n                    cast(null as character varying(255)) as \"drug_gsns\" ,\n                    cast(null as numeric(5,2)) as \"refills_total\" ,\n                    cast(null as numeric(5,2)) as \"refills_original\" ,\n                    cast(null as numeric(5,2)) as \"refills_left\" ,\n                    cast(null as date) as \"refill_date_first\" ,\n                    cast(\"refill_date_last\" as date) as \"refill_date_last\" ,\n                    cast(null as date) as \"rx_date_expired\" ,\n                    cast(null as timestamp without time zone) as \"rx_date_changed\" ,\n                    cast(null as numeric(10,3)) as \"qty_left\" ,\n                    cast(null as numeric(10,3)) as \"qty_original\" ,\n                    cast(null as character varying(255)) as \"sig_actual\" ,\n                    cast(null as character varying(255)) as \"sig_initial\" ,\n                    cast(null as character varying(255)) as \"sig_clean\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty\" ,\n                    cast(null as integer) as \"sig_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty_per_day_actual\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty\" ,\n                    cast(null as integer) as \"sig_v2_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty_per_day\" ,\n                    cast(null as character varying(255)) as \"sig_v2_unit\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_conf_score\" ,\n                    cast(null as character varying(255)) as \"sig_v2_dosages\" ,\n                    cast(null as character varying(255)) as \"sig_v2_scores\" ,\n                    cast(null as character varying(255)) as \"sig_v2_frequencies\" ,\n                    cast(null as character varying(255)) as \"sig_v2_durations\" ,\n                    cast(null as date) as \"refill_date_next\" ,\n                    cast(\"refill_date_manual\" as date) as \"refill_date_manual\" ,\n                    cast(\"refill_date_default\" as date) as \"refill_date_default\" ,\n                    cast(null as numeric(11,3)) as \"qty_total\" ,\n                    cast(null as character varying(80)) as \"rx_source\" ,\n                    cast(null as character varying(80)) as \"rx_transfer\" ,\n                    cast(\"groups\" as character varying(255)) as \"groups\" ,\n                    cast(\"rx_dispensed_id\" as integer) as \"rx_dispensed_id\" ,\n                    cast(\"stock_level_initial\" as character varying(80)) as \"stock_level_initial\" ,\n                    cast(\"rx_message_keys_initial\" as character varying(255)) as \"rx_message_keys_initial\" ,\n                    cast(\"patient_autofill_initial\" as integer) as \"patient_autofill_initial\" ,\n                    cast(\"rx_autofill_initial\" as integer) as \"rx_autofill_initial\" ,\n                    cast(\"rx_numbers_initial\" as character varying(255)) as \"rx_numbers_initial\" ,\n                    cast(\"zscore_initial\" as numeric(6,3)) as \"zscore_initial\" ,\n                    cast(\"refills_dispensed_default\" as numeric(5,2)) as \"refills_dispensed_default\" ,\n                    cast(\"refills_dispensed_actual\" as numeric(5,2)) as \"refills_dispensed_actual\" ,\n                    cast(\"days_dispensed_default\" as integer) as \"days_dispensed_default\" ,\n                    cast(\"days_dispensed_actual\" as integer) as \"days_dispensed_actual\" ,\n                    cast(\"qty_dispensed_default\" as numeric(10,3)) as \"qty_dispensed_default\" ,\n                    cast(\"qty_dispensed_actual\" as numeric(10,3)) as \"qty_dispensed_actual\" ,\n                    cast(\"price_dispensed_default\" as numeric(5,2)) as \"price_dispensed_default\" ,\n                    cast(\"price_dispensed_actual\" as numeric(5,2)) as \"price_dispensed_actual\" ,\n                    cast(\"qty_pended_total\" as numeric(10,3)) as \"qty_pended_total\" ,\n                    cast(\"qty_pended_repacks\" as numeric(10,3)) as \"qty_pended_repacks\" ,\n                    cast(\"count_pended_total\" as integer) as \"count_pended_total\" ,\n                    cast(\"count_pended_repacks\" as integer) as \"count_pended_repacks\" ,\n                    cast(\"item_message_keys\" as character varying(255)) as \"item_message_keys\" ,\n                    cast(\"item_message_text\" as character varying(255)) as \"item_message_text\" ,\n                    cast(\"item_type\" as character varying(80)) as \"item_type\" ,\n                    cast(\"item_added_by\" as character varying(80)) as \"item_added_by\" ,\n                    cast(\"item_date_added\" as timestamp without time zone) as \"item_date_added\" ,\n                    cast(\"refill_target_date\" as timestamp without time zone) as \"refill_target_date\" ,\n                    cast(\"refill_target_days\" as integer) as \"refill_target_days\" ,\n                    cast(\"refill_target_rxs\" as character varying(255)) as \"refill_target_rxs\" \n\n            from \"datawarehouse\".analytics.\"order_items_historic\"\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('\"datawarehouse\".analytics.\"patients_status_historic\"' as \n    varchar\n) as _dbt_source_relation,\n                \n                    cast(null as integer) as \"invoice_number\" ,\n                    cast(\"event_name\" as text) as \"event_name\" ,\n                    cast(\"event_date\" as timestamp without time zone) as \"event_date\" ,\n                    cast(\"patient_id_cp\" as integer) as \"patient_id_cp\" ,\n                    cast(null as integer) as \"count_items\" ,\n                    cast(null as integer) as \"count_filled\" ,\n                    cast(null as integer) as \"count_nofill\" ,\n                    cast(null as character varying(80)) as \"order_source\" ,\n                    cast(null as character varying(80)) as \"order_stage_cp\" ,\n                    cast(null as character varying(80)) as \"order_status\" ,\n                    cast(null as character varying(80)) as \"invoice_doc_id\" ,\n                    cast(null as character varying(80)) as \"tracking_number\" ,\n                    cast(null as integer) as \"payment_total_default\" ,\n                    cast(null as integer) as \"payment_total_actual\" ,\n                    cast(null as integer) as \"payment_fee_default\" ,\n                    cast(null as integer) as \"payment_fee_actual\" ,\n                    cast(null as integer) as \"payment_due_default\" ,\n                    cast(null as integer) as \"payment_due_actual\" ,\n                    cast(null as character varying(80)) as \"payment_date_autopay\" ,\n                    cast(null as character varying(80)) as \"payment_method_actual\" ,\n                    cast(null as character varying(255)) as \"coupon_lines\" ,\n                    cast(null as text) as \"order_note\" ,\n                    cast(null as character varying(5)) as \"rph_check\" ,\n                    cast(null as character varying(5)) as \"tech_fill\" ,\n                    cast(\"_airbyte_emitted_at\" as timestamp with time zone) as \"_airbyte_emitted_at\" ,\n                    cast(\"_airbyte_ab_id\" as character varying(256)) as \"_airbyte_ab_id\" ,\n                    cast(\"_ab_cdc_updated_at\" as timestamp without time zone) as \"_ab_cdc_updated_at\" ,\n                    cast(\"_airbyte_source\" as text) as \"_airbyte_source\" ,\n                    cast(\"unique_event_id\" as text) as \"unique_event_id\" ,\n                    cast(null as character varying(256)) as \"location_id\" ,\n                    cast(null as integer) as \"rx_number\" ,\n                    cast(null as character varying(255)) as \"drug_generic\" ,\n                    cast(null as character varying(255)) as \"clinic_name\" ,\n                    cast(null as character varying(255)) as \"provider_npi\" ,\n                    cast(null as integer) as \"is_refill\" ,\n                    cast(null as integer) as \"rx_autofill\" ,\n                    cast(null as numeric(6,3)) as \"sig_qty_per_day\" ,\n                    cast(null as character varying(80)) as \"rx_message_key\" ,\n                    cast(null as integer) as \"max_gsn\" ,\n                    cast(null as character varying(255)) as \"drug_gsns\" ,\n                    cast(null as numeric(5,2)) as \"refills_total\" ,\n                    cast(null as numeric(5,2)) as \"refills_original\" ,\n                    cast(null as numeric(5,2)) as \"refills_left\" ,\n                    cast(null as date) as \"refill_date_first\" ,\n                    cast(null as date) as \"refill_date_last\" ,\n                    cast(null as date) as \"rx_date_expired\" ,\n                    cast(null as timestamp without time zone) as \"rx_date_changed\" ,\n                    cast(null as numeric(10,3)) as \"qty_left\" ,\n                    cast(null as numeric(10,3)) as \"qty_original\" ,\n                    cast(null as character varying(255)) as \"sig_actual\" ,\n                    cast(null as character varying(255)) as \"sig_initial\" ,\n                    cast(null as character varying(255)) as \"sig_clean\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty\" ,\n                    cast(null as integer) as \"sig_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_qty_per_day_actual\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty\" ,\n                    cast(null as integer) as \"sig_v2_days\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_qty_per_day\" ,\n                    cast(null as character varying(255)) as \"sig_v2_unit\" ,\n                    cast(null as numeric(10,3)) as \"sig_v2_conf_score\" ,\n                    cast(null as character varying(255)) as \"sig_v2_dosages\" ,\n                    cast(null as character varying(255)) as \"sig_v2_scores\" ,\n                    cast(null as character varying(255)) as \"sig_v2_frequencies\" ,\n                    cast(null as character varying(255)) as \"sig_v2_durations\" ,\n                    cast(null as date) as \"refill_date_next\" ,\n                    cast(null as date) as \"refill_date_manual\" ,\n                    cast(null as date) as \"refill_date_default\" ,\n                    cast(null as numeric(11,3)) as \"qty_total\" ,\n                    cast(null as character varying(80)) as \"rx_source\" ,\n                    cast(null as character varying(80)) as \"rx_transfer\" ,\n                    cast(null as character varying(255)) as \"groups\" ,\n                    cast(null as integer) as \"rx_dispensed_id\" ,\n                    cast(null as character varying(80)) as \"stock_level_initial\" ,\n                    cast(null as character varying(255)) as \"rx_message_keys_initial\" ,\n                    cast(null as integer) as \"patient_autofill_initial\" ,\n                    cast(null as integer) as \"rx_autofill_initial\" ,\n                    cast(null as character varying(255)) as \"rx_numbers_initial\" ,\n                    cast(null as numeric(6,3)) as \"zscore_initial\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"refills_dispensed_actual\" ,\n                    cast(null as integer) as \"days_dispensed_default\" ,\n                    cast(null as integer) as \"days_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_default\" ,\n                    cast(null as numeric(10,3)) as \"qty_dispensed_actual\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_default\" ,\n                    cast(null as numeric(5,2)) as \"price_dispensed_actual\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_total\" ,\n                    cast(null as numeric(10,3)) as \"qty_pended_repacks\" ,\n                    cast(null as integer) as \"count_pended_total\" ,\n                    cast(null as integer) as \"count_pended_repacks\" ,\n                    cast(null as character varying(255)) as \"item_message_keys\" ,\n                    cast(null as character varying(255)) as \"item_message_text\" ,\n                    cast(null as character varying(80)) as \"item_type\" ,\n                    cast(null as character varying(80)) as \"item_added_by\" ,\n                    cast(null as timestamp without time zone) as \"item_date_added\" ,\n                    cast(null as timestamp without time zone) as \"refill_target_date\" ,\n                    cast(null as integer) as \"refill_target_days\" ,\n                    cast(null as character varying(255)) as \"refill_target_rxs\" \n\n            from \"datawarehouse\".analytics.\"patients_status_historic\"\n        )\n\n        \n)\nselect\n\t*\nfrom gph\n\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from \"datawarehouse\".analytics.\"goodpill_historic\")\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"goodpill_historic\""}, "model.smartpill.locations": {"raw_sql": "{{ config(\n\tunique_key='id',\n\tindexes=[\n\t\t{'columns': ['id'], 'unique': True}\n\t]\n)}}\nWITH locations AS (\n    select \n        order_city as city, \n        order_state as state, \n        order_zip as zip_code,\n        _airbyte_emitted_at\n    from {{ ref('gp_orders') }}\n    UNION\n    select \n       patient_city as city,\n       patient_state as state,\n       patient_zip as zip_code,\n       _airbyte_emitted_at\n    from {{ ref('gp_patients') }} \n)\nselect distinct on (id)\n    coalesce(zip_code, state) as id,\n    cast(city as varchar(255)) as city, \n    cast(state as varchar(255)) as state, \n    cast(zip_code as varchar(255)) as zip_code, \n    NOW() as date_processed\nFROM locations \n{% if is_incremental() %}\n    where _airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_orders", "model.smartpill.gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["id"], "unique": true}], "unique_key": "id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "locations"], "unique_id": "model.smartpill.locations", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/locations.sql", "original_file_path": "models/analytics/base_tables/locations.sql", "name": "locations", "alias": "locations", "checksum": {"name": "sha256", "checksum": "082e945bcda762b696e9dc3a167e383e8a99c66640906c4de51b51f0d5f8bec6"}, "tags": ["goodpill", "dimension"], "refs": [["gp_orders"], ["gp_patients"]], "sources": [], "description": "Locations dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/locations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "id", "indexes": [{"columns": ["id"], "unique": true}]}, "created_at": 1644413949.658476, "compiled_sql": "\nWITH  __dbt__cte__gp_orders as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders\n),  __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n),locations AS (\n    select \n        order_city as city, \n        order_state as state, \n        order_zip as zip_code,\n        _airbyte_emitted_at\n    from __dbt__cte__gp_orders\n    UNION\n    select \n       patient_city as city,\n       patient_state as state,\n       patient_zip as zip_code,\n       _airbyte_emitted_at\n    from __dbt__cte__gp_patients \n)\nselect distinct on (id)\n    coalesce(zip_code, state) as id,\n    cast(city as varchar(255)) as city, \n    cast(state as varchar(255)) as state, \n    cast(zip_code as varchar(255)) as zip_code, \n    NOW() as date_processed\nFROM locations \n\n    where _airbyte_emitted_at > (select MAX(date_processed) from \"datawarehouse\".analytics.\"locations\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_orders", "sql": " __dbt__cte__gp_orders as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders\n)"}, {"id": "model.smartpill.gp_patients", "sql": " __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)"}], "relation_name": "\"datawarehouse\".analytics.\"locations\""}, "model.smartpill.order_items_historic": {"raw_sql": "{{ config(\n\tunique_key='unique_event_id',\n\tindexes=[\n\t\t{'columns': ['invoice_number', 'rx_number', 'event_name', 'event_date']},\n\t\t{'columns': ['unique_event_id']},\n\t\t{'columns': ['invoice_number', 'rx_number']}\n\t]\n) }}\n\nwith oie as (\n\t{% if not is_incremental() %}\n\t\t-- query the goodpill data obtained with airbyte,\n\t\t-- to try and fetch missing columns from the v1 warehouse\n\t\twith gpoi as (\n\t\t\tselect distinct on (rx_number, invoice_number)\n\t\t\t\t*\t\t\t\t\n\t\t\tfrom {{ ref('gp_order_items') }}\n\t\t\torder by rx_number, invoice_number, _airbyte_emitted_at desc\n\t\t)\n\t\tselect\n\t\t\tfl._airbyte_emitted_at as _airbyte_emitted_at,\n\t\t\tfl._airbyte_ab_id,\n\t\t\t'ANALYTICS_V1' as _airbyte_source,\n\t\t\tfl.invoice_number,\n\t\t\tpat.goodpill_id as patient_id_cp,\n\t\t\tfl.rx_number,\n\t\t\tgpoi.groups,\n\t\t\tgpoi.rx_dispensed_id,\n\t\t\tfl.stock_level_initial,\n\t\t\tfl.rx_message_keys_initial,\n\t\t\tfl.patient_autofill_initial,\n\t\t\tfl.rx_autofill_initial,\n\t\t\tfl.rx_numbers_initial,\n\t\t\tfl.zscore_initial,\n\t\t\tgpoi.refills_dispensed_default,\n\t\t\tfl.refills_dispensed_actual,\n\t\t\tgpoi.days_dispensed_default,\n\t\t\tfl.days_dispensed_actual,\n\t\t\tgpoi.qty_dispensed_default,\n\t\t\tfl.qty_dispensed_actual,\n\t\t\tgpoi.price_dispensed_default,\n\t\t\tfl.price_dispensed_actual,\n\t\t\tgpoi.qty_pended_total,\n\t\t\tgpoi.qty_pended_repacks,\n\t\t\tgpoi.count_pended_total,\n\t\t\tgpoi.count_pended_repacks,\n\t\t\tgpoi.item_message_keys,\n\t\t\tgpoi.item_message_text,\n\t\t\tgpoi.item_type,\n\t\t\tgpoi.item_added_by,\n\t\t\tgpoi.item_date_added,\n\t\t\tfl.refill_date_last,\n\t\t\tfl.refill_date_manual,\n\t\t\tfl.refill_date_default,\n\t\t\tgpoi.refill_target_date,\n\t\t\tgpoi.refill_target_days,\n\t\t\tgpoi.refill_target_rxs,\n\t\t\tfl.date_processed as _ab_cdc_updated_at,\n\t\t\tcase\n\t\t\t\twhen event_type = 'ADDED' then 'ORDER_ITEM_ADDED'\n\t\t\t\twhen event_type = 'REMOVED' then 'ORDER_ITEM_DELETED'\n\t\t\t\telse 'ORDER_ITEM_UPDATED'\n\t\t\tend as event_name,\n\t\t\tcoalesce(concat(dts.db_date, 'T', tms.hour24_full_string)::timestamp,  goodpill_event_date) as event_date\n\t\tfrom {{ ref('an_fills_logs') }} fl\n\t\tleft join {{ ref('an_patients') }} pat using (patient_id)\n\t\tleft join gpoi using (invoice_number, rx_number)\n\t\tleft join {{ ref('an_dates') }} dts on dts.date_id = fl.event_date_id\n\t\tleft join {{ ref('an_times') }} tms on tms.time_id = fl.event_time_id\n\t\twhere fl.event_type = 'ADDED' or fl.event_type = 'REMOVED'\n\t{% else %}\n\t\t(select distinct on (rx_number, invoice_number)\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_ADDED' as event_name,\n\t\t\titem_date_added as event_date\n\t\t\tfrom {{ ref('gp_order_items')}} gpoi\n\t\t\twhere item_date_added is not NULL and (\n\t\t\t\tselect \n\t\t\t\t\tsum(cast(event_name = 'ORDER_ITEM_ADDED' as int))\n\t\t\t\tfrom {{ this }} oih\n\t\t\t\twhere gpoi.rx_number = oih.rx_number and gpoi.invoice_number = oih.invoice_number) = 0)\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_UPDATED' as event_name,\n\t\t\t_ab_cdc_updated_at as event_date\n\t\t\tfrom {{ ref('gp_order_items')}}\n\t\t\twhere _ab_cdc_updated_at is not null\n\t\tunion\n\t\t(select distinct on (rx_number, invoice_number)\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_DELETED' as event_name,\n\t\t\t_ab_cdc_deleted_at as event_date\n\t\t\tfrom {{ ref('gp_order_items')}} gpoi\n\t\t\twhere _ab_cdc_deleted_at is not NULL and (\n\t\t\t\tselect \n\t\t\t\t\tsum(cast(event_name = 'ORDER_ITEM_DELETED' as int))\n\t\t\t\tfrom {{ this }} oih\n\t\t\t\twhere gpoi.rx_number = oih.rx_number and gpoi.invoice_number = oih.invoice_number) = 0)\n\t{% endif %}\n)\n\nselect\n\t_airbyte_emitted_at,\n\t_airbyte_ab_id,\n\t_airbyte_source,\n\tinvoice_number,\n\tpatient_id_cp,\n\trx_number,\n\tgroups,\n\trx_dispensed_id,\n\tstock_level_initial,\n\trx_message_keys_initial,\n\tpatient_autofill_initial,\n\trx_autofill_initial,\n\trx_numbers_initial,\n\tzscore_initial,\n\trefills_dispensed_default,\n\trefills_dispensed_actual,\n\tdays_dispensed_default,\n\tdays_dispensed_actual,\n\tqty_dispensed_default,\n\tqty_dispensed_actual,\n\tprice_dispensed_default,\n\tprice_dispensed_actual,\n\tqty_pended_total,\n\tqty_pended_repacks,\n\tcount_pended_total,\n\tcount_pended_repacks,\n\titem_message_keys,\n\titem_message_text,\n\titem_type,\n\titem_added_by,\n\titem_date_added,\n\trefill_date_last,\n\trefill_date_manual,\n\trefill_date_default,\n\trefill_target_date,\n\trefill_target_days,\n\trefill_target_rxs,\n\t_ab_cdc_updated_at,\n\tevent_name,\n\tevent_date,\n\t{{ dbt_utils.hash(dbt_utils.concat(['event_name', 'invoice_number', 'rx_number', 'event_date'])) }} as unique_event_id\nfrom oie\n{% if is_incremental() %}\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.concat", "macro.dbt_utils.hash"], "nodes": ["model.smartpill.gp_order_items", "model.smartpill.an_fills_logs", "model.smartpill.an_patients", "model.smartpill.an_dates", "model.smartpill.an_times"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["invoice_number", "rx_number", "event_name", "event_date"]}, {"columns": ["unique_event_id"]}, {"columns": ["invoice_number", "rx_number"]}], "unique_key": "unique_event_id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "order_items_historic"], "unique_id": "model.smartpill.order_items_historic", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/order_items_historic.sql", "original_file_path": "models/analytics/base_tables/order_items_historic.sql", "name": "order_items_historic", "alias": "order_items_historic", "checksum": {"name": "sha256", "checksum": "75e898441cb37229cbf832664967833f43edecdc6a6aaf794b2476c68aa8ab0b"}, "tags": ["goodpill", "backfill"], "refs": [["gp_order_items"], ["an_fills_logs"], ["an_patients"], ["an_dates"], ["an_times"]], "sources": [], "description": "Order items historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/order_items_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "unique_event_id", "indexes": [{"columns": ["invoice_number", "rx_number", "event_name", "event_date"]}, {"columns": ["unique_event_id"]}, {"columns": ["invoice_number", "rx_number"]}]}, "created_at": 1644413949.6630373, "compiled_sql": "\n\nwith  __dbt__cte__gp_order_items as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'groups') as varchar(255)) as groups,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_dispensed_id') as int) as rx_dispensed_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_default') as decimal(5,2)) as refills_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_default') as int) as days_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_default') as decimal(10,3)) as qty_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_default') as decimal(5,2)) as price_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_total') as decimal(10,3)) as qty_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_repacks') as decimal(10,3)) as qty_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_total') as int) as count_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_repacks') as int) as count_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_keys') as varchar(255)) as item_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_text') as varchar(255)) as item_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_type') as varchar(80)) as item_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_added_by') as varchar(80)) as item_added_by,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_date_added') as timestamp) as item_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_date') as timestamp) as refill_target_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_days') as int) as refill_target_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_rxs') as varchar(255)) as refill_target_rxs,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_order_items\n),oie as (\n\t\n\t\t(select distinct on (rx_number, invoice_number)\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_ADDED' as event_name,\n\t\t\titem_date_added as event_date\n\t\t\tfrom __dbt__cte__gp_order_items gpoi\n\t\t\twhere item_date_added is not NULL and (\n\t\t\t\tselect \n\t\t\t\t\tsum(cast(event_name = 'ORDER_ITEM_ADDED' as int))\n\t\t\t\tfrom \"datawarehouse\".analytics.\"order_items_historic\" oih\n\t\t\t\twhere gpoi.rx_number = oih.rx_number and gpoi.invoice_number = oih.invoice_number) = 0)\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_UPDATED' as event_name,\n\t\t\t_ab_cdc_updated_at as event_date\n\t\t\tfrom __dbt__cte__gp_order_items\n\t\t\twhere _ab_cdc_updated_at is not null\n\t\tunion\n\t\t(select distinct on (rx_number, invoice_number)\n\t\t\t*,\n\t\t\t'GOODPILL' as _airbyte_source,\n\t\t\t'ORDER_ITEM_DELETED' as event_name,\n\t\t\t_ab_cdc_deleted_at as event_date\n\t\t\tfrom __dbt__cte__gp_order_items gpoi\n\t\t\twhere _ab_cdc_deleted_at is not NULL and (\n\t\t\t\tselect \n\t\t\t\t\tsum(cast(event_name = 'ORDER_ITEM_DELETED' as int))\n\t\t\t\tfrom \"datawarehouse\".analytics.\"order_items_historic\" oih\n\t\t\t\twhere gpoi.rx_number = oih.rx_number and gpoi.invoice_number = oih.invoice_number) = 0)\n\t\n)\n\nselect\n\t_airbyte_emitted_at,\n\t_airbyte_ab_id,\n\t_airbyte_source,\n\tinvoice_number,\n\tpatient_id_cp,\n\trx_number,\n\tgroups,\n\trx_dispensed_id,\n\tstock_level_initial,\n\trx_message_keys_initial,\n\tpatient_autofill_initial,\n\trx_autofill_initial,\n\trx_numbers_initial,\n\tzscore_initial,\n\trefills_dispensed_default,\n\trefills_dispensed_actual,\n\tdays_dispensed_default,\n\tdays_dispensed_actual,\n\tqty_dispensed_default,\n\tqty_dispensed_actual,\n\tprice_dispensed_default,\n\tprice_dispensed_actual,\n\tqty_pended_total,\n\tqty_pended_repacks,\n\tcount_pended_total,\n\tcount_pended_repacks,\n\titem_message_keys,\n\titem_message_text,\n\titem_type,\n\titem_added_by,\n\titem_date_added,\n\trefill_date_last,\n\trefill_date_manual,\n\trefill_date_default,\n\trefill_target_date,\n\trefill_target_days,\n\trefill_target_rxs,\n\t_ab_cdc_updated_at,\n\tevent_name,\n\tevent_date,\n\tmd5(cast(event_name || invoice_number || rx_number || event_date as \n    varchar\n)) as unique_event_id\nfrom oie\n\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from \"datawarehouse\".analytics.\"order_items_historic\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_order_items", "sql": " __dbt__cte__gp_order_items as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'groups') as varchar(255)) as groups,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_dispensed_id') as int) as rx_dispensed_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_default') as decimal(5,2)) as refills_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_default') as int) as days_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_default') as decimal(10,3)) as qty_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_default') as decimal(5,2)) as price_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_total') as decimal(10,3)) as qty_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_repacks') as decimal(10,3)) as qty_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_total') as int) as count_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_repacks') as int) as count_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_keys') as varchar(255)) as item_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_text') as varchar(255)) as item_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_type') as varchar(80)) as item_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_added_by') as varchar(80)) as item_added_by,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_date_added') as timestamp) as item_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_date') as timestamp) as refill_target_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_days') as int) as refill_target_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_rxs') as varchar(255)) as refill_target_rxs,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_order_items\n)"}], "relation_name": "\"datawarehouse\".analytics.\"order_items_historic\""}, "model.smartpill.orders_historic": {"raw_sql": "{{ config(\n\tunique_key='unique_event_id',\n\tindexes=[\n\t\t{'columns': ['invoice_number', 'event_name'], 'unique': True},\n\t\t{'columns': ['unique_event_id'], 'unique': True},\n\t\t{'columns': ['invoice_number']}\n\t]\n) }}\n\n-- depends_on: {{ ref('gp_orders') }}\n-- depends_on: {{ ref('an_orders_logs') }}\n-- depends_on: {{ ref('an_patients') }}\n-- depends_on: {{ ref('an_locations') }}\n\nwith oe as (\n\t{% if not is_incremental() %}\n\t\tselect\n\t\t\tinvoice_number,\n\t\t\tconcat('ORDER_', event_type) as event_name,\n\t\t\tgoodpill_event_date as event_date,\n\t\t\tpat.goodpill_id as patient_id_cp,\n\t\t\tloc.zip_code as order_zip,\n\t\t\tloc.state as order_state,\n\t\t\tcount_items,\n\t\t\tcount_filled,\n\t\t\tcount_nofill,\n\t\t\torder_source,\n\t\t\torder_stage_cp,\n\t\t\torder_status,\n\t\t\tinvoice_doc_id,\n\t\t\ttracking_number,\n\t\t\tpayment_total_default,\n\t\t\tpayment_total_actual,\n\t\t\tpayment_fee_default,\n\t\t\tpayment_fee_actual,\n\t\t\tpayment_due_default,\n\t\t\tpayment_due_actual,\n\t\t\tpayment_date_autopay,\n\t\t\tpayment_method_actual,\n\t\t\tcoupon_lines,\n\t\t\torder_note,\n\t\t\trph_check,\n\t\t\ttech_fill,\n\t\t\tol._airbyte_emitted_at,\n\t\t\tol._airbyte_ab_id,\n\t\t\t'ANALYTICS_V1' as _airbyte_source,\n\t\t\tol.date_processed as _ab_cdc_updated_at\n\t\tfrom {{ ref('an_orders_logs') }} ol\n\t\tleft join {{ ref('an_patients') }} pat using (patient_id)\n\t\tleft join {{ ref('an_locations') }} loc using (location_id)\n\t{% else %}\n\t\tselect\n\t\t\t*,\n\t\t\tcase\n\t\t\t\twhen _ab_cdc_deleted_at is not null then 'ORDER_DELETED'\n\t\t\t\twhen order_date_returned is not null then 'ORDER_RETURNED'\n\t\t\t\twhen order_date_shipped is not null then 'ORDER_SHIPPED'\n\t\t\t\twhen order_date_dispensed is not null then 'ORDER_DISPENSED'\n\t\t\t\twhen order_date_added is not null then 'ORDER_ADDED'\n\t\t\tend as event_name,\n\t\t\tCOALESCE(\n\t\t\t\t_ab_cdc_deleted_at,\n\t\t\t\torder_date_returned,\n\t\t\t\torder_date_shipped,\n\t\t\t\torder_date_dispensed,\n\t\t\t\torder_date_added\n\t\t\t) as event_date,\n\t\t\t'GOODPILL' as _airbyte_source\n\t\tfrom {{ ref('gp_orders')}}\n\t\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from {{ this }})\n\t{% endif %}\n)\nselect distinct on (invoice_number, event_name)\n\tinvoice_number,\n\tevent_name,\n\tevent_date,\n\tpatient_id_cp,\n\tcoalesce(order_zip, order_state) as location_id,\n\tcount_items,\n\tcount_filled,\n\tcount_nofill,\n\torder_source,\n\torder_stage_cp,\n\torder_status,\n\tinvoice_doc_id,\n\ttracking_number,\n\tpayment_total_default,\n\tpayment_total_actual,\n\tpayment_fee_default,\n\tpayment_fee_actual,\n\tpayment_due_default,\n\tpayment_due_actual,\n\tpayment_date_autopay,\n\tpayment_method_actual,\n\tcoupon_lines,\n\torder_note,\n\trph_check,\n\ttech_fill,\n\t_airbyte_emitted_at,\n\t_airbyte_ab_id,\n\t_ab_cdc_updated_at,\n\t_airbyte_source,\n\t{{ dbt_utils.hash(dbt_utils.concat(['event_name', 'invoice_number'])) }} as unique_event_id\nfrom oe\norder by invoice_number, event_name, _airbyte_emitted_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.concat", "macro.dbt_utils.hash"], "nodes": ["model.smartpill.gp_orders", "model.smartpill.an_orders_logs", "model.smartpill.an_patients", "model.smartpill.an_locations", "model.smartpill.an_orders_logs", "model.smartpill.an_patients", "model.smartpill.an_locations"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["invoice_number", "event_name"], "unique": true}, {"columns": ["unique_event_id"], "unique": true}, {"columns": ["invoice_number"]}], "unique_key": "unique_event_id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "orders_historic"], "unique_id": "model.smartpill.orders_historic", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/orders_historic.sql", "original_file_path": "models/analytics/base_tables/orders_historic.sql", "name": "orders_historic", "alias": "orders_historic", "checksum": {"name": "sha256", "checksum": "8e7fe89ba3cdd7a9ca0319490a67322a34f74206d7cb33b88d4fba4ea13eb831"}, "tags": ["goodpill", "backfill"], "refs": [["gp_orders"], ["an_orders_logs"], ["an_patients"], ["an_locations"], ["an_orders_logs"], ["an_patients"], ["an_locations"]], "sources": [], "description": "Order historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/orders_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "unique_event_id", "indexes": [{"columns": ["invoice_number", "event_name"], "unique": true}, {"columns": ["unique_event_id"], "unique": true}, {"columns": ["invoice_number"]}]}, "created_at": 1644413949.7436929, "compiled_sql": "\n\n-- depends_on: __dbt__cte__gp_orders\n-- depends_on: __dbt__cte__an_orders_logs\n-- depends_on: __dbt__cte__an_patients\n-- depends_on: __dbt__cte__an_locations\n\nwith  __dbt__cte__gp_orders as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders\n),  __dbt__cte__an_orders_logs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_note') as text) as order_note,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_orders_logs\n),  __dbt__cte__an_patients as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_id') as int) as goodpill_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fill_next') as date) as fill_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_overdue') as int) as days_overdue,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address_2') as varchar(255)) as address_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as date) as payment_card_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_patients\n),  __dbt__cte__an_locations as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_locations\n),oe as (\n\t\n\t\tselect\n\t\t\t*,\n\t\t\tcase\n\t\t\t\twhen _ab_cdc_deleted_at is not null then 'ORDER_DELETED'\n\t\t\t\twhen order_date_returned is not null then 'ORDER_RETURNED'\n\t\t\t\twhen order_date_shipped is not null then 'ORDER_SHIPPED'\n\t\t\t\twhen order_date_dispensed is not null then 'ORDER_DISPENSED'\n\t\t\t\twhen order_date_added is not null then 'ORDER_ADDED'\n\t\t\tend as event_name,\n\t\t\tCOALESCE(\n\t\t\t\t_ab_cdc_deleted_at,\n\t\t\t\torder_date_returned,\n\t\t\t\torder_date_shipped,\n\t\t\t\torder_date_dispensed,\n\t\t\t\torder_date_added\n\t\t\t) as event_date,\n\t\t\t'GOODPILL' as _airbyte_source\n\t\tfrom __dbt__cte__gp_orders\n\t\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from \"datawarehouse\".analytics.\"orders_historic\")\n\t\n)\nselect distinct on (invoice_number, event_name)\n\tinvoice_number,\n\tevent_name,\n\tevent_date,\n\tpatient_id_cp,\n\tcoalesce(order_zip, order_state) as location_id,\n\tcount_items,\n\tcount_filled,\n\tcount_nofill,\n\torder_source,\n\torder_stage_cp,\n\torder_status,\n\tinvoice_doc_id,\n\ttracking_number,\n\tpayment_total_default,\n\tpayment_total_actual,\n\tpayment_fee_default,\n\tpayment_fee_actual,\n\tpayment_due_default,\n\tpayment_due_actual,\n\tpayment_date_autopay,\n\tpayment_method_actual,\n\tcoupon_lines,\n\torder_note,\n\trph_check,\n\ttech_fill,\n\t_airbyte_emitted_at,\n\t_airbyte_ab_id,\n\t_ab_cdc_updated_at,\n\t_airbyte_source,\n\tmd5(cast(event_name || invoice_number as \n    varchar\n)) as unique_event_id\nfrom oe\norder by invoice_number, event_name, _airbyte_emitted_at desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_orders", "sql": " __dbt__cte__gp_orders as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders\n)"}, {"id": "model.smartpill.an_orders_logs", "sql": " __dbt__cte__an_orders_logs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_note') as text) as order_note,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_orders_logs\n)"}, {"id": "model.smartpill.an_patients", "sql": " __dbt__cte__an_patients as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_id') as int) as goodpill_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fill_next') as date) as fill_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_overdue') as int) as days_overdue,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address_2') as varchar(255)) as address_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as date) as payment_card_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_patients\n)"}, {"id": "model.smartpill.an_locations", "sql": " __dbt__cte__an_locations as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_locations\n)"}], "relation_name": "\"datawarehouse\".analytics.\"orders_historic\""}, "model.smartpill.patients": {"raw_sql": "{{ config(\n\tunique_key='patient_id_cp',\n\tindexes=[\n\t\t{'columns': ['patient_id_cp'], 'unique': True}\n\t]\n)}}\nwith grg as (\n    select\n        patient_id_cp,\n        MAX(CAST(grg.refill_date_next as timestamp)) as fill_next\n    from \n        {{ ref('gp_rxs_grouped') }} grg\n    group by\n        patient_id_cp\n)\nselect distinct on (patient_id_cp)\n    patient_id_cp,\n    patient_date_registered,\n    patient_date_added,\n    grg.fill_next,\n    extract(day from (NOW() - grg.fill_next)) as days_overdue,\n    first_name,\n    last_name,\n    birth_date,\n    phone1,\n    phone2,\n    CONCAT(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city,\n    patient_state,\n    patient_zip,\n    payment_card_type,\n    payment_card_last4,\n    payment_card_date_expired,\n    payment_method_default,\n    payment_coupon,\n    tracking_coupon,\n    patient_date_first_rx_received as date_first_rx_received,\n    patient_date_first_dispensed as date_first_dispensed,\n    patient_date_first_expected_by as date_first_expected_by,\n    refills_used,\n    coalesce(pharmacy_npi, pharmacy_name) as pharmacy_id,\n    NOW() as date_processed\nfrom {{ ref('gp_patients') }} gpa\nleft join grg using (patient_id_cp)\nwhere\n    LOWER(first_name) NOT LIKE '%test%' AND\n    LOWER(first_name) NOT LIKE '%user%' AND\n    LOWER(last_name) NOT LIKE '%test%' AND\n    LOWER(last_name) NOT LIKE '%user%'\n{% if is_incremental(): %}\n    AND _airbyte_emitted_at > (SELECT MAX(date_processed) FROM {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_rxs_grouped", "model.smartpill.gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["patient_id_cp"], "unique": true}], "unique_key": "patient_id_cp", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "patients"], "unique_id": "model.smartpill.patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/patients.sql", "original_file_path": "models/analytics/base_tables/patients.sql", "name": "patients", "alias": "patients", "checksum": {"name": "sha256", "checksum": "037d46a441447f4d4494a799193756fb5387bd12923fd771b6596258172f7852"}, "tags": ["goodpill", "dimension"], "refs": [["gp_rxs_grouped"], ["gp_patients"]], "sources": [], "description": "Patients dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "patient_id_cp", "indexes": [{"columns": ["patient_id_cp"], "unique": true}]}, "created_at": 1644413949.7527413, "compiled_sql": "\nwith  __dbt__cte__gp_rxs_grouped as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped\n),  __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n),grg as (\n    select\n        patient_id_cp,\n        MAX(CAST(grg.refill_date_next as timestamp)) as fill_next\n    from \n        __dbt__cte__gp_rxs_grouped grg\n    group by\n        patient_id_cp\n)\nselect distinct on (patient_id_cp)\n    patient_id_cp,\n    patient_date_registered,\n    patient_date_added,\n    grg.fill_next,\n    extract(day from (NOW() - grg.fill_next)) as days_overdue,\n    first_name,\n    last_name,\n    birth_date,\n    phone1,\n    phone2,\n    CONCAT(patient_address1, ', ', patient_address2) as patient_address,\n    patient_city,\n    patient_state,\n    patient_zip,\n    payment_card_type,\n    payment_card_last4,\n    payment_card_date_expired,\n    payment_method_default,\n    payment_coupon,\n    tracking_coupon,\n    patient_date_first_rx_received as date_first_rx_received,\n    patient_date_first_dispensed as date_first_dispensed,\n    patient_date_first_expected_by as date_first_expected_by,\n    refills_used,\n    coalesce(pharmacy_npi, pharmacy_name) as pharmacy_id,\n    NOW() as date_processed\nfrom __dbt__cte__gp_patients gpa\nleft join grg using (patient_id_cp)\nwhere\n    LOWER(first_name) NOT LIKE '%test%' AND\n    LOWER(first_name) NOT LIKE '%user%' AND\n    LOWER(last_name) NOT LIKE '%test%' AND\n    LOWER(last_name) NOT LIKE '%user%'\n\n    AND _airbyte_emitted_at > (SELECT MAX(date_processed) FROM \"datawarehouse\".analytics.\"patients\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_rxs_grouped", "sql": " __dbt__cte__gp_rxs_grouped as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped\n)"}, {"id": "model.smartpill.gp_patients", "sql": " __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)"}], "relation_name": "\"datawarehouse\".analytics.\"patients\""}, "model.smartpill.patients_status_historic": {"raw_sql": "{{ config(\n\tunique_key='unique_event_id',\n\tindexes=[\n\t\t{'columns': ['patient_id_cp', 'event_name'], 'unique': True},\n\t\t{'columns': ['unique_event_id'], 'unique': True}\n\t]\n) }}\nwith gpe as (\n\tselect\n\t\t*,\n\t\t'PATIENT_ADDED' as event_name,\n\t\tpatient_date_added as event_date\n\t\tfrom {{ ref('gp_patients')}}\n\t\twhere patient_date_added is not null\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_REGISTERED' as event_name,\n\t\tpatient_date_registered as event_date\n\t\tfrom {{ ref('gp_patients')}}\n\t\twhere patient_date_registered is not null\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_INACTIVE' as event_name,\n\t\tpatient_date_updated as event_date\n\t\tfrom {{ ref('gp_patients') }}\n\t\twhere patient_inactive = 'Inactive'\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_DECEASED' as event_name,\n\t\tpatient_date_updated as event_date\n\t\tfrom {{ ref('gp_patients') }}\n\t\twhere patient_inactive = 'Deceased'\n)\n\nselect distinct on (patient_id_cp, event_name)\n\tpatient_id_cp,\n\tevent_name,\n\tevent_date,\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\t_ab_cdc_updated_at,\n\t'GOODPILL' as _airbyte_source,\n\t{{ dbt_utils.hash(dbt_utils.concat(['event_name', 'patient_id_cp'])) }} as unique_event_id\nfrom\n\tgpe\n{% if is_incremental() %}\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from {{ this }})\n{% endif %}\norder by patient_id_cp, event_name, _airbyte_emitted_at desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.concat", "macro.dbt_utils.hash", "macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_patients", "model.smartpill.gp_patients", "model.smartpill.gp_patients", "model.smartpill.gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["patient_id_cp", "event_name"], "unique": true}, {"columns": ["unique_event_id"], "unique": true}], "unique_key": "unique_event_id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "patients_status_historic"], "unique_id": "model.smartpill.patients_status_historic", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/patients_status_historic.sql", "original_file_path": "models/analytics/base_tables/patients_status_historic.sql", "name": "patients_status_historic", "alias": "patients_status_historic", "checksum": {"name": "sha256", "checksum": "b236db0219d3a8ef238935338ad3fa652e9101e871877a2f0384e0998fbfe511"}, "tags": ["goodpill", "backfill"], "refs": [["gp_patients"], ["gp_patients"], ["gp_patients"], ["gp_patients"]], "sources": [], "description": "Patient status historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/patients_status_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "unique_event_id", "indexes": [{"columns": ["patient_id_cp", "event_name"], "unique": true}, {"columns": ["unique_event_id"], "unique": true}]}, "created_at": 1644413949.839406, "compiled_sql": "\nwith  __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n),gpe as (\n\tselect\n\t\t*,\n\t\t'PATIENT_ADDED' as event_name,\n\t\tpatient_date_added as event_date\n\t\tfrom __dbt__cte__gp_patients\n\t\twhere patient_date_added is not null\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_REGISTERED' as event_name,\n\t\tpatient_date_registered as event_date\n\t\tfrom __dbt__cte__gp_patients\n\t\twhere patient_date_registered is not null\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_INACTIVE' as event_name,\n\t\tpatient_date_updated as event_date\n\t\tfrom __dbt__cte__gp_patients\n\t\twhere patient_inactive = 'Inactive'\n\tunion\n\tselect\n\t\t*,\n\t\t'PATIENT_DECEASED' as event_name,\n\t\tpatient_date_updated as event_date\n\t\tfrom __dbt__cte__gp_patients\n\t\twhere patient_inactive = 'Deceased'\n)\n\nselect distinct on (patient_id_cp, event_name)\n\tpatient_id_cp,\n\tevent_name,\n\tevent_date,\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\t_ab_cdc_updated_at,\n\t'GOODPILL' as _airbyte_source,\n\tmd5(cast(event_name || patient_id_cp as \n    varchar\n)) as unique_event_id\nfrom\n\tgpe\n\n\twhere _airbyte_emitted_at > (select MAX(_airbyte_emitted_at) from \"datawarehouse\".analytics.\"patients_status_historic\")\n\norder by patient_id_cp, event_name, _airbyte_emitted_at desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_patients", "sql": " __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)"}], "relation_name": "\"datawarehouse\".analytics.\"patients_status_historic\""}, "model.smartpill.pharmacies": {"raw_sql": "{{ config(\n\tunique_key='pharmacy_id',\n\tindexes=[\n\t\t{'columns': ['pharmacy_id'], 'unique': True},\n\t\t{'columns': ['pharmacy_name', 'pharmacy_npi'], 'unique': True}\n\t]\n)}}\nselect distinct on (pharmacy_id)\n    coalesce(pharmacy_npi, pharmacy_name) as pharmacy_id,\n    pharmacy_npi,\n    pharmacy_name,\n    pharmacy_phone,\n    pharmacy_fax,\n    pharmacy_address,\n    NOW() as date_processed\nfrom {{ ref('gp_patients') }}\nwhere (pharmacy_npi is not NULL or pharmacy_name is not NULL)\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["pharmacy_id"], "unique": true}, {"columns": ["pharmacy_name", "pharmacy_npi"], "unique": true}], "unique_key": "pharmacy_id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "pharmacies"], "unique_id": "model.smartpill.pharmacies", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/pharmacies.sql", "original_file_path": "models/analytics/base_tables/pharmacies.sql", "name": "pharmacies", "alias": "pharmacies", "checksum": {"name": "sha256", "checksum": "7ae34fbe82c9a6d598c8a564fe86ffd70ec49c6f5777fed9f89ff393626b2c61"}, "tags": ["goodpill", "dimension"], "refs": [["gp_patients"]], "sources": [], "description": "Pharmacies dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/pharmacies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "pharmacy_id", "indexes": [{"columns": ["pharmacy_id"], "unique": true}, {"columns": ["pharmacy_name", "pharmacy_npi"], "unique": true}]}, "created_at": 1644413949.8488138, "compiled_sql": "\nwith __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)select distinct on (pharmacy_id)\n    coalesce(pharmacy_npi, pharmacy_name) as pharmacy_id,\n    pharmacy_npi,\n    pharmacy_name,\n    pharmacy_phone,\n    pharmacy_fax,\n    pharmacy_address,\n    NOW() as date_processed\nfrom __dbt__cte__gp_patients\nwhere (pharmacy_npi is not NULL or pharmacy_name is not NULL)\n\n    and _airbyte_emitted_at > (select MAX(date_processed) from \"datawarehouse\".analytics.\"pharmacies\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_patients", "sql": " __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)"}], "relation_name": "\"datawarehouse\".analytics.\"pharmacies\""}, "model.smartpill.providers": {"raw_sql": "{{ config(\n\tunique_key='provider_npi',\n\tindexes=[\n\t\t{'columns': ['provider_npi'], 'unique': True}\n\t]\n)}}\nselect distinct on (provider_npi)\n    rxs1.provider_npi,\n    rxs1.provider_first_name,\n    rxs1.provider_last_name,\n    rxs1.provider_phone,\n    NOW() as date_processed\nfrom {{ ref('gp_rxs_single') }} rxs1\n    left join {{ ref('gp_rxs_single') }} rxs2\n    on (rxs1.provider_npi = rxs2.provider_npi and rxs1.rx_number < rxs2.rx_number)\nwhere rxs2.rx_number is null and rxs1.provider_npi is not null and rxs1.provider_npi <> ''\n{% if is_incremental() %}\n\tand rxs1._airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "dimension"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["provider_npi"], "unique": true}], "unique_key": "provider_npi", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "providers"], "unique_id": "model.smartpill.providers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/providers.sql", "original_file_path": "models/analytics/base_tables/providers.sql", "name": "providers", "alias": "providers", "checksum": {"name": "sha256", "checksum": "bd9763ad3c4a48612823843ebc23e7d15a429dde5cb5ffd6bbc9d949fb9b001a"}, "tags": ["goodpill", "dimension"], "refs": [["gp_rxs_single"], ["gp_rxs_single"]], "sources": [], "description": "Providers dimension table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/providers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "provider_npi", "indexes": [{"columns": ["provider_npi"], "unique": true}]}, "created_at": 1644413949.8581536, "compiled_sql": "\nwith __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n)select distinct on (provider_npi)\n    rxs1.provider_npi,\n    rxs1.provider_first_name,\n    rxs1.provider_last_name,\n    rxs1.provider_phone,\n    NOW() as date_processed\nfrom __dbt__cte__gp_rxs_single rxs1\n    left join __dbt__cte__gp_rxs_single rxs2\n    on (rxs1.provider_npi = rxs2.provider_npi and rxs1.rx_number < rxs2.rx_number)\nwhere rxs2.rx_number is null and rxs1.provider_npi is not null and rxs1.provider_npi <> ''\n\n\tand rxs1._airbyte_emitted_at > (select MAX(date_processed) from \"datawarehouse\".analytics.\"providers\")\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_rxs_single", "sql": " __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n)"}], "relation_name": "\"datawarehouse\".analytics.\"providers\""}, "model.smartpill.rxs_historic": {"raw_sql": "{{ config(\n\tunique_key='unique_event_id',\n\tindexes=[\n\t\t{'columns': ['rx_number', 'event_name', 'event_date']},\n\t\t{'columns': ['rx_number']},\n\t\t{'columns': ['unique_event_id']}\n\t]\n) }}\n\n-- depends on {{ ref('an_fills_logs') }}\n-- depends on {{ ref('an_patients') }}\n-- depends on {{ ref('an_providers') }}\n-- depends on {{ ref('an_drugs') }}\n-- depends on {{ ref('an_clinics') }}\n-- depends on {{ ref('gp_rxs_single')}}\n-- depends on {{ ref('gp_rxs_single')}}\n-- depends on {{ ref('gp_rxs_single')}}\n-- depends on {{ ref('gp_rxs_grouped') }}\n-- depends on {{ ref('gp_patients') }}\n\nwith rxh as (\n{% if not is_incremental() %}\n\tselect\n\t\tfl.*,\n\t\tcase\n\t\t\twhen event_type = 'WRITTEN' or event_type = 'TRANSFERRED' then concat('RX_', event_type)\n\t\t\telse 'RX_UPDATED'\n\t\tend as event_name,\n\t\tcoalesce(concat(dts.db_date, 'T', tms.hour24_full_string)::timestamp,  goodpill_event_date) as event_date,\n\t\tprv.npi as provider_npi,\n\t\tcli.name as clinic_name,\n\t\tpat.goodpill_id as patient_id_cp,\n\t\tdrg.generic_name as drug_generic,\n\t\tnull::timestamp as _ab_cdc_updated_at,\n\t\t'ANALYTICS_V1' as _airbyte_source\n\tfrom {{ ref('an_fills_logs') }} fl\n\tleft join {{ ref('an_patients') }} pat using (patient_id)\n\tleft join {{ ref('an_providers') }} prv using (provider_id)\n\tleft join {{ ref('an_drugs') }} drg using (drug_id)\n\tleft join {{ ref('an_clinics') }} cli using (clinic_id)\n\tleft join {{ ref('an_dates') }} dts on dts.date_id = fl.event_date_id\n\tleft join {{ ref('an_times') }} tms on tms.time_id = fl.event_time_id\n\twhere event_type <> 'REMOVED' or event_type <> 'DISPENSED'\n\n{% else %}\n\twith grse as (\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t'RX_ADDED' as event_name,\n\t\t\trx_date_transferred as event_date\n\t\t\tfrom {{ ref('gp_rxs_single')}} gprxs\n\t\t\twhere (select sum(cast(event_name = 'RX_ADDED' as int)) from {{ this }} rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t'RX_TRANSFERRED' as event_name,\n\t\t\trx_date_transferred as event_date\n\t\t\tfrom {{ ref('gp_rxs_single')}} gprxs\n\t\t\twhere rx_date_transferred is not null\n\t\t\t\tand (select sum(cast(event_name = 'RX_TRANSFERRED' as int)) from {{ this }} rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t-- rx_date_expired - 1 YEAR will be the written date, since when the rxs is inserted\n\t\t\t-- this value is populated with the current timestamp + 1 YEAR\n\t\t\t'RX_WRITTEN' as event_name,\n\t\t\trx_date_expired - INTERVAL '1 year' as event_date\n\t\t\tfrom {{ ref('gp_rxs_single')}} gprxs\n\t\t\twhere\n\t\t\t\trx_gsn is not null\n\t\t\t\tand rx_gsn <> 0\n\t\t\t\tand rx_date_expired is not null\n\t\t\t\tand (select sum(cast(event_name = 'RX_WRITTEN' as int)) from {{ this }} rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'RX_UPDATED' as event_name,\n\t\t\t_ab_cdc_updated_at as event_date\n\t\t\tfrom {{ ref('gp_rxs_single')}}\n\t\t\twhere _ab_cdc_updated_at is not null\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'RX_DELETED' as event_name,\n\t\t\t_ab_cdc_deleted_at as event_date\n\t\t\tfrom {{ ref('gp_rxs_single')}}\n\t\t\twhere _ab_cdc_deleted_at is not null\n\t), grg as (\n\t\tselect distinct on (rx_numbers)\n\t\t\trx_numbers,\n\t\t\trx_autofill,\n\t\t\trefills_total,\n\t\t\trefill_date_first,\n\t\t\trefill_date_last,\n\t\t\trefill_date_next,\n\t\t\trefill_date_manual,\n\t\t\trefill_date_default,\n\t\t\tqty_total,\n\t\t\tsig_qty_per_day,\n\t\t\tmax_gsn,\n\t\t\tdrug_gsns\n\t\tfrom {{ ref('gp_rxs_grouped') }}\n\t\twhere _ab_cdc_deleted_at is null\n\t\torder by rx_numbers, _ab_cdc_updated_at desc\n\t), gp as (\n\t\tselect distinct on (patient_id_cp)\n\t\t\tpatient_id_cp,\n\t\t\tpatient_autofill\n\t\tfrom {{ ref('gp_patients') }}\n\t\twhere _ab_cdc_deleted_at is null\n\t\torder by patient_id_cp, _ab_cdc_updated_at desc\n\t)\n\tselect\n\t\tgrse.rx_number,\n\t\tgrse.patient_id_cp,\n\t\tgrse.drug_generic,\n\t\tgrse.provider_clinic as clinic_name,\n\t\tgrse.provider_npi,\n\t\tcase\n\t\t\twhen grg.refill_date_first < grg.refill_date_last then 1\n\t\t\telse 0\n\t\tend as is_refill,\n\t\tcase\n\t\t\twhen grg.rx_autofill = 1 and gp.patient_autofill = 1 then 1\n\t\t\telse 0\n\t\tend as rx_autofill,\n\t\tgrg.sig_qty_per_day,\n\t\tgrse.rx_message_key,\n\t\tgrg.max_gsn,\n\t\tgrg.drug_gsns,\n\t\tgrg.refills_total,\n\t\tgrse.refills_original,\n\t\tgrse.refills_left,\n\t\tgrse.refill_date_first,\n\t\tgrse.refill_date_last,\n\t\tgrse.rx_date_expired,\n\t\tgrse.rx_date_changed,\n\t\tgrse.qty_left,\n\t\tgrse.qty_original,\n\t\tgrse.sig_actual,\n\t\tgrse.sig_initial,\n\t\tgrse.sig_clean,\n\t\tgrse.sig_qty,\n\t\tgrse.sig_days,\n\t\tgrse.sig_qty_per_day_actual,\n\t\tgrse.sig_v2_qty,\n\t\tgrse.sig_v2_days,\n\t\tgrse.sig_v2_qty_per_day,\n\t\tgrse.sig_v2_unit,\n\t\tgrse.sig_v2_conf_score,\n\t\tgrse.sig_v2_dosages,\n\t\tgrse.sig_v2_scores,\n\t\tgrse.sig_v2_frequencies,\n\t\tgrse.sig_v2_durations,\n\t\tgrg.refill_date_next,\n\t\tgrg.refill_date_manual,\n\t\tgrg.refill_date_default,\n\t\tgrg.qty_total,\n\t\tgrse.rx_source,\n\t\tgrse.rx_transfer,\n\t\tgrse.event_name,\n\t\tgrse.event_date,\n\t\tgrse._airbyte_emitted_at,\n\t\tgrse._ab_cdc_updated_at,\n\t\t'GOODPILL' as _airbyte_source,\n\t\tgrse._airbyte_ab_id\n\tfrom grse\n\tinner join gp using (patient_id_cp)\n\tleft join grg on grg.rx_numbers like CONCAT('%,', grse.rx_number ,',%')\n\twhere grse._ab_cdc_updated_at > (select MAX(_airbyte_emitted_at) from {{ this }})\n\torder by rx_number, event_name, _airbyte_emitted_at desc\n{% endif %}\n\n)\nselect\n\trx_number,\n\tpatient_id_cp,\n\tdrug_generic,\n\tclinic_name,\n\tprovider_npi,\n\tis_refill,\n\trx_autofill,\n\tsig_qty_per_day,\n\trx_message_key,\n\tmax_gsn,\n\tdrug_gsns,\n\trefills_total,\n\trefills_original,\n\trefills_left,\n\trefill_date_first,\n\trefill_date_last,\n\trx_date_expired,\n\trx_date_changed,\n\tqty_left,\n\tqty_original,\n\tsig_actual,\n\tsig_initial,\n\tsig_clean,\n\tsig_qty,\n\tsig_days,\n\tsig_qty_per_day_actual,\n\tsig_v2_qty,\n\tsig_v2_days,\n\tsig_v2_qty_per_day,\n\tsig_v2_unit,\n\tsig_v2_conf_score,\n\tsig_v2_dosages,\n\tsig_v2_scores,\n\tsig_v2_frequencies,\n\tsig_v2_durations,\n\trefill_date_next,\n\trefill_date_manual,\n\trefill_date_default,\n\tqty_total,\n\trx_source,\n\trx_transfer,\n\tevent_name,\n\tevent_date,\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at as _airbyte_emitted_at,\n\t_ab_cdc_updated_at as _ab_cdc_updated_at,\n\t_airbyte_source,\n\t{{ dbt_utils.hash(dbt_utils.concat(['event_name', 'rx_number', 'event_date'])) }} as unique_event_id\nfrom rxh", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.concat", "macro.dbt_utils.hash"], "nodes": ["model.smartpill.an_fills_logs", "model.smartpill.an_patients", "model.smartpill.an_providers", "model.smartpill.an_drugs", "model.smartpill.an_clinics", "model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_grouped", "model.smartpill.gp_patients", "model.smartpill.an_fills_logs", "model.smartpill.an_patients", "model.smartpill.an_providers", "model.smartpill.an_drugs", "model.smartpill.an_clinics", "model.smartpill.an_dates", "model.smartpill.an_times"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["rx_number", "event_name", "event_date"]}, {"columns": ["rx_number"]}, {"columns": ["unique_event_id"]}], "unique_key": "unique_event_id", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "rxs_historic"], "unique_id": "model.smartpill.rxs_historic", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/rxs_historic.sql", "original_file_path": "models/analytics/base_tables/rxs_historic.sql", "name": "rxs_historic", "alias": "rxs_historic", "checksum": {"name": "sha256", "checksum": "01d41367e31c1d264820b748645a555589316ea2fb3c2e11cddedb360de82fd9"}, "tags": ["goodpill", "backfill"], "refs": [["an_fills_logs"], ["an_patients"], ["an_providers"], ["an_drugs"], ["an_clinics"], ["gp_rxs_single"], ["gp_rxs_single"], ["gp_rxs_single"], ["gp_rxs_grouped"], ["gp_patients"], ["an_fills_logs"], ["an_patients"], ["an_providers"], ["an_drugs"], ["an_clinics"], ["an_dates"], ["an_times"]], "sources": [], "description": "Prescription historic table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/base_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/base_tables/rxs_historic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "unique_key": "unique_event_id", "indexes": [{"columns": ["rx_number", "event_name", "event_date"]}, {"columns": ["rx_number"]}, {"columns": ["unique_event_id"]}]}, "created_at": 1644413949.861808, "compiled_sql": "\n\n-- depends on __dbt__cte__an_fills_logs\n-- depends on __dbt__cte__an_patients\n-- depends on __dbt__cte__an_providers\n-- depends on __dbt__cte__an_drugs\n-- depends on __dbt__cte__an_clinics\n-- depends on __dbt__cte__gp_rxs_single\n-- depends on __dbt__cte__gp_rxs_single\n-- depends on __dbt__cte__gp_rxs_single\n-- depends on __dbt__cte__gp_rxs_grouped\n-- depends on __dbt__cte__gp_patients\n\nwith  __dbt__cte__an_fills_logs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'is_refill') as int) as is_refill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as date) as refill_date_first,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as date) as refill_date_last,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as date) as rx_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(10,3)) as sig_qty_per_day_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as date) as refill_date_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as date) as refill_date_manual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as date) as refill_date_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual_rx30') as int) as days_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual_rx30') as decimal(10,3)) as qty_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'total_value_coalesced') as decimal(11,3)) as total_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'unit_value_coalesced') as decimal(11,3)) as unit_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_values') as text) as drug_values,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'extra_data') as text) as extra_data,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_fills_logs\n),  __dbt__cte__an_patients as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_id') as int) as goodpill_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fill_next') as date) as fill_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_overdue') as int) as days_overdue,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address_2') as varchar(255)) as address_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as date) as payment_card_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_patients\n),  __dbt__cte__an_providers as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar(255)) as npi,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_providers\n),  __dbt__cte__an_drugs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'generic_name') as varchar(255)) as generic_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'brand_name') as varchar(255)) as brand_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gsns') as varchar(255)) as gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_per_month') as decimal(10,4)) as current_price_per_month,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_30') as decimal(10,4)) as current_price_30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_90') as decimal(10,4)) as current_price_90,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_awp') as decimal(10,4)) as current_value_awp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_goodrx') as decimal(10,4)) as current_value_goodrx,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_nadac') as decimal(10,4)) as current_value_nadac,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_coalesced') as decimal(10,4)) as current_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_drugs\n),  __dbt__cte__an_clinics as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_clean') as varchar(255)) as name_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_meta') as varchar(255)) as name_meta,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_clinics\n),  __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n),  __dbt__cte__gp_rxs_grouped as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped\n),  __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n),rxh as (\n\n\twith grse as (\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t'RX_ADDED' as event_name,\n\t\t\trx_date_transferred as event_date\n\t\t\tfrom __dbt__cte__gp_rxs_single gprxs\n\t\t\twhere (select sum(cast(event_name = 'RX_ADDED' as int)) from \"datawarehouse\".analytics.\"rxs_historic\" rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t'RX_TRANSFERRED' as event_name,\n\t\t\trx_date_transferred as event_date\n\t\t\tfrom __dbt__cte__gp_rxs_single gprxs\n\t\t\twhere rx_date_transferred is not null\n\t\t\t\tand (select sum(cast(event_name = 'RX_TRANSFERRED' as int)) from \"datawarehouse\".analytics.\"rxs_historic\" rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\t(select distinct on (rx_number)\n\t\t\t*,\n\t\t\t-- rx_date_expired - 1 YEAR will be the written date, since when the rxs is inserted\n\t\t\t-- this value is populated with the current timestamp + 1 YEAR\n\t\t\t'RX_WRITTEN' as event_name,\n\t\t\trx_date_expired - INTERVAL '1 year' as event_date\n\t\t\tfrom __dbt__cte__gp_rxs_single gprxs\n\t\t\twhere\n\t\t\t\trx_gsn is not null\n\t\t\t\tand rx_gsn <> 0\n\t\t\t\tand rx_date_expired is not null\n\t\t\t\tand (select sum(cast(event_name = 'RX_WRITTEN' as int)) from \"datawarehouse\".analytics.\"rxs_historic\" rhs where gprxs.rx_number = rhs.rx_number) = 0\n\t\t\torder by rx_number, _airbyte_emitted_at, _ab_cdc_updated_at)\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'RX_UPDATED' as event_name,\n\t\t\t_ab_cdc_updated_at as event_date\n\t\t\tfrom __dbt__cte__gp_rxs_single\n\t\t\twhere _ab_cdc_updated_at is not null\n\t\tunion\n\t\tselect\n\t\t\t*,\n\t\t\t'RX_DELETED' as event_name,\n\t\t\t_ab_cdc_deleted_at as event_date\n\t\t\tfrom __dbt__cte__gp_rxs_single\n\t\t\twhere _ab_cdc_deleted_at is not null\n\t), grg as (\n\t\tselect distinct on (rx_numbers)\n\t\t\trx_numbers,\n\t\t\trx_autofill,\n\t\t\trefills_total,\n\t\t\trefill_date_first,\n\t\t\trefill_date_last,\n\t\t\trefill_date_next,\n\t\t\trefill_date_manual,\n\t\t\trefill_date_default,\n\t\t\tqty_total,\n\t\t\tsig_qty_per_day,\n\t\t\tmax_gsn,\n\t\t\tdrug_gsns\n\t\tfrom __dbt__cte__gp_rxs_grouped\n\t\twhere _ab_cdc_deleted_at is null\n\t\torder by rx_numbers, _ab_cdc_updated_at desc\n\t), gp as (\n\t\tselect distinct on (patient_id_cp)\n\t\t\tpatient_id_cp,\n\t\t\tpatient_autofill\n\t\tfrom __dbt__cte__gp_patients\n\t\twhere _ab_cdc_deleted_at is null\n\t\torder by patient_id_cp, _ab_cdc_updated_at desc\n\t)\n\tselect\n\t\tgrse.rx_number,\n\t\tgrse.patient_id_cp,\n\t\tgrse.drug_generic,\n\t\tgrse.provider_clinic as clinic_name,\n\t\tgrse.provider_npi,\n\t\tcase\n\t\t\twhen grg.refill_date_first < grg.refill_date_last then 1\n\t\t\telse 0\n\t\tend as is_refill,\n\t\tcase\n\t\t\twhen grg.rx_autofill = 1 and gp.patient_autofill = 1 then 1\n\t\t\telse 0\n\t\tend as rx_autofill,\n\t\tgrg.sig_qty_per_day,\n\t\tgrse.rx_message_key,\n\t\tgrg.max_gsn,\n\t\tgrg.drug_gsns,\n\t\tgrg.refills_total,\n\t\tgrse.refills_original,\n\t\tgrse.refills_left,\n\t\tgrse.refill_date_first,\n\t\tgrse.refill_date_last,\n\t\tgrse.rx_date_expired,\n\t\tgrse.rx_date_changed,\n\t\tgrse.qty_left,\n\t\tgrse.qty_original,\n\t\tgrse.sig_actual,\n\t\tgrse.sig_initial,\n\t\tgrse.sig_clean,\n\t\tgrse.sig_qty,\n\t\tgrse.sig_days,\n\t\tgrse.sig_qty_per_day_actual,\n\t\tgrse.sig_v2_qty,\n\t\tgrse.sig_v2_days,\n\t\tgrse.sig_v2_qty_per_day,\n\t\tgrse.sig_v2_unit,\n\t\tgrse.sig_v2_conf_score,\n\t\tgrse.sig_v2_dosages,\n\t\tgrse.sig_v2_scores,\n\t\tgrse.sig_v2_frequencies,\n\t\tgrse.sig_v2_durations,\n\t\tgrg.refill_date_next,\n\t\tgrg.refill_date_manual,\n\t\tgrg.refill_date_default,\n\t\tgrg.qty_total,\n\t\tgrse.rx_source,\n\t\tgrse.rx_transfer,\n\t\tgrse.event_name,\n\t\tgrse.event_date,\n\t\tgrse._airbyte_emitted_at,\n\t\tgrse._ab_cdc_updated_at,\n\t\t'GOODPILL' as _airbyte_source,\n\t\tgrse._airbyte_ab_id\n\tfrom grse\n\tinner join gp using (patient_id_cp)\n\tleft join grg on grg.rx_numbers like CONCAT('%,', grse.rx_number ,',%')\n\twhere grse._ab_cdc_updated_at > (select MAX(_airbyte_emitted_at) from \"datawarehouse\".analytics.\"rxs_historic\")\n\torder by rx_number, event_name, _airbyte_emitted_at desc\n\n\n)\nselect\n\trx_number,\n\tpatient_id_cp,\n\tdrug_generic,\n\tclinic_name,\n\tprovider_npi,\n\tis_refill,\n\trx_autofill,\n\tsig_qty_per_day,\n\trx_message_key,\n\tmax_gsn,\n\tdrug_gsns,\n\trefills_total,\n\trefills_original,\n\trefills_left,\n\trefill_date_first,\n\trefill_date_last,\n\trx_date_expired,\n\trx_date_changed,\n\tqty_left,\n\tqty_original,\n\tsig_actual,\n\tsig_initial,\n\tsig_clean,\n\tsig_qty,\n\tsig_days,\n\tsig_qty_per_day_actual,\n\tsig_v2_qty,\n\tsig_v2_days,\n\tsig_v2_qty_per_day,\n\tsig_v2_unit,\n\tsig_v2_conf_score,\n\tsig_v2_dosages,\n\tsig_v2_scores,\n\tsig_v2_frequencies,\n\tsig_v2_durations,\n\trefill_date_next,\n\trefill_date_manual,\n\trefill_date_default,\n\tqty_total,\n\trx_source,\n\trx_transfer,\n\tevent_name,\n\tevent_date,\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at as _airbyte_emitted_at,\n\t_ab_cdc_updated_at as _ab_cdc_updated_at,\n\t_airbyte_source,\n\tmd5(cast(event_name || rx_number || event_date as \n    varchar\n)) as unique_event_id\nfrom rxh", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.an_fills_logs", "sql": " __dbt__cte__an_fills_logs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'is_refill') as int) as is_refill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as date) as refill_date_first,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as date) as refill_date_last,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as date) as rx_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(10,3)) as sig_qty_per_day_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as date) as refill_date_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as date) as refill_date_manual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as date) as refill_date_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual_rx30') as int) as days_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual_rx30') as decimal(10,3)) as qty_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'total_value_coalesced') as decimal(11,3)) as total_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'unit_value_coalesced') as decimal(11,3)) as unit_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_values') as text) as drug_values,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'extra_data') as text) as extra_data,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_fills_logs\n)"}, {"id": "model.smartpill.an_patients", "sql": " __dbt__cte__an_patients as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_id') as int) as goodpill_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fill_next') as date) as fill_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_overdue') as int) as days_overdue,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address_2') as varchar(255)) as address_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as date) as payment_card_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_patients\n)"}, {"id": "model.smartpill.an_providers", "sql": " __dbt__cte__an_providers as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar(255)) as npi,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_providers\n)"}, {"id": "model.smartpill.an_drugs", "sql": " __dbt__cte__an_drugs as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'generic_name') as varchar(255)) as generic_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'brand_name') as varchar(255)) as brand_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gsns') as varchar(255)) as gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_per_month') as decimal(10,4)) as current_price_per_month,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_30') as decimal(10,4)) as current_price_30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_90') as decimal(10,4)) as current_price_90,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_awp') as decimal(10,4)) as current_value_awp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_goodrx') as decimal(10,4)) as current_value_goodrx,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_nadac') as decimal(10,4)) as current_value_nadac,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_coalesced') as decimal(10,4)) as current_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_drugs\n)"}, {"id": "model.smartpill.an_clinics", "sql": " __dbt__cte__an_clinics as (\nselect\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_clean') as varchar(255)) as name_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_meta') as varchar(255)) as name_meta,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_clinics\n)"}, {"id": "model.smartpill.gp_rxs_single", "sql": " __dbt__cte__gp_rxs_single as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single\n)"}, {"id": "model.smartpill.gp_rxs_grouped", "sql": " __dbt__cte__gp_rxs_grouped as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped\n)"}, {"id": "model.smartpill.gp_patients", "sql": " __dbt__cte__gp_patients as (\nselect\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients\n)"}], "relation_name": "\"datawarehouse\".analytics.\"rxs_historic\""}, "model.smartpill.an_clinics": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['clinic_id']) }} as int) as clinic_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['name_clean']) }} as varchar(255)) as name_clean,\n\tcast({{ json_extract_scalar('_airbyte_data', ['name_meta']) }} as varchar(255)) as name_meta,\n\tcast({{ json_extract_scalar('_airbyte_data', ['name']) }} as varchar(255)) as name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number']) }} as varchar(255)) as phone_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number_2']) }} as varchar(255)) as phone_number_2,\n\tcast({{ json_extract_scalar('_airbyte_data', ['address']) }} as varchar(255)) as address,\n\tcast({{ json_extract_scalar('_airbyte_data', ['city']) }} as varchar(255)) as city,\n\tcast({{ json_extract_scalar('_airbyte_data', ['state']) }} as varchar(255)) as state,\n\tcast({{ json_extract_scalar('_airbyte_data', ['zip_code']) }} as varchar(255)) as zip_code,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_clinics') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_clinics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_clinics"], "unique_id": "model.smartpill.an_clinics", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_clinics.sql", "original_file_path": "models/analytics/intermediate_tables/an_clinics.sql", "name": "an_clinics", "alias": "an_clinics", "checksum": {"name": "sha256", "checksum": "9eaf9aece1fcfb96755a839b00bd8a4c4ad5d099e84e663eb67dab060bcc77a0"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_clinics"]], "description": "Clinics from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_clinics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2537444, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_clean') as varchar(255)) as name_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name_meta') as varchar(255)) as name_meta,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_clinics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_dates": {"raw_sql": "select\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_id']) }} as int) as date_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['db_date']) }} as date) as db_date,\n\tcast({{ json_extract_scalar('_airbyte_data', ['year']) }} as int) as year,\n\tcast({{ json_extract_scalar('_airbyte_data', ['month']) }} as int) as month,\n\tcast({{ json_extract_scalar('_airbyte_data', ['day']) }} as int) as day,\n\tcast({{ json_extract_scalar('_airbyte_data', ['week_of_year']) }} as int) as week_of_year,\n\tcast({{ json_extract_scalar('_airbyte_data', ['month_name']) }} as varchar) as month_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['day_name']) }} as varchar) as day_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['holiday_flag']) }} as int) as holiday_flag,\n\tcast({{ json_extract_scalar('_airbyte_data', ['weekend_flag']) }} as int) as weekend_flag,\n\tcast({{ json_extract_scalar('_airbyte_data', ['quarter']) }} as int) as quarter,\n\tcast({{ json_extract_scalar('_airbyte_data', ['semester']) }} as int) as semester,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_dates') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_dates"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_dates"], "unique_id": "model.smartpill.an_dates", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_dates.sql", "original_file_path": "models/analytics/intermediate_tables/an_dates.sql", "name": "an_dates", "alias": "an_dates", "checksum": {"name": "sha256", "checksum": "1ec25f44176c8c50c531d0bb5abfecd48728b5f4170c10cb0bb0671c2285ad3b"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_dates"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413936.6590579, "compiled_sql": "select\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_id') as int) as date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'db_date') as date) as db_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'year') as int) as year,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'month') as int) as month,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'day') as int) as day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'week_of_year') as int) as week_of_year,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'month_name') as varchar) as month_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'day_name') as varchar) as day_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'holiday_flag') as int) as holiday_flag,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'weekend_flag') as int) as weekend_flag,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'quarter') as int) as quarter,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'semester') as int) as semester,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_drugs": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['drug_id'])}} as int) as drug_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['generic_name'])}} as varchar(255)) as generic_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['brand_name'])}} as varchar(255)) as brand_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['gsns'])}} as varchar(255)) as gsns,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_price_per_month'])}} as decimal(10,4)) as current_price_per_month,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_price_30'])}} as decimal(10,4)) as current_price_30,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_price_90'])}} as decimal(10,4)) as current_price_90,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_value_awp'])}} as decimal(10,4)) as current_value_awp,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_value_goodrx'])}} as decimal(10,4)) as current_value_goodrx,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_value_nadac'])}} as decimal(10,4)) as current_value_nadac,\n\tcast({{ json_extract_scalar('_airbyte_data', ['current_value_coalesced'])}} as decimal(10,4)) as current_value_coalesced,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed'])}} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_drugs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_drugs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_drugs"], "unique_id": "model.smartpill.an_drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_drugs.sql", "original_file_path": "models/analytics/intermediate_tables/an_drugs.sql", "name": "an_drugs", "alias": "an_drugs", "checksum": {"name": "sha256", "checksum": "ba9e777076ce421b10e926eebc8805d674328758bfbad14f86f526f23c70683f"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_drugs"]], "description": "Drugs from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_drugs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2569742, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'generic_name') as varchar(255)) as generic_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'brand_name') as varchar(255)) as brand_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'gsns') as varchar(255)) as gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_per_month') as decimal(10,4)) as current_price_per_month,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_30') as decimal(10,4)) as current_price_30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_price_90') as decimal(10,4)) as current_price_90,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_awp') as decimal(10,4)) as current_value_awp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_goodrx') as decimal(10,4)) as current_value_goodrx,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_nadac') as decimal(10,4)) as current_value_nadac,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'current_value_coalesced') as decimal(10,4)) as current_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_drugs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_fills_logs": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_id']) }} as int) as patient_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_date_id']) }} as int) as event_date_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_time_id']) }} as int) as event_time_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_type']) }} as varchar(15)) as event_type,\n\tcast({{ json_extract_scalar('_airbyte_data', ['goodpill_event_date']) }} as timestamp) as goodpill_event_date,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_number']) }} as int) as rx_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['provider_id']) }} as int) as provider_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['drug_id']) }} as int) as drug_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['clinic_id']) }} as int) as clinic_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['location_id']) }} as int) as location_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['invoice_number']) }} as int) as invoice_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['is_refill']) }} as int) as is_refill,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_autofill']) }} as int) as rx_autofill,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_qty_per_day']) }} as decimal(6,3)) as sig_qty_per_day,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_message_key']) }} as varchar(80)) as rx_message_key,\n\tcast({{ json_extract_scalar('_airbyte_data', ['max_gsn']) }} as int) as max_gsn,\n\tcast({{ json_extract_scalar('_airbyte_data', ['drug_gsns']) }} as varchar(255)) as drug_gsns,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refills_total']) }} as decimal(5,2)) as refills_total,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refills_original']) }} as decimal(5,2)) as refills_original,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refills_left']) }} as decimal(5,2)) as refills_left,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refill_date_first']) }} as date) as refill_date_first,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refill_date_last']) }} as date) as refill_date_last,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_date_changed']) }} as timestamp) as rx_date_changed,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_date_expired']) }} as date) as rx_date_expired,\n\tcast({{ json_extract_scalar('_airbyte_data', ['qty_left']) }} as decimal(10,3)) as qty_left,\n\tcast({{ json_extract_scalar('_airbyte_data', ['qty_original']) }} as decimal(10,3)) as qty_original,\n\tcast({{ json_extract_scalar('_airbyte_data', ['stock_level_initial']) }} as varchar(80)) as stock_level_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_actual']) }} as varchar(255)) as sig_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_initial']) }} as varchar(255)) as sig_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_clean']) }} as varchar(255)) as sig_clean,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_qty']) }} as decimal(10,3)) as sig_qty,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_days']) }} as int) as sig_days,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_qty_per_day_actual']) }} as decimal(10,3)) as sig_qty_per_day_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_durations']) }} as varchar(255)) as sig_durations,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_qtys_per_time']) }} as varchar(255)) as sig_qtys_per_time,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_frequencies']) }} as varchar(255)) as sig_frequencies,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_frequency_numerators']) }} as varchar(255)) as sig_frequency_numerators,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_frequency_denominators']) }} as varchar(255)) as sig_frequency_denominators,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_qty']) }} as decimal(10,3)) as sig_v2_qty,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_days']) }} as int) as sig_v2_days,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_qty_per_day']) }} as decimal(10,3)) as sig_v2_qty_per_day,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_unit']) }} as varchar(255)) as sig_v2_unit,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_conf_score']) }} as decimal(10,3)) as sig_v2_conf_score,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_dosages']) }} as varchar(255)) as sig_v2_dosages,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_scores']) }} as varchar(255)) as sig_v2_scores,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_frequencies']) }} as varchar(255)) as sig_v2_frequencies,\n\tcast({{ json_extract_scalar('_airbyte_data', ['sig_v2_durations']) }} as varchar(255)) as sig_v2_durations,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refill_date_next']) }} as date) as refill_date_next,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refill_date_manual']) }} as date) as refill_date_manual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refill_date_default']) }} as date) as refill_date_default,\n\tcast({{ json_extract_scalar('_airbyte_data', ['qty_total']) }} as decimal(11,3)) as qty_total,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_source']) }} as varchar(80)) as rx_source,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_transfer']) }} as varchar(80)) as rx_transfer,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_message_keys_initial']) }} as varchar(255)) as rx_message_keys_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_autofill_initial']) }} as int) as patient_autofill_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_autofill_initial']) }} as int) as rx_autofill_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rx_numbers_initial']) }} as varchar(255)) as rx_numbers_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['zscore_initial']) }} as decimal(6,3)) as zscore_initial,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refills_dispensed_actual']) }} as decimal(5,2)) as refills_dispensed_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['days_dispensed_actual']) }} as int) as days_dispensed_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['days_dispensed_actual_rx30']) }} as int) as days_dispensed_actual_rx30,\n\tcast({{ json_extract_scalar('_airbyte_data', ['qty_dispensed_actual']) }} as decimal(10,3)) as qty_dispensed_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['qty_dispensed_actual_rx30']) }} as decimal(10,3)) as qty_dispensed_actual_rx30,\n\tcast({{ json_extract_scalar('_airbyte_data', ['price_dispensed_actual']) }} as decimal(5,2)) as price_dispensed_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_items']) }} as int) as count_items,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_filled']) }} as int) as count_filled,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_nofill']) }} as int) as count_nofill,\n\tcast({{ json_extract_scalar('_airbyte_data', ['total_value_coalesced']) }} as decimal(11,3)) as total_value_coalesced,\n\tcast({{ json_extract_scalar('_airbyte_data', ['unit_value_coalesced']) }} as decimal(11,3)) as unit_value_coalesced,\n\tcast({{ json_extract_scalar('_airbyte_data', ['drug_values']) }} as text) as drug_values,\n\tcast({{ json_extract_scalar('_airbyte_data', ['extra_data']) }} as text) as extra_data,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_fills_logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_fills_logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_fills_logs"], "unique_id": "model.smartpill.an_fills_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_fills_logs.sql", "original_file_path": "models/analytics/intermediate_tables/an_fills_logs.sql", "name": "an_fills_logs", "alias": "an_fills_logs", "checksum": {"name": "sha256", "checksum": "fbabaa49f5615e4c11eeadd50abab50732eba5e9ad82ae50f9290d231af01d86"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_fills_logs"]], "description": "Fills logs from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_fills_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2601743, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_id') as int) as drug_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'clinic_id') as int) as clinic_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'is_refill') as int) as is_refill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as date) as refill_date_first,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as date) as refill_date_last,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as date) as rx_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(10,3)) as sig_qty_per_day_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as date) as refill_date_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as date) as refill_date_manual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as date) as refill_date_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual_rx30') as int) as days_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual_rx30') as decimal(10,3)) as qty_dispensed_actual_rx30,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'total_value_coalesced') as decimal(11,3)) as total_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'unit_value_coalesced') as decimal(11,3)) as unit_value_coalesced,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'drug_values') as text) as drug_values,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'extra_data') as text) as extra_data,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_fills_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_locations": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['location_id']) }} as int) as location_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['city']) }} as varchar(255)) as city,\n\tcast({{ json_extract_scalar('_airbyte_data', ['state']) }} as varchar(255)) as state,\n\tcast({{ json_extract_scalar('_airbyte_data', ['zip_code']) }} as varchar(255)) as zip_code,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_locations') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_locations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_locations"], "unique_id": "model.smartpill.an_locations", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_locations.sql", "original_file_path": "models/analytics/intermediate_tables/an_locations.sql", "name": "an_locations", "alias": "an_locations", "checksum": {"name": "sha256", "checksum": "3263dd4721a0d253e1849bb3e20ac6d967479b7d1c159a051c5fc3ab670273fd"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_locations"]], "description": "Locations from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_locations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.337901, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_locations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_orders_logs": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['invoice_number']) }} as int) as invoice_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_id']) }} as int) as patient_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_date_id']) }} as int) as event_date_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_time_id']) }} as int) as event_time_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['location_id']) }} as int) as location_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['event_type']) }} as varchar(15)) as event_type,\n\tcast({{ json_extract_scalar('_airbyte_data', ['goodpill_event_date']) }} as timestamp) as goodpill_event_date,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_items']) }} as int) as count_items,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_filled']) }} as int) as count_filled,\n\tcast({{ json_extract_scalar('_airbyte_data', ['count_nofill']) }} as int) as count_nofill,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_source']) }} as varchar(80)) as order_source,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_stage_cp']) }} as varchar(80)) as order_stage_cp,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_status']) }} as varchar(80)) as order_status,\n\tcast({{ json_extract_scalar('_airbyte_data', ['invoice_doc_id']) }} as varchar(80)) as invoice_doc_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['tracking_number']) }} as varchar(80)) as tracking_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_date_changed']) }} as timestamp) as order_date_changed,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_date_updated']) }} as timestamp) as order_date_updated,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_total_default']) }} as int) as payment_total_default,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_total_actual']) }} as int) as payment_total_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_fee_default']) }} as int) as payment_fee_default,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_fee_actual']) }} as int) as payment_fee_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_due_default']) }} as int) as payment_due_default,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_due_actual']) }} as int) as payment_due_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_date_autopay']) }} as varchar(80)) as payment_date_autopay,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_method_actual']) }} as varchar(80)) as payment_method_actual,\n\tcast({{ json_extract_scalar('_airbyte_data', ['coupon_lines']) }} as varchar(255)) as coupon_lines,\n\tcast({{ json_extract_scalar('_airbyte_data', ['order_note']) }} as text) as order_note,\n\tcast({{ json_extract_scalar('_airbyte_data', ['rph_check']) }} as varchar(5)) as rph_check,\n\tcast({{ json_extract_scalar('_airbyte_data', ['tech_fill']) }} as varchar(5)) as tech_fill,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_orders_logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_orders_logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_orders_logs"], "unique_id": "model.smartpill.an_orders_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_orders_logs.sql", "original_file_path": "models/analytics/intermediate_tables/an_orders_logs.sql", "name": "an_orders_logs", "alias": "an_orders_logs", "checksum": {"name": "sha256", "checksum": "31864af3599fca2d653c821c216b52a08c569656928e46c6d9ac877f5119cc94"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_orders_logs"]], "description": "Orders logs from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_orders_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.4308722, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_date_id') as int) as event_date_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_time_id') as int) as event_time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'location_id') as int) as location_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'event_type') as varchar(15)) as event_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_event_date') as timestamp) as goodpill_event_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'order_note') as text) as order_note,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_orders_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_patients": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_id']) }} as int) as patient_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['goodpill_id']) }} as int) as goodpill_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_date_registered']) }} as timestamp) as patient_date_registered,\n\tcast({{ json_extract_scalar('_airbyte_data', ['patient_date_added']) }} as timestamp) as patient_date_added,\n\tcast({{ json_extract_scalar('_airbyte_data', ['fill_next']) }} as date) as fill_next,\n\tcast({{ json_extract_scalar('_airbyte_data', ['days_overdue']) }} as int) as days_overdue,\n\tcast({{ json_extract_scalar('_airbyte_data', ['first_name']) }} as varchar(255)) as first_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['last_name']) }} as varchar(255)) as last_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['birth_date']) }} as timestamp) as birth_date,\n\tcast({{ json_extract_scalar('_airbyte_data', ['email']) }} as varchar(255)) as email,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number']) }} as varchar(255)) as phone_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number_2']) }} as varchar(255)) as phone_number_2,\n\tcast({{ json_extract_scalar('_airbyte_data', ['address']) }} as varchar(255)) as address,\n\tcast({{ json_extract_scalar('_airbyte_data', ['address_2']) }} as varchar(255)) as address_2,\n\tcast({{ json_extract_scalar('_airbyte_data', ['city']) }} as varchar(255)) as city,\n\tcast({{ json_extract_scalar('_airbyte_data', ['state']) }} as varchar(255)) as state,\n\tcast({{ json_extract_scalar('_airbyte_data', ['zip_code']) }} as varchar(255)) as zip_code,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_card_type']) }} as varchar(20)) as payment_card_type,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_card_last4']) }} as varchar(4)) as payment_card_last4,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_card_date_expired']) }} as date) as payment_card_date_expired,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_method_default']) }} as varchar(50)) as payment_method_default,\n\tcast({{ json_extract_scalar('_airbyte_data', ['payment_coupon']) }} as varchar(20)) as payment_coupon,\n\tcast({{ json_extract_scalar('_airbyte_data', ['tracking_coupon']) }} as varchar(20)) as tracking_coupon,\n\tcast({{ json_extract_scalar('_airbyte_data', ['refills_used']) }} as decimal(5,2)) as refills_used,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_patients') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_patients"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_patients"], "unique_id": "model.smartpill.an_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_patients.sql", "original_file_path": "models/analytics/intermediate_tables/an_patients.sql", "name": "an_patients", "alias": "an_patients", "checksum": {"name": "sha256", "checksum": "3bccc65079608a13a51d48d0a0c0e49008db6356eee8fc8bb40fd46874e57171"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_patients"]], "description": "Patients from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.4348273, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_id') as int) as patient_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'goodpill_id') as int) as goodpill_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fill_next') as date) as fill_next,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'days_overdue') as int) as days_overdue,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address_2') as varchar(255)) as address_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as date) as payment_card_date_expired,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_patients", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_pharmacies": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['pharmacy_id']) }} as int) as pharmacy_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['npi']) }} as varchar(255)) as npi,\n\tcast({{ json_extract_scalar('_airbyte_data', ['name']) }} as varchar(255)) as name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone']) }} as varchar(255)) as phone,\n\tcast({{ json_extract_scalar('_airbyte_data', ['fax']) }} as varchar(255)) as fax,\n\tcast({{ json_extract_scalar('_airbyte_data', ['address']) }} as varchar(255)) as address,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_pharmacies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_pharmacies"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_pharmacies"], "unique_id": "model.smartpill.an_pharmacies", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_pharmacies.sql", "original_file_path": "models/analytics/intermediate_tables/an_pharmacies.sql", "name": "an_pharmacies", "alias": "an_pharmacies", "checksum": {"name": "sha256", "checksum": "ee8b37699e2144a11c2980021d1fda4d8f5044794469619a336200f51d119e3c"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_pharmacies"]], "description": "Pharmacies from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_pharmacies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.4463708, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_id') as int) as pharmacy_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar(255)) as npi,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'name') as varchar(255)) as name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone') as varchar(255)) as phone,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'fax') as varchar(255)) as fax,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_pharmacies", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_providers": {"raw_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast({{ json_extract_scalar('_airbyte_data', ['provider_id']) }} as int) as provider_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['npi']) }} as varchar(255)) as npi,\n\tcast({{ json_extract_scalar('_airbyte_data', ['first_name']) }} as varchar(255)) as first_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['last_name']) }} as varchar(255)) as last_name,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number']) }} as varchar(255)) as phone_number,\n\tcast({{ json_extract_scalar('_airbyte_data', ['phone_number_2']) }} as varchar(255)) as phone_number_2,\n\tcast({{ json_extract_scalar('_airbyte_data', ['address']) }} as varchar(255)) as address,\n\tcast({{ json_extract_scalar('_airbyte_data', ['city']) }} as varchar(255)) as city,\n\tcast({{ json_extract_scalar('_airbyte_data', ['state']) }} as varchar(255)) as state,\n\tcast({{ json_extract_scalar('_airbyte_data', ['zip_code']) }} as varchar(255)) as zip_code,\n\tcast({{ json_extract_scalar('_airbyte_data', ['date_processed']) }} as timestamp) as date_processed\nfrom {{ source('raw', '_airbyte_raw_analytics_providers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_providers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["backfill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_providers"], "unique_id": "model.smartpill.an_providers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_providers.sql", "original_file_path": "models/analytics/intermediate_tables/an_providers.sql", "name": "an_providers", "alias": "an_providers", "checksum": {"name": "sha256", "checksum": "e6c048f72c68f470514c8213eeacf0c00f668797842d26717154f07643585606"}, "tags": ["backfill"], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_providers"]], "description": "Providers from the `analytics` database of the old warehouse.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_providers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.4516144, "compiled_sql": "select\n\t_airbyte_ab_id,\n\t_airbyte_emitted_at,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'provider_id') as int) as provider_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'npi') as varchar(255)) as npi,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(255)) as first_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(255)) as last_name,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number') as varchar(255)) as phone_number,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'phone_number_2') as varchar(255)) as phone_number_2,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'address') as varchar(255)) as address,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'city') as varchar(255)) as city,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'state') as varchar(255)) as state,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'zip_code') as varchar(255)) as zip_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'date_processed') as timestamp) as date_processed\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_providers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.an_times": {"raw_sql": "select\n\tcast({{ json_extract_scalar('_airbyte_data', ['time_id']) }} as int) as time_id,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour24']) }} as int) as hour24,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour24_string']) }} as varchar) as hour24_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour12']) }} as int) as hour12,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour12_string']) }} as varchar) as hour12_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['minute']) }} as int) as minute,\n\tcast({{ json_extract_scalar('_airbyte_data', ['minute_string']) }} as varchar) as minute_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['second']) }} as int) as second,\n\tcast({{ json_extract_scalar('_airbyte_data', ['second_string']) }} as varchar) as second_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour24_min_string']) }} as varchar) as hour24_min_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour24_full_string']) }} as varchar) as hour24_full_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour12_min_string']) }} as varchar) as hour12_min_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['hour12_full_string']) }} as varchar) as hour12_full_string,\n\tcast({{ json_extract_scalar('_airbyte_data', ['ampm_code']) }} as int) as ampm_code,\n\tcast({{ json_extract_scalar('_airbyte_data', ['ampm_string']) }} as varchar) as ampm_string\nfrom {{ source('raw', '_airbyte_raw_analytics_times') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_analytics_times"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "an_times"], "unique_id": "model.smartpill.an_times", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/an_times.sql", "original_file_path": "models/analytics/intermediate_tables/an_times.sql", "name": "an_times", "alias": "an_times", "checksum": {"name": "sha256", "checksum": "ff63e66feb5609ebb8604f5eea9328906dcd5062db78d2c67175176123e89f86"}, "tags": [], "refs": [], "sources": [["raw", "_airbyte_raw_analytics_times"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/an_times.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413939.137149, "compiled_sql": "select\n\tcast(jsonb_extract_path_text(_airbyte_data, 'time_id') as int) as time_id,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour24') as int) as hour24,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour24_string') as varchar) as hour24_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour12') as int) as hour12,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour12_string') as varchar) as hour12_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'minute') as int) as minute,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'minute_string') as varchar) as minute_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'second') as int) as second,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'second_string') as varchar) as second_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour24_min_string') as varchar) as hour24_min_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour24_full_string') as varchar) as hour24_full_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour12_min_string') as varchar) as hour12_min_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'hour12_full_string') as varchar) as hour12_full_string,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'ampm_code') as int) as ampm_code,\n\tcast(jsonb_extract_path_text(_airbyte_data, 'ampm_string') as varchar) as ampm_string\nfrom \"datawarehouse\".raw._airbyte_raw_analytics_times", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_drugs": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_generic']) }} as varchar(255)) as drug_generic,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_brand']) }} as varchar(255)) as drug_brand,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_gsns']) }} as varchar(255)) as drug_gsns,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_ordered']) }} as int) as drug_ordered,\n    cast({{ json_extract_scalar('_airbyte_data', ['price30']) }} as int) as price30,\n    cast({{ json_extract_scalar('_airbyte_data', ['price90']) }} as int) as price90,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_repack']) }} as int) as qty_repack,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_min']) }} as int) as qty_min,\n    cast({{ json_extract_scalar('_airbyte_data', ['days_min']) }} as int) as days_min,\n    cast({{ json_extract_scalar('_airbyte_data', ['max_inventory']) }} as int) as max_inventory,\n    cast({{ json_extract_scalar('_airbyte_data', ['message_display']) }} as varchar(255)) as message_display,\n    cast({{ json_extract_scalar('_airbyte_data', ['message_verified']) }} as varchar(255)) as message_verified,\n    cast({{ json_extract_scalar('_airbyte_data', ['message_destroyed']) }} as varchar(255)) as message_destroyed,\n    cast({{ json_extract_scalar('_airbyte_data', ['price_goodrx']) }} as decimal(10,3)) as price_goodrx,\n    cast({{ json_extract_scalar('_airbyte_data', ['price_nadac']) }} as decimal(10,3)) as price_nadac,\n    cast({{ json_extract_scalar('_airbyte_data', ['price_retail']) }} as decimal(10,3)) as price_retail,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_ndcs']) }} as int) as count_ndcs,\n    cast({{ json_extract_scalar('_airbyte_data', ['updated_at']) }} as timestamp) as updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['created_at']) }} as timestamp) as created_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom \n    {{ source('raw', '_airbyte_raw_goodpill_gp_drugs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_drugs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_drugs"], "unique_id": "model.smartpill.gp_drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_drugs.sql", "original_file_path": "models/analytics/intermediate_tables/gp_drugs.sql", "name": "gp_drugs", "alias": "gp_drugs", "checksum": {"name": "sha256", "checksum": "c9c0a593bfdb36f407c91eba3006aecda8f89527f41afbc4679a081bfe07b41a"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_drugs"]], "description": "Drugs registered in the database.", "columns": {"drug_generic": {"name": "drug_generic", "description": "The Unique Identifier for a Drug made by sorting the active ingredients with their strengths alphabetically and then concatenating the drug's dosage form but excluding the word 'tablet' or 'capsule' from the resulting string.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_brand": {"name": "drug_brand", "description": "The brand name given to the drug by the labeler usually when the drug is under patent e.g Lipitor for Atorvastatin", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_gsns": {"name": "drug_gsns", "description": "Generic Sequence Number. A numerical identifier given to every drug by First Databank.  This number is used to match Guardian's Drug Database (used for Rxs) with our Drug Database (used for Inventory Management and Donor Records)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "drug_ordered": {"name": "drug_ordered", "description": "Whether a recipient is currently accepting a particular drug into their inventory", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "price30": {"name": "price30", "description": "Price of a 30 day prescription is usually Price90/3.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "price90": {"name": "price90", "description": "Price of a 90 day prescription and is also used to determine the price of other days assuming proportional costs e.g Price60 = Price90/3*2", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "qty_repack": {"name": "qty_repack", "description": "This is the typical qty given in the average Rx of this drug.  This is used to estimate a potential dispensed volume (and stock level) if we have not yet dispensed this drug.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "qty_min": {"name": "qty_min", "description": "Even if a drug is 'ordered', we will not accept it into inventory if the qty in the item is less than this amount", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "days_min": {"name": "days_min", "description": "Even if a drug is 'ordered', we will not accept it into inventory if the days until the drugs expiration is less than this amount.  The drugs expiration should not be confused with the Rx's expiration which is also often included on the item's label", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "max_inventory": {"name": "max_inventory", "description": "Even if a drug is 'ordered', we will not accept it into inventory if we alreay have a qty in inventory that is greater than this amount", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "message_display": {"name": "message_display", "description": "This message will popup (currently in a toast at the bottom of the screen) everytime this drug is entered into our system", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "message_verified": {"name": "message_verified", "description": "This message will popup (currently in a toast at the bottom of the screen) everytime this drug is accepted into our inventory", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "message_destroyed": {"name": "message_destroyed", "description": "This message will popup (currently in a toast at the bottom of the screen) everytime this drug is rejected from (not accepted into) our inventory", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "varchar"}, "price_goodrx": {"name": "price_goodrx", "description": "The GoodRx fair price of a drug at the time it was entered into our system +/- 1 week", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "price_nadac": {"name": "price_nadac", "description": "The NADAC fair price of a drug at the time it was entered into our system +/- 1 week", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "price_retail": {"name": "price_retail", "description": "The GoodRx retail price of a drug at the time it was entered into our system +/- 1 week", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "decimal"}, "count_ndcs": {"name": "count_ndcs", "description": "Multiple manufacturers make each Drug (drug_generic) and each is give a National Drug Code by the FDA.  This is the total number of NDCs that this drug has in our database", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "int"}, "updated_at": {"name": "updated_at", "description": "Time where the record was updated", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "created_at": {"name": "created_at", "description": "Time where the record was created", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "_ab_cdc_updated_at": {"name": "_ab_cdc_updated_at", "description": "Time where the record was updated, obtained via CDC", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "_ab_cdc_deleted_at": {"name": "_ab_cdc_deleted_at", "description": "Time where the record was updated, obtained via CDC", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_drugs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.138226, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_ordered') as int) as drug_ordered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price30') as int) as price30,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price90') as int) as price90,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_repack') as int) as qty_repack,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_min') as int) as qty_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_min') as int) as days_min,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_inventory') as int) as max_inventory,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_display') as varchar(255)) as message_display,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_verified') as varchar(255)) as message_verified,\n    cast(jsonb_extract_path_text(_airbyte_data, 'message_destroyed') as varchar(255)) as message_destroyed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_goodrx') as decimal(10,3)) as price_goodrx,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_nadac') as decimal(10,3)) as price_nadac,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_retail') as decimal(10,3)) as price_retail,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_ndcs') as int) as count_ndcs,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_drugs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_order_items": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['invoice_number']) }} as int) as invoice_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_name']) }} as varchar(255)) as drug_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as patient_id_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_number']) }} as int) as rx_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['groups']) }} as varchar(255)) as groups,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_dispensed_id']) }} as int) as rx_dispensed_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['stock_level_initial']) }} as varchar(80)) as stock_level_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_message_keys_initial']) }} as varchar(255)) as rx_message_keys_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_autofill_initial']) }} as int) as patient_autofill_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_autofill_initial']) }} as int) as rx_autofill_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_numbers_initial']) }} as varchar(255)) as rx_numbers_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['zscore_initial']) }} as decimal(6,3)) as zscore_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_dispensed_default']) }} as decimal(5,2)) as refills_dispensed_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_dispensed_actual']) }} as decimal(5,2)) as refills_dispensed_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['days_dispensed_default']) }} as int) as days_dispensed_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['days_dispensed_actual']) }} as int) as days_dispensed_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_dispensed_default']) }} as decimal(10,3)) as qty_dispensed_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_dispensed_actual']) }} as decimal(10,3)) as qty_dispensed_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['price_dispensed_default']) }} as decimal(5,2)) as price_dispensed_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['price_dispensed_actual']) }} as decimal(5,2)) as price_dispensed_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_pended_total']) }} as decimal(10,3)) as qty_pended_total,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_pended_repacks']) }} as decimal(10,3)) as qty_pended_repacks,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_pended_total']) }} as int) as count_pended_total,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_pended_repacks']) }} as int) as count_pended_repacks,\n    cast({{ json_extract_scalar('_airbyte_data', ['item_message_keys']) }} as varchar(255)) as item_message_keys,\n    cast({{ json_extract_scalar('_airbyte_data', ['item_message_text']) }} as varchar(255)) as item_message_text,\n    cast({{ json_extract_scalar('_airbyte_data', ['item_type']) }} as varchar(80)) as item_type,\n    cast({{ json_extract_scalar('_airbyte_data', ['item_added_by']) }} as varchar(80)) as item_added_by,\n    cast({{ json_extract_scalar('_airbyte_data', ['item_date_added']) }} as timestamp) as item_date_added,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_last']) }} as timestamp) as refill_date_last,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_manual']) }} as timestamp) as refill_date_manual,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_default']) }} as timestamp) as refill_date_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_target_date']) }} as timestamp) as refill_target_date,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_target_days']) }} as int) as refill_target_days,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_target_rxs']) }} as varchar(255)) as refill_target_rxs,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_order_items') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_order_items"], "unique_id": "model.smartpill.gp_order_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_order_items.sql", "original_file_path": "models/analytics/intermediate_tables/gp_order_items.sql", "name": "gp_order_items", "alias": "gp_order_items", "checksum": {"name": "sha256", "checksum": "94e43c4c86583c6b0f2c8e426ac80f3ed2ea1621115a659dcd6b39ce82db3b12"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_order_items"]], "description": "Order items registered in the database.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_order_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2303498, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'groups') as varchar(255)) as groups,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_dispensed_id') as int) as rx_dispensed_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'stock_level_initial') as varchar(80)) as stock_level_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys_initial') as varchar(255)) as rx_message_keys_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill_initial') as int) as patient_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill_initial') as int) as rx_autofill_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers_initial') as varchar(255)) as rx_numbers_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'zscore_initial') as decimal(6,3)) as zscore_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_default') as decimal(5,2)) as refills_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_dispensed_actual') as decimal(5,2)) as refills_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_default') as int) as days_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'days_dispensed_actual') as int) as days_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_default') as decimal(10,3)) as qty_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_dispensed_actual') as decimal(10,3)) as qty_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_default') as decimal(5,2)) as price_dispensed_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'price_dispensed_actual') as decimal(5,2)) as price_dispensed_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_total') as decimal(10,3)) as qty_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_pended_repacks') as decimal(10,3)) as qty_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_total') as int) as count_pended_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_pended_repacks') as int) as count_pended_repacks,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_keys') as varchar(255)) as item_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_message_text') as varchar(255)) as item_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_type') as varchar(80)) as item_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_added_by') as varchar(80)) as item_added_by,\n    cast(jsonb_extract_path_text(_airbyte_data, 'item_date_added') as timestamp) as item_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_date') as timestamp) as refill_target_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_days') as int) as refill_target_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_target_rxs') as varchar(255)) as refill_target_rxs,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_order_items", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_orders": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['invoice_number']) }} as int) as invoice_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as patient_id_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_wc']) }} as int) as patient_id_wc,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_items']) }} as int) as count_items,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_filled']) }} as int) as count_filled,\n    cast({{ json_extract_scalar('_airbyte_data', ['count_nofill']) }} as int) as count_nofill,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_source']) }} as varchar(80)) as order_source,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_stage_cp']) }} as varchar(80)) as order_stage_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_stage_wc']) }} as varchar(80)) as order_stage_wc,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_status']) }} as varchar(80)) as order_status,\n    cast({{ json_extract_scalar('_airbyte_data', ['invoice_doc_id']) }} as varchar(80)) as invoice_doc_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_address1']) }} as varchar(255)) as order_address1,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_address2']) }} as varchar(255)) as order_address2,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_city']) }} as varchar(255)) as order_city,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_state']) }} as varchar(2)) as order_state,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_zip']) }} as varchar(5)) as order_zip,\n    cast({{ json_extract_scalar('_airbyte_data', ['tracking_number']) }} as varchar(80)) as tracking_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_added']) }} as timestamp) as order_date_added,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_changed']) }} as timestamp) as order_date_changed,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_updated']) }} as timestamp) as order_date_updated,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_expedited']) }} as timestamp) as order_date_expedited,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_expected']) }} as timestamp) as order_date_expected,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_dispensed']) }} as timestamp) as order_date_dispensed,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_shipped']) }} as timestamp) as order_date_shipped,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_delivered']) }} as timestamp) as order_date_delivered,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_returned']) }} as timestamp) as order_date_returned,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_date_failed']) }} as timestamp) as order_date_failed,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_total_default']) }} as int) as payment_total_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_total_actual']) }} as int) as payment_total_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_fee_default']) }} as int) as payment_fee_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_fee_actual']) }} as int) as payment_fee_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_due_default']) }} as int) as payment_due_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_due_actual']) }} as int) as payment_due_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_date_autopay']) }} as varchar(80)) as payment_date_autopay,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_method_actual']) }} as varchar(80)) as payment_method_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['coupon_lines']) }} as varchar(255)) as coupon_lines,\n    cast({{ json_extract_scalar('_airbyte_data', ['order_note']) }} as varchar(255)) as order_note,\n    cast({{ json_extract_scalar('_airbyte_data', ['priority']) }} as int) as priority,\n    cast({{ json_extract_scalar('_airbyte_data', ['tech_fill']) }} as varchar(5)) as tech_fill,\n    cast({{ json_extract_scalar('_airbyte_data', ['rph_check']) }} as varchar(5)) as rph_check,\n    cast({{ json_extract_scalar('_airbyte_data', ['updated_at']) }} as timestamp) as updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['created_at']) }} as timestamp) as created_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_orders') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_orders"], "unique_id": "model.smartpill.gp_orders", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_orders.sql", "original_file_path": "models/analytics/intermediate_tables/gp_orders.sql", "name": "gp_orders", "alias": "gp_orders", "checksum": {"name": "sha256", "checksum": "81224fcf6e1c8c9b67ccb8b1913de381441d8b4bd3cf7ff1f883f51218dd3b90"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_orders"]], "description": "Orders registered in the database.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.1488075, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_number') as int) as invoice_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_items') as int) as count_items,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_filled') as int) as count_filled,\n    cast(jsonb_extract_path_text(_airbyte_data, 'count_nofill') as int) as count_nofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_source') as varchar(80)) as order_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_cp') as varchar(80)) as order_stage_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_stage_wc') as varchar(80)) as order_stage_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_status') as varchar(80)) as order_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'invoice_doc_id') as varchar(80)) as invoice_doc_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address1') as varchar(255)) as order_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_address2') as varchar(255)) as order_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_city') as varchar(255)) as order_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_state') as varchar(2)) as order_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_zip') as varchar(5)) as order_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_number') as varchar(80)) as tracking_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_added') as timestamp) as order_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_changed') as timestamp) as order_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_updated') as timestamp) as order_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expedited') as timestamp) as order_date_expedited,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_expected') as timestamp) as order_date_expected,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_dispensed') as timestamp) as order_date_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_shipped') as timestamp) as order_date_shipped,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_delivered') as timestamp) as order_date_delivered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_returned') as timestamp) as order_date_returned,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_date_failed') as timestamp) as order_date_failed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_default') as int) as payment_total_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_total_actual') as int) as payment_total_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_default') as int) as payment_fee_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_fee_actual') as int) as payment_fee_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_default') as int) as payment_due_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_due_actual') as int) as payment_due_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_date_autopay') as varchar(80)) as payment_date_autopay,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_actual') as varchar(80)) as payment_method_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'coupon_lines') as varchar(255)) as coupon_lines,\n    cast(jsonb_extract_path_text(_airbyte_data, 'order_note') as varchar(255)) as order_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'priority') as int) as priority,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tech_fill') as varchar(5)) as tech_fill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rph_check') as varchar(5)) as rph_check,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_patients": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as patient_id_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_wc']) }} as int) as patient_id_wc,\n    cast({{ json_extract_scalar('_airbyte_data', ['first_name']) }} as varchar(80)) as first_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['last_name']) }} as varchar(80)) as last_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['birth_date']) }} as timestamp) as birth_date,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_note']) }} as varchar(3072)) as patient_note,\n    cast({{ json_extract_scalar('_airbyte_data', ['phone1']) }} as varchar(10)) as phone1,\n    cast({{ json_extract_scalar('_airbyte_data', ['phone2']) }} as varchar(10)) as phone2,\n    cast({{ json_extract_scalar('_airbyte_data', ['email']) }} as varchar(255)) as email,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_autofill']) }} as int) as patient_autofill,\n    cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_name']) }} as varchar(50)) as pharmacy_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_npi']) }} as varchar(10)) as pharmacy_npi,\n    cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_fax']) }} as varchar(12)) as pharmacy_fax,\n    cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_phone']) }} as varchar(12)) as pharmacy_phone,\n    cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_address']) }} as varchar(255)) as pharmacy_address,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_card_type']) }} as varchar(20)) as payment_card_type,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_card_last4']) }} as varchar(4)) as payment_card_last4,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_card_date_expired']) }} as timestamp) as payment_card_date_expired,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_method_default']) }} as varchar(50)) as payment_method_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['payment_coupon']) }} as varchar(20)) as payment_coupon,\n    cast({{ json_extract_scalar('_airbyte_data', ['tracking_coupon']) }} as varchar(20)) as tracking_coupon,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_address1']) }} as varchar(255)) as patient_address1,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_address2']) }} as varchar(255)) as patient_address2,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_city']) }} as varchar(255)) as patient_city,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_state']) }} as varchar(2)) as patient_state,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_zip']) }} as varchar(5)) as patient_zip,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_used']) }} as decimal(5,2)) as refills_used,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_status']) }} as int) as patient_status,\n    cast({{ json_extract_scalar('_airbyte_data', ['language']) }} as varchar) as language,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_none']) }} as varchar(80)) as allergies_none,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_cephalosporins']) }} as varchar(80)) as allergies_cephalosporins,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_sulfa']) }} as varchar(80)) as allergies_sulfa,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_aspirin']) }} as varchar(80)) as allergies_aspirin,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_penicillin']) }} as varchar(80)) as allergies_penicillin,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_erythromycin']) }} as varchar(80)) as allergies_erythromycin,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_codeine']) }} as varchar(80)) as allergies_codeine,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_nsaids']) }} as varchar(80)) as allergies_nsaids,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_salicylates']) }} as varchar(80)) as allergies_salicylates,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_azithromycin']) }} as varchar(80)) as allergies_azithromycin,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_amoxicillin']) }} as varchar(80)) as allergies_amoxicillin,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_tetracycline']) }} as varchar(80)) as allergies_tetracycline,\n    cast({{ json_extract_scalar('_airbyte_data', ['allergies_other']) }} as varchar(255)) as allergies_other,\n    cast({{ json_extract_scalar('_airbyte_data', ['medications_other']) }} as varchar(3072)) as medications_other,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_added']) }} as timestamp) as patient_date_added,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_registered']) }} as timestamp) as patient_date_registered,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_changed']) }} as timestamp) as patient_date_changed,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_updated']) }} as timestamp) as patient_date_updated,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_inactive']) }} as varchar) as patient_inactive,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_first_dispensed']) }} as timestamp) as patient_date_first_dispensed,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_first_rx_received']) }} as timestamp) as patient_date_first_rx_received,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_date_first_expected_by']) }} as timestamp) as patient_date_first_expected_by,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom\n    {{ source('raw', '_airbyte_raw_goodpill_gp_patients') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patients"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_patients"], "unique_id": "model.smartpill.gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_patients.sql", "original_file_path": "models/analytics/intermediate_tables/gp_patients.sql", "name": "gp_patients", "alias": "gp_patients", "checksum": {"name": "sha256", "checksum": "ece4ae3d4243ad35fd7d0fa8fb8be4db6c13ff0de3db5d1a2672af6c432f14d7"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_patients"]], "description": "Patients registered in the database.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_patients.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2345173, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_wc') as int) as patient_id_wc,\n    cast(jsonb_extract_path_text(_airbyte_data, 'first_name') as varchar(80)) as first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'last_name') as varchar(80)) as last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'birth_date') as timestamp) as birth_date,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_note') as varchar(3072)) as patient_note,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone1') as varchar(10)) as phone1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'phone2') as varchar(10)) as phone2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'email') as varchar(255)) as email,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_autofill') as int) as patient_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_name') as varchar(50)) as pharmacy_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_npi') as varchar(10)) as pharmacy_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_fax') as varchar(12)) as pharmacy_fax,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_phone') as varchar(12)) as pharmacy_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'pharmacy_address') as varchar(255)) as pharmacy_address,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_type') as varchar(20)) as payment_card_type,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_last4') as varchar(4)) as payment_card_last4,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_card_date_expired') as timestamp) as payment_card_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_method_default') as varchar(50)) as payment_method_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'payment_coupon') as varchar(20)) as payment_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'tracking_coupon') as varchar(20)) as tracking_coupon,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address1') as varchar(255)) as patient_address1,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_address2') as varchar(255)) as patient_address2,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_city') as varchar(255)) as patient_city,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_state') as varchar(2)) as patient_state,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_zip') as varchar(5)) as patient_zip,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_used') as decimal(5,2)) as refills_used,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_status') as int) as patient_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'language') as varchar) as language,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_none') as varchar(80)) as allergies_none,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_cephalosporins') as varchar(80)) as allergies_cephalosporins,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_sulfa') as varchar(80)) as allergies_sulfa,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_aspirin') as varchar(80)) as allergies_aspirin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_penicillin') as varchar(80)) as allergies_penicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_erythromycin') as varchar(80)) as allergies_erythromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_codeine') as varchar(80)) as allergies_codeine,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_nsaids') as varchar(80)) as allergies_nsaids,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_salicylates') as varchar(80)) as allergies_salicylates,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_azithromycin') as varchar(80)) as allergies_azithromycin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_amoxicillin') as varchar(80)) as allergies_amoxicillin,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_tetracycline') as varchar(80)) as allergies_tetracycline,\n    cast(jsonb_extract_path_text(_airbyte_data, 'allergies_other') as varchar(255)) as allergies_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'medications_other') as varchar(3072)) as medications_other,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_added') as timestamp) as patient_date_added,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_registered') as timestamp) as patient_date_registered,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_changed') as timestamp) as patient_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_updated') as timestamp) as patient_date_updated,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_inactive') as varchar) as patient_inactive,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_dispensed') as timestamp) as patient_date_first_dispensed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_rx_received') as timestamp) as patient_date_first_rx_received,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_date_first_expected_by') as timestamp) as patient_date_first_expected_by,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom\n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_rxs_grouped": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as patient_id_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_generic']) }} as varchar(255)) as drug_generic,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_brand']) }} as varchar(255)) as drug_brand,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_name']) }} as varchar(255)) as drug_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_qty_per_day']) }} as decimal(6,3)) as sig_qty_per_day,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_message_keys']) }} as varchar(255)) as rx_message_keys,\n    cast({{ json_extract_scalar('_airbyte_data', ['max_gsn']) }} as int) as max_gsn,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_gsns']) }} as varchar(255)) as drug_gsns,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_total']) }} as decimal(5,2)) as refills_total,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_total']) }} as decimal(11,3)) as qty_total,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_autofill']) }} as int) as rx_autofill,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_first']) }} as timestamp) as refill_date_first,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_last']) }} as timestamp) as refill_date_last,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_next']) }} as timestamp) as refill_date_next,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_manual']) }} as timestamp) as refill_date_manual,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_default']) }} as timestamp) as refill_date_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['best_rx_number']) }} as int) as best_rx_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_numbers']) }} as varchar(255)) as rx_numbers,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_sources']) }} as varchar(80)) as rx_sources,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_changed']) }} as timestamp) as rx_date_changed,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_expired']) }} as timestamp) as rx_date_expired,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_transferred']) }} as timestamp) as rx_date_transferred,\n    cast({{ json_extract_scalar('_airbyte_data', ['created_at']) }} as timestamp) as created_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom \n    {{ source('raw', '_airbyte_raw_goodpill_gp_rxs_grouped') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_rxs_grouped"], "unique_id": "model.smartpill.gp_rxs_grouped", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_rxs_grouped.sql", "original_file_path": "models/analytics/intermediate_tables/gp_rxs_grouped.sql", "name": "gp_rxs_grouped", "alias": "gp_rxs_grouped", "checksum": {"name": "sha256", "checksum": "27f993ee4b30e44ec83b3d48d1ce8e64c679753d8b121dc08b34b55acd4a87e3"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_rxs_grouped"]], "description": "Grouped prescriptions registered in the database.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_rxs_grouped.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2380116, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day') as decimal(6,3)) as sig_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_keys') as varchar(255)) as rx_message_keys,\n    cast(jsonb_extract_path_text(_airbyte_data, 'max_gsn') as int) as max_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_total') as decimal(5,2)) as refills_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_total') as decimal(11,3)) as qty_total,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_next') as timestamp) as refill_date_next,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'best_rx_number') as int) as best_rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_numbers') as varchar(255)) as rx_numbers,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_sources') as varchar(80)) as rx_sources,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.gp_rxs_single": {"raw_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_number']) }} as int) as rx_number,\n    cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as patient_id_cp,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_generic']) }} as varchar(255)) as drug_generic,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_brand']) }} as varchar(255)) as drug_brand,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_name']) }} as varchar(255)) as drug_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_message_key']) }} as varchar(80)) as rx_message_key,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_message_text']) }} as varchar(255)) as rx_message_text,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_gsn']) }} as int) as rx_gsn,\n    cast({{ json_extract_scalar('_airbyte_data', ['drug_gsns']) }} as varchar(255)) as drug_gsns,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_left']) }} as decimal(5,2)) as refills_left,\n    cast({{ json_extract_scalar('_airbyte_data', ['refills_original']) }} as decimal(5,2)) as refills_original,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_left']) }} as decimal(10,3)) as qty_left,\n    cast({{ json_extract_scalar('_airbyte_data', ['qty_original']) }} as decimal(10,3)) as qty_original,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_actual']) }} as varchar(255)) as sig_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_initial']) }} as varchar(255)) as sig_initial,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_clean']) }} as varchar(255)) as sig_clean,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_qty']) }} as decimal(10,3)) as sig_qty,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v1_qty']) }} as decimal(10,3)) as sig_v1_qty,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v1_days']) }} as int) as sig_v1_days,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v1_qty_per_day']) }} as decimal(10,2)) as sig_v1_qty_per_day,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_days']) }} as int) as sig_days,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_qty_per_day_default']) }} as decimal(6,3)) as sig_qty_per_day_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_qty_per_day_actual']) }} as decimal(6,3)) as sig_qty_per_day_actual,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_durations']) }} as varchar(255)) as sig_durations,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_qtys_per_time']) }} as varchar(255)) as sig_qtys_per_time,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_frequencies']) }} as varchar(255)) as sig_frequencies,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_frequency_numerators']) }} as varchar(255)) as sig_frequency_numerators,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_frequency_denominators']) }} as varchar(255)) as sig_frequency_denominators,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_qty']) }} as decimal(10,3)) as sig_v2_qty,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_days']) }} as int) as sig_v2_days,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_qty_per_day']) }} as decimal(10,3)) as sig_v2_qty_per_day,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_unit']) }} as varchar(255)) as sig_v2_unit,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_conf_score']) }} as decimal(10,3)) as sig_v2_conf_score,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_dosages']) }} as varchar(255)) as sig_v2_dosages,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_scores']) }} as varchar(255)) as sig_v2_scores,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_frequencies']) }} as varchar(255)) as sig_v2_frequencies,\n    cast({{ json_extract_scalar('_airbyte_data', ['sig_v2_durations']) }} as varchar(255)) as sig_v2_durations,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_autofill']) }} as int) as rx_autofill,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_first']) }} as timestamp) as refill_date_first,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_last']) }} as timestamp) as refill_date_last,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_manual']) }} as timestamp) as refill_date_manual,\n    cast({{ json_extract_scalar('_airbyte_data', ['refill_date_default']) }} as timestamp) as refill_date_default,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_status']) }} as int) as rx_status,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_stage']) }} as varchar(80)) as rx_stage,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_source']) }} as varchar(80)) as rx_source,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_transfer']) }} as varchar(80)) as rx_transfer,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_transferred']) }} as timestamp) as rx_date_transferred,\n    cast({{ json_extract_scalar('_airbyte_data', ['provider_npi']) }} as varchar(80)) as provider_npi,\n    cast({{ json_extract_scalar('_airbyte_data', ['provider_first_name']) }} as varchar(80)) as provider_first_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['provider_last_name']) }} as varchar(80)) as provider_last_name,\n    cast({{ json_extract_scalar('_airbyte_data', ['provider_clinic']) }} as varchar(80)) as provider_clinic,\n    cast({{ json_extract_scalar('_airbyte_data', ['provider_phone']) }} as varchar(10)) as provider_phone,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_changed']) }} as timestamp) as rx_date_changed,\n    cast({{ json_extract_scalar('_airbyte_data', ['rx_date_expired']) }} as timestamp) as rx_date_expired,\n    cast({{ json_extract_scalar('_airbyte_data', ['created_at']) }} as timestamp) as created_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['updated_at']) }} as timestamp) as updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_updated_at']) }} as timestamp) as _ab_cdc_updated_at,\n    cast({{ json_extract_scalar('_airbyte_data', ['_ab_cdc_deleted_at']) }} as timestamp) as _ab_cdc_deleted_at\nfrom \n    {{ source('raw', '_airbyte_raw_goodpill_gp_rxs_single') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_rxs_single"], "unique_id": "model.smartpill.gp_rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_rxs_single.sql", "original_file_path": "models/analytics/intermediate_tables/gp_rxs_single.sql", "name": "gp_rxs_single", "alias": "gp_rxs_single", "checksum": {"name": "sha256", "checksum": "47c5240f4a64ae960d26f4865b6ce97bcc2e681aaac9b758882535d200f327d3"}, "tags": ["goodpill"], "refs": [], "sources": [["raw", "_airbyte_raw_goodpill_gp_rxs_single"]], "description": "Single prescriptions registered in the database.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/intermediate_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_rxs_single.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413950.2497783, "compiled_sql": "select\n    _airbyte_emitted_at,\n    _airbyte_ab_id,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_number') as int) as rx_number,\n    cast(jsonb_extract_path_text(_airbyte_data, 'patient_id_cp') as int) as patient_id_cp,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_generic') as varchar(255)) as drug_generic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_brand') as varchar(255)) as drug_brand,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_name') as varchar(255)) as drug_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_key') as varchar(80)) as rx_message_key,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_message_text') as varchar(255)) as rx_message_text,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_gsn') as int) as rx_gsn,\n    cast(jsonb_extract_path_text(_airbyte_data, 'drug_gsns') as varchar(255)) as drug_gsns,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_left') as decimal(5,2)) as refills_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refills_original') as decimal(5,2)) as refills_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_left') as decimal(10,3)) as qty_left,\n    cast(jsonb_extract_path_text(_airbyte_data, 'qty_original') as decimal(10,3)) as qty_original,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_actual') as varchar(255)) as sig_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_initial') as varchar(255)) as sig_initial,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_clean') as varchar(255)) as sig_clean,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty') as decimal(10,3)) as sig_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty') as decimal(10,3)) as sig_v1_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_days') as int) as sig_v1_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v1_qty_per_day') as decimal(10,2)) as sig_v1_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_days') as int) as sig_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_default') as decimal(6,3)) as sig_qty_per_day_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qty_per_day_actual') as decimal(6,3)) as sig_qty_per_day_actual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_durations') as varchar(255)) as sig_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_qtys_per_time') as varchar(255)) as sig_qtys_per_time,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequencies') as varchar(255)) as sig_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_numerators') as varchar(255)) as sig_frequency_numerators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_frequency_denominators') as varchar(255)) as sig_frequency_denominators,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty') as decimal(10,3)) as sig_v2_qty,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_days') as int) as sig_v2_days,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_qty_per_day') as decimal(10,3)) as sig_v2_qty_per_day,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_unit') as varchar(255)) as sig_v2_unit,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_conf_score') as decimal(10,3)) as sig_v2_conf_score,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_dosages') as varchar(255)) as sig_v2_dosages,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_scores') as varchar(255)) as sig_v2_scores,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_frequencies') as varchar(255)) as sig_v2_frequencies,\n    cast(jsonb_extract_path_text(_airbyte_data, 'sig_v2_durations') as varchar(255)) as sig_v2_durations,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_autofill') as int) as rx_autofill,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_first') as timestamp) as refill_date_first,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_last') as timestamp) as refill_date_last,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_manual') as timestamp) as refill_date_manual,\n    cast(jsonb_extract_path_text(_airbyte_data, 'refill_date_default') as timestamp) as refill_date_default,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_status') as int) as rx_status,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_stage') as varchar(80)) as rx_stage,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_source') as varchar(80)) as rx_source,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_transfer') as varchar(80)) as rx_transfer,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_transferred') as timestamp) as rx_date_transferred,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_npi') as varchar(80)) as provider_npi,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_first_name') as varchar(80)) as provider_first_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_last_name') as varchar(80)) as provider_last_name,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_clinic') as varchar(80)) as provider_clinic,\n    cast(jsonb_extract_path_text(_airbyte_data, 'provider_phone') as varchar(10)) as provider_phone,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_changed') as timestamp) as rx_date_changed,\n    cast(jsonb_extract_path_text(_airbyte_data, 'rx_date_expired') as timestamp) as rx_date_expired,\n    cast(jsonb_extract_path_text(_airbyte_data, 'created_at') as timestamp) as created_at,\n    cast(jsonb_extract_path_text(_airbyte_data, 'updated_at') as timestamp) as updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_updated_at') as timestamp) as _ab_cdc_updated_at,\n    cast(jsonb_extract_path_text(_airbyte_data, '_ab_cdc_deleted_at') as timestamp) as _ab_cdc_deleted_at\nfrom \n    \"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.goodpill_snapshot": {"raw_sql": "{{ config(\n\tindexes=[\n\t\t{'columns': ['rx_number', 'invoice_number', 'patient_id_cp'], 'unique': True}\n\t]\n) }}\n\n-- Exclude the common columns between the tables,\n--  to be called with dbt_utils.star (instead of using\n--  the * operator to select all columns).\n{% set common_columns = [\n\t\"_ab_cdc_updated_at\",\n\t\"_airbyte_ab_id\",\n\t\"_airbyte_emitted_at\",\n\t\"_airbyte_source\",\n\t\"event_date\",\n\t\"event_name\",\n\t\"unique_event_id\",\n\t\"patient_id_cp\",\n\t\"invoice_number\",\n\t\"rx_number\"\n] %}\n\n\nwith psh as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as patient_event_date,\n\t\t{{ pivot_window(\n\t\t\t'event_name',\n\t\t\tdbt_utils.get_column_values(ref('patients_status_historic'), 'event_name'),\n\t\t\tagg='max',\n\t\t\tthen_value='event_date',\n\t\t\telse_value='null',\n\t\t\tquote_identifiers=False,\n\t\t\tprefix='date_',\n\t\t\tpartition='partition by patient_id_cp'\n\t\t) }}\n\tfrom {{ ref('patients_status_historic') }}\n\t/* inner join {{ ref('goodpill_events') }} using (event_name) */\n),\n\nrh as (\n\tselect\n\t\trh.patient_id_cp,\n\t\tevent_date as rx_event_date,\n\t\trh.rx_number,\n\t\t{{ pivot_window(\n\t\t\t'rh.event_name',\n\t\t\tdbt_utils.get_column_values(ref('rxs_historic'), 'event_name'),\n\t\t\tagg='max',\n\t\t\tthen_value='rh.event_date',\n\t\t\telse_value='null',\n\t\t\tquote_identifiers=False,\n\t\t\tprefix='date_',\n\t\t\tpartition='partition by rx_number'\n\t\t) }},\n\t\t{{ star(ref('rxs_historic'), except=common_columns, prefix='rx_', relation_alias='rh') }}\n\tfrom {{ ref('rxs_historic') }} rh\n\t/* inner join {{ ref('goodpill_events') }} using (event_name) */\n\t/* where rh.event_date <= coalesce(oh.event_date, NOW()) */\n\t/* \t-- triple check this... */\n\t/* \tand oh.event_name = 'ORDER_SHIPPED' or oh.event_name = 'ORDER_RETURNED' */\n),\n\noih as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as item_event_date,\n\t\trx_number,\n\t\tinvoice_number,\n\t\t{{ pivot_window(\n\t\t\t'event_name',\n\t\t\tdbt_utils.get_column_values(ref('order_items_historic'), 'event_name'),\n\t\t\tagg='max',\n\t\t\tthen_value='event_date',\n\t\t\telse_value='null',\n\t\t\tquote_identifiers=False,\n\t\t\tprefix='date_',\n\t\t\tpartition='partition by invoice_number, rx_number'\n\t\t) }},\n\t\t{{ star(ref('order_items_historic'), except=common_columns, prefix='item_') }}\n\tfrom {{ ref('order_items_historic') }} oih\n\t/* inner join {{ ref('goodpill_events') }} using (event_name) */\n),\n\noh as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as order_event_date,\n\t\tinvoice_number,\n\t\t{{ pivot_window(\n\t\t\t'event_name',\n\t\t\tdbt_utils.get_column_values(ref('orders_historic'), 'event_name'),\n\t\t\tagg='max',\n\t\t\tthen_value='event_date',\n\t\t\telse_value='null',\n\t\t\tquote_identifiers=False,\n\t\t\tprefix='date_',\n\t\t\tpartition='partition by invoice_number'\n\t\t) }},\n\t\t{{ star(ref('orders_historic'), except=common_columns, prefix='order_') }}\n\tfrom {{ ref('orders_historic') }} oh\n\t/* inner join {{ ref('goodpill_events') }} using (event_name) */\n)\n\nselect distinct on (patient_id_cp, rx_number, invoice_number)\n\t*\nfrom psh\nleft join rh using (patient_id_cp)\nleft join oih using (rx_number, patient_id_cp)\nleft join oh using (invoice_number, patient_id_cp)\nwhere\n\tcoalesce(rh.rx_event_date, NOW()) <= coalesce(oh.order_event_date, NOW())\n\tand date_order_item_deleted is null\n\tand date_order_deleted is null\norder by\n\tpatient_id_cp,\n\trx_number,\n\tinvoice_number,\n\trx_event_date desc,\n\torder_event_date desc\n\t/* coalesce(order_event_date, item_event_date, rx_event_date, patient_event_date) desc */", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.smartpill.pivot_window", "macro.smartpill.star"], "nodes": ["model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "seed.smartpill.goodpill_events", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic", "seed.smartpill.goodpill_events", "model.smartpill.order_items_historic", "model.smartpill.order_items_historic", "model.smartpill.order_items_historic", "seed.smartpill.goodpill_events", "model.smartpill.orders_historic", "model.smartpill.orders_historic", "model.smartpill.orders_historic", "seed.smartpill.goodpill_events"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill", "backfill"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "indexes": [{"columns": ["rx_number", "invoice_number", "patient_id_cp"], "unique": true}], "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "analytics", "snapshot_tables", "goodpill_snapshot"], "unique_id": "model.smartpill.goodpill_snapshot", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/snapshot_tables/goodpill_snapshot.sql", "original_file_path": "models/analytics/snapshot_tables/goodpill_snapshot.sql", "name": "goodpill_snapshot", "alias": "goodpill_snapshot", "checksum": {"name": "sha256", "checksum": "dfa4f13916160d283e5b956a951025e91ef1e30c3e4233fbb79edb11b46e1015"}, "tags": ["goodpill", "backfill"], "refs": [["patients_status_historic"], ["patients_status_historic"], ["goodpill_events"], ["rxs_historic"], ["rxs_historic"], ["rxs_historic"], ["goodpill_events"], ["order_items_historic"], ["order_items_historic"], ["order_items_historic"], ["goodpill_events"], ["orders_historic"], ["orders_historic"], ["orders_historic"], ["goodpill_events"]], "sources": [], "description": "General snapshot tables. It joins the previous historic tables and generates a single row per patient/prescription/order. Events are pivoted to column dates, indicating the date of each event.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/analytics/snapshot_tables/models.yml", "compiled_path": "target/compiled/smartpill/models/analytics/snapshot_tables/goodpill_snapshot.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "analytics", "indexes": [{"columns": ["rx_number", "invoice_number", "patient_id_cp"], "unique": true}]}, "created_at": 1644413950.4612038, "compiled_sql": "\n\n-- Exclude the common columns between the tables,\n--  to be called with dbt_utils.star (instead of using\n--  the * operator to select all columns).\n\n\n\nwith psh as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as patient_event_date,\n\t\t\n  \n    max(\n      \n      case\n      when event_name = 'PATIENT_ADDED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by patient_id_cp)\n\t\n    \n      \n        as date_patient_added\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'PATIENT_REGISTERED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by patient_id_cp)\n\t\n    \n      \n        as date_patient_registered\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'PATIENT_INACTIVE'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by patient_id_cp)\n\t\n    \n      \n        as date_patient_inactive\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'PATIENT_DECEASED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by patient_id_cp)\n\t\n    \n      \n        as date_patient_deceased\n      \n    \n    \n  \n\n\tfrom \"datawarehouse\".analytics.\"patients_status_historic\"\n\t/* inner join \"datawarehouse\".analytics.\"goodpill_events\" using (event_name) */\n),\n\nrh as (\n\tselect\n\t\trh.patient_id_cp,\n\t\tevent_date as rx_event_date,\n\t\trh.rx_number,\n\t\t\n  \n    max(\n      \n      case\n      when rh.event_name = 'RX_UPDATED'\n        then rh.event_date\n      else null\n      end\n    )\n\t\n      over(partition by rx_number)\n\t\n    \n      \n        as date_rx_updated\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when rh.event_name = 'RX_WRITTEN'\n        then rh.event_date\n      else null\n      end\n    )\n\t\n      over(partition by rx_number)\n\t\n    \n      \n        as date_rx_written\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when rh.event_name = 'RX_TRANSFERRED'\n        then rh.event_date\n      else null\n      end\n    )\n\t\n      over(partition by rx_number)\n\t\n    \n      \n        as date_rx_transferred\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when rh.event_name = 'RX_ADDED'\n        then rh.event_date\n      else null\n      end\n    )\n\t\n      over(partition by rx_number)\n\t\n    \n      \n        as date_rx_added\n      \n    \n    \n  \n,\n\t\trh.\"drug_generic\" as \"rx_drug_generic\",\n  rh.\"clinic_name\" as \"rx_clinic_name\",\n  rh.\"provider_npi\" as \"rx_provider_npi\",\n  rh.\"is_refill\" as \"rx_is_refill\",\n  rh.\"rx_autofill\" as \"rx_autofill\",\n  rh.\"sig_qty_per_day\" as \"rx_sig_qty_per_day\",\n  rh.\"rx_message_key\" as \"rx_message_key\",\n  rh.\"max_gsn\" as \"rx_max_gsn\",\n  rh.\"drug_gsns\" as \"rx_drug_gsns\",\n  rh.\"refills_total\" as \"rx_refills_total\",\n  rh.\"refills_original\" as \"rx_refills_original\",\n  rh.\"refills_left\" as \"rx_refills_left\",\n  rh.\"refill_date_first\" as \"rx_refill_date_first\",\n  rh.\"refill_date_last\" as \"rx_refill_date_last\",\n  rh.\"rx_date_expired\" as \"rx_date_expired\",\n  rh.\"rx_date_changed\" as \"rx_date_changed\",\n  rh.\"qty_left\" as \"rx_qty_left\",\n  rh.\"qty_original\" as \"rx_qty_original\",\n  rh.\"sig_actual\" as \"rx_sig_actual\",\n  rh.\"sig_initial\" as \"rx_sig_initial\",\n  rh.\"sig_clean\" as \"rx_sig_clean\",\n  rh.\"sig_qty\" as \"rx_sig_qty\",\n  rh.\"sig_days\" as \"rx_sig_days\",\n  rh.\"sig_qty_per_day_actual\" as \"rx_sig_qty_per_day_actual\",\n  rh.\"sig_v2_qty\" as \"rx_sig_v2_qty\",\n  rh.\"sig_v2_days\" as \"rx_sig_v2_days\",\n  rh.\"sig_v2_qty_per_day\" as \"rx_sig_v2_qty_per_day\",\n  rh.\"sig_v2_unit\" as \"rx_sig_v2_unit\",\n  rh.\"sig_v2_conf_score\" as \"rx_sig_v2_conf_score\",\n  rh.\"sig_v2_dosages\" as \"rx_sig_v2_dosages\",\n  rh.\"sig_v2_scores\" as \"rx_sig_v2_scores\",\n  rh.\"sig_v2_frequencies\" as \"rx_sig_v2_frequencies\",\n  rh.\"sig_v2_durations\" as \"rx_sig_v2_durations\",\n  rh.\"refill_date_next\" as \"rx_refill_date_next\",\n  rh.\"refill_date_manual\" as \"rx_refill_date_manual\",\n  rh.\"refill_date_default\" as \"rx_refill_date_default\",\n  rh.\"qty_total\" as \"rx_qty_total\",\n  rh.\"rx_source\" as \"rx_source\",\n  rh.\"rx_transfer\" as \"rx_transfer\"\n\tfrom \"datawarehouse\".analytics.\"rxs_historic\" rh\n\t/* inner join \"datawarehouse\".analytics.\"goodpill_events\" using (event_name) */\n\t/* where rh.event_date <= coalesce(oh.event_date, NOW()) */\n\t/* \t-- triple check this... */\n\t/* \tand oh.event_name = 'ORDER_SHIPPED' or oh.event_name = 'ORDER_RETURNED' */\n),\n\noih as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as item_event_date,\n\t\trx_number,\n\t\tinvoice_number,\n\t\t\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_ITEM_ADDED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number, rx_number)\n\t\n    \n      \n        as date_order_item_added\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_ITEM_UPDATED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number, rx_number)\n\t\n    \n      \n        as date_order_item_updated\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_ITEM_DELETED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number, rx_number)\n\t\n    \n      \n        as date_order_item_deleted\n      \n    \n    \n  \n,\n\t\t\"groups\" as \"item_groups\",\n  \"rx_dispensed_id\" as \"item_rx_dispensed_id\",\n  \"stock_level_initial\" as \"item_stock_level_initial\",\n  \"rx_message_keys_initial\" as \"item_rx_message_keys_initial\",\n  \"patient_autofill_initial\" as \"item_patient_autofill_initial\",\n  \"rx_autofill_initial\" as \"item_rx_autofill_initial\",\n  \"rx_numbers_initial\" as \"item_rx_numbers_initial\",\n  \"zscore_initial\" as \"item_zscore_initial\",\n  \"refills_dispensed_default\" as \"item_refills_dispensed_default\",\n  \"refills_dispensed_actual\" as \"item_refills_dispensed_actual\",\n  \"days_dispensed_default\" as \"item_days_dispensed_default\",\n  \"days_dispensed_actual\" as \"item_days_dispensed_actual\",\n  \"qty_dispensed_default\" as \"item_qty_dispensed_default\",\n  \"qty_dispensed_actual\" as \"item_qty_dispensed_actual\",\n  \"price_dispensed_default\" as \"item_price_dispensed_default\",\n  \"price_dispensed_actual\" as \"item_price_dispensed_actual\",\n  \"qty_pended_total\" as \"item_qty_pended_total\",\n  \"qty_pended_repacks\" as \"item_qty_pended_repacks\",\n  \"count_pended_total\" as \"item_count_pended_total\",\n  \"count_pended_repacks\" as \"item_count_pended_repacks\",\n  \"item_message_keys\" as \"item_message_keys\",\n  \"item_message_text\" as \"item_message_text\",\n  \"item_type\" as \"item_type\",\n  \"item_added_by\" as \"item_added_by\",\n  \"item_date_added\" as \"item_date_added\",\n  \"refill_date_last\" as \"item_refill_date_last\",\n  \"refill_date_manual\" as \"item_refill_date_manual\",\n  \"refill_date_default\" as \"item_refill_date_default\",\n  \"refill_target_date\" as \"item_refill_target_date\",\n  \"refill_target_days\" as \"item_refill_target_days\",\n  \"refill_target_rxs\" as \"item_refill_target_rxs\"\n\tfrom \"datawarehouse\".analytics.\"order_items_historic\" oih\n\t/* inner join \"datawarehouse\".analytics.\"goodpill_events\" using (event_name) */\n),\n\noh as (\n\tselect\n\t\tpatient_id_cp,\n\t\tevent_date as order_event_date,\n\t\tinvoice_number,\n\t\t\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_ADDED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number)\n\t\n    \n      \n        as date_order_added\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_DISPENSED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number)\n\t\n    \n      \n        as date_order_dispensed\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_SHIPPED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number)\n\t\n    \n      \n        as date_order_shipped\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_DELETED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number)\n\t\n    \n      \n        as date_order_deleted\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when event_name = 'ORDER_RETURNED'\n        then event_date\n      else null\n      end\n    )\n\t\n      over(partition by invoice_number)\n\t\n    \n      \n        as date_order_returned\n      \n    \n    \n  \n,\n\t\t\"count_items\" as \"order_count_items\",\n  \"count_filled\" as \"order_count_filled\",\n  \"count_nofill\" as \"order_count_nofill\",\n  \"order_source\" as \"order_source\",\n  \"order_stage_cp\" as \"order_stage_cp\",\n  \"order_status\" as \"order_status\",\n  \"invoice_doc_id\" as \"order_invoice_doc_id\",\n  \"tracking_number\" as \"order_tracking_number\",\n  \"payment_total_default\" as \"order_payment_total_default\",\n  \"payment_total_actual\" as \"order_payment_total_actual\",\n  \"payment_fee_default\" as \"order_payment_fee_default\",\n  \"payment_fee_actual\" as \"order_payment_fee_actual\",\n  \"payment_due_default\" as \"order_payment_due_default\",\n  \"payment_due_actual\" as \"order_payment_due_actual\",\n  \"payment_date_autopay\" as \"order_payment_date_autopay\",\n  \"payment_method_actual\" as \"order_payment_method_actual\",\n  \"coupon_lines\" as \"order_coupon_lines\",\n  \"order_note\" as \"order_note\",\n  \"rph_check\" as \"order_rph_check\",\n  \"tech_fill\" as \"order_tech_fill\",\n  \"location_id\" as \"order_location_id\"\n\tfrom \"datawarehouse\".analytics.\"orders_historic\" oh\n\t/* inner join \"datawarehouse\".analytics.\"goodpill_events\" using (event_name) */\n)\n\nselect distinct on (patient_id_cp, rx_number, invoice_number)\n\t*\nfrom psh\nleft join rh using (patient_id_cp)\nleft join oih using (rx_number, patient_id_cp)\nleft join oh using (invoice_number, patient_id_cp)\nwhere\n\tcoalesce(rh.rx_event_date, NOW()) <= coalesce(oh.order_event_date, NOW())\n\tand date_order_item_deleted is null\n\tand date_order_deleted is null\norder by\n\tpatient_id_cp,\n\trx_number,\n\tinvoice_number,\n\trx_event_date desc,\n\torder_event_date desc\n\t/* coalesce(order_event_date, item_event_date, rx_event_date, patient_event_date) desc */", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"goodpill_snapshot\""}, "model.smartpill.quickbook_general_ledger_abt": {"raw_sql": "select\n    qgl.running_balance,\n    qgl.adjusted_amount,\n    qgl.account_transaction_type,\n    qgl.transaction_id,\n    qgl.transaction_index,\n    qgl.transaction_date,\n    qgl.amount,\n    qgl.account_id,\n    qgl.account_classification,\n    qgl.transaction_type,\n    qgl.transaction_source,\n    qgl.currency_name,\n    qgl.class_id,\n    qgl.customer_id,\n    qgl.financial_statement_helper,\n    qcl.fully_qualified_name as class_fully_qualified_name,\n    qcl.name as class_name,\n    qa.name as account_name,\n    qa.fully_qualified_name as account_fully_qualified_name,\n    qa.account_type as account_type,\n    qa.account_number as account_number,\n    qa.top_level_id as top_level_account_id,\n    qa.parent_account_id as parent_account_id,\n    qap.name as top_level_account_name,\n    qap.account_type as top_level_account_type,\n    qap.account_number as top_level_account_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom\n    {{ ref('quickbook_general_ledger') }} qgl\nleft join ({{ unique_select(ref('quickbook_classes')) }}) qcl on (qcl.id = qgl.class_id)\nleft join {{ ref('quickbook_accounts_top_level') }} qa on (qa.id = qgl.account_id)\nleft join {{ ref('quickbook_accounts_top_level') }} qap on (qap.id = qa.top_level_id)\nleft join ({{ unique_select(ref('quickbook_customers')) }}) qcu on (qcu.id = qgl.customer_id)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_general_ledger", "model.smartpill.quickbook_classes", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_general_ledger_abt"], "unique_id": "model.smartpill.quickbook_general_ledger_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "name": "quickbook_general_ledger_abt", "alias": "quickbook_general_ledger_abt", "checksum": {"name": "sha256", "checksum": "1baba0376362f33b05d86f613ab98d4d0f9a2a36ab3b1acfc5dbbda3cf83b55e"}, "tags": [], "refs": [["quickbook_general_ledger"], ["quickbook_classes"], ["quickbook_accounts_top_level"], ["quickbook_accounts_top_level"], ["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1644413941.7523165, "compiled_sql": "select\n    qgl.running_balance,\n    qgl.adjusted_amount,\n    qgl.account_transaction_type,\n    qgl.transaction_id,\n    qgl.transaction_index,\n    qgl.transaction_date,\n    qgl.amount,\n    qgl.account_id,\n    qgl.account_classification,\n    qgl.transaction_type,\n    qgl.transaction_source,\n    qgl.currency_name,\n    qgl.class_id,\n    qgl.customer_id,\n    qgl.financial_statement_helper,\n    qcl.fully_qualified_name as class_fully_qualified_name,\n    qcl.name as class_name,\n    qa.name as account_name,\n    qa.fully_qualified_name as account_fully_qualified_name,\n    qa.account_type as account_type,\n    qa.account_number as account_number,\n    qa.top_level_id as top_level_account_id,\n    qa.parent_account_id as parent_account_id,\n    qap.name as top_level_account_name,\n    qap.account_type as top_level_account_type,\n    qap.account_number as top_level_account_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom\n    \"datawarehouse\".analytics.\"quickbook_general_ledger\" qgl\nleft join (select * from \"datawarehouse\".analytics.\"quickbook_classes\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_classes\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )) qcl on (qcl.id = qgl.class_id)\nleft join \"datawarehouse\".analytics.\"quickbook_accounts_top_level\" qa on (qa.id = qgl.account_id)\nleft join \"datawarehouse\".analytics.\"quickbook_accounts_top_level\" qap on (qap.id = qa.top_level_id)\nleft join (select * from \"datawarehouse\".analytics.\"quickbook_customers\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_customers\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )) qcu on (qcu.id = qgl.customer_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_general_ledger_abt\""}, "model.smartpill.quickbook_accounts_top_level": {"raw_sql": "with recursive accounts as (\n    {{ unique_select(ref('quickbook_accounts')) }}\n),\ntree as (\n    select id, \n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_accounts_top_level"], "unique_id": "model.smartpill.quickbook_accounts_top_level", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "name": "quickbook_accounts_top_level", "alias": "quickbook_accounts_top_level", "checksum": {"name": "sha256", "checksum": "fc966b03fd52a55dcbd8ae43f89dc36f757cdf6c116c62b109ca8920252b2efd"}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1644413941.9525638, "compiled_sql": "with recursive accounts as (\n    select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\ntree as (\n    select id, \n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_accounts_top_level\""}, "model.smartpill.quickbook_general_ledger": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n\nwith gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from {{ref('int_quickbooks__purchase_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__deposit_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__journal_entry_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__invoice_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__payroll_check_double_entry')}}\n),\n\naccounts as (\n    select *\n    from {{ref('int_quickbooks__account_classifications')}}\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.amount,\n        gl_union.account_id,\n        -- accounts.name as account_name,\n        -- accounts.is_sub_account,\n        -- accounts.account_type,\n        -- accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        -- accounts.balance as account_current_balance,\n        accounts.classification as account_classification, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.currency_name,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.id\n),\n\nfinal as (\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.smartpill.int_quickbooks__purchase_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__payroll_check_double_entry", "model.smartpill.int_quickbooks__account_classifications"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger"], "unique_id": "model.smartpill.quickbook_general_ledger", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger.sql", "name": "quickbook_general_ledger", "alias": "quickbook_general_ledger", "checksum": {"name": "sha256", "checksum": "1403bcdc7e9e7940b69dfb3583e307c86cfa9a298dfb6a8d67b4c6e8465828ff"}, "tags": ["top-level"], "refs": [["int_quickbooks__purchase_double_entry"], ["int_quickbooks__deposit_double_entry"], ["int_quickbooks__journal_entry_double_entry"], ["int_quickbooks__payment_double_entry"], ["int_quickbooks__bill_double_entry"], ["int_quickbooks__invoice_double_entry"], ["int_quickbooks__bill_payment_double_entry"], ["int_quickbooks__payroll_check_double_entry"], ["int_quickbooks__account_classifications"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/analytics_tables/quickbook_general_ledger.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413942.0446725, "compiled_sql": "\n\nwith  __dbt__cte__int_quickbooks__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select * from \"datawarehouse\".analytics.\"quickbook_purchases\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_purchases\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select * from \"datawarehouse\".analytics.\"quickbook_deposits\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_deposits\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__payment_double_entry as (\nwith payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from \"datawarehouse\".analytics.\"quickbook_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bills\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bills\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_bills_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select * from \"datawarehouse\".analytics.\"quickbook_invoices\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_invoices\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_invoices_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final\n),  __dbt__cte__int_quickbooks__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from \"datawarehouse\".raw.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final\n),  __dbt__cte__int_quickbooks__account_classifications as (\nwith accounts as (\n    select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\n),gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from __dbt__cte__int_quickbooks__purchase_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__deposit_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__journal_entry_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__bill_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__invoice_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__bill_payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__cte__int_quickbooks__payroll_check_double_entry\n),\n\naccounts as (\n    select *\n    from __dbt__cte__int_quickbooks__account_classifications\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.amount,\n        gl_union.account_id,\n        -- accounts.name as account_name,\n        -- accounts.is_sub_account,\n        -- accounts.account_type,\n        -- accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        -- accounts.balance as account_current_balance,\n        accounts.classification as account_classification, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.currency_name,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.id\n),\n\nfinal as (\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.int_quickbooks__purchase_double_entry", "sql": " __dbt__cte__int_quickbooks__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select * from \"datawarehouse\".analytics.\"quickbook_purchases\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_purchases\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__deposit_double_entry", "sql": " __dbt__cte__int_quickbooks__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select * from \"datawarehouse\".analytics.\"quickbook_deposits\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_deposits\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__journal_entry_double_entry", "sql": " __dbt__cte__int_quickbooks__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__payment_double_entry", "sql": " __dbt__cte__int_quickbooks__payment_double_entry as (\nwith payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from \"datawarehouse\".analytics.\"quickbook_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__bill_double_entry", "sql": " __dbt__cte__int_quickbooks__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bills\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bills\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_bills_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__invoice_double_entry", "sql": " __dbt__cte__int_quickbooks__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select * from \"datawarehouse\".analytics.\"quickbook_invoices\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_invoices\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_invoices_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__bill_payment_double_entry", "sql": " __dbt__cte__int_quickbooks__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__payroll_check_double_entry", "sql": " __dbt__cte__int_quickbooks__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from \"datawarehouse\".raw.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__account_classifications", "sql": " __dbt__cte__int_quickbooks__account_classifications as (\nwith accounts as (\n    select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\n)"}], "relation_name": "\"datawarehouse\".analytics.\"quickbook_general_ledger\""}, "model.smartpill.quickbook_accounts": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) is_active,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} name,\n        {{ json_extract_scalar('_airbyte_data', ['AcctNum']) }} as account_number,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubAccount']) }} as {{ dbt_utils.type_int() }}) as is_sub_account,\n        {{ json_extract_scalar('_airbyte_data', ['ParentRef', 'value']) }} as parent_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['AccountType']) }} account_type,\n        {{ json_extract_scalar('_airbyte_data', ['AccountSubType']) }} account_sub_type,\n        {{ json_extract_scalar('_airbyte_data', ['Classification']) }} classification,\n        cast({{ json_extract_scalar('_airbyte_data', ['CurrentBalance']) }} as {{ dbt_utils.type_numeric() }}) balance,\n        cast({{ json_extract_scalar('_airbyte_data', ['CurrentBalanceWithSubAccounts']) }} as {{ dbt_utils.type_numeric() }}) balance_with_sub_accounts,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['Description']) }} description\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_accounts') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_accounts"], "unique_id": "model.smartpill.quickbook_accounts", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_accounts.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_accounts.sql", "name": "quickbook_accounts", "alias": "quickbook_accounts", "checksum": {"name": "sha256", "checksum": "6901fd8bde667e0dc721d9a500fbe10313b6283c50aefe999b6fb105f219f272"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_accounts"]], "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.\n", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "Refresh timestamp for the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_accounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.6391788, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as \n    signed\n ) is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') name,\n        jsonb_extract_path_text(_airbyte_data, 'AcctNum') as account_number,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubAccount') as \n    signed\n) as is_sub_account,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'AccountType') account_type,\n        jsonb_extract_path_text(_airbyte_data, 'AccountSubType') account_sub_type,\n        jsonb_extract_path_text(_airbyte_data, 'Classification') classification,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalance') as \n    numeric(28, 6)\n) balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'CurrentBalanceWithSubAccounts') as \n    numeric(28, 6)\n) balance_with_sub_accounts,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'Description') description\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_accounts\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_accounts\""}, "model.smartpill.quickbook_bill_payments": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['CheckPayment', 'BankAccountRef', 'value']) }} as check_bank_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CheckPayment', 'PrintStatus']) }} as check_print_status,\n        {{ json_extract_scalar('_airbyte_data', ['CreditCardPayment', 'CCAccountRef', 'value']) }} as credit_card_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['PayType']) }} as pay_type,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_bill_payments') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bill_payments"], "unique_id": "model.smartpill.quickbook_bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bill_payments.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bill_payments.sql", "name": "quickbook_bill_payments", "alias": "quickbook_bill_payments", "checksum": {"name": "sha256", "checksum": "add1cb4ea8e16740dc3267b4188bc4a1233a6c7c88166e0e52ca3e303631c5c0"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_bill_payments"]], "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bill_payments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.6505067, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','BankAccountRef','value') as check_bank_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CheckPayment','PrintStatus') as check_print_status,\n        jsonb_extract_path_text(_airbyte_data, 'CreditCardPayment','CCAccountRef','value') as credit_card_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'PayType') as pay_type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_bill_payments\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_bill_payments\""}, "model.smartpill.quickbook_bill_payments_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_bill_payments', 'quickbook_bill_payments', 'line') }},\nbill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        id as bill_payment_id,\n        json_value({{unnested_column_value('line')}}, '$.\"LinkedTxn\"[0].\"TxnId\"') as transaction_id,\n        json_value({{unnested_column_value('line')}}, '$.\"LinkedTxn\"[0]\".\"TxnType\"') as transaction_type,\n        cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\n    from {{ ref('quickbook_bill_payments') }}\n    {{ cross_join_unnest('quickbook_bill_payments', 'line') }}\n    where \n        line is not null\n        and {{ incremental_filter_line(ref('quickbook_bill_payments'))}}\n)\nselect\n    *,\n    if(transaction_type = 'Bill', transaction_id, null) as bill_id,\n    if(transaction_type = 'Deposit', transaction_id, null) as deposit_id,\n    if(transaction_type = 'JournalEntry', transaction_id, null) as journal_entry_id,\n    if(transaction_type = 'Expense', transaction_id, null) as expense_id\nfrom bill_payment", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bill_payments_lines"], "unique_id": "model.smartpill.quickbook_bill_payments_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bill_payments_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bill_payments_lines.sql", "name": "quickbook_bill_payments_lines", "alias": "quickbook_bill_payments_lines", "checksum": {"name": "sha256", "checksum": "42c63df133b12729eb26803b328d699bb56522b9cf19b337aebf99d72a48d4c2"}, "tags": ["top-level"], "refs": [["quickbook_bill_payments"], ["quickbook_bill_payments"]], "sources": [], "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "Entity identifier of the parent bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_payment_hash_id": {"name": "_bill_payment_hash_id", "description": "Unique identifier for the parent bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Unique identifier of the transaction record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type of transaction associated to the bill payment line (Bill/Deposit/JournalEntry/Expense)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the deposit record associated with the expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bill_payments_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.659089, "compiled_sql": "\n,\nbill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        id as bill_payment_id,\n        json_value(line, '$.\"LinkedTxn\"[0].\"TxnId\"') as transaction_id,\n        json_value(line, '$.\"LinkedTxn\"[0]\".\"TxnType\"') as transaction_type,\n        cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n    \n    where \n        line is not null\n        and \n    true\n\n)\nselect\n    *,\n    if(transaction_type = 'Bill', transaction_id, null) as bill_id,\n    if(transaction_type = 'Deposit', transaction_id, null) as deposit_id,\n    if(transaction_type = 'JournalEntry', transaction_id, null) as journal_entry_id,\n    if(transaction_type = 'Expense', transaction_id, null) as expense_id\nfrom bill_payment", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_bill_payments_lines\""}, "model.smartpill.quickbook_bills": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balance,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['DueDate'])) }} as due_date,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['APAccountRef', 'value']) }} as payable_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['PrivateNote']) }} as private_note,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_bills') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bills"], "unique_id": "model.smartpill.quickbook_bills", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bills.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bills.sql", "name": "quickbook_bills", "alias": "quickbook_bills", "checksum": {"name": "sha256", "checksum": "8878f6781b1e5f9391a3882b343feafc1fc116f1c0c9fc2a90810fdc0eee0cae"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_bills"]], "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bills.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.7416966, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as \n    numeric(28, 6)\n) as balance,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'DueDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as due_date,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'APAccountRef','value') as payable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_bills\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_bills\""}, "model.smartpill.quickbook_bills_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_bills', 'quickbook_bills', 'line') }}\nselect\n    _hash_id as _bill_hash_id,\n    id as bill_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'AccountRef', 'value']) }} as account_expense_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'ClassRef', 'value']) }} as account_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as account_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'BillableStatus']) }} as account_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ClassRef', 'value']) }} as item_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as item_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'BillableStatus']) }} as item_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ItemRef', 'value']) }} as item_expense_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\nfrom {{ ref('quickbook_bills') }}\n{{ cross_join_unnest('quickbook_bills', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_bills'))}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bills_lines"], "unique_id": "model.smartpill.quickbook_bills_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bills_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bills_lines.sql", "name": "quickbook_bills_lines", "alias": "quickbook_bills_lines", "checksum": {"name": "sha256", "checksum": "316451e10b93449aa85026453db8d6300b6537d24938a4893b5b252f8202adce"}, "tags": ["top-level"], "refs": [["quickbook_bills"], ["quickbook_bills"]], "sources": [], "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Entity identifier of the parent bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_hash_id": {"name": "_bill_hash_id", "description": "Unique identifier for the parent bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_class_status": {"name": "item_expense_class_status", "description": "The class reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bills_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.8304217, "compiled_sql": "\n\nselect\n    _hash_id as _bill_hash_id,\n    id as bill_id,\n    jsonb_extract_path_text(line, 'Id') as id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','BillableStatus') as account_expense_billable_status,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','ClassRef','value') as item_expense_class_id,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','CustomerRef','value') as item_expense_customer_id,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(line, 'Description') as description,\n    cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\n\nwhere\n    line is not null\n    and \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_bills_lines\""}, "model.smartpill.quickbook_classes": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} as name,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubClass']) }} as {{ dbt_utils.type_int() }} ) as is_subclass\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_classes') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_classes"], "unique_id": "model.smartpill.quickbook_classes", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_classes.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_classes.sql", "name": "quickbook_classes", "alias": "quickbook_classes", "checksum": {"name": "sha256", "checksum": "af7e881c4f31bea8c4847659e114d7daa52c608241dad90124d5d9a57803c2be"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_classes"]], "description": "Table containing classes of incomes and expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_class (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_classes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.95178, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as \n    signed\n ) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubClass') as \n    signed\n ) as is_subclass\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_classes\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_classes\""}, "model.smartpill.quickbook_customers": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balance,\n        cast({{ json_extract_scalar('_airbyte_data', ['BalanceWithJobs']) }} as {{ dbt_utils.type_numeric() }}) as balance_with_jobs,\n        cast({{ json_extract_scalar('_airbyte_data', ['BillWithParent']) }} as {{ dbt_utils.type_int() }} ) as bill_with_parent,\n        {{ json_extract_scalar('_airbyte_data', ['CompanyName']) }} as company_name,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['DisplayName']) }} as display_name,\n        {{ json_extract_scalar('_airbyte_data', ['WebAddr', 'URI']) }} as website,\n        cast({{ json_extract_scalar('_airbyte_data', ['Taxable']) }} as {{ dbt_utils.type_numeric() }}) as taxable\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_customers') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_customers"], "unique_id": "model.smartpill.quickbook_customers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_customers.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_customers.sql", "name": "quickbook_customers", "alias": "quickbook_customers", "checksum": {"name": "sha256", "checksum": "d66d2342062d55fb58b2c8d66781e851bb1c0e997883defe277714722a67fc2b"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_customers"]], "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website url associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413950.8521776, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as \n    signed\n ) as is_active,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as \n    numeric(28, 6)\n) as balance,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BalanceWithJobs') as \n    numeric(28, 6)\n) as balance_with_jobs,\n        cast(jsonb_extract_path_text(_airbyte_data, 'BillWithParent') as \n    signed\n ) as bill_with_parent,\n        jsonb_extract_path_text(_airbyte_data, 'CompanyName') as company_name,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'DisplayName') as display_name,\n        jsonb_extract_path_text(_airbyte_data, 'WebAddr','URI') as website,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as \n    numeric(28, 6)\n) as taxable\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_customers\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_customers\""}, "model.smartpill.quickbook_deposits": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as account_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_deposits') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter()}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_deposits"], "unique_id": "model.smartpill.quickbook_deposits", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_deposits.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_deposits.sql", "name": "quickbook_deposits", "alias": "quickbook_deposits", "checksum": {"name": "sha256", "checksum": "55716e403ff20ba9b2f80d41601de5208b42263c2583e0bc74dfed395c1ea44e"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_deposits"]], "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_deposits.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.0554438, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_deposits\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_deposits\""}, "model.smartpill.quickbook_deposits_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_deposits', 'quickbook_deposits', 'line') }}\nselect\n    _hash_id as _deposit_hash_id,\n    id as deposit_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'AccountRef', 'value']) }} as account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'ClassRef', 'value']) }} as class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'CustomerRef', 'value']) }} as customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['LineNum']) }} as line_num\nfrom {{ ref('quickbook_deposits') }}\n    {{ cross_join_unnest('quickbook_deposits', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_deposits'))}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_deposits_lines"], "unique_id": "model.smartpill.quickbook_deposits_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_deposits_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_deposits_lines.sql", "name": "quickbook_deposits_lines", "alias": "quickbook_deposits_lines", "checksum": {"name": "sha256", "checksum": "dfc9decd07559d5b3d1baf3354a3ef7f848c67f9e7dfbe70df3acc68b9d99117"}, "tags": ["top-level"], "refs": [["quickbook_deposits"], ["quickbook_deposits"]], "sources": [], "description": "Table containing individual line items comprising the deposit.", "columns": {"id": {"name": "id", "description": "Identifier of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_num": {"name": "line_num", "description": "Line number given for the deposit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_deposit_hash_id": {"name": "_deposit_hash_id", "description": "Unique identifier for the parent deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_deposits_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.0410876, "compiled_sql": "\n\nselect\n    _hash_id as _deposit_hash_id,\n    id as deposit_id,\n    jsonb_extract_path_text(line, 'Id') as id,\n    cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount,\n    jsonb_extract_path_text(line, 'DepositLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(line, 'DepositLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(line, 'DepositLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(line, 'LineNum') as line_num\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\n    \nwhere\n    line is not null\n    and \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_deposits_lines\""}, "model.smartpill.quickbook_invoices": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CustomerRef', 'value']) }} as customer_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balace,\n        {{ json_extract_scalar('_airbyte_data', ['DocNumber']) }} as doc_number,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['DueDate'])) }} as due_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_invoices') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_invoices"], "unique_id": "model.smartpill.quickbook_invoices", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_invoices.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_invoices.sql", "name": "quickbook_invoices", "alias": "quickbook_invoices", "checksum": {"name": "sha256", "checksum": "692dc5d10c39011f58570a5475f950f496c90500e6d8451ff084ec43e9722fe7"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_invoices"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413945.248723, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Balance') as \n    numeric(28, 6)\n) as balace,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'DueDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as due_date,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_invoices\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_invoices\""}, "model.smartpill.quickbook_invoices_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_invoices', 'quickbook_invoices', 'line') }}\nselect\n    _hash_id as _invoice_hash_id,\n    id as invoice_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ItemAccountRef', 'value']) }} as sales_item_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ItemRef', 'value']) }} as sales_item_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ClassRef', 'value']) }} as sales_item_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'Qty']) }} as sales_item_quantity,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'UnitPrice']) }} as sales_item_unit_price,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    {{ json_extract_scalar(unnested_column_value('line'), ['LineNum']) }} as line_num\nfrom {{ ref('quickbook_invoices') }}\n{{ cross_join_unnest('quickbook_invoices', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_invoices'))}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_invoices_lines"], "unique_id": "model.smartpill.quickbook_invoices_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_invoices_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_invoices_lines.sql", "name": "quickbook_invoices_lines", "alias": "quickbook_invoices_lines", "checksum": {"name": "sha256", "checksum": "c94b66ab2b867e1284fd9b21132381a268961a94e5c8198f2c84c8097d4d5999"}, "tags": ["top-level"], "refs": [["quickbook_invoices"], ["quickbook_invoices"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_invoices_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413945.550615, "compiled_sql": "\n\nselect\n    _hash_id as _invoice_hash_id,\n    id as invoice_id,\n    jsonb_extract_path_text(line, 'Id') as id,\n    cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount,\n    jsonb_extract_path_text(line, 'SalesItemLineDetail','ItemAccountRef','value') as sales_item_account_id,\n    jsonb_extract_path_text(line, 'SalesItemLineDetail','ItemRef','value') as sales_item_item_id,\n    jsonb_extract_path_text(line, 'SalesItemLineDetail','ClassRef','value') as sales_item_class_id,\n    jsonb_extract_path_text(line, 'SalesItemLineDetail','Qty') as sales_item_quantity,\n    jsonb_extract_path_text(line, 'SalesItemLineDetail','UnitPrice') as sales_item_unit_price,\n    jsonb_extract_path_text(line, 'Description') as description,\n    jsonb_extract_path_text(line, 'LineNum') as line_num\nfrom \"datawarehouse\".analytics.\"quickbook_invoices\"\n\nwhere\n    line is not null\n    and \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_invoices_lines\""}, "model.smartpill.quickbook_items": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        {{ json_extract_scalar('_airbyte_data', ['AssetAccountRef', 'value']) }} as asset_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['ExpenseAccountRef', 'value']) }} as expense_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['Description']) }} as description,\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        {{ json_extract_scalar('_airbyte_data', ['IncomeAccountRef', 'value']) }} as income_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} as name,\n        {{ json_extract_scalar('_airbyte_data', ['ParentRef', 'value']) }} as parent_item_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['PurchaseCost']) }} as {{ dbt_utils.type_numeric() }}) as purchase_cost,\n        {{ json_extract_scalar('_airbyte_data', ['PurchaseDesc']) }} as purchase_description,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubItem']) }} as {{ dbt_utils.type_int() }} ) as sub_item,\n        cast({{ json_extract_scalar('_airbyte_data', ['Taxable']) }} as {{ dbt_utils.type_int() }} ) as taxable,\n        cast({{ json_extract_scalar('_airbyte_data', ['TrackQtyOnHand']) }} as {{ dbt_utils.type_int() }} ) as track_quantity_on_hand,\n        {{ json_extract_scalar('_airbyte_data', ['Type']) }} as type,\n        cast({{ json_extract_scalar('_airbyte_data', ['UnitPrice']) }} as {{ dbt_utils.type_int() }} ) as unit_price\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_items') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_items"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_items"], "unique_id": "model.smartpill.quickbook_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_items.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_items.sql", "name": "quickbook_items", "alias": "quickbook_items", "checksum": {"name": "sha256", "checksum": "179e77c20a5230b4da453fd40b7046ffbe233509ba5186cae6acfd893904c3cc"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_items"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413945.7490232, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Active') as \n    signed\n ) as is_active,\n        jsonb_extract_path_text(_airbyte_data, 'AssetAccountRef','value') as asset_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'ExpenseAccountRef','value') as expense_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Description') as description,\n        jsonb_extract_path_text(_airbyte_data, 'FullyQualifiedName') as fully_qualified_name,\n        jsonb_extract_path_text(_airbyte_data, 'IncomeAccountRef','value') as income_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'Name') as name,\n        jsonb_extract_path_text(_airbyte_data, 'ParentRef','value') as parent_item_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'PurchaseCost') as \n    numeric(28, 6)\n) as purchase_cost,\n        jsonb_extract_path_text(_airbyte_data, 'PurchaseDesc') as purchase_description,\n        cast(jsonb_extract_path_text(_airbyte_data, 'SubItem') as \n    signed\n ) as sub_item,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Taxable') as \n    signed\n ) as taxable,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TrackQtyOnHand') as \n    signed\n ) as track_quantity_on_hand,\n        jsonb_extract_path_text(_airbyte_data, 'Type') as type,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnitPrice') as \n    signed\n ) as unit_price\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_items\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_items\""}, "model.smartpill.quickbook_journal_entries": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Adjustment']) }} as {{ dbt_utils.type_int() }} ) as is_adjustment,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line,\n        {{ json_extract_scalar('_airbyte_data', ['PrivateNote']) }} as private_note,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_journal_entries') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.smartpill.json_extract", "macro.smartpill.string_to_timestamp", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_journal_entries"], "unique_id": "model.smartpill.quickbook_journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_journal_entries.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_journal_entries.sql", "name": "quickbook_journal_entries", "alias": "quickbook_journal_entries", "checksum": {"name": "sha256", "checksum": "a93c69d24ec68f9a444bc8186a682c1fb5777a08e502b3dde41589b1ae5f334c"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_journal_entries"]], "description": "Table containing journal entry transactions.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment": {"name": "adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the journal entry was transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_journal_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.248125, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        cast(jsonb_extract_path_text(_airbyte_data, 'Adjustment') as \n    signed\n ) as is_adjustment,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        jsonb_extract_path(_airbyte_data, 'Line') as line,\n        jsonb_extract_path_text(_airbyte_data, 'PrivateNote') as private_note,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_journal_entries\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_journal_entries\""}, "model.smartpill.quickbook_journal_entries_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n\n{{ unnest_cte('quickbook_journal_entries', 'quickbook_journal_entries', 'line') }}\nselect\n    _hash_id as _journal_entry_hash_id,\n    id as journal_entry_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'AccountRef', 'value']) }} as account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'ClassRef', 'value']) }} as class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'CustomerRef', 'value']) }} as customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'PostingType']) }} as posting_type,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description\nfrom {{ ref('quickbook_journal_entries') }}\n{{ cross_join_unnest('quickbook_journal_entries', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_journal_entries'))}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_journal_entries_lines"], "unique_id": "model.smartpill.quickbook_journal_entries_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_journal_entries_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_journal_entries_lines.sql", "name": "quickbook_journal_entries_lines", "alias": "quickbook_journal_entries_lines", "checksum": {"name": "sha256", "checksum": "84b92958128941864765efb06762d895643a7d1961ca340f1394946bdff3df9a"}, "tags": ["top-level"], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries"]], "sources": [], "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"id": {"name": "id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_journal_entry_hash_id": {"name": "_journal_entry_hash_id", "description": "Unique identifier for the parent journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_journal_entries_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.3369396, "compiled_sql": "\n\n\nselect\n    _hash_id as _journal_entry_hash_id,\n    id as journal_entry_id,\n    jsonb_extract_path_text(line, 'Id') as id,\n    cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount,\n    jsonb_extract_path_text(line, 'JournalEntryLineDetail','AccountRef','value') as account_id,\n    jsonb_extract_path_text(line, 'JournalEntryLineDetail','ClassRef','value') as class_id,\n    jsonb_extract_path_text(line, 'JournalEntryLineDetail','CustomerRef','value') as customer_id,\n    jsonb_extract_path_text(line, 'JournalEntryLineDetail','PostingType') as posting_type,\n    jsonb_extract_path_text(line, 'Description') as description\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n\nwhere\n    line is not null\n    and \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_journal_entries_lines\""}, "model.smartpill.quickbook_payments": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['ARAccountRef', 'value']) }} as receivable_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as deposit_to_account_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['UnappliedAmt']) }} as {{ dbt_utils.type_numeric() }}) as unapplied_amount,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['CustomerRef', 'value']) }} as customer_id,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_payments') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_payments"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_payments"], "unique_id": "model.smartpill.quickbook_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_payments.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_payments.sql", "name": "quickbook_payments", "alias": "quickbook_payments", "checksum": {"name": "sha256", "checksum": "31fcb292f296e02c0208b38c457222172a9c9a419bcc7b6788e2b4bb3bc64d75"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_payments"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_payments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413947.3449872, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'ARAccountRef','value') as receivable_account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DepositToAccountRef','value') as deposit_to_account_id,\n        cast(jsonb_extract_path_text(_airbyte_data, 'UnappliedAmt') as \n    numeric(28, 6)\n) as unapplied_amount,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'CustomerRef','value') as customer_id,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_payments\n)\nselect\n    *,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_payments\""}, "model.smartpill.quickbook_purchases": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['AccountRef', 'value']) }} as account_id,\n        {{ json_extract_scalar('_airbyte_data', ['DocNumber']) }} as doc_number,\n        {{ json_extract_scalar('_airbyte_data', ['Credit']) }} as credit,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ json_extract_scalar('_airbyte_data', ['PaymentType']) }} as payment_type,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['EntityRef', 'value']) }} as entity_id,\n        {{ json_extract_scalar('_airbyte_data', ['EntityRef', 'type']) }} as entity_type,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('raw', '_airbyte_raw_quickbook_purchases') }}\n)\nselect\n    *,\n    if(entity_type = 'Customer', entity_id, null) as customer_id,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.raw._airbyte_raw_quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_purchases"], "unique_id": "model.smartpill.quickbook_purchases", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_purchases.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_purchases.sql", "name": "quickbook_purchases", "alias": "quickbook_purchases", "checksum": {"name": "sha256", "checksum": "3e1a118f2bf7017647f23d7207bb16d917a9eead03b936a63890d27eb94e3e05"}, "tags": ["top-level"], "refs": [], "sources": [["raw", "_airbyte_raw_quickbook_purchases"]], "description": "Table containing records of purchase expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_purchases.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.1461518, "compiled_sql": "\nwith final as (\n    select\n        jsonb_extract_path_text(_airbyte_data, 'Id') as \"id\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','CreateTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"created_at\",\n    STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'MetaData','LastUpdatedTime'), '%Y-%m-%dT%H:%i:%s.%fZ') as \"updated_at\",\n    _airbyte_emitted_at,\n        jsonb_extract_path_text(_airbyte_data, 'AccountRef','value') as account_id,\n        jsonb_extract_path_text(_airbyte_data, 'DocNumber') as doc_number,\n        jsonb_extract_path_text(_airbyte_data, 'Credit') as credit,\n        jsonb_extract_path_text(_airbyte_data, 'CurrencyRef','name') as currency_name,\n        cast(jsonb_extract_path_text(_airbyte_data, 'TotalAmt') as \n    numeric(28, 6)\n) as total_amount,\n        jsonb_extract_path_text(_airbyte_data, 'PaymentType') as payment_type,\n        STR_TO_DATE(jsonb_extract_path_text(_airbyte_data, 'TxnDate'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','value') as entity_id,\n        jsonb_extract_path_text(_airbyte_data, 'EntityRef','type') as entity_type,\n        jsonb_extract_path(_airbyte_data, 'Line') as line\n    from\n        \"datawarehouse\".raw._airbyte_raw_quickbook_purchases\n)\nselect\n    *,\n    if(entity_type = 'Customer', entity_id, null) as customer_id,\n    md5(cast(coalesce(cast(\"id\" as \n    varchar\n), '') || '-' || coalesce(cast(\"_airbyte_emitted_at\" as \n    varchar\n), '') as \n    varchar\n)) as _hash_id\nfrom\n    final\nwhere\n    \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_purchases\""}, "model.smartpill.quickbook_purchases_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_purchases', 'quickbook_purchases', 'line') }}\nselect\n    _hash_id as _purchase_hash_id,\n    id as purchase_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'AccountRef', 'value']) }} as account_expense_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'ClassRef', 'value']) }} as account_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as account_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ItemRef', 'value']) }} as item_expense_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'BillableStatus']) }} as item_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\nfrom {{ ref('quickbook_purchases') }}\n{{ cross_join_unnest('quickbook_purchases', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_purchases'))}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_purchases_lines"], "unique_id": "model.smartpill.quickbook_purchases_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_purchases_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_purchases_lines.sql", "name": "quickbook_purchases_lines", "alias": "quickbook_purchases_lines", "checksum": {"name": "sha256", "checksum": "8b030caa3d1c93e6cad571f4d0fcd0ec438d1842fd5545c18d014e4368007e81"}, "tags": ["top-level"], "refs": [["quickbook_purchases"], ["quickbook_purchases"]], "sources": [], "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"id": {"name": "id", "description": "Identifier of the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class which the purchase line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_purchase_hash_id": {"name": "_purchase_hash_id", "description": "Unique identifier for the parent purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://models/quickbooks/base_tables/quickbooks.yml", "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_purchases_lines.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "created_at": 1644413951.133867, "compiled_sql": "\n\nselect\n    _hash_id as _purchase_hash_id,\n    id as purchase_id,\n    jsonb_extract_path_text(line, 'Id') as id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','AccountRef','value') as account_expense_account_id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','ClassRef','value') as account_expense_class_id,\n    jsonb_extract_path_text(line, 'AccountBasedExpenseLineDetail','CustomerRef','value') as account_expense_customer_id,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','ItemRef','value') as item_expense_item_id,\n    jsonb_extract_path_text(line, 'ItemBasedExpenseLineDetail','BillableStatus') as item_expense_billable_status,\n    jsonb_extract_path_text(line, 'Description') as description,\n    cast(jsonb_extract_path_text(line, 'Amount') as \n    numeric(28, 6)\n) as amount\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\n\nwhere\n    line is not null\n    and \n    true\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"quickbook_purchases_lines\""}, "model.smartpill.int_quickbooks__account_classifications": {"raw_sql": "with accounts as (\n    {{ unique_select(ref('quickbook_accounts')) }}\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__account_classifications"], "unique_id": "model.smartpill.int_quickbooks__account_classifications", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "name": "int_quickbooks__account_classifications", "alias": "int_quickbooks__account_classifications", "checksum": {"name": "sha256", "checksum": "dccad3c1ec5e8e8ab51ef427b673073dda09c6dfa7f75f50ff9076415e082d30"}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413947.845425, "compiled_sql": "with accounts as (\n    select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__bill_double_entry": {"raw_sql": "with bill_join as (\n    with bills as (\n        {{ unique_select(ref('quickbook_bills')) }}\n    ),\n\n    bill_lines as (\n        select *\n        from {{ref('quickbook_bills_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_items"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__bill_double_entry"], "unique_id": "model.smartpill.int_quickbooks__bill_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "name": "int_quickbooks__bill_double_entry", "alias": "int_quickbooks__bill_double_entry", "checksum": {"name": "sha256", "checksum": "7188785ca6124753415818bffe9d3e248095cf8a6f02a9c18a2d21206ec3d678"}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bills_lines"], ["quickbook_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413947.9366531, "compiled_sql": "with bill_join as (\n    with bills as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bills\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bills\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_bills_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__bill_payment_double_entry": {"raw_sql": "with bill_payment_join as (\n    with bill_payments as (\n        {{ unique_select(ref('quickbook_bill_payments')) }}\n    ),\n\n    accounts as (\n        {{ unique_select(ref('quickbook_accounts')) }}\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__bill_payment_double_entry"], "unique_id": "model.smartpill.int_quickbooks__bill_payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "name": "int_quickbooks__bill_payment_double_entry", "alias": "int_quickbooks__bill_payment_double_entry", "checksum": {"name": "sha256", "checksum": "87c3abfd95171c820a3ffa921a276c5100eef45d653c1ea3fbc424e69f4fea07"}, "tags": [], "refs": [["quickbook_bill_payments"], ["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.0389345, "compiled_sql": "with bill_payment_join as (\n    with bill_payments as (\n        select * from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__deposit_double_entry": {"raw_sql": "with deposit_join as (\n    with deposits as (\n        {{ unique_select(ref('quickbook_deposits')) }}\n    ),\n\n    deposit_lines as (\n        select *\n        from {{ref('quickbook_deposits_lines')}}\n    ),\n\n    accounts as (\n        {{ unique_select(ref('quickbook_accounts')) }}\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines", "model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__deposit_double_entry"], "unique_id": "model.smartpill.int_quickbooks__deposit_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "name": "int_quickbooks__deposit_double_entry", "alias": "int_quickbooks__deposit_double_entry", "checksum": {"name": "sha256", "checksum": "c4bd262fb4b99b8b77aa0d928606d3864eda424f98fde0fc723d3549aa4c0e94"}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"], ["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.135785, "compiled_sql": "with deposit_join as (\n    with deposits as (\n        select * from \"datawarehouse\".analytics.\"quickbook_deposits\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_deposits\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    ),\n\n    accounts as (\n        select * from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__invoice_double_entry": {"raw_sql": "with invoice_join as (\n    with invoices as (\n        {{ unique_select(ref('quickbook_invoices')) }}\n    ),\n\n    invoice_lines as (\n        select *\n        from {{ref('quickbook_invoices_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from {{ref('quickbook_accounts')}}\n        where {{ unique_filter(ref('quickbook_accounts')) }}\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from {{ ref('quickbook_accounts') }}\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select", "macro.smartpill.unique_filter"], "nodes": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_items", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__invoice_double_entry"], "unique_id": "model.smartpill.int_quickbooks__invoice_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "name": "int_quickbooks__invoice_double_entry", "alias": "int_quickbooks__invoice_double_entry", "checksum": {"name": "sha256", "checksum": "132ee8d12aa85edd5f1a586a2d00974b54428fb1184f5b3dfc5fa02547d82198"}, "tags": [], "refs": [["quickbook_invoices"], ["quickbook_invoices_lines"], ["quickbook_items"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.2370784, "compiled_sql": "with invoice_join as (\n    with invoices as (\n        select * from \"datawarehouse\".analytics.\"quickbook_invoices\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_invoices\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_invoices_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_accounts\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__journal_entry_double_entry": {"raw_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    {{ unique_select(ref('quickbook_journal_entries')) }}\n),\n\njournal_entry_lines as (\n    select *\n    from {{ref('quickbook_journal_entries_lines')}}\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__journal_entry_double_entry"], "unique_id": "model.smartpill.int_quickbooks__journal_entry_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "name": "int_quickbooks__journal_entry_double_entry", "alias": "int_quickbooks__journal_entry_double_entry", "checksum": {"name": "sha256", "checksum": "df272747f0011b1a8117afa59c66fc20019f916d7e4247c27f1e9cac8f6aa8d3"}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.2606595, "compiled_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__payment_double_entry": {"raw_sql": "with payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from {{ref('quickbook_payments')}}\n    where {{ unique_filter(ref('quickbook_payments')) }}\n),\n\nar_accounts as (\n    select\n        id\n    from {{ref('quickbook_accounts')}}\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_filter"], "nodes": ["model.smartpill.quickbook_payments", "model.smartpill.quickbook_payments", "model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__payment_double_entry"], "unique_id": "model.smartpill.int_quickbooks__payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "name": "int_quickbooks__payment_double_entry", "alias": "int_quickbooks__payment_double_entry", "checksum": {"name": "sha256", "checksum": "0fe237030b47ca7cd965417e9c7f358fb226aee8dfe3da0b649e071f10105e8a"}, "tags": [], "refs": [["quickbook_payments"], ["quickbook_payments"], ["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.3605802, "compiled_sql": "with payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from \"datawarehouse\".analytics.\"quickbook_payments\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_payments\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__payroll_check_double_entry": {"raw_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from {{source('raw', 'quickbook_payroll_checks')}}\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.smartpill.raw.quickbook_payroll_checks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__payroll_check_double_entry"], "unique_id": "model.smartpill.int_quickbooks__payroll_check_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "name": "int_quickbooks__payroll_check_double_entry", "alias": "int_quickbooks__payroll_check_double_entry", "checksum": {"name": "sha256", "checksum": "8ae50a50d6a2219694feb24acff31669df8a59b6b9bd18addd3b3c042cd66871"}, "tags": [], "refs": [], "sources": [["raw", "quickbook_payroll_checks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.449454, "compiled_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from \"datawarehouse\".raw.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__purchase_double_entry": {"raw_sql": "with purchase_join as (\n    with purchases as (\n        {{ unique_select(ref('quickbook_purchases')) }}\n    ),\n\n    purchase_lines as (\n        select *\n        from {{ref('quickbook_purchases_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines", "model.smartpill.quickbook_items"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__purchase_double_entry"], "unique_id": "model.smartpill.int_quickbooks__purchase_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "name": "int_quickbooks__purchase_double_entry", "alias": "int_quickbooks__purchase_double_entry", "checksum": {"name": "sha256", "checksum": "548379862689c94e398f4f7194eae68b00a403ecad49bbd155fae69309767343"}, "tags": [], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"], ["quickbook_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1644413948.4534879, "compiled_sql": "with purchase_join as (\n    with purchases as (\n        select * from \"datawarehouse\".analytics.\"quickbook_purchases\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_purchases\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    ),\n\n    items_stg as (\n        select * from \"datawarehouse\".analytics.\"quickbook_items\"\n    where id in (\n        select id\n        from \"datawarehouse\".analytics.\"quickbook_items\"\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.smartpill.goodpill_events": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": ["goodpill"], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "goodpill_events"], "unique_id": "seed.smartpill.goodpill_events", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "goodpill_events.csv", "original_file_path": "seeds/goodpill_events.csv", "name": "goodpill_events", "alias": "goodpill_events", "checksum": {"name": "sha256", "checksum": "b23c4f354fb5fe16fa5e6aaa9d7f8d841ece727907489c3b83ed0c15b19a624b"}, "tags": ["goodpill"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "smartpill://seeds/seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics"}, "created_at": 1644413954.3308508, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"datawarehouse\".analytics.\"goodpill_events\""}, "test.smartpill.not_null_quickbook_accounts_id.a12b25cd25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_accounts_id"], "unique_id": "test.smartpill.not_null_quickbook_accounts_id.a12b25cd25", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_accounts_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_id", "alias": "not_null_quickbook_accounts_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_accounts_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.3575387, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.not_null_quickbook_accounts_created_at.3c095347ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_accounts_created_at"], "unique_id": "test.smartpill.not_null_quickbook_accounts_created_at.3c095347ed", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_accounts_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_created_at", "alias": "not_null_quickbook_accounts_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_accounts_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.4450495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.not_null_quickbook_accounts_updated_at.a6113a6333": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_accounts_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_accounts_updated_at.a6113a6333", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_accounts_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_updated_at", "alias": "not_null_quickbook_accounts_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_accounts_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.448832, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.not_null_quickbook_accounts__hash_id.143e025811": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_accounts__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_accounts__hash_id.143e025811", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_accounts__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts__hash_id", "alias": "not_null_quickbook_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_accounts__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.5372818, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.unique_quickbook_accounts__hash_id.46960e991f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_accounts__hash_id"], "unique_id": "test.smartpill.unique_quickbook_accounts__hash_id.46960e991f", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_accounts__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_accounts__hash_id", "alias": "unique_quickbook_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_accounts__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.5451822, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "parent_account_id", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": "relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_accoun_ca39920855b53237645b13f594da5bab"}, "created_at": 1644413951.6385171, "compiled_sql": "\n    \n    \n\nwith child as (\n    select parent_account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n    where parent_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "parent_account_id", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.not_null_quickbook_accounts_balance.1f29272f5e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ get_where_subquery(ref('quickbook_accounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_accounts_balance"], "unique_id": "test.smartpill.not_null_quickbook_accounts_balance.1f29272f5e", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_accounts_balance.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_balance", "alias": "not_null_quickbook_accounts_balance", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_accounts_balance.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.8515804, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_accounts\"\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance", "file_key_name": "models.quickbook_accounts"}, "test.smartpill.not_null_quickbook_bill_payments_id.1499a08374": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bill_payments_id"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_id.1499a08374", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bill_payments_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_id", "alias": "not_null_quickbook_bill_payments_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bill_payments_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.8550003, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bill_payments\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_bill_payments"}, "test.smartpill.not_null_quickbook_bill_payments_created_at.0377523a21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bill_payments_created_at"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_created_at.0377523a21", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bill_payments_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_created_at", "alias": "not_null_quickbook_bill_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bill_payments_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.8571854, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bill_payments\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_bill_payments"}, "test.smartpill.not_null_quickbook_bill_payments_updated_at.2c9cbc0ebd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bill_payments_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_updated_at.2c9cbc0ebd", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bill_payments_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_updated_at", "alias": "not_null_quickbook_bill_payments_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bill_payments_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.9372735, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bill_payments\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_bill_payments"}, "test.smartpill.not_null_quickbook_bill_payments__hash_id.fd526f8604": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bill_payments__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments__hash_id.fd526f8604", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments__hash_id", "alias": "not_null_quickbook_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bill_payments__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413951.9537435, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bill_payments\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_bill_payments"}, "test.smartpill.unique_quickbook_bill_payments__hash_id.9710f17760": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_bill_payments__hash_id"], "unique_id": "test.smartpill.unique_quickbook_bill_payments__hash_id.9710f17760", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_bill_payments__hash_id", "alias": "unique_quickbook_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_bill_payments__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.0355375, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_bill_payments\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_bill_payments"}, "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_payment_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "alias": "relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bill_payments_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bill_p_2b184a230990a4f7402354a8f6768203"}, "created_at": 1644413952.0472867, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_payment_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments_lines\"\n    where bill_payment_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id", "file_key_name": "models.quickbook_bill_payments_lines"}, "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_bill_payments')", "field": "_hash_id", "column_name": "_bill_payment_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "alias": "relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bill_payments"], ["quickbook_bill_payments_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bill_p_a4b5075497ead5b078f5fc9f03740d17"}, "created_at": 1644413952.1311972, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _bill_payment_hash_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments_lines\"\n    where _bill_payment_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_payment_hash_id", "file_key_name": "models.quickbook_bill_payments_lines"}, "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "alias": "relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bill_payments_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bill_p_921f85ab0050d8011b077ccadf1756c6"}, "created_at": 1644413952.2325778, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments_lines\"\n    where bill_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id", "file_key_name": "models.quickbook_bill_payments_lines"}, "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_deposits')", "field": "id", "column_name": "deposit_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "alias": "relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_bill_payments_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bill_p_b1c4e2e35117239897b59833eb94e42c"}, "created_at": 1644413952.255457, "compiled_sql": "\n    \n    \n\nwith child as (\n    select deposit_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments_lines\"\n    where deposit_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id", "file_key_name": "models.quickbook_bill_payments_lines"}, "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_journal_entries')", "field": "id", "column_name": "journal_entry_id", "model": "{{ get_where_subquery(ref('quickbook_bill_payments_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_bill_payments_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_", "alias": "relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_bill_payments_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bill_p_e1ed957bea7ed5e02844b44733106af2"}, "created_at": 1644413952.3342125, "compiled_sql": "\n    \n    \n\nwith child as (\n    select journal_entry_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bill_payments_lines\"\n    where journal_entry_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id", "file_key_name": "models.quickbook_bill_payments_lines"}, "test.smartpill.not_null_quickbook_bills_id.ade9b1b0e8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bills_id"], "unique_id": "test.smartpill.not_null_quickbook_bills_id.ade9b1b0e8", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bills_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_id", "alias": "not_null_quickbook_bills_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bills_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.3457775, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_bills"}, "test.smartpill.not_null_quickbook_bills_created_at.e161c96e40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bills_created_at"], "unique_id": "test.smartpill.not_null_quickbook_bills_created_at.e161c96e40", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bills_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_created_at", "alias": "not_null_quickbook_bills_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bills_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.3495715, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_bills"}, "test.smartpill.not_null_quickbook_bills_updated_at.9b89152a35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bills_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_bills_updated_at.9b89152a35", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bills_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_updated_at", "alias": "not_null_quickbook_bills_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bills_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.3530872, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_bills"}, "test.smartpill.not_null_quickbook_bills__hash_id.f6bb81e956": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_bills__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_bills__hash_id.f6bb81e956", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_bills__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills__hash_id", "alias": "not_null_quickbook_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_bills__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.35532, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_bills"}, "test.smartpill.unique_quickbook_bills__hash_id.dc216c74e4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bills')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_bills__hash_id"], "unique_id": "test.smartpill.unique_quickbook_bills__hash_id.dc216c74e4", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_bills__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_bills__hash_id", "alias": "unique_quickbook_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_bills__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.357686, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_bills\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_bills"}, "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_id", "model": "{{ get_where_subquery(ref('quickbook_bills_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_", "alias": "relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bills_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bills__c9feba0baf2f19a2ad74d81de54bd0a8"}, "created_at": 1644413952.3597074, "compiled_sql": "\n    \n    \n\nwith child as (\n    select bill_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bills_lines\"\n    where bill_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id", "file_key_name": "models.quickbook_bills_lines"}, "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "_hash_id", "column_name": "_bill_hash_id", "model": "{{ get_where_subquery(ref('quickbook_bills_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "alias": "relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bills_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_bills__b19acb71cc4deb4fd064453966472ad9"}, "created_at": 1644413952.4445229, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _bill_hash_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_bills_lines\"\n    where _bill_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_bills\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_hash_id", "file_key_name": "models.quickbook_bills_lines"}, "test.smartpill.not_null_quickbook_customers_id.96bc4b1497": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_customers_id"], "unique_id": "test.smartpill.not_null_quickbook_customers_id.96bc4b1497", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_customers_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_id", "alias": "not_null_quickbook_customers_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_customers_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.460868, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_customers\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_customers"}, "test.smartpill.not_null_quickbook_customers_created_at.382d28fb34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_customers_created_at"], "unique_id": "test.smartpill.not_null_quickbook_customers_created_at.382d28fb34", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_customers_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_created_at", "alias": "not_null_quickbook_customers_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_customers_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.4629316, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_customers\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_customers"}, "test.smartpill.not_null_quickbook_customers_updated_at.4c4939f533": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_customers_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_customers_updated_at.4c4939f533", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_customers_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_updated_at", "alias": "not_null_quickbook_customers_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_customers_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.5441885, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_customers\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_customers"}, "test.smartpill.not_null_quickbook_customers__hash_id.bee7bb4912": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_customers__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_customers__hash_id.bee7bb4912", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_customers__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers__hash_id", "alias": "not_null_quickbook_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_customers__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.5480325, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_customers\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_customers"}, "test.smartpill.unique_quickbook_customers__hash_id.f980d531c9": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_customers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_customers__hash_id"], "unique_id": "test.smartpill.unique_quickbook_customers__hash_id.f980d531c9", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_customers__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_customers__hash_id", "alias": "unique_quickbook_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_customers__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.6338346, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_customers\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_customers"}, "test.smartpill.not_null_quickbook_classes_id.341dc94c0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_classes_id"], "unique_id": "test.smartpill.not_null_quickbook_classes_id.341dc94c0b", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_classes_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_id", "alias": "not_null_quickbook_classes_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_classes_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.650268, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_classes\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_classes"}, "test.smartpill.not_null_quickbook_classes_created_at.8849d47908": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_classes_created_at"], "unique_id": "test.smartpill.not_null_quickbook_classes_created_at.8849d47908", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_classes_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_created_at", "alias": "not_null_quickbook_classes_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_classes_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.6536934, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_classes\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_classes"}, "test.smartpill.not_null_quickbook_classes_updated_at.6c3f5bf01f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_classes_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_classes_updated_at.6c3f5bf01f", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_classes_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_updated_at", "alias": "not_null_quickbook_classes_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_classes_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.7375298, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_classes\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_classes"}, "test.smartpill.not_null_quickbook_classes__hash_id.ce90f05ef4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_classes__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_classes__hash_id.ce90f05ef4", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_classes__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes__hash_id", "alias": "not_null_quickbook_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_classes__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.7523053, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_classes\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_classes"}, "test.smartpill.unique_quickbook_classes__hash_id.767e20cd2e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_classes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_classes__hash_id"], "unique_id": "test.smartpill.unique_quickbook_classes__hash_id.767e20cd2e", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_classes__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_classes__hash_id", "alias": "unique_quickbook_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_classes__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413952.7552547, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_classes\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_classes"}, "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "class_id", "model": "{{ get_where_subquery(ref('quickbook_deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_deposits_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "alias": "relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"], ["quickbook_deposits_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_deposi_1c1a8f32292a9b0a9cc0163165e71fea"}, "created_at": 1644413952.757438, "compiled_sql": "\n    \n    \n\nwith child as (\n    select class_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    where class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.quickbook_deposits_lines"}, "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('quickbook_deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_deposits_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_deposi_c7479524318e340412cfd3453d73a0c5"}, "created_at": 1644413952.9315174, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.quickbook_deposits_lines"}, "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('quickbook_deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_deposits_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_", "alias": "relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"], ["quickbook_deposits_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_deposi_01bba38aba767747cffa9ddac0299d7a"}, "created_at": 1644413952.9559317, "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    where customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.quickbook_deposits_lines"}, "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_deposits')", "field": "_hash_id", "column_name": "_deposit_hash_id", "model": "{{ get_where_subquery(ref('quickbook_deposits_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "alias": "relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_deposi_ca70503e57a39384b124a8db60bcc007"}, "created_at": 1644413952.9627833, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _deposit_hash_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits_lines\"\n    where _deposit_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_deposit_hash_id", "file_key_name": "models.quickbook_deposits_lines"}, "test.smartpill.not_null_quickbook_deposits_id.d999e6aa7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_deposits_id"], "unique_id": "test.smartpill.not_null_quickbook_deposits_id.d999e6aa7a", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_deposits_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_id", "alias": "not_null_quickbook_deposits_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_deposits_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.0572293, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.not_null_quickbook_deposits_created_at.0e50747340": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_deposits_created_at"], "unique_id": "test.smartpill.not_null_quickbook_deposits_created_at.0e50747340", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_deposits_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_created_at", "alias": "not_null_quickbook_deposits_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_deposits_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.0594132, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.not_null_quickbook_deposits_updated_at.8c397fa724": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_deposits_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_deposits_updated_at.8c397fa724", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_deposits_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_updated_at", "alias": "not_null_quickbook_deposits_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_deposits_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.130766, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.not_null_quickbook_deposits__hash_id.5e9f31c2c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_deposits__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_deposits__hash_id.5e9f31c2c7", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_deposits__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits__hash_id", "alias": "not_null_quickbook_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_deposits__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.1390529, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.unique_quickbook_deposits__hash_id.c3b47a62c6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_deposits__hash_id"], "unique_id": "test.smartpill.unique_quickbook_deposits__hash_id.c3b47a62c6", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_deposits__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_deposits__hash_id", "alias": "unique_quickbook_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_deposits__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.1507516, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_deposits\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('quickbook_deposits')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits"]}, "config": {"enabled": true, "alias": "relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_deposits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_deposi_6dbf0040e9cd9341038624612be4da65"}, "created_at": 1644413953.1548135, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_deposits\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.quickbook_deposits"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_expense_account_id", "model": "{{ get_where_subquery(ref('quickbook_purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_purchases_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_purcha_0fb391f0ebbeb639276f755be3179834"}, "created_at": 1644413953.2457926, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    where account_expense_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_account_id", "file_key_name": "models.quickbook_purchases_lines"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "account_expense_class_id", "model": "{{ get_where_subquery(ref('quickbook_purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "alias": "relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"], ["quickbook_purchases_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_purcha_89b78bd415215b6cbc7316cb4c129fb7"}, "created_at": 1644413953.258667, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_class_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    where account_expense_class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_class_id", "file_key_name": "models.quickbook_purchases_lines"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "account_expense_customer_id", "model": "{{ get_where_subquery(ref('quickbook_purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_", "alias": "relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"], ["quickbook_purchases_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_purcha_f0542f2b3fb82cccbddb16a6ae3ce253"}, "created_at": 1644413953.3448465, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_expense_customer_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    where account_expense_customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_customer_id", "file_key_name": "models.quickbook_purchases_lines"}, "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_purchases')", "field": "_hash_id", "column_name": "_purchase_hash_id", "model": "{{ get_where_subquery(ref('quickbook_purchases_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "alias": "relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_purcha_d4f7db0646a654f3281ccedf2728b614"}, "created_at": 1644413953.4404006, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _purchase_hash_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases_lines\"\n    where _purchase_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_purchase_hash_id", "file_key_name": "models.quickbook_purchases_lines"}, "test.smartpill.not_null_quickbook_purchases_id.b59acb53aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_purchases_id"], "unique_id": "test.smartpill.not_null_quickbook_purchases_id.b59acb53aa", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_purchases_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_id", "alias": "not_null_quickbook_purchases_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_purchases_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.5443656, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.not_null_quickbook_purchases_created_at.5396da13c3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_purchases_created_at"], "unique_id": "test.smartpill.not_null_quickbook_purchases_created_at.5396da13c3", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_purchases_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_created_at", "alias": "not_null_quickbook_purchases_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_purchases_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.5477931, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.not_null_quickbook_purchases_updated_at.7f3c1ad27f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_purchases_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_purchases_updated_at.7f3c1ad27f", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_purchases_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_updated_at", "alias": "not_null_quickbook_purchases_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_purchases_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.6328673, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.not_null_quickbook_purchases__hash_id.60e376006a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_purchases__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_purchases__hash_id.60e376006a", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_purchases__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases__hash_id", "alias": "not_null_quickbook_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_purchases__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.6369755, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.unique_quickbook_purchases__hash_id.895322ff1b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_purchases__hash_id"], "unique_id": "test.smartpill.unique_quickbook_purchases__hash_id.895322ff1b", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_purchases__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_purchases__hash_id", "alias": "unique_quickbook_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_purchases__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.6567209, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_purchases\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('quickbook_purchases')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases"]}, "config": {"enabled": true, "alias": "relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_purchases"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_purcha_ce570413c1a8c117b1d9e4fc7812391b"}, "created_at": 1644413953.6591587, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_purchases\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.quickbook_purchases"}, "test.smartpill.not_null_quickbook_journal_entries_id.49dc1d7aaa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_journal_entries_id"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_id.49dc1d7aaa", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_journal_entries_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_id", "alias": "not_null_quickbook_journal_entries_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_journal_entries_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.758564, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id", "file_key_name": "models.quickbook_journal_entries"}, "test.smartpill.not_null_quickbook_journal_entries_created_at.afe29e0363": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ get_where_subquery(ref('quickbook_journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_journal_entries_created_at"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_created_at.afe29e0363", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_journal_entries_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_created_at", "alias": "not_null_quickbook_journal_entries_created_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_journal_entries_created_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.7626765, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at", "file_key_name": "models.quickbook_journal_entries"}, "test.smartpill.not_null_quickbook_journal_entries_updated_at.54a9ed1f87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('quickbook_journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_journal_entries_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_updated_at.54a9ed1f87", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_journal_entries_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_updated_at", "alias": "not_null_quickbook_journal_entries_updated_at", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_journal_entries_updated_at.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.8386488, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at", "file_key_name": "models.quickbook_journal_entries"}, "test.smartpill.not_null_quickbook_journal_entries__hash_id.9c0aa8856e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "not_null_quickbook_journal_entries__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries__hash_id.9c0aa8856e", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "not_null_quickbook_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries__hash_id", "alias": "not_null_quickbook_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/not_null_quickbook_journal_entries__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.842649, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_journal_entries"}, "test.smartpill.unique_quickbook_journal_entries__hash_id.badff0ae61": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "unique_quickbook_journal_entries__hash_id"], "unique_id": "test.smartpill.unique_quickbook_journal_entries__hash_id.badff0ae61", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "unique_quickbook_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_journal_entries__hash_id", "alias": "unique_quickbook_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/unique_quickbook_journal_entries__hash_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644413953.9355063, "compiled_sql": "\n    \n    \n\nselect\n    _hash_id as unique_field,\n    count(*) as n_records\n\nfrom \"datawarehouse\".analytics.\"quickbook_journal_entries\"\nwhere _hash_id is not null\ngroup by _hash_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id", "file_key_name": "models.quickbook_journal_entries"}, "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "alias": "relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_accounts"], ["quickbook_journal_entries_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_journa_f35d0b8eb13292572b9548b949f9760a"}, "created_at": 1644413953.9392853, "compiled_sql": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_accounts\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id", "file_key_name": "models.quickbook_journal_entries_lines"}, "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "class_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "alias": "relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_classes"], ["quickbook_journal_entries_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_journa_08f73653b4370a08aef06a56186ada6f"}, "created_at": 1644413954.0460327, "compiled_sql": "\n    \n    \n\nwith child as (\n    select class_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n    where class_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_classes\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id", "file_key_name": "models.quickbook_journal_entries_lines"}, "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_", "alias": "relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_customers"], ["quickbook_journal_entries_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_journa_c7395849b7ce189c654c2a4ba6f1f672"}, "created_at": 1644413954.0612514, "compiled_sql": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n    where customer_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.quickbook_journal_entries_lines"}, "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('quickbook_journal_entries')", "field": "_hash_id", "column_name": "_journal_entry_hash_id", "model": "{{ get_where_subquery(ref('quickbook_journal_entries_lines')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"]}, "config": {"enabled": true, "alias": "relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "datawarehouse", "schema": "dbt_test__audit", "fqn": ["smartpill", "quickbooks", "base_tables", "relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "alias": "relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_quickbook_journa_648070f6f17c06d3054e90a8c26ce4ff"}, "created_at": 1644413954.2433846, "compiled_sql": "\n    \n    \n\nwith child as (\n    select _journal_entry_hash_id as from_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries_lines\"\n    where _journal_entry_hash_id is not null\n),\n\nparent as (\n    select _hash_id as to_field\n    from \"datawarehouse\".analytics.\"quickbook_journal_entries\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_journal_entry_hash_id", "file_key_name": "models.quickbook_journal_entries_lines"}}, "sources": {"source.smartpill.raw._airbyte_raw_analytics_clinics": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_clinics"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_clinics", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_clinics", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_clinics", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of clinics from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_clinics](/#!/model/model.smartpill.an_clinics) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_clinics", "created_at": 1644413954.3314905}, "source.smartpill.raw._airbyte_raw_analytics_dates": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_dates"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_dates", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_dates", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_dates", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of dates from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_dates](/#!/model/model.smartpill.an_dates) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_dates", "created_at": 1644413954.3318243}, "source.smartpill.raw._airbyte_raw_analytics_drugs": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_drugs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_drugs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_drugs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of dugs from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_drugs](/#!/model/model.smartpill.an_drugs) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_drugs", "created_at": 1644413954.3320434}, "source.smartpill.raw._airbyte_raw_analytics_fills_logs": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_fills_logs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_fills_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_fills_logs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_fills_logs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of fill logs from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_fill_logs](/#!/model/model.smartpill.an_fill_logs) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_fills_logs", "created_at": 1644413954.3322506}, "source.smartpill.raw._airbyte_raw_analytics_locations": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_locations"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_locations", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_locations", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_locations", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of locations from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_locations](/#!/model/model.smartpill.an_locations) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_locations", "created_at": 1644413954.3324564}, "source.smartpill.raw._airbyte_raw_analytics_orders_logs": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_orders_logs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_orders_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_orders_logs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_orders_logs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of orders logs from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_orders_logs](/#!/model/model.smartpill.an_orders_logs) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_orders_logs", "created_at": 1644413954.332659}, "source.smartpill.raw._airbyte_raw_analytics_patients": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_patients"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_patients", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_patients", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of patients from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_locations](/#!/model/model.smartpill.an_locations) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_patients", "created_at": 1644413954.3328583}, "source.smartpill.raw._airbyte_raw_analytics_pharmacies": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_pharmacies"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_pharmacies", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_pharmacies", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_pharmacies", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of pharmacies from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_pharmacies](/#!/model/model.smartpill.an_pharmacies) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_pharmacies", "created_at": 1644413954.3330564}, "source.smartpill.raw._airbyte_raw_analytics_providers": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_providers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_providers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_providers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_providers", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of providers from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_providers](/#!/model/model.smartpill.an_providers) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_providers", "created_at": 1644413954.333265}, "source.smartpill.raw._airbyte_raw_analytics_times": {"fqn": ["smartpill", "raw", "_airbyte_raw_analytics_times"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_analytics_times", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_analytics_times", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_analytics_times", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of times from the old datawarehouse at `analytics` database, fetched with Airbyte.\nSee the model [an_times](/#!/model/model.smartpill.an_times) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["backfill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_analytics_times", "created_at": 1644413954.3334615}, "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_drugs"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_drugs", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_drugs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_drugs` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_drugs](/#!/model/model.smartpill.gp_drugs) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_drugs", "created_at": 1644413954.3336782}, "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_order_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_order_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_order_items", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_order_items` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_order_items](/#!/model/model.smartpill.gp_order_items) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_order_items", "created_at": 1644413954.3338807}, "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_orders"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_orders", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_orders", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_orders", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_orders` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_orders](/#!/model/model.smartpill.gp_orders) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_orders", "created_at": 1644413954.3340776}, "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_patients"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_patients", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_patients", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_patients` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_patients](/#!/model/model.smartpill.gp_patients) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_patients", "created_at": 1644413954.3342733}, "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_rxs_grouped"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_rxs_grouped", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_rxs_grouped", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_rxs_grouped` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_rxs_grouped](/#!/model/model.smartpill.gp_rxs_grouped) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_grouped", "created_at": 1644413954.3344653}, "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": {"fqn": ["smartpill", "raw", "_airbyte_raw_goodpill_gp_rxs_single"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_rxs_single", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_rxs_single", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Raw records of `gp_rxs_single` from the `goodpill` database, fetched with Airbyte.\nSee the model [gp_rxs_single](/#!/model/model.smartpill.gp_rxs_single) for the normalization of the table.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["goodpill"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_goodpill_gp_rxs_single", "created_at": 1644413954.334658}, "source.smartpill.raw._airbyte_raw_quickbook_accounts": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_accounts"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_accounts", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_accounts", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_accounts", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_accounts", "created_at": 1644413954.3348498}, "source.smartpill.raw._airbyte_raw_quickbook_bill_payments": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_bill_payments"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_bill_payments", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_bill_payments", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_bill_payments", "created_at": 1644413954.3350625}, "source.smartpill.raw._airbyte_raw_quickbook_bills": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_bills"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_bills", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_bills", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_bills", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_bills", "created_at": 1644413954.3352664}, "source.smartpill.raw._airbyte_raw_quickbook_classes": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_classes"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_classes", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_classes", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_classes", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_classes", "created_at": 1644413954.3354626}, "source.smartpill.raw._airbyte_raw_quickbook_customers": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_customers"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_customers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_customers", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_customers", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_customers", "created_at": 1644413954.3356571}, "source.smartpill.raw._airbyte_raw_quickbook_deposits": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_deposits"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_deposits", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_deposits", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_deposits", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_deposits", "created_at": 1644413954.3358536}, "source.smartpill.raw._airbyte_raw_quickbook_invoices": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_invoices"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_invoices", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_invoices", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_invoices", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_invoices", "created_at": 1644413954.33606}, "source.smartpill.raw._airbyte_raw_quickbook_items": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_items"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_items", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_items", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_items", "created_at": 1644413954.336252}, "source.smartpill.raw._airbyte_raw_quickbook_journal_entries": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_journal_entries"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_journal_entries", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_journal_entries", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_journal_entries", "created_at": 1644413954.3439784}, "source.smartpill.raw._airbyte_raw_quickbook_payments": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_payments"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_payments", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_payments", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_payments", "created_at": 1644413954.3444586}, "source.smartpill.raw._airbyte_raw_quickbook_purchases": {"fqn": ["smartpill", "raw", "_airbyte_raw_quickbook_purchases"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw._airbyte_raw_quickbook_purchases", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_purchases", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "_airbyte_raw_quickbook_purchases", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw._airbyte_raw_quickbook_purchases", "created_at": 1644413954.3447037}, "source.smartpill.raw.quickbook_payroll_checks": {"fqn": ["smartpill", "raw", "quickbook_payroll_checks"], "database": "datawarehouse", "schema": "raw", "unique_id": "source.smartpill.raw.quickbook_payroll_checks", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "quickbook_payroll_checks", "source_name": "raw", "source_description": "Raw tables fetched with Airbyte", "loader": "", "identifier": "quickbook_payroll_checks", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"datawarehouse\".raw.quickbook_payroll_checks", "created_at": 1644413954.3449125}}, "macros": {"macro.smartpill.generate_schema_name": {"unique_id": "macro.smartpill.generate_schema_name", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413920.941177}, "macro.smartpill.pivot_window": {"unique_id": "macro.smartpill.pivot_window", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/analytics_utils/pivot_window.sql", "original_file_path": "macros/analytics_utils/pivot_window.sql", "name": "pivot_window", "macro_sql": "{% macro pivot_window(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False,\n               partition='') %}\n    {{ return(adapter.dispatch('pivot_window', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct, partition)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__pivot_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.0315492}, "macro.smartpill.default__pivot_window": {"unique_id": "macro.smartpill.default__pivot_window", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/analytics_utils/pivot_window.sql", "original_file_path": "macros/analytics_utils/pivot_window.sql", "name": "default__pivot_window", "macro_sql": "{% macro default__pivot_window(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False,\n               partition='') %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n\t{% if partition %}\n      over({{ partition }})\n\t{% endif %}\n    {% if alias %}\n      {% if quote_identifiers %}\n        as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.0362175}, "macro.smartpill.star": {"unique_id": "macro.smartpill.star", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/analytics_utils/star.sql", "original_file_path": "macros/analytics_utils/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.0481615}, "macro.smartpill.default__star": {"unique_id": "macro.smartpill.default__star", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/analytics_utils/star.sql", "original_file_path": "macros/analytics_utils/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n\t\t{%- if col.startswith(prefix) -%}\n\t\t\t{%- set col_name = adapter.quote(col ~ suffix)|trim -%}\n\t\t{%- else -%}\n\t\t\t{%- set col_name = adapter.quote(prefix ~ col ~ suffix)|trim -%}\n\t\t{%- endif -%}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ col_name }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1380906}, "macro.smartpill.cross_join_unnest": {"unique_id": "macro.smartpill.cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "cross_join_unnest", "macro_sql": "{% macro cross_join_unnest(stream_name, array_col) -%}\n  {{ adapter.dispatch('cross_join_unnest')(stream_name, array_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__cross_join_unnest"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.141896}, "macro.smartpill.default__cross_join_unnest": {"unique_id": "macro.smartpill.default__cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__cross_join_unnest", "macro_sql": "{% macro default__cross_join_unnest(stream_name, array_col) -%}\n    {% do exceptions.warn(\"Undefined macro cross_join_unnest for this destination engine\") %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1425564}, "macro.smartpill.mysql__cross_join_unnest": {"unique_id": "macro.smartpill.mysql__cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__cross_join_unnest", "macro_sql": "{% macro mysql__cross_join_unnest(stream_name, array_col) -%}\n    left join joined on _hash_id = joined._airbyte_hashid\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1429465}, "macro.smartpill.unnested_column_value": {"unique_id": "macro.smartpill.unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "unnested_column_value", "macro_sql": "{% macro unnested_column_value(column_col) -%}\n  {{ adapter.dispatch('unnested_column_value')(column_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__unnested_column_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1482732}, "macro.smartpill.default__unnested_column_value": {"unique_id": "macro.smartpill.default__unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__unnested_column_value", "macro_sql": "{% macro default__unnested_column_value(column_col) -%}\n    {{ column_col }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1487424}, "macro.smartpill.mysql__unnested_column_value": {"unique_id": "macro.smartpill.mysql__unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__unnested_column_value", "macro_sql": "{% macro mysql__unnested_column_value(column_col) -%}\n    _airbyte_nested_data\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.149072}, "macro.smartpill.unnest_cte": {"unique_id": "macro.smartpill.unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "unnest_cte", "macro_sql": "{% macro unnest_cte(table_name, stream_name, column_col) -%}\n  {{ adapter.dispatch('unnest_cte')(table_name, stream_name, column_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__unnest_cte"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1498516}, "macro.smartpill.default__unnest_cte": {"unique_id": "macro.smartpill.default__unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__unnest_cte", "macro_sql": "{% macro default__unnest_cte(table_name, stream_name, column_col) -%}{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1502333}, "macro.smartpill.mysql__unnest_cte": {"unique_id": "macro.smartpill.mysql__unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__unnest_cte", "macro_sql": "{% macro mysql__unnest_cte(table_name, stream_name, column_col) -%}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- call statement('max_json_array_length', fetch_result=True) -%}\n        with max_value as (\n            select max(json_length({{ column_col }})) as max_number_of_items\n            from {{ ref(table_name) }}\n        )\n        select\n            case when max_number_of_items is not null and max_number_of_items > 1\n            then max_number_of_items\n            else 1 end as max_number_of_items\n        from max_value\n    {%- endcall -%}\n\n    {%- set max_length = load_result('max_json_array_length') -%}\n    with numbers as (\n        {{ dbt_utils.generate_series(max_length[\"data\"][0][0]) }}\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            {# -- json_extract(column_col, '$[i][0]') as _airbyte_nested_data #}\n            json_extract({{ column_col }}, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from {{ ref(table_name) }}\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in {{ table_name }}.{{ column_col }}\n        where numbers.generated_number <= json_length({{ column_col }})\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.1531408}, "macro.smartpill.type_json": {"unique_id": "macro.smartpill.type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_json", "macro_sql": "\n\n{%- macro type_json() -%}\n  {{ adapter.dispatch('type_json')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__type_json"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.154957}, "macro.smartpill.default__type_json": {"unique_id": "macro.smartpill.default__type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_json", "macro_sql": "{% macro default__type_json() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2305562}, "macro.smartpill.mysql__type_json": {"unique_id": "macro.smartpill.mysql__type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_json", "macro_sql": "\n\n{%- macro mysql__type_json() -%}\n    json\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.230987}, "macro.smartpill.mysql__type_string": {"unique_id": "macro.smartpill.mysql__type_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_string", "macro_sql": "\n\n{%- macro mysql__type_string() -%}\n    char\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2313166}, "macro.smartpill.mysql__type_float": {"unique_id": "macro.smartpill.mysql__type_float", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_float", "macro_sql": "{% macro mysql__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2316139}, "macro.smartpill.default__type_int": {"unique_id": "macro.smartpill.default__type_int", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    signed\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2319028}, "macro.smartpill.mysql__type_bigint": {"unique_id": "macro.smartpill.mysql__type_bigint", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_bigint", "macro_sql": "{% macro mysql__type_bigint() %}\n    signed\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.232185}, "macro.smartpill.mysql__type_numeric": {"unique_id": "macro.smartpill.mysql__type_numeric", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_numeric", "macro_sql": "{% macro mysql__type_numeric() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2324703}, "macro.smartpill.mysql__type_timestamp": {"unique_id": "macro.smartpill.mysql__type_timestamp", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_timestamp", "macro_sql": "{% macro mysql__type_timestamp() %}\n    time\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2329586}, "macro.smartpill.datediff": {"unique_id": "macro.smartpill.datediff", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "datediff", "macro_sql": "{% macro datediff(start_date, end_date, datepart) -%}\n    timestampdiff(\n        {{datepart}},\n        {{start_date}},\n        {{end_date}}\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.2372181}, "macro.smartpill.get_intervals_between": {"unique_id": "macro.smartpill.get_intervals_between", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.238233}, "macro.smartpill.default__get_intervals_between": {"unique_id": "macro.smartpill.default__get_intervals_between", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.smartpill.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.3373802}, "macro.smartpill.date_spine": {"unique_id": "macro.smartpill.date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.338458}, "macro.smartpill.default__date_spine": {"unique_id": "macro.smartpill.default__date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.smartpill.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.3400002}, "macro.smartpill.date_trunc": {"unique_id": "macro.smartpill.date_trunc", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}    \n    {% if datepart == 'month' %}\n        date( {{date}} + INTERVAL (1 - day( {{date}} )) DAY)\n\n    {% elif datepart == 'year' %}\n        date(makedate(year( {{ date }} ), 1))\n\n    {% else %}\n        date_trunc('{{datepart}}', {{date}})\n\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.3421729}, "macro.smartpill.dateadd": {"unique_id": "macro.smartpill.dateadd", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n    date_add(\n        {{ from_date_or_timestamp }}, interval 1 {{ datepart }}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4355826}, "macro.smartpill.format_json_path": {"unique_id": "macro.smartpill.format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "format_json_path", "macro_sql": "{% macro format_json_path(json_path_list) -%}\n    {{ adapter.dispatch('format_json_path')(json_path_list) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4389315}, "macro.smartpill.default__format_json_path": {"unique_id": "macro.smartpill.default__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "default__format_json_path", "macro_sql": "{% macro default__format_json_path(json_path_list) -%}\n    {{ '.' ~ json_path_list|join('.') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4515183}, "macro.smartpill.mysql__format_json_path": {"unique_id": "macro.smartpill.mysql__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__format_json_path", "macro_sql": "{% macro mysql__format_json_path(json_path_list) -%}\n    {# -- '$.\"x\".\"y\".\"z\"' #}\n    {{ \"'$.\\\"\" ~ json_path_list|join(\"\\\".\\\"\") ~ \"\\\"'\" }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4523087}, "macro.smartpill.postgres__format_json_path": {"unique_id": "macro.smartpill.postgres__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__format_json_path", "macro_sql": "{% macro postgres__format_json_path(json_path_list) -%}\n    {%- set str_list = [] -%}\n    {%- for json_path in json_path_list -%}\n        {%- if str_list.append(json_path.replace(\"'\", \"''\")) -%} {%- endif -%}\n    {%- endfor -%}\n    {{ \"'\" ~ str_list|join(\"','\") ~ \"'\" }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4538164}, "macro.smartpill.json_extract": {"unique_id": "macro.smartpill.json_extract", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.454527}, "macro.smartpill.mysql__json_extract": {"unique_id": "macro.smartpill.mysql__json_extract", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract", "macro_sql": "{% macro mysql__json_extract(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4551787}, "macro.smartpill.postgres__json_extract": {"unique_id": "macro.smartpill.postgres__json_extract", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(json_column, normalized_json_path) -%}\n\tjsonb_extract_path({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4558003}, "macro.smartpill.json_extract_scalar": {"unique_id": "macro.smartpill.json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_scalar", "macro_sql": "{% macro json_extract_scalar(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_scalar')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract_scalar"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4564846}, "macro.smartpill.mysql__json_extract_scalar": {"unique_id": "macro.smartpill.mysql__json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_scalar", "macro_sql": "{% macro mysql__json_extract_scalar(json_column, normalized_json_path) -%}\n    json_value({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.457099}, "macro.smartpill.postgres__json_extract_scalar": {"unique_id": "macro.smartpill.postgres__json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract_scalar", "macro_sql": "{% macro postgres__json_extract_scalar(json_column, normalized_json_path) -%}\n    jsonb_extract_path_text({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4577174}, "macro.smartpill.json_extract_array": {"unique_id": "macro.smartpill.json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_array", "macro_sql": "{% macro json_extract_array(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_array')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.postgres__json_extract_array"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4583986}, "macro.smartpill.mysql__json_extract_array": {"unique_id": "macro.smartpill.mysql__json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_array", "macro_sql": "{% macro mysql__json_extract_array(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4592724}, "macro.smartpill.postgres__json_extract_array": {"unique_id": "macro.smartpill.postgres__json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "postgres__json_extract_array", "macro_sql": "{% macro postgres__json_extract_array(json_column, normalized_json_path) -%}\n    -- TODO: Fix postgres macros or use dbt-utils\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.format_json_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4599104}, "macro.smartpill.last_day": {"unique_id": "macro.smartpill.last_day", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n    cast(\n        {{dateadd('day', '-1',\n        dateadd(datepart, '1', date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.dateadd", "macro.smartpill.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.4615848}, "macro.smartpill.boolean_to_string": {"unique_id": "macro.smartpill.boolean_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "boolean_to_string", "macro_sql": "{% macro boolean_to_string(boolean_column) -%}\n  {{ adapter.dispatch('boolean_to_string')(boolean_column) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__boolean_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.530646}, "macro.smartpill.default__boolean_to_string": {"unique_id": "macro.smartpill.default__boolean_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__boolean_to_string", "macro_sql": "{% macro default__boolean_to_string(boolean_column) -%}\n    {{ boolean_column }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5312378}, "macro.smartpill.array_to_string": {"unique_id": "macro.smartpill.array_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "array_to_string", "macro_sql": "{% macro array_to_string(array_column) -%}\n  {{ adapter.dispatch('array_to_string')(array_column) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5318654}, "macro.smartpill.default__array_to_string": {"unique_id": "macro.smartpill.default__array_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__array_to_string", "macro_sql": "{% macro default__array_to_string(array_column) -%}\n    {{ array_column }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5322583}, "macro.smartpill.cast_to_boolean": {"unique_id": "macro.smartpill.cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "cast_to_boolean", "macro_sql": "{% macro cast_to_boolean(field) -%}\n    {{ adapter.dispatch('cast_to_boolean')(field) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__cast_to_boolean"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5328364}, "macro.smartpill.default__cast_to_boolean": {"unique_id": "macro.smartpill.default__cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__cast_to_boolean", "macro_sql": "{% macro default__cast_to_boolean(field) -%}\n    cast({{ field }} as boolean)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5332675}, "macro.smartpill.mysql__cast_to_boolean": {"unique_id": "macro.smartpill.mysql__cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "mysql__cast_to_boolean", "macro_sql": "{% macro mysql__cast_to_boolean(field) -%}\n    IF(lower({{ field }}) = 'true', true, false)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5336802}, "macro.smartpill.string_to_timestamp": {"unique_id": "macro.smartpill.string_to_timestamp", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "string_to_timestamp", "macro_sql": "{% macro string_to_timestamp(string_column) -%}\n    STR_TO_DATE({{ string_column }}, '%Y-%m-%dT%H:%i:%s.%fZ')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.534076}, "macro.smartpill.common_fields": {"unique_id": "macro.smartpill.common_fields", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/common_fields.sql", "original_file_path": "macros/quickbook_utils/common_fields.sql", "name": "common_fields", "macro_sql": "{% macro common_fields() -%}\n    {{ json_extract_scalar('_airbyte_data', ['Id']) }} as {{ adapter.quote('id') }},\n    {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['MetaData', 'CreateTime'])) }} as {{ adapter.quote('created_at') }},\n    {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['MetaData', 'LastUpdatedTime'])) }} as {{ adapter.quote('updated_at') }},\n    _airbyte_emitted_at\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.json_extract_scalar", "macro.smartpill.string_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5370495}, "macro.smartpill.incremental_filter": {"unique_id": "macro.smartpill.incremental_filter", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/incremental_filter.sql", "original_file_path": "macros/quickbook_utils/incremental_filter.sql", "name": "incremental_filter", "macro_sql": "{% macro incremental_filter() -%}\n\n{% if is_incremental() %}\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% else %}\n    true\n{% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.538532}, "macro.smartpill.incremental_filter_line": {"unique_id": "macro.smartpill.incremental_filter_line", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/incremental_filter.sql", "original_file_path": "macros/quickbook_utils/incremental_filter.sql", "name": "incremental_filter_line", "macro_sql": "{% macro incremental_filter_line(parent_table) -%}\n\n{% if is_incremental() %}\n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from {{ parent_table }})\n{% else %}\n    true\n{% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5392268}, "macro.smartpill.unique_filter": {"unique_id": "macro.smartpill.unique_filter", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_filter.sql", "original_file_path": "macros/quickbook_utils/unique_filter.sql", "name": "unique_filter", "macro_sql": "{% macro unique_filter(table_name) -%}\n\n    id in (\n        select id\n        from {{ table_name }}\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5402462}, "macro.smartpill.unique_select": {"unique_id": "macro.smartpill.unique_select", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_filter.sql", "original_file_path": "macros/quickbook_utils/unique_filter.sql", "name": "unique_select", "macro_sql": "{% macro unique_select(table_name) -%}\n\n    select * from {{ table_name }}\n    where {{ unique_filter(table_name) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.unique_filter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5407917}, "macro.smartpill.hash_field": {"unique_id": "macro.smartpill.hash_field", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_hash.sql", "original_file_path": "macros/quickbook_utils/unique_hash.sql", "name": "hash_field", "macro_sql": "{% macro hash_field() -%}\n    {{ dbt_utils.surrogate_key([\n        adapter.quote('id'),\n        adapter.quote('_airbyte_emitted_at')\n    ]) }} as _hash_id\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5419998}, "macro.smartpill.mysql__test_equality": {"unique_id": "macro.smartpill.mysql__test_equality", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "mysql__test_equality", "macro_sql": "{% macro mysql__test_equality(model, compare_model, compare_columns=None) %}\n\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n    {%- if not compare_columns -%}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n    with a as (\n        select * from {{ model }}\n    ),\n\n    b as (\n        select * from {{ compare_model }}\n    ),\n\n    a_minus_b as (\n        select {{ compare_cols_csv }} from a\n        where ({{ compare_cols_csv }}) not in\n            (select {{ compare_cols_csv }} from b)\n    ),\n\n    b_minus_a as (\n        select {{ compare_cols_csv }} from b\n        where ({{ compare_cols_csv }}) not in\n            (select {{ compare_cols_csv }} from a)\n    ),\n\n    unioned as (\n        select * from a_minus_b\n        union all\n        select * from b_minus_a\n    ),\n\n    final as (\n        select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n    )\n\n    select count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.5474067}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.6570232}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.6612377}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.6630054}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7367482}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7389026}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7493749}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7502227}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7593422}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7604504}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7606692}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7611098}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.7613664}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.8405013}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.8424838}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.9308789}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.933602}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.937888}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.9408386}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.9437637}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.9498985}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.950581}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.9531941}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413921.953982}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0399985}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0411603}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0437672}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0448413}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0572336}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0586438}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.059045}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0596426}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0607045}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0619662}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0623121}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.0627022}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1455412}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1557324}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1564732}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1569352}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.157326}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1577654}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1583798}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1588864}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.159656}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1603107}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.160715}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1624842}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.1629076}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.2353191}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.236144}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.2372963}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.2518847}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.3602347}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.361601}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.3623986}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5303788}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5314758}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5326154}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.533941}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5352218}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5362208}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5383663}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5482752}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5492194}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5511122}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.5519195}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.552623}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.6356792}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.6435974}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.654895}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.657988}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.6589637}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.743717}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.7459671}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.7515132}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8418498}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.843202}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8541322}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8592463}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8604505}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8610368}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.8621047}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.862941}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.9326954}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.9337945}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.934965}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.9486647}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.9499958}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413922.9513035}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.0504243}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.1401136}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.1408603}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.1414728}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.1420622}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.1455286}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.2360494}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.2510788}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.3585868}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.4521835}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.4582899}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.5554802}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.5566034}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.5584393}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.6501405}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.7325006}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.8463252}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.9330854}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.9383404}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413923.952405}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.0321739}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.033016}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.033904}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.0356872}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.1556113}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.1588154}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.2389588}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.239722}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.247474}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.2518957}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.3310435}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.3321455}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.438896}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.5451186}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.5490596}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.5500956}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.631641}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.6323583}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.632844}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.6335123}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.6339917}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.6360066}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.6367705}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.7407043}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413924.9407718}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0324059}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.03368}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0343993}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0347714}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0355844}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0389934}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0547218}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0569692}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.0603154}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.8528583}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.94071}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413925.942071}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0425935}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0518067}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0529773}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0534906}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.053751}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0555475}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0559618}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.056379}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.0587528}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.2429023}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.252705}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.2539155}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.259749}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.343931}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.3457184}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.357051}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.3618681}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.362661}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4350607}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4389622}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.456}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.457171}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4575303}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4578474}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4586349}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4589508}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4602675}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.460555}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.46074}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4610786}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.461475}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4617507}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.462112}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.4623904}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5394585}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.542518}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5428646}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5431798}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5434806}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5437665}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5551867}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5557382}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.556058}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.556756}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5570621}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5573406}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.5579913}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.558306}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6352065}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6363955}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6367457}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6370687}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6377552}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6380515}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6383295}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6400664}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.640603}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6411297}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6560638}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.656504}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6569154}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6573212}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.6609907}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.744498}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.7452512}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.74594}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8413177}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8517435}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8534167}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8536658}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.853881}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8547597}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8551457}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8554726}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8567247}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8569968}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8572485}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8579915}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.8581865}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.85837}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.939037}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.940575}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9444501}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9461462}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9469035}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9527276}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.953188}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9536958}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9545817}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9548473}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9558697}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9562187}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.956559}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9575095}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413926.9579313}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0397296}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0404797}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.041184}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0418618}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0437822}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0443628}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.044881}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0453956}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0480075}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.0486915}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.049407}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.137039}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1393454}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1525624}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1534355}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.154453}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1548865}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1557136}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1561215}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1569304}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1574168}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.1587048}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.354593}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.356913}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.3583362}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.360523}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.5431929}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.5509593}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6409225}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6428163}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.643622}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6459954}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6476}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6494417}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.6506782}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.739432}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.7434585}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.7518983}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.7532308}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.7556083}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.7565546}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.847475}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9387507}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9414306}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9430907}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.944743}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9454708}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9597206}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9610794}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413927.9623835}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.0301657}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.041696}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.0432656}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.046109}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.053423}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.055736}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.056494}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.0585701}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.1306715}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.1335583}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.1365883}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.1487699}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.152883}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2440233}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2456458}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2493005}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2548158}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.255448}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2570705}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.2597}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.263158}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.332556}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.3351336}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.338157}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.3418975}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.3447764}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.3485465}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.4399838}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.441164}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.4442074}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.446391}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.5320113}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.5333025}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.534847}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.5362031}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.540211}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.5413914}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.5519748}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.6326795}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.6346107}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.6361473}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.6377275}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.639159}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.6513789}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.736053}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.738182}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.751685}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.smartpill.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.7544456}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.7571251}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.758766}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.8428879}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.8577206}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413928.9525638}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.0305033}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.0505984}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.059754}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.0609424}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.0620196}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.0628057}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.1319788}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644413929.1347172}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.smartpill.quickbook_deposits_abt": [{"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qd.id as deposit_id,\n    qd.account_id as deposit_account_id,\n    qd.created_at as deposit_created_at,\n    qd.currency_name as deposit_currency_name,\n    qd.line as deposit_line,\n    qd.total_amount as deposit_total_amount,\n    qd.transaction_date as deposit_transaction_date,\n    qd.updated_at as deposit_updated_at,\n    qdl.id as deposit_line_id,\n    qdl.amount as deposit_line_amount,\n    qdl.line_num as deposit_line_num,\n    qdl.class_id as deposit_line_class_id,\n    qdl.account_id as deposit_line_account_id,\n    qdl.customer_id as deposit_line_customer_id,\n    qad.fully_qualified_name as deposit_account_fully_qualified_name,\n    qad.name as deposit_account_name,\n    qad.account_number as deposit_account_number,\n    qad.parent_account_id as deposit_account_parent_account_id,\n    qad.account_type as deposit_account_type,\n    qad.account_sub_type as deposit_account_sub_type,\n    qad.classification as deposit_account_classification,\n    qadl.fully_qualified_name as deposit_line_account_fully_qualified_name,\n    qadl.name as deposit_line_account_name,\n    qadl.account_number as deposit_line_account_number,\n    qadl.parent_account_id as deposit_line_account_parent_account_id,\n    qadl.account_type as deposit_line_account_type,\n    qadl.account_sub_type as deposit_line_account_sub_type,\n    qadl.classification as deposit_line_account_classification,\n    qc.fully_qualified_name as deposit_line_customer_fully_qualified_name,\n    qc.company_name as deposit_line_customer_company_name,\n    qc.display_name as deposit_line_customer_display_name,\n    qcl.fully_qualified_name as deposit_line_class_fully_qualified_name,\n    qd._airbyte_quickbook_deposits_hashid as _airbyte_quickbook_deposits_hashid,\n    qd._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_deposits') }} qd\nleft join {{ ref('quickbook_deposits_lines') }} qdl using (`_airbyte_quickbook_deposits_hashid`)\nleft join {{ ref('quickbook_accounts') }} qadl on (qadl.id = qdl.account_id)\nleft join {{ ref('quickbook_accounts') }} qad on (qad.id = qd.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qdl.customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qdl.class_id)", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_deposits_abt"], "unique_id": "model.smartpill.quickbook_deposits_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_deposits_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_deposits_abt.sql", "name": "quickbook_deposits_abt", "alias": "quickbook_deposits_abt", "checksum": {"name": "sha256", "checksum": "a89c334b29341c20937b2635d41a17837bba57809bfb5b4ec4e933b812305307"}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1644413941.7342486}], "model.smartpill.quickbook_journal_entries_abt": [{"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qje.id as journal_entry_id,\n    qje.created_at as journal_entry_created_at,\n    qje.currency_name as journal_entry_currency_name,\n    qje.line as journal_entry_line,\n    qje.private_note as journal_entry_private_note,\n    qje.is_adjustment as journal_entry_is_adjustment,\n    qje.transaction_date as journal_entry_transaction_date,\n    qje.updated_at as journal_entry_updated_at,\n    qjel.id as journal_entry_line_id,\n    qjel.amount as journal_entry_line_amount,\n    qjel.description as journal_entry_line_description,\n    qjel.class_id as journal_entry_line_class_id,\n    qjel.account_id as journal_entry_line_account_id,\n    qjel.customer_id as journal_entry_line_customer_id,\n    qjel.posting_type as journal_entry_line_posting_type,\n    qajel.fully_qualified_name as journal_entry_line_account_fully_qualified_name,\n    qajel.name as journal_entry_line_account_name,\n    qajel.account_number as journal_entry_line_account_number,\n    qajel.parent_account_id as journal_entry_line_account_parent_account_id,\n    qajel.account_type as journal_entry_line_account_type,\n    qajel.account_sub_type as journal_entry_line_account_sub_type,\n    qajel.classification as journal_entry_line_account_classification,\n    qc.fully_qualified_name as journal_entry_line_customer_fully_qualified_name,\n    qc.company_name as journal_entry_line_customer_company_name,\n    qc.display_name as journal_entry_line_customer_display_name,\n    qcl.fully_qualified_name as journal_entry_line_class_fully_qualified_name,\n    qje._airbyte_quickbook_journal_entries_hashid as _airbyte_quickbook_journal_entries_hashid,\n    qje._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_journal_entries') }} qje\nleft join {{ ref('quickbook_journal_entries_lines') }} qjel using (`_airbyte_quickbook_journal_entries_hashid`)\nleft join {{ ref('quickbook_accounts') }} qajel on (qajel.id = qjel.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qjel.customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qjel.class_id)\n\n\n-- WITH RECURSIVE tree AS ( \n--    SELECT id, \n--           parent_account_id,\n--           1 as level,\n--           id AS top_level_id\n--    FROM quickbook_accounts\n--    WHERE parent_account_id IS NULL\n\n--    UNION ALL\n\n--    SELECT c.id,\n--           c.parent_account_id, \n--           t.level + 1,\n--           COALESCE(t.top_level_id) AS top_level_id\n--    FROM quickbook_accounts c\n--      JOIN tree t ON c.parent_account_id = t.id\n-- )\n-- SELECT *\n-- FROM tree;", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_journal_entries_abt"], "unique_id": "model.smartpill.quickbook_journal_entries_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_journal_entries_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_journal_entries_abt.sql", "name": "quickbook_journal_entries_abt", "alias": "quickbook_journal_entries_abt", "checksum": {"name": "sha256", "checksum": "76141ca49f399277e920b7391fc0741ef6dffda3f08ff0afece3d15f0c10372f"}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1644413941.859362}], "model.smartpill.quickbook_purchases_abt": [{"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qp.id as purchase_id,\n    qp.account_id as purchase_account_id,\n    qp.created_at as purchase_created_at,\n    qp.currency_name as purchase_currency_name,\n    qp.line as purchase_line,\n    qp.total_amount as purchase_total_amount,\n    qp.transaction_date as purchase_transaction_date,\n    qp.updated_at as purchase_updated_at,\n    qpl.id as purchase_line_id,\n    qpl.amount as purchase_line_amount,\n    qpl.description as purchase_line_description,\n    qpl.account_expense_account_id as purchase_line_account_expense_account_id,\n    qpl.account_expense_class_id as purchase_line_account_expense_class_id,\n    qpl.account_expense_customer_id as purchase_line_account_expense_customer_id,\n    qpl.item_expense_item_id as purchase_line_item_expense_item_id,\n    qpl.item_expense_billable_status as purchase_line_item_expense_billable_status,\n    qap.fully_qualified_name as purchase_account_fully_qualified_name,\n    qap.name as purchase_account_name,\n    qap.parent_account_id as purchase_account_parent_account_id,\n    qap.account_number as purchase_account_number,\n    qap.account_type as purchase_account_type,\n    qap.account_sub_type as purchase_account_sub_type,\n    qap.classification as purchase_account_classification,\n    qapl.fully_qualified_name as purchase_line_account_fully_qualified_name,\n    qapl.name as purchase_line_account_name,\n    qapl.parent_account_id as purchase_line_account_parent_account_id,\n    qapl.account_number as purchase_line_account_number,\n    qapl.account_type as purchase_line_account_type,\n    qapl.account_sub_type as purchase_line_account_sub_type,\n    qapl.classification as purchase_line_account_classification,\n    qc.fully_qualified_name as purchase_line_customer_fully_qualified_name,\n    qc.company_name as purchase_line_customer_company_name,\n    qc.display_name as purchase_line_customer_display_name,\n    qcl.fully_qualified_name as purchase_line_class_fully_qualified_name,\n    qp._airbyte_quickbook_purchases_hashid as _airbyte_quickbook_purchases_hashid,\n    qp._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_purchases') }} qp\nleft join {{ ref('quickbook_purchases_lines') }} qpl using (`_airbyte_quickbook_purchases_hashid`)\nleft join {{ ref('quickbook_accounts') }} qapl on (qapl.id = qpl.account_expense_account_id)\nleft join {{ ref('quickbook_accounts') }} qap on (qap.id = qp.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qpl.account_expense_customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qpl.account_expense_class_id)", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_purchases_abt"], "unique_id": "model.smartpill.quickbook_purchases_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_purchases_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_purchases_abt.sql", "name": "quickbook_purchases_abt", "alias": "quickbook_purchases_abt", "checksum": {"name": "sha256", "checksum": "5fe62286e6fd50c83200269a54cd3dd315e382856303c425c740302c89cb13a8"}, "tags": [], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}, "created_at": 1644413941.936935}], "model.smartpill.quickbook_general_ledger_balances": [{"raw_sql": "{{ config(enabled=False) }}\n\nwith general_ledger as (\n    select *\n    from {{ref('quickbook_general_ledger')}}\n),\n\ngl_accounting_periods as (\n    select *\n    from {{ref('quickbook_general_ledger_date_spine')}}\n),\n\ngl_period_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        cast({{ date_trunc(\"year\", \"transaction_date\") }} as date) as date_year,\n        cast({{ date_trunc(\"month\", \"transaction_date\") }} as date) as date_month,\n        sum(adjusted_amount) as period_balance\n    from general_ledger\n\n    {{ dbt_utils.group_by(12) }}\n),\n\ngl_cumulative_balance as (\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id order by date_month, account_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n),\n\ngl_value_partion as (\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by account_id, period_last_day rows unbounded preceding) as gl_partition\n    from gl_patch\n\n),\n \nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition order by period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition order by period_last_day rows unbounded preceding)) as period_ending_balance\n    from gl_value_partion\n\n)\n\nselect *\nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.date_trunc", "macro.dbt_utils.group_by"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_balances"], "unique_id": "model.smartpill.quickbook_general_ledger_balances", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_balances.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_balances.sql", "name": "quickbook_general_ledger_balances", "alias": "quickbook_general_ledger_balances", "checksum": {"name": "sha256", "checksum": "83462c2ef2259a5bf037a2c61f649a5fb2b71e3a5f64a7be432c5bfc72bb8826"}, "tags": [], "refs": [["quickbook_general_ledger"], ["quickbook_general_ledger_date_spine"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1644413942.0557036}], "model.smartpill.quickbook_general_ledger_by_period": [{"raw_sql": "{{ config(enabled=False) }}\nselect *\nfrom {{ref('quickbook_general_ledger_balances')}}", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_by_period"], "unique_id": "model.smartpill.quickbook_general_ledger_by_period", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_by_period.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_by_period.sql", "name": "quickbook_general_ledger_by_period", "alias": "quickbook_general_ledger_by_period", "checksum": {"name": "sha256", "checksum": "f67c28a1e7a3ae7a60e48252e599045ca374147c73a63114661b18545377ed30"}, "tags": [], "refs": [["quickbook_general_ledger_balances"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1644413942.252019}], "model.smartpill.quickbook_general_ledger_date_spine": [{"raw_sql": "{{ config(enabled=False) }}\n\nwith spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( transaction_date ) as min_date from {{ ref('quickbook_general_ledger') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n        {% if target.type == 'postgres' %}\n            {% set first_date_adjust = \"cast('\" ~ first_date[0:10] ~ \"' as date)\" %}\n\n        {% else %}\n            {% set first_date_adjust = \"'\" ~ first_date[0:10] ~ \"'\" %}\n\n        {% endif %}\n\n    {% else %} {% set first_date_adjust = \"'2000-01-01'\" %}\n    {% endif %}\n\n    {% if execute %}\n    {% set last_date_query %}\n        select  max( transaction_date ) as max_date from {{ ref('quickbook_general_ledger') }}\n    {% endset %}\n\n    {% set current_date_query %}\n        select current_date\n    {% endset %}\n\n    {% if run_query(current_date_query).columns[0][0]|string < run_query(last_date_query).columns[0][0]|string %}\n\n    {% set last_date = run_query(last_date_query).columns[0][0]|string %}\n\n    {% else %} {% set last_date = run_query(current_date_query).columns[0][0]|string %}\n    {% endif %}\n        \n    {% if target.type == 'postgres' %}\n        {% set last_date_adjust = \"cast('\" ~ last_date[0:10] ~ \"' as date)\" %}\n\n    {% else %}\n        {% set last_date_adjust = \"'\" ~ last_date[0:10] ~ \"'\" %}\n\n    {% endif %}\n    {% endif %}\n\n    {{ date_spine(\n        datepart=\"month\",\n        start_date=first_date_adjust,\n        end_date=dateadd(\"month\", 1, last_date_adjust)\n        )\n    }}\n),\n\ngeneral_ledger as (\n    select *\n    from {{ ref('quickbook_general_ledger') }}\n),\n\ndate_spine as (\n    select\n        cast({{ date_trunc(\"year\", \"date_month\") }} as date) as date_year,\n        cast({{ date_trunc(\"month\", \"date_month\") }} as date) as period_first_day,\n        {{ last_day(\"date_month\", \"month\") }} as period_last_day,\n        row_number() over (order by cast({{ date_trunc(\"month\", \"date_month\") }} as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.smartpill.dateadd", "macro.smartpill.date_spine", "macro.smartpill.date_trunc", "macro.smartpill.last_day"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_date_spine"], "unique_id": "model.smartpill.quickbook_general_ledger_date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_date_spine.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_date_spine.sql", "name": "quickbook_general_ledger_date_spine", "alias": "quickbook_general_ledger_date_spine", "checksum": {"name": "sha256", "checksum": "4154857fb3b15c134b3492ba8caf5556645d3a8987b54e3b28eb1d69edc3d279"}, "tags": [], "refs": [["quickbook_general_ledger"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1644413942.259413}], "model.smartpill.quickbook_profit_and_loss": [{"raw_sql": "{{ config(enabled=False) }}\n\nwith general_ledger_by_period as (\n    select *\n    from {{ref('quickbook_general_ledger_by_period')}}\n    where financial_statement_helper = 'income_statement'\n\n), final as (\n    select\n        period_first_day as calendar_date,\n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "datawarehouse", "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_profit_and_loss"], "unique_id": "model.smartpill.quickbook_profit_and_loss", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_profit_and_loss.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_profit_and_loss.sql", "name": "quickbook_profit_and_loss", "alias": "quickbook_profit_and_loss", "checksum": {"name": "sha256", "checksum": "3d92260578cf471a3453af80caad28d4396652661c775902f2f2532b89a5a315"}, "tags": [], "refs": [["quickbook_general_ledger_by_period"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}, "created_at": 1644413942.9361014}]}, "parent_map": {"model.smartpill.goodpill_historic_abt": ["model.smartpill.clinics", "model.smartpill.drugs", "model.smartpill.goodpill_historic", "model.smartpill.locations", "model.smartpill.patients", "model.smartpill.pharmacies", "model.smartpill.providers"], "model.smartpill.goodpill_snapshot_abt": ["model.smartpill.clinics", "model.smartpill.drugs", "model.smartpill.goodpill_snapshot", "model.smartpill.locations", "model.smartpill.patients", "model.smartpill.pharmacies", "model.smartpill.providers"], "model.smartpill.clinics": ["model.smartpill.gp_rxs_single"], "model.smartpill.drugs": ["model.smartpill.gp_drugs"], "model.smartpill.goodpill_historic": ["model.smartpill.order_items_historic", "model.smartpill.orders_historic", "model.smartpill.patients_status_historic", "model.smartpill.rxs_historic"], "model.smartpill.locations": ["model.smartpill.gp_orders", "model.smartpill.gp_patients"], "model.smartpill.order_items_historic": ["model.smartpill.an_dates", "model.smartpill.an_fills_logs", "model.smartpill.an_patients", "model.smartpill.an_times", "model.smartpill.gp_order_items"], "model.smartpill.orders_historic": ["model.smartpill.an_locations", "model.smartpill.an_locations", "model.smartpill.an_orders_logs", "model.smartpill.an_orders_logs", "model.smartpill.an_patients", "model.smartpill.an_patients", "model.smartpill.gp_orders"], "model.smartpill.patients": ["model.smartpill.gp_patients", "model.smartpill.gp_rxs_grouped"], "model.smartpill.patients_status_historic": ["model.smartpill.gp_patients", "model.smartpill.gp_patients", "model.smartpill.gp_patients", "model.smartpill.gp_patients"], "model.smartpill.pharmacies": ["model.smartpill.gp_patients"], "model.smartpill.providers": ["model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single"], "model.smartpill.rxs_historic": ["model.smartpill.an_clinics", "model.smartpill.an_clinics", "model.smartpill.an_dates", "model.smartpill.an_drugs", "model.smartpill.an_drugs", "model.smartpill.an_fills_logs", "model.smartpill.an_fills_logs", "model.smartpill.an_patients", "model.smartpill.an_patients", "model.smartpill.an_providers", "model.smartpill.an_providers", "model.smartpill.an_times", "model.smartpill.gp_patients", "model.smartpill.gp_rxs_grouped", "model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single", "model.smartpill.gp_rxs_single"], "model.smartpill.an_clinics": ["source.smartpill.raw._airbyte_raw_analytics_clinics"], "model.smartpill.an_dates": ["source.smartpill.raw._airbyte_raw_analytics_dates"], "model.smartpill.an_drugs": ["source.smartpill.raw._airbyte_raw_analytics_drugs"], "model.smartpill.an_fills_logs": ["source.smartpill.raw._airbyte_raw_analytics_fills_logs"], "model.smartpill.an_locations": ["source.smartpill.raw._airbyte_raw_analytics_locations"], "model.smartpill.an_orders_logs": ["source.smartpill.raw._airbyte_raw_analytics_orders_logs"], "model.smartpill.an_patients": ["source.smartpill.raw._airbyte_raw_analytics_patients"], "model.smartpill.an_pharmacies": ["source.smartpill.raw._airbyte_raw_analytics_pharmacies"], "model.smartpill.an_providers": ["source.smartpill.raw._airbyte_raw_analytics_providers"], "model.smartpill.an_times": ["source.smartpill.raw._airbyte_raw_analytics_times"], "model.smartpill.gp_drugs": ["source.smartpill.raw._airbyte_raw_goodpill_gp_drugs"], "model.smartpill.gp_order_items": ["source.smartpill.raw._airbyte_raw_goodpill_gp_order_items"], "model.smartpill.gp_orders": ["source.smartpill.raw._airbyte_raw_goodpill_gp_orders"], "model.smartpill.gp_patients": ["source.smartpill.raw._airbyte_raw_goodpill_gp_patients"], "model.smartpill.gp_rxs_grouped": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped"], "model.smartpill.gp_rxs_single": ["source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single"], "model.smartpill.goodpill_snapshot": ["model.smartpill.order_items_historic", "model.smartpill.order_items_historic", "model.smartpill.order_items_historic", "model.smartpill.orders_historic", "model.smartpill.orders_historic", "model.smartpill.orders_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic", "seed.smartpill.goodpill_events", "seed.smartpill.goodpill_events", "seed.smartpill.goodpill_events", "seed.smartpill.goodpill_events"], "model.smartpill.quickbook_general_ledger_abt": ["model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_classes", "model.smartpill.quickbook_customers", "model.smartpill.quickbook_general_ledger"], "model.smartpill.quickbook_accounts_top_level": ["model.smartpill.quickbook_accounts"], "model.smartpill.quickbook_general_ledger": ["model.smartpill.int_quickbooks__account_classifications", "model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__payroll_check_double_entry", "model.smartpill.int_quickbooks__purchase_double_entry"], "model.smartpill.quickbook_accounts": ["source.smartpill.raw._airbyte_raw_quickbook_accounts"], "model.smartpill.quickbook_bill_payments": ["source.smartpill.raw._airbyte_raw_quickbook_bill_payments"], "model.smartpill.quickbook_bill_payments_lines": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments"], "model.smartpill.quickbook_bills": ["source.smartpill.raw._airbyte_raw_quickbook_bills"], "model.smartpill.quickbook_bills_lines": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills"], "model.smartpill.quickbook_classes": ["source.smartpill.raw._airbyte_raw_quickbook_classes"], "model.smartpill.quickbook_customers": ["source.smartpill.raw._airbyte_raw_quickbook_customers"], "model.smartpill.quickbook_deposits": ["source.smartpill.raw._airbyte_raw_quickbook_deposits"], "model.smartpill.quickbook_deposits_lines": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits"], "model.smartpill.quickbook_invoices": ["source.smartpill.raw._airbyte_raw_quickbook_invoices"], "model.smartpill.quickbook_invoices_lines": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices"], "model.smartpill.quickbook_items": ["source.smartpill.raw._airbyte_raw_quickbook_items"], "model.smartpill.quickbook_journal_entries": ["source.smartpill.raw._airbyte_raw_quickbook_journal_entries"], "model.smartpill.quickbook_journal_entries_lines": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries"], "model.smartpill.quickbook_payments": ["source.smartpill.raw._airbyte_raw_quickbook_payments"], "model.smartpill.quickbook_purchases": ["source.smartpill.raw._airbyte_raw_quickbook_purchases"], "model.smartpill.quickbook_purchases_lines": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases"], "model.smartpill.int_quickbooks__account_classifications": ["model.smartpill.quickbook_accounts"], "model.smartpill.int_quickbooks__bill_double_entry": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_items"], "model.smartpill.int_quickbooks__bill_payment_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_bill_payments"], "model.smartpill.int_quickbooks__deposit_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"], "model.smartpill.int_quickbooks__invoice_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_items"], "model.smartpill.int_quickbooks__journal_entry_double_entry": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"], "model.smartpill.int_quickbooks__payment_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_payments", "model.smartpill.quickbook_payments"], "model.smartpill.int_quickbooks__payroll_check_double_entry": ["source.smartpill.raw.quickbook_payroll_checks"], "model.smartpill.int_quickbooks__purchase_double_entry": ["model.smartpill.quickbook_items", "model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"], "seed.smartpill.goodpill_events": [], "test.smartpill.not_null_quickbook_accounts_id.a12b25cd25": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_created_at.3c095347ed": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_updated_at.a6113a6333": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts__hash_id.143e025811": ["model.smartpill.quickbook_accounts"], "test.smartpill.unique_quickbook_accounts__hash_id.46960e991f": ["model.smartpill.quickbook_accounts"], "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_balance.1f29272f5e": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_bill_payments_id.1499a08374": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments_created_at.0377523a21": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments_updated_at.2c9cbc0ebd": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments__hash_id.fd526f8604": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.unique_quickbook_bill_payments__hash_id.9710f17760": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments_lines"], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_bills_id.ade9b1b0e8": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills_created_at.e161c96e40": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills_updated_at.9b89152a35": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills__hash_id.f6bb81e956": ["model.smartpill.quickbook_bills"], "test.smartpill.unique_quickbook_bills__hash_id.dc216c74e4": ["model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"], "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"], "test.smartpill.not_null_quickbook_customers_id.96bc4b1497": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers_created_at.382d28fb34": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers_updated_at.4c4939f533": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers__hash_id.bee7bb4912": ["model.smartpill.quickbook_customers"], "test.smartpill.unique_quickbook_customers__hash_id.f980d531c9": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_classes_id.341dc94c0b": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes_created_at.8849d47908": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes_updated_at.6c3f5bf01f": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes__hash_id.ce90f05ef4": ["model.smartpill.quickbook_classes"], "test.smartpill.unique_quickbook_classes__hash_id.767e20cd2e": ["model.smartpill.quickbook_classes"], "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.not_null_quickbook_deposits_id.d999e6aa7a": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits_created_at.0e50747340": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits_updated_at.8c397fa724": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits__hash_id.5e9f31c2c7": ["model.smartpill.quickbook_deposits"], "test.smartpill.unique_quickbook_deposits__hash_id.c3b47a62c6": ["model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.not_null_quickbook_purchases_id.b59acb53aa": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases_created_at.5396da13c3": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases_updated_at.7f3c1ad27f": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases__hash_id.60e376006a": ["model.smartpill.quickbook_purchases"], "test.smartpill.unique_quickbook_purchases__hash_id.895322ff1b": ["model.smartpill.quickbook_purchases"], "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_journal_entries_id.49dc1d7aaa": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries_created_at.afe29e0363": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries_updated_at.54a9ed1f87": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries__hash_id.9c0aa8856e": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.unique_quickbook_journal_entries__hash_id.badff0ae61": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"], "source.smartpill.raw._airbyte_raw_analytics_clinics": [], "source.smartpill.raw._airbyte_raw_analytics_dates": [], "source.smartpill.raw._airbyte_raw_analytics_drugs": [], "source.smartpill.raw._airbyte_raw_analytics_fills_logs": [], "source.smartpill.raw._airbyte_raw_analytics_locations": [], "source.smartpill.raw._airbyte_raw_analytics_orders_logs": [], "source.smartpill.raw._airbyte_raw_analytics_patients": [], "source.smartpill.raw._airbyte_raw_analytics_pharmacies": [], "source.smartpill.raw._airbyte_raw_analytics_providers": [], "source.smartpill.raw._airbyte_raw_analytics_times": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": [], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": [], "source.smartpill.raw._airbyte_raw_quickbook_accounts": [], "source.smartpill.raw._airbyte_raw_quickbook_bill_payments": [], "source.smartpill.raw._airbyte_raw_quickbook_bills": [], "source.smartpill.raw._airbyte_raw_quickbook_classes": [], "source.smartpill.raw._airbyte_raw_quickbook_customers": [], "source.smartpill.raw._airbyte_raw_quickbook_deposits": [], "source.smartpill.raw._airbyte_raw_quickbook_invoices": [], "source.smartpill.raw._airbyte_raw_quickbook_items": [], "source.smartpill.raw._airbyte_raw_quickbook_journal_entries": [], "source.smartpill.raw._airbyte_raw_quickbook_payments": [], "source.smartpill.raw._airbyte_raw_quickbook_purchases": [], "source.smartpill.raw.quickbook_payroll_checks": []}, "child_map": {"model.smartpill.goodpill_historic_abt": [], "model.smartpill.goodpill_snapshot_abt": [], "model.smartpill.clinics": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.drugs": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.goodpill_historic": ["model.smartpill.goodpill_historic_abt"], "model.smartpill.locations": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.order_items_historic": ["model.smartpill.goodpill_historic", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot"], "model.smartpill.orders_historic": ["model.smartpill.goodpill_historic", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot"], "model.smartpill.patients": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.patients_status_historic": ["model.smartpill.goodpill_historic", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot"], "model.smartpill.pharmacies": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.providers": ["model.smartpill.goodpill_historic_abt", "model.smartpill.goodpill_snapshot_abt"], "model.smartpill.rxs_historic": ["model.smartpill.goodpill_historic", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot"], "model.smartpill.an_clinics": ["model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_dates": ["model.smartpill.order_items_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_drugs": ["model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_fills_logs": ["model.smartpill.order_items_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_locations": ["model.smartpill.orders_historic", "model.smartpill.orders_historic"], "model.smartpill.an_orders_logs": ["model.smartpill.orders_historic", "model.smartpill.orders_historic"], "model.smartpill.an_patients": ["model.smartpill.order_items_historic", "model.smartpill.orders_historic", "model.smartpill.orders_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_pharmacies": [], "model.smartpill.an_providers": ["model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.an_times": ["model.smartpill.order_items_historic", "model.smartpill.rxs_historic"], "model.smartpill.gp_drugs": ["model.smartpill.drugs"], "model.smartpill.gp_order_items": ["model.smartpill.order_items_historic"], "model.smartpill.gp_orders": ["model.smartpill.locations", "model.smartpill.orders_historic"], "model.smartpill.gp_patients": ["model.smartpill.locations", "model.smartpill.patients", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.patients_status_historic", "model.smartpill.pharmacies", "model.smartpill.rxs_historic"], "model.smartpill.gp_rxs_grouped": ["model.smartpill.patients", "model.smartpill.rxs_historic"], "model.smartpill.gp_rxs_single": ["model.smartpill.clinics", "model.smartpill.providers", "model.smartpill.providers", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic", "model.smartpill.rxs_historic"], "model.smartpill.goodpill_snapshot": ["model.smartpill.goodpill_snapshot_abt"], "model.smartpill.quickbook_general_ledger_abt": [], "model.smartpill.quickbook_accounts_top_level": ["model.smartpill.quickbook_general_ledger_abt", "model.smartpill.quickbook_general_ledger_abt"], "model.smartpill.quickbook_general_ledger": ["model.smartpill.quickbook_general_ledger_abt"], "model.smartpill.quickbook_accounts": ["model.smartpill.int_quickbooks__account_classifications", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.quickbook_accounts_top_level", "test.smartpill.not_null_quickbook_accounts__hash_id.143e025811", "test.smartpill.not_null_quickbook_accounts_balance.1f29272f5e", "test.smartpill.not_null_quickbook_accounts_created_at.3c095347ed", "test.smartpill.not_null_quickbook_accounts_id.a12b25cd25", "test.smartpill.not_null_quickbook_accounts_updated_at.a6113a6333", "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866", "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866", "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005", "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f", "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2", "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e", "test.smartpill.unique_quickbook_accounts__hash_id.46960e991f"], "model.smartpill.quickbook_bill_payments": ["model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bill_payments_lines", "test.smartpill.not_null_quickbook_bill_payments__hash_id.fd526f8604", "test.smartpill.not_null_quickbook_bill_payments_created_at.0377523a21", "test.smartpill.not_null_quickbook_bill_payments_id.1499a08374", "test.smartpill.not_null_quickbook_bill_payments_updated_at.2c9cbc0ebd", "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2", "test.smartpill.unique_quickbook_bill_payments__hash_id.9710f17760"], "model.smartpill.quickbook_bill_payments_lines": ["test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147", "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c", "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78"], "model.smartpill.quickbook_bills": ["model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_bills_lines", "test.smartpill.not_null_quickbook_bills__hash_id.f6bb81e956", "test.smartpill.not_null_quickbook_bills_created_at.e161c96e40", "test.smartpill.not_null_quickbook_bills_id.ade9b1b0e8", "test.smartpill.not_null_quickbook_bills_updated_at.9b89152a35", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147", "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281", "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9", "test.smartpill.unique_quickbook_bills__hash_id.dc216c74e4"], "model.smartpill.quickbook_bills_lines": ["model.smartpill.int_quickbooks__bill_double_entry", "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281", "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9"], "model.smartpill.quickbook_classes": ["model.smartpill.quickbook_general_ledger_abt", "test.smartpill.not_null_quickbook_classes__hash_id.ce90f05ef4", "test.smartpill.not_null_quickbook_classes_created_at.8849d47908", "test.smartpill.not_null_quickbook_classes_id.341dc94c0b", "test.smartpill.not_null_quickbook_classes_updated_at.6c3f5bf01f", "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8", "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0", "test.smartpill.unique_quickbook_classes__hash_id.767e20cd2e"], "model.smartpill.quickbook_customers": ["model.smartpill.quickbook_general_ledger_abt", "test.smartpill.not_null_quickbook_customers__hash_id.bee7bb4912", "test.smartpill.not_null_quickbook_customers_created_at.382d28fb34", "test.smartpill.not_null_quickbook_customers_id.96bc4b1497", "test.smartpill.not_null_quickbook_customers_updated_at.4c4939f533", "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3", "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce", "test.smartpill.unique_quickbook_customers__hash_id.f980d531c9"], "model.smartpill.quickbook_deposits": ["model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.quickbook_deposits_lines", "model.smartpill.quickbook_deposits_lines", "test.smartpill.not_null_quickbook_deposits__hash_id.5e9f31c2c7", "test.smartpill.not_null_quickbook_deposits_created_at.0e50747340", "test.smartpill.not_null_quickbook_deposits_id.d999e6aa7a", "test.smartpill.not_null_quickbook_deposits_updated_at.8c397fa724", "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c", "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005", "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00", "test.smartpill.unique_quickbook_deposits__hash_id.c3b47a62c6"], "model.smartpill.quickbook_deposits_lines": ["model.smartpill.int_quickbooks__deposit_double_entry", "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00", "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f", "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8", "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3"], "model.smartpill.quickbook_invoices": ["model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_invoices_lines"], "model.smartpill.quickbook_invoices_lines": ["model.smartpill.int_quickbooks__invoice_double_entry"], "model.smartpill.quickbook_items": ["model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__purchase_double_entry"], "model.smartpill.quickbook_journal_entries": ["model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.quickbook_journal_entries_lines", "model.smartpill.quickbook_journal_entries_lines", "test.smartpill.not_null_quickbook_journal_entries__hash_id.9c0aa8856e", "test.smartpill.not_null_quickbook_journal_entries_created_at.afe29e0363", "test.smartpill.not_null_quickbook_journal_entries_id.49dc1d7aaa", "test.smartpill.not_null_quickbook_journal_entries_updated_at.54a9ed1f87", "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78", "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90", "test.smartpill.unique_quickbook_journal_entries__hash_id.badff0ae61"], "model.smartpill.quickbook_journal_entries_lines": ["model.smartpill.int_quickbooks__journal_entry_double_entry", "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90", "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2", "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b", "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6"], "model.smartpill.quickbook_payments": ["model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__payment_double_entry"], "model.smartpill.quickbook_purchases": ["model.smartpill.int_quickbooks__purchase_double_entry", "model.smartpill.quickbook_purchases_lines", "model.smartpill.quickbook_purchases_lines", "test.smartpill.not_null_quickbook_purchases__hash_id.60e376006a", "test.smartpill.not_null_quickbook_purchases_created_at.5396da13c3", "test.smartpill.not_null_quickbook_purchases_id.b59acb53aa", "test.smartpill.not_null_quickbook_purchases_updated_at.7f3c1ad27f", "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25", "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4", "test.smartpill.unique_quickbook_purchases__hash_id.895322ff1b"], "model.smartpill.quickbook_purchases_lines": ["model.smartpill.int_quickbooks__purchase_double_entry", "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce"], "model.smartpill.int_quickbooks__account_classifications": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__bill_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__bill_payment_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__deposit_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__invoice_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__journal_entry_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__payment_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__payroll_check_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__purchase_double_entry": ["model.smartpill.quickbook_general_ledger"], "seed.smartpill.goodpill_events": ["model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot", "model.smartpill.goodpill_snapshot"], "test.smartpill.not_null_quickbook_accounts_id.a12b25cd25": [], "test.smartpill.not_null_quickbook_accounts_created_at.3c095347ed": [], "test.smartpill.not_null_quickbook_accounts_updated_at.a6113a6333": [], "test.smartpill.not_null_quickbook_accounts__hash_id.143e025811": [], "test.smartpill.unique_quickbook_accounts__hash_id.46960e991f": [], "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_.1ef3f81866": [], "test.smartpill.not_null_quickbook_accounts_balance.1f29272f5e": [], "test.smartpill.not_null_quickbook_bill_payments_id.1499a08374": [], "test.smartpill.not_null_quickbook_bill_payments_created_at.0377523a21": [], "test.smartpill.not_null_quickbook_bill_payments_updated_at.2c9cbc0ebd": [], "test.smartpill.not_null_quickbook_bill_payments__hash_id.fd526f8604": [], "test.smartpill.unique_quickbook_bill_payments__hash_id.9710f17760": [], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_.940be60147": [], "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_.05c60eabd2": [], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_.74ec54787f": [], "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_.7613bf6d2c": [], "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_.6a0243be78": [], "test.smartpill.not_null_quickbook_bills_id.ade9b1b0e8": [], "test.smartpill.not_null_quickbook_bills_created_at.e161c96e40": [], "test.smartpill.not_null_quickbook_bills_updated_at.9b89152a35": [], "test.smartpill.not_null_quickbook_bills__hash_id.f6bb81e956": [], "test.smartpill.unique_quickbook_bills__hash_id.dc216c74e4": [], "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_.1c0ea3fbc9": [], "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_.55baa33281": [], "test.smartpill.not_null_quickbook_customers_id.96bc4b1497": [], "test.smartpill.not_null_quickbook_customers_created_at.382d28fb34": [], "test.smartpill.not_null_quickbook_customers_updated_at.4c4939f533": [], "test.smartpill.not_null_quickbook_customers__hash_id.bee7bb4912": [], "test.smartpill.unique_quickbook_customers__hash_id.f980d531c9": [], "test.smartpill.not_null_quickbook_classes_id.341dc94c0b": [], "test.smartpill.not_null_quickbook_classes_created_at.8849d47908": [], "test.smartpill.not_null_quickbook_classes_updated_at.6c3f5bf01f": [], "test.smartpill.not_null_quickbook_classes__hash_id.ce90f05ef4": [], "test.smartpill.unique_quickbook_classes__hash_id.767e20cd2e": [], "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_.9401d802d8": [], "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_.3da227e20f": [], "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_.b7dfd585c3": [], "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_.f387c86a00": [], "test.smartpill.not_null_quickbook_deposits_id.d999e6aa7a": [], "test.smartpill.not_null_quickbook_deposits_created_at.0e50747340": [], "test.smartpill.not_null_quickbook_deposits_updated_at.8c397fa724": [], "test.smartpill.not_null_quickbook_deposits__hash_id.5e9f31c2c7": [], "test.smartpill.unique_quickbook_deposits__hash_id.c3b47a62c6": [], "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_.af52410005": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_.ba8e9f034e": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_.bc7751dae0": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_.77011ad8ce": [], "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_.05bef6f0f4": [], "test.smartpill.not_null_quickbook_purchases_id.b59acb53aa": [], "test.smartpill.not_null_quickbook_purchases_created_at.5396da13c3": [], "test.smartpill.not_null_quickbook_purchases_updated_at.7f3c1ad27f": [], "test.smartpill.not_null_quickbook_purchases__hash_id.60e376006a": [], "test.smartpill.unique_quickbook_purchases__hash_id.895322ff1b": [], "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_.de403dfc25": [], "test.smartpill.not_null_quickbook_journal_entries_id.49dc1d7aaa": [], "test.smartpill.not_null_quickbook_journal_entries_created_at.afe29e0363": [], "test.smartpill.not_null_quickbook_journal_entries_updated_at.54a9ed1f87": [], "test.smartpill.not_null_quickbook_journal_entries__hash_id.9c0aa8856e": [], "test.smartpill.unique_quickbook_journal_entries__hash_id.badff0ae61": [], "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_.a3212fffc2": [], "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_.7feeb4e66b": [], "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_.689ebbf3f6": [], "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_.1ab076db90": [], "source.smartpill.raw._airbyte_raw_analytics_clinics": ["model.smartpill.an_clinics"], "source.smartpill.raw._airbyte_raw_analytics_dates": ["model.smartpill.an_dates"], "source.smartpill.raw._airbyte_raw_analytics_drugs": ["model.smartpill.an_drugs"], "source.smartpill.raw._airbyte_raw_analytics_fills_logs": ["model.smartpill.an_fills_logs"], "source.smartpill.raw._airbyte_raw_analytics_locations": ["model.smartpill.an_locations"], "source.smartpill.raw._airbyte_raw_analytics_orders_logs": ["model.smartpill.an_orders_logs"], "source.smartpill.raw._airbyte_raw_analytics_patients": ["model.smartpill.an_patients"], "source.smartpill.raw._airbyte_raw_analytics_pharmacies": ["model.smartpill.an_pharmacies"], "source.smartpill.raw._airbyte_raw_analytics_providers": ["model.smartpill.an_providers"], "source.smartpill.raw._airbyte_raw_analytics_times": ["model.smartpill.an_times"], "source.smartpill.raw._airbyte_raw_goodpill_gp_drugs": ["model.smartpill.gp_drugs"], "source.smartpill.raw._airbyte_raw_goodpill_gp_order_items": ["model.smartpill.gp_order_items"], "source.smartpill.raw._airbyte_raw_goodpill_gp_orders": ["model.smartpill.gp_orders"], "source.smartpill.raw._airbyte_raw_goodpill_gp_patients": ["model.smartpill.gp_patients"], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_grouped": ["model.smartpill.gp_rxs_grouped"], "source.smartpill.raw._airbyte_raw_goodpill_gp_rxs_single": ["model.smartpill.gp_rxs_single"], "source.smartpill.raw._airbyte_raw_quickbook_accounts": ["model.smartpill.quickbook_accounts"], "source.smartpill.raw._airbyte_raw_quickbook_bill_payments": ["model.smartpill.quickbook_bill_payments"], "source.smartpill.raw._airbyte_raw_quickbook_bills": ["model.smartpill.quickbook_bills"], "source.smartpill.raw._airbyte_raw_quickbook_classes": ["model.smartpill.quickbook_classes"], "source.smartpill.raw._airbyte_raw_quickbook_customers": ["model.smartpill.quickbook_customers"], "source.smartpill.raw._airbyte_raw_quickbook_deposits": ["model.smartpill.quickbook_deposits"], "source.smartpill.raw._airbyte_raw_quickbook_invoices": ["model.smartpill.quickbook_invoices"], "source.smartpill.raw._airbyte_raw_quickbook_items": ["model.smartpill.quickbook_items"], "source.smartpill.raw._airbyte_raw_quickbook_journal_entries": ["model.smartpill.quickbook_journal_entries"], "source.smartpill.raw._airbyte_raw_quickbook_payments": ["model.smartpill.quickbook_payments"], "source.smartpill.raw._airbyte_raw_quickbook_purchases": ["model.smartpill.quickbook_purchases"], "source.smartpill.raw.quickbook_payroll_checks": ["model.smartpill.int_quickbooks__payroll_check_double_entry"]}}