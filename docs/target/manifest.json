{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-11-30T23:49:28.726352Z", "invocation_id": "d06c4001-c839-4290-9da6-96e6c95d871c", "env": {}, "project_id": "22783e4b82b06754aa1102df2bed7710", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "mysql"}, "nodes": {"model.smartpill.clinics": {"raw_sql": "select distinct \n    provider_clinic as name,\n    NOW() as date_processed \nfrom {{source('analytics_v2','goodpill_gp_rxs_single')}}\nwhere provider_clinic IS NOT NULL AND provider_clinic <> ''\n{% if is_incremental(): %}\n\tand (select COUNT(*) from {{ this }} where name = provider_clinic) = 0\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "clinics"], "unique_id": "model.smartpill.clinics", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/clinics.sql", "original_file_path": "models/analytics/base_tables/clinics.sql", "name": "clinics", "resource_type": "model", "alias": "clinics", "checksum": {"name": "sha256", "checksum": "da2efa11b17995a67008ea1ed70a16606be1ade488af07a00f92b8215c683ea9"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "goodpill_gp_rxs_single"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_rxs_single"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/clinics.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select distinct \n    provider_clinic as name,\n    NOW() as date_processed \nfrom analytics_v2.goodpill_gp_rxs_single\nwhere provider_clinic IS NOT NULL AND provider_clinic <> ''\n\n\tand (select COUNT(*) from analytics.`clinics` where name = provider_clinic) = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`clinics`"}, "model.smartpill.drugs": {"raw_sql": "select\n    gpd.drug_generic, \n    gpd.drug_brand, \n    gsl.price_per_month, \n    gpd.price30, \n    gpd.price90, \n    gpd.price_retail, \n    gpd.price_goodrx, \n    gpd.price_nadac, \n    coalesce(NULLIF(gpd.price_goodrx, 0), NULLIF(gpd.price_nadac, 0), NULLIF(gpd.price_retail, 0)) * 1 as price_coalesced, \n    NOW() as date_processed\nfrom {{source('analytics_v2','goodpill_gp_drugs')}} gpd\nleft join {{source('analytics_v2','goodpill_gp_stock_live')}} gsl on gsl.drug_generic = gpd.drug_generic\n{% if is_incremental() %}\nwhere gpd._airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "drugs"], "unique_id": "model.smartpill.drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/drugs.sql", "original_file_path": "models/analytics/base_tables/drugs.sql", "name": "drugs", "resource_type": "model", "alias": "drugs", "checksum": {"name": "sha256", "checksum": "2a70e4259af48aa00636de4dc96ae5781665161b10f86bf0639d4145b1743136"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "goodpill_gp_drugs"], ["analytics_v2", "goodpill_gp_stock_live"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_drugs", "source.smartpill.analytics_v2.goodpill_gp_stock_live"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/drugs.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select\n    gpd.drug_generic, \n    gpd.drug_brand, \n    gsl.price_per_month, \n    gpd.price30, \n    gpd.price90, \n    gpd.price_retail, \n    gpd.price_goodrx, \n    gpd.price_nadac, \n    coalesce(NULLIF(gpd.price_goodrx, 0), NULLIF(gpd.price_nadac, 0), NULLIF(gpd.price_retail, 0)) * 1 as price_coalesced, \n    NOW() as date_processed\nfrom analytics_v2.goodpill_gp_drugs gpd\nleft join analytics_v2.goodpill_gp_stock_live gsl on gsl.drug_generic = gpd.drug_generic\n\nwhere gpd._airbyte_emitted_at > (select MAX(date_processed) from analytics.`drugs`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`drugs`"}, "model.smartpill.locations": {"raw_sql": "WITH locations AS (\n    select \n        order_city as city, \n        order_state as state, \n        order_zip as zip_code,\n        _airbyte_emitted_at\n    from {{source('analytics_v2','goodpill_gp_orders')}}\n    UNION\n    select \n       patient_city as city,\n       patient_state as state,\n       patient_zip as zip_code,\n       _airbyte_emitted_at\n    from {{source('analytics_v2','goodpill_gp_patients')}} \n)\nselect distinct \n    cast(city as varchar(255)) as city, \n    cast(state as varchar(255)) as state, \n    cast(zip_code as varchar(255)) as zip_code, \n    NOW() as date_processed\nFROM locations \nWHERE zip_code is not null\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "locations"], "unique_id": "model.smartpill.locations", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/locations.sql", "original_file_path": "models/analytics/base_tables/locations.sql", "name": "locations", "resource_type": "model", "alias": "locations", "checksum": {"name": "sha256", "checksum": "7400ddbafc8951b4b9c55f980ca7ee68086e56d62d3f49b4d54476e6c25f8c35"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "goodpill_gp_orders"], ["analytics_v2", "goodpill_gp_patients"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_orders", "source.smartpill.analytics_v2.goodpill_gp_patients"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/locations.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "WITH locations AS (\n    select \n        order_city as city, \n        order_state as state, \n        order_zip as zip_code,\n        _airbyte_emitted_at\n    from analytics_v2.goodpill_gp_orders\n    UNION\n    select \n       patient_city as city,\n       patient_state as state,\n       patient_zip as zip_code,\n       _airbyte_emitted_at\n    from analytics_v2.goodpill_gp_patients \n)\nselect distinct \n    cast(city as varchar(255)) as city, \n    cast(state as varchar(255)) as state, \n    cast(zip_code as varchar(255)) as zip_code, \n    NOW() as date_processed\nFROM locations \nWHERE zip_code is not null\n\n    and _airbyte_emitted_at > (select MAX(date_processed) from analytics.`locations`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`locations`"}, "model.smartpill.orders_logs": {"raw_sql": "select\n    ol.invoice_number,\n    patient_id_cp,\n    order_zip,\n    event_type,\n    goodpill_event_date,\n    count_items, \n    count_filled, \n    count_nofill,\n    order_source, \n    order_stage_cp, \n    order_status,\n    invoice_doc_id, \n    tracking_number, \n    order_date_changed, \n    order_date_updated,\n    payment_total_default,\n    payment_total_actual,\n    payment_fee_default,\n    payment_fee_actual,\n    payment_due_default,\n    payment_due_actual,\n    payment_date_autopay,\n    payment_method_actual,\n    coupon_lines,\n    order_note,\n    date_processed\nfrom {{ source('analytics_v2', 'goodpill_gp_orders') }} o\ninner join {{ ref('orders_logs_audit') }} ol on ol.invoice_number = o.invoice_number\n{% if is_incremental() %}\n    where date_processed > (select max(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "orders_logs"], "unique_id": "model.smartpill.orders_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/orders_logs.sql", "original_file_path": "models/analytics/base_tables/orders_logs.sql", "name": "orders_logs", "resource_type": "model", "alias": "orders_logs", "checksum": {"name": "sha256", "checksum": "6f0c2ceb95aca7f04cce9445977bc8af7bce133a229df7e010470ae8fd5fc1eb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["orders_logs_audit"]], "sources": [["analytics_v2", "goodpill_gp_orders"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_orders", "model.smartpill.orders_logs_audit"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/orders_logs.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select\n    ol.invoice_number,\n    patient_id_cp,\n    order_zip,\n    event_type,\n    goodpill_event_date,\n    count_items, \n    count_filled, \n    count_nofill,\n    order_source, \n    order_stage_cp, \n    order_status,\n    invoice_doc_id, \n    tracking_number, \n    order_date_changed, \n    order_date_updated,\n    payment_total_default,\n    payment_total_actual,\n    payment_fee_default,\n    payment_fee_actual,\n    payment_due_default,\n    payment_due_actual,\n    payment_date_autopay,\n    payment_method_actual,\n    coupon_lines,\n    order_note,\n    date_processed\nfrom analytics_v2.goodpill_gp_orders o\ninner join analytics.`orders_logs_audit` ol on ol.invoice_number = o.invoice_number\n\n    where date_processed > (select max(date_processed) from analytics.`orders_logs`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`orders_logs`"}, "model.smartpill.orders_logs_audit": {"raw_sql": "select\n    invoice_number,\n    event_type,\n    goodpill_event_date,\n    patient_id,\n    _airbyte_emitted_at as date_processed\nfrom\n    {{ source('analytics_v2', 'analytics_orders_logs') }} ol\n\n{% if is_incremental() %}\n    where _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "orders_logs_audit"], "unique_id": "model.smartpill.orders_logs_audit", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/orders_logs_audit.sql", "original_file_path": "models/analytics/base_tables/orders_logs_audit.sql", "name": "orders_logs_audit", "resource_type": "model", "alias": "orders_logs_audit", "checksum": {"name": "sha256", "checksum": "c60270518389bf3773e504def8ea930beb19673425a21b3cf2ea5f41de58d4f2"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "analytics_orders_logs"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.analytics_orders_logs"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/orders_logs_audit.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select\n    invoice_number,\n    event_type,\n    goodpill_event_date,\n    patient_id,\n    _airbyte_emitted_at as date_processed\nfrom\n    analytics_v2.analytics_orders_logs ol\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`orders_logs_audit`"}, "model.smartpill.patients": {"raw_sql": "select\n    patient_id_cp,\n    patient_date_registered,\n    patient_date_added,\n    @fill_next := (\n        select MAX(grg.refill_date_next)\n        from {{ source('analytics_v2', 'goodpill_gp_rxs_grouped') }} grg\n        where grg.patient_id_cp = gpa.patient_id_cp\n    ) as fill_next,\n    DATEDIFF(\n        NOW(),\n        STR_TO_DATE(@fill_next, '%Y-%m-%dT%H:%i:%sZ')\n    ) as days_overdue,\n    first_name,\n    last_name,\n    birth_date,\n    phone1,\n    phone2,\n    CONCAT(patient_address1, ', ', patient_address2),\n    patient_city,\n    patient_state,\n    patient_zip,\n    payment_card_type,\n    payment_card_last4,\n    payment_card_date_expired,\n    payment_method_default,\n    payment_coupon,\n    tracking_coupon,\n    refills_used,\n    NOW() as date_processed\nfrom {{ source('analytics_v2', 'goodpill_gp_patients') }} gpa\nwhere\n    LOWER(first_name) NOT LIKE '%test%' AND\n    LOWER(first_name) NOT LIKE '%user%' AND\n    LOWER(last_name) NOT LIKE '%test%' AND\n    LOWER(last_name) NOT LIKE '%user%'\n{% if is_incremental(): %}\n    AND _airbyte_emitted_at > (SELECT MAX(date_processed) FROM {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "patients"], "unique_id": "model.smartpill.patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/patients.sql", "original_file_path": "models/analytics/base_tables/patients.sql", "name": "patients", "resource_type": "model", "alias": "patients", "checksum": {"name": "sha256", "checksum": "c566f82b40c1192c52d0f4d7d5aa53786d66e38667c80aa0af4175248e0d915d"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "goodpill_gp_rxs_grouped"], ["analytics_v2", "goodpill_gp_patients"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_rxs_grouped", "source.smartpill.analytics_v2.goodpill_gp_patients"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/patients.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select\n    patient_id_cp,\n    patient_date_registered,\n    patient_date_added,\n    @fill_next := (\n        select MAX(grg.refill_date_next)\n        from analytics_v2.goodpill_gp_rxs_grouped grg\n        where grg.patient_id_cp = gpa.patient_id_cp\n    ) as fill_next,\n    DATEDIFF(\n        NOW(),\n        STR_TO_DATE(@fill_next, '%Y-%m-%dT%H:%i:%sZ')\n    ) as days_overdue,\n    first_name,\n    last_name,\n    birth_date,\n    phone1,\n    phone2,\n    CONCAT(patient_address1, ', ', patient_address2),\n    patient_city,\n    patient_state,\n    patient_zip,\n    payment_card_type,\n    payment_card_last4,\n    payment_card_date_expired,\n    payment_method_default,\n    payment_coupon,\n    tracking_coupon,\n    refills_used,\n    NOW() as date_processed\nfrom analytics_v2.goodpill_gp_patients gpa\nwhere\n    LOWER(first_name) NOT LIKE '%test%' AND\n    LOWER(first_name) NOT LIKE '%user%' AND\n    LOWER(last_name) NOT LIKE '%test%' AND\n    LOWER(last_name) NOT LIKE '%user%'\n\n    AND _airbyte_emitted_at > (SELECT MAX(date_processed) FROM analytics.`patients`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`patients`"}, "model.smartpill.pharmacies": {"raw_sql": "select \n    pharmacy_npi,\n    pharmacy_name,\n    pharmacy_phone,\n    pharmacy_fax,\n    pharmacy_address,\n    NOW() as date_processed\nfrom {{ ref('gp_patients') }}\nwhere (pharmacy_npi is not NULL or pharmacy_name is not NULL)\n{% if is_incremental() %}\n    and _airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "pharmacies"], "unique_id": "model.smartpill.pharmacies", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/pharmacies.sql", "original_file_path": "models/analytics/base_tables/pharmacies.sql", "name": "pharmacies", "resource_type": "model", "alias": "pharmacies", "checksum": {"name": "sha256", "checksum": "d919e08a57bfe3be1e2f14ee06486791d3003019f5f99dc412a80359ce88a0a7"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["gp_patients"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.smartpill.gp_patients"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/pharmacies.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "with __dbt__CTE__gp_patients as (\nwith final as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_cp\"') as int) as 'patient_id_cp',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_wc\"') as int) as 'patient_id_wc',\n        cast(json_value(_airbyte_data, \n    '$.\"first_name\"') as varchar(80)) as 'first_name',\n        cast(json_value(_airbyte_data, \n    '$.\"last_name\"') as varchar(80)) as 'last_name',\n        cast(json_value(_airbyte_data, \n    '$.\"birth_date\"') as date) as 'birth_date',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_note\"') as varchar(3072)) as 'patient_note',\n        cast(json_value(_airbyte_data, \n    '$.\"phone1\"') as varchar(10)) as 'phone1',\n        cast(json_value(_airbyte_data, \n    '$.\"phone2\"') as varchar(10)) as 'phone2',\n        cast(json_value(_airbyte_data, \n    '$.\"email\"') as varchar(255)) as 'email',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_autofill\"') as int) as 'patient_autofill',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_name\"') as varchar(50)) as 'pharmacy_name',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_npi\"') as varchar(10)) as 'pharmacy_npi',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_fax\"') as varchar(12)) as 'pharmacy_fax',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_phone\"') as varchar(12)) as 'pharmacy_phone',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_address\"') as varchar(255)) as 'pharmacy_address',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_type\"') as varchar(20)) as 'payment_card_type',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_last4\"') as varchar(4)) as 'payment_card_last4',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_date_expired\"') as date) as 'payment_card_date_expired',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_method_default\"') as varchar(50)) as 'payment_method_default',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_coupon\"') as varchar(20)) as 'payment_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"tracking_coupon\"') as varchar(20)) as 'tracking_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address1\"') as varchar(255)) as 'patient_address1',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address2\"') as varchar(255)) as 'patient_address2',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_city\"') as varchar(255)) as 'patient_city',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_state\"') as varchar(2)) as 'patient_state',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_zip\"') as varchar(5)) as 'patient_zip',\n        cast(json_value(_airbyte_data, \n    '$.\"refills_used\"') as decimal(5,2)) as 'refills_used',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_status\"') as int) as 'patient_status',\n        cast(json_value(_airbyte_data, \n    '$.\"language\"') as int) as 'language',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_none\"') as varchar(80)) as 'allergies_none',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_cephalosporins\"') as varchar(80)) as 'allergies_cephalosporins',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_sulfa\"') as varchar(80)) as 'allergies_sulfa',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_aspirin\"') as varchar(80)) as 'allergies_aspirin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_penicillin\"') as varchar(80)) as 'allergies_penicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_erythromycin\"') as varchar(80)) as 'allergies_erythromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_codeine\"') as varchar(80)) as 'allergies_codeine',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_nsaids\"') as varchar(80)) as 'allergies_nsaids',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_salicylates\"') as varchar(80)) as 'allergies_salicylates',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_azithromycin\"') as varchar(80)) as 'allergies_azithromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_amoxicillin\"') as varchar(80)) as 'allergies_amoxicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_tetracycline\"') as varchar(80)) as 'allergies_tetracycline',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_other\"') as varchar(255)) as 'allergies_other',\n        cast(json_value(_airbyte_data, \n    '$.\"medications_other\"') as varchar(3072)) as 'medications_other',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_added\"') as datetime) as 'patient_date_added',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_registered\"') as datetime) as 'patient_date_registered',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_changed\"') as datetime) as 'patient_date_changed',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_updated\"') as datetime) as 'patient_date_updated'\n    from\n        analytics_v2._airbyte_raw_goodpill_gp_patients\n)\nselect\n    *\nfrom\n    final\n)select \n    pharmacy_npi,\n    pharmacy_name,\n    pharmacy_phone,\n    pharmacy_fax,\n    pharmacy_address,\n    NOW() as date_processed\nfrom __dbt__CTE__gp_patients\nwhere (pharmacy_npi is not NULL or pharmacy_name is not NULL)\n\n    and _airbyte_emitted_at > (select MAX(date_processed) from analytics.`pharmacies`)\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.gp_patients", "sql": " __dbt__CTE__gp_patients as (\nwith final as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_cp\"') as int) as 'patient_id_cp',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_wc\"') as int) as 'patient_id_wc',\n        cast(json_value(_airbyte_data, \n    '$.\"first_name\"') as varchar(80)) as 'first_name',\n        cast(json_value(_airbyte_data, \n    '$.\"last_name\"') as varchar(80)) as 'last_name',\n        cast(json_value(_airbyte_data, \n    '$.\"birth_date\"') as date) as 'birth_date',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_note\"') as varchar(3072)) as 'patient_note',\n        cast(json_value(_airbyte_data, \n    '$.\"phone1\"') as varchar(10)) as 'phone1',\n        cast(json_value(_airbyte_data, \n    '$.\"phone2\"') as varchar(10)) as 'phone2',\n        cast(json_value(_airbyte_data, \n    '$.\"email\"') as varchar(255)) as 'email',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_autofill\"') as int) as 'patient_autofill',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_name\"') as varchar(50)) as 'pharmacy_name',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_npi\"') as varchar(10)) as 'pharmacy_npi',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_fax\"') as varchar(12)) as 'pharmacy_fax',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_phone\"') as varchar(12)) as 'pharmacy_phone',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_address\"') as varchar(255)) as 'pharmacy_address',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_type\"') as varchar(20)) as 'payment_card_type',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_last4\"') as varchar(4)) as 'payment_card_last4',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_date_expired\"') as date) as 'payment_card_date_expired',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_method_default\"') as varchar(50)) as 'payment_method_default',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_coupon\"') as varchar(20)) as 'payment_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"tracking_coupon\"') as varchar(20)) as 'tracking_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address1\"') as varchar(255)) as 'patient_address1',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address2\"') as varchar(255)) as 'patient_address2',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_city\"') as varchar(255)) as 'patient_city',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_state\"') as varchar(2)) as 'patient_state',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_zip\"') as varchar(5)) as 'patient_zip',\n        cast(json_value(_airbyte_data, \n    '$.\"refills_used\"') as decimal(5,2)) as 'refills_used',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_status\"') as int) as 'patient_status',\n        cast(json_value(_airbyte_data, \n    '$.\"language\"') as int) as 'language',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_none\"') as varchar(80)) as 'allergies_none',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_cephalosporins\"') as varchar(80)) as 'allergies_cephalosporins',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_sulfa\"') as varchar(80)) as 'allergies_sulfa',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_aspirin\"') as varchar(80)) as 'allergies_aspirin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_penicillin\"') as varchar(80)) as 'allergies_penicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_erythromycin\"') as varchar(80)) as 'allergies_erythromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_codeine\"') as varchar(80)) as 'allergies_codeine',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_nsaids\"') as varchar(80)) as 'allergies_nsaids',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_salicylates\"') as varchar(80)) as 'allergies_salicylates',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_azithromycin\"') as varchar(80)) as 'allergies_azithromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_amoxicillin\"') as varchar(80)) as 'allergies_amoxicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_tetracycline\"') as varchar(80)) as 'allergies_tetracycline',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_other\"') as varchar(255)) as 'allergies_other',\n        cast(json_value(_airbyte_data, \n    '$.\"medications_other\"') as varchar(3072)) as 'medications_other',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_added\"') as datetime) as 'patient_date_added',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_registered\"') as datetime) as 'patient_date_registered',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_changed\"') as datetime) as 'patient_date_changed',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_updated\"') as datetime) as 'patient_date_updated'\n    from\n        analytics_v2._airbyte_raw_goodpill_gp_patients\n)\nselect\n    *\nfrom\n    final\n)"}], "relation_name": "analytics.`pharmacies`"}, "model.smartpill.providers": {"raw_sql": "select\n    rxs1.provider_npi,\n    rxs1.provider_first_name,\n    rxs1.provider_last_name,\n    rxs1.provider_phone,\n    NOW() as date_processed\nfrom {{source('analytics_v2','goodpill_gp_rxs_single')}} rxs1\n    left join {{source('analytics_v2','goodpill_gp_rxs_single')}} rxs2\n    on (rxs1.provider_npi = rxs2.provider_npi and rxs1.rx_number < rxs2.rx_number)\nwhere rxs2.rx_number is null and rxs1.provider_npi is not null and rxs1.provider_npi <> ''\n{% if is_incremental() %}\n\tand rxs1._airbyte_emitted_at > (select MAX(date_processed) from {{ this }})\n{% endif %}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "base_tables", "providers"], "unique_id": "model.smartpill.providers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/base_tables/providers.sql", "original_file_path": "models/analytics/base_tables/providers.sql", "name": "providers", "resource_type": "model", "alias": "providers", "checksum": {"name": "sha256", "checksum": "2bbf83d1a4cbd6791fbc41ac31231a6241b84b61c3cef94c24f21f1d954e3d6a"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "goodpill_gp_rxs_single"], ["analytics_v2", "goodpill_gp_rxs_single"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.smartpill.analytics_v2.goodpill_gp_rxs_single", "source.smartpill.analytics_v2.goodpill_gp_rxs_single"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/base_tables/providers.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "compiled_sql": "select\n    rxs1.provider_npi,\n    rxs1.provider_first_name,\n    rxs1.provider_last_name,\n    rxs1.provider_phone,\n    NOW() as date_processed\nfrom analytics_v2.goodpill_gp_rxs_single rxs1\n    left join analytics_v2.goodpill_gp_rxs_single rxs2\n    on (rxs1.provider_npi = rxs2.provider_npi and rxs1.rx_number < rxs2.rx_number)\nwhere rxs2.rx_number is null and rxs1.provider_npi is not null and rxs1.provider_npi <> ''\n\n\tand rxs1._airbyte_emitted_at > (select MAX(date_processed) from analytics.`providers`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`providers`"}, "model.smartpill.gp_patients": {"raw_sql": "with final as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_id_cp']) }} as int) as 'patient_id_cp',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_id_wc']) }} as int) as 'patient_id_wc',\n        cast({{ json_extract_scalar('_airbyte_data', ['first_name']) }} as varchar(80)) as 'first_name',\n        cast({{ json_extract_scalar('_airbyte_data', ['last_name']) }} as varchar(80)) as 'last_name',\n        cast({{ json_extract_scalar('_airbyte_data', ['birth_date']) }} as date) as 'birth_date',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_note']) }} as varchar(3072)) as 'patient_note',\n        cast({{ json_extract_scalar('_airbyte_data', ['phone1']) }} as varchar(10)) as 'phone1',\n        cast({{ json_extract_scalar('_airbyte_data', ['phone2']) }} as varchar(10)) as 'phone2',\n        cast({{ json_extract_scalar('_airbyte_data', ['email']) }} as varchar(255)) as 'email',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_autofill']) }} as int) as 'patient_autofill',\n        cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_name']) }} as varchar(50)) as 'pharmacy_name',\n        cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_npi']) }} as varchar(10)) as 'pharmacy_npi',\n        cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_fax']) }} as varchar(12)) as 'pharmacy_fax',\n        cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_phone']) }} as varchar(12)) as 'pharmacy_phone',\n        cast({{ json_extract_scalar('_airbyte_data', ['pharmacy_address']) }} as varchar(255)) as 'pharmacy_address',\n        cast({{ json_extract_scalar('_airbyte_data', ['payment_card_type']) }} as varchar(20)) as 'payment_card_type',\n        cast({{ json_extract_scalar('_airbyte_data', ['payment_card_last4']) }} as varchar(4)) as 'payment_card_last4',\n        cast({{ json_extract_scalar('_airbyte_data', ['payment_card_date_expired']) }} as date) as 'payment_card_date_expired',\n        cast({{ json_extract_scalar('_airbyte_data', ['payment_method_default']) }} as varchar(50)) as 'payment_method_default',\n        cast({{ json_extract_scalar('_airbyte_data', ['payment_coupon']) }} as varchar(20)) as 'payment_coupon',\n        cast({{ json_extract_scalar('_airbyte_data', ['tracking_coupon']) }} as varchar(20)) as 'tracking_coupon',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_address1']) }} as varchar(255)) as 'patient_address1',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_address2']) }} as varchar(255)) as 'patient_address2',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_city']) }} as varchar(255)) as 'patient_city',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_state']) }} as varchar(2)) as 'patient_state',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_zip']) }} as varchar(5)) as 'patient_zip',\n        cast({{ json_extract_scalar('_airbyte_data', ['refills_used']) }} as decimal(5,2)) as 'refills_used',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_status']) }} as int) as 'patient_status',\n        cast({{ json_extract_scalar('_airbyte_data', ['language']) }} as int) as 'language',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_none']) }} as varchar(80)) as 'allergies_none',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_cephalosporins']) }} as varchar(80)) as 'allergies_cephalosporins',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_sulfa']) }} as varchar(80)) as 'allergies_sulfa',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_aspirin']) }} as varchar(80)) as 'allergies_aspirin',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_penicillin']) }} as varchar(80)) as 'allergies_penicillin',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_erythromycin']) }} as varchar(80)) as 'allergies_erythromycin',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_codeine']) }} as varchar(80)) as 'allergies_codeine',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_nsaids']) }} as varchar(80)) as 'allergies_nsaids',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_salicylates']) }} as varchar(80)) as 'allergies_salicylates',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_azithromycin']) }} as varchar(80)) as 'allergies_azithromycin',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_amoxicillin']) }} as varchar(80)) as 'allergies_amoxicillin',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_tetracycline']) }} as varchar(80)) as 'allergies_tetracycline',\n        cast({{ json_extract_scalar('_airbyte_data', ['allergies_other']) }} as varchar(255)) as 'allergies_other',\n        cast({{ json_extract_scalar('_airbyte_data', ['medications_other']) }} as varchar(3072)) as 'medications_other',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_date_added']) }} as datetime) as 'patient_date_added',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_date_registered']) }} as datetime) as 'patient_date_registered',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_date_changed']) }} as datetime) as 'patient_date_changed',\n        cast({{ json_extract_scalar('_airbyte_data', ['patient_date_updated']) }} as datetime) as 'patient_date_updated'\n    from\n        {{ source('analytics_v2', '_airbyte_raw_goodpill_gp_patients') }}\n)\nselect\n    *\nfrom\n    final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "analytics", "intermediate_tables", "gp_patients"], "unique_id": "model.smartpill.gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "analytics/intermediate_tables/gp_patients.sql", "original_file_path": "models/analytics/intermediate_tables/gp_patients.sql", "name": "gp_patients", "resource_type": "model", "alias": "gp_patients", "checksum": {"name": "sha256", "checksum": "23a32720a6f9323202a87a9fad49c502d2b3db14fd924bb6e18999acf4c13eed"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_goodpill_gp_patients"]], "depends_on": {"macros": ["macro.smartpill.json_extract_scalar"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/analytics/intermediate_tables/gp_patients.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with final as (\n    select\n        _airbyte_emitted_at,\n        _airbyte_ab_id,\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_cp\"') as int) as 'patient_id_cp',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_id_wc\"') as int) as 'patient_id_wc',\n        cast(json_value(_airbyte_data, \n    '$.\"first_name\"') as varchar(80)) as 'first_name',\n        cast(json_value(_airbyte_data, \n    '$.\"last_name\"') as varchar(80)) as 'last_name',\n        cast(json_value(_airbyte_data, \n    '$.\"birth_date\"') as date) as 'birth_date',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_note\"') as varchar(3072)) as 'patient_note',\n        cast(json_value(_airbyte_data, \n    '$.\"phone1\"') as varchar(10)) as 'phone1',\n        cast(json_value(_airbyte_data, \n    '$.\"phone2\"') as varchar(10)) as 'phone2',\n        cast(json_value(_airbyte_data, \n    '$.\"email\"') as varchar(255)) as 'email',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_autofill\"') as int) as 'patient_autofill',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_name\"') as varchar(50)) as 'pharmacy_name',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_npi\"') as varchar(10)) as 'pharmacy_npi',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_fax\"') as varchar(12)) as 'pharmacy_fax',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_phone\"') as varchar(12)) as 'pharmacy_phone',\n        cast(json_value(_airbyte_data, \n    '$.\"pharmacy_address\"') as varchar(255)) as 'pharmacy_address',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_type\"') as varchar(20)) as 'payment_card_type',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_last4\"') as varchar(4)) as 'payment_card_last4',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_card_date_expired\"') as date) as 'payment_card_date_expired',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_method_default\"') as varchar(50)) as 'payment_method_default',\n        cast(json_value(_airbyte_data, \n    '$.\"payment_coupon\"') as varchar(20)) as 'payment_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"tracking_coupon\"') as varchar(20)) as 'tracking_coupon',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address1\"') as varchar(255)) as 'patient_address1',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_address2\"') as varchar(255)) as 'patient_address2',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_city\"') as varchar(255)) as 'patient_city',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_state\"') as varchar(2)) as 'patient_state',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_zip\"') as varchar(5)) as 'patient_zip',\n        cast(json_value(_airbyte_data, \n    '$.\"refills_used\"') as decimal(5,2)) as 'refills_used',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_status\"') as int) as 'patient_status',\n        cast(json_value(_airbyte_data, \n    '$.\"language\"') as int) as 'language',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_none\"') as varchar(80)) as 'allergies_none',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_cephalosporins\"') as varchar(80)) as 'allergies_cephalosporins',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_sulfa\"') as varchar(80)) as 'allergies_sulfa',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_aspirin\"') as varchar(80)) as 'allergies_aspirin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_penicillin\"') as varchar(80)) as 'allergies_penicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_erythromycin\"') as varchar(80)) as 'allergies_erythromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_codeine\"') as varchar(80)) as 'allergies_codeine',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_nsaids\"') as varchar(80)) as 'allergies_nsaids',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_salicylates\"') as varchar(80)) as 'allergies_salicylates',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_azithromycin\"') as varchar(80)) as 'allergies_azithromycin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_amoxicillin\"') as varchar(80)) as 'allergies_amoxicillin',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_tetracycline\"') as varchar(80)) as 'allergies_tetracycline',\n        cast(json_value(_airbyte_data, \n    '$.\"allergies_other\"') as varchar(255)) as 'allergies_other',\n        cast(json_value(_airbyte_data, \n    '$.\"medications_other\"') as varchar(3072)) as 'medications_other',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_added\"') as datetime) as 'patient_date_added',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_registered\"') as datetime) as 'patient_date_registered',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_changed\"') as datetime) as 'patient_date_changed',\n        cast(json_value(_airbyte_data, \n    '$.\"patient_date_updated\"') as datetime) as 'patient_date_updated'\n    from\n        analytics_v2._airbyte_raw_goodpill_gp_patients\n)\nselect\n    *\nfrom\n    final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.quickbook_general_ledger_abt": {"raw_sql": "select\n    qgl.running_balance,\n    qgl.adjusted_amount,\n    qgl.account_transaction_type,\n    qgl.transaction_id,\n    qgl.transaction_index,\n    qgl.transaction_date,\n    qgl.amount,\n    qgl.account_id,\n    qgl.account_classification,\n    qgl.transaction_type,\n    qgl.transaction_source,\n    qgl.currency_name,\n    qgl.class_id,\n    qgl.customer_id,\n    qgl.financial_statement_helper,\n    qcl.fully_qualified_name as class_fully_qualified_name,\n    qcl.name as class_name,\n    qa.name as account_name,\n    qa.fully_qualified_name as account_fully_qualified_name,\n    qa.account_type as account_type,\n    qa.account_number as account_number,\n    qa.top_level_id as top_level_account_id,\n    qa.parent_account_id as parent_account_id,\n    qap.name as top_level_account_name,\n    qap.account_type as top_level_account_type,\n    qap.account_number as top_level_account_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom\n    {{ ref('quickbook_general_ledger') }} qgl\nleft join ({{ unique_select(ref('quickbook_classes')) }}) qcl on (qcl.id = qgl.class_id)\nleft join {{ ref('quickbook_accounts_top_level') }} qa on (qa.id = qgl.account_id)\nleft join {{ ref('quickbook_accounts_top_level') }} qap on (qap.id = qa.top_level_id)\nleft join ({{ unique_select(ref('quickbook_customers')) }}) qcu on (qcu.id = qgl.customer_id)", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_general_ledger_abt"], "unique_id": "model.smartpill.quickbook_general_ledger_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "name": "quickbook_general_ledger_abt", "resource_type": "model", "alias": "quickbook_general_ledger_abt", "checksum": {"name": "sha256", "checksum": "1baba0376362f33b05d86f613ab98d4d0f9a2a36ab3b1acfc5dbbda3cf83b55e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_general_ledger"], ["quickbook_classes"], ["quickbook_accounts_top_level"], ["quickbook_accounts_top_level"], ["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_general_ledger", "model.smartpill.quickbook_classes", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/airbyte_views/public/quickbook_general_ledger_abt.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "select\n    qgl.running_balance,\n    qgl.adjusted_amount,\n    qgl.account_transaction_type,\n    qgl.transaction_id,\n    qgl.transaction_index,\n    qgl.transaction_date,\n    qgl.amount,\n    qgl.account_id,\n    qgl.account_classification,\n    qgl.transaction_type,\n    qgl.transaction_source,\n    qgl.currency_name,\n    qgl.class_id,\n    qgl.customer_id,\n    qgl.financial_statement_helper,\n    qcl.fully_qualified_name as class_fully_qualified_name,\n    qcl.name as class_name,\n    qa.name as account_name,\n    qa.fully_qualified_name as account_fully_qualified_name,\n    qa.account_type as account_type,\n    qa.account_number as account_number,\n    qa.top_level_id as top_level_account_id,\n    qa.parent_account_id as parent_account_id,\n    qap.name as top_level_account_name,\n    qap.account_type as top_level_account_type,\n    qap.account_number as top_level_account_number,\n    qcu.display_name as customer_display_name,\n    qcu.balance as customer_balance,\n    qcu.company_name as customer_company_name\nfrom\n    analytics.`quickbook_general_ledger` qgl\nleft join (select * from analytics.`quickbook_classes`\n    where id in (\n        select id\n        from analytics.`quickbook_classes`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )) qcl on (qcl.id = qgl.class_id)\nleft join analytics.`quickbook_accounts_top_level` qa on (qa.id = qgl.account_id)\nleft join analytics.`quickbook_accounts_top_level` qap on (qap.id = qa.top_level_id)\nleft join (select * from analytics.`quickbook_customers`\n    where id in (\n        select id\n        from analytics.`quickbook_customers`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )) qcu on (qcu.id = qgl.customer_id)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_general_ledger_abt`"}, "model.smartpill.quickbook_accounts_top_level": {"raw_sql": "with recursive accounts as (\n    {{ unique_select(ref('quickbook_accounts')) }}\n),\ntree as (\n    select id, \n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_accounts_top_level"], "unique_id": "model.smartpill.quickbook_accounts_top_level", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "name": "quickbook_accounts_top_level", "resource_type": "model", "alias": "quickbook_accounts_top_level", "checksum": {"name": "sha256", "checksum": "fc966b03fd52a55dcbd8ae43f89dc36f757cdf6c116c62b109ca8920252b2efd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/analytics_tables/quickbook_accounts_top_level.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with recursive accounts as (\n    select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\ntree as (\n    select id, \n           parent_account_id,\n           name,\n           fully_qualified_name,\n           account_type,\n           account_number,\n           1 as level,\n           id as top_level_id\n   from accounts\n   where parent_account_id is null\n\n   union all\n\n   select c.id,\n          c.parent_account_id,\n          c.name,\n          c.fully_qualified_name,\n          c.account_type,\n          c.account_number,\n          t.level + 1,\n          coalesce(t.top_level_id, c.id) as top_level_id\n   from accounts c\n     join tree t on c.parent_account_id = t.id\n)\nselect * from tree", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_accounts_top_level`"}, "model.smartpill.quickbook_general_ledger": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n\nwith gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from {{ref('int_quickbooks__purchase_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__deposit_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__journal_entry_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__invoice_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__payroll_check_double_entry')}}\n),\n\naccounts as (\n    select *\n    from {{ref('int_quickbooks__account_classifications')}}\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.amount,\n        gl_union.account_id,\n        -- accounts.name as account_name,\n        -- accounts.is_sub_account,\n        -- accounts.account_type,\n        -- accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        -- accounts.balance as account_current_balance,\n        accounts.classification as account_classification, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.currency_name,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.id\n),\n\nfinal as (\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger"], "unique_id": "model.smartpill.quickbook_general_ledger", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger.sql", "name": "quickbook_general_ledger", "resource_type": "model", "alias": "quickbook_general_ledger", "checksum": {"name": "sha256", "checksum": "1403bcdc7e9e7940b69dfb3583e307c86cfa9a298dfb6a8d67b4c6e8465828ff"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["int_quickbooks__purchase_double_entry"], ["int_quickbooks__deposit_double_entry"], ["int_quickbooks__journal_entry_double_entry"], ["int_quickbooks__payment_double_entry"], ["int_quickbooks__bill_double_entry"], ["int_quickbooks__invoice_double_entry"], ["int_quickbooks__bill_payment_double_entry"], ["int_quickbooks__payroll_check_double_entry"], ["int_quickbooks__account_classifications"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.smartpill.int_quickbooks__purchase_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__payroll_check_double_entry", "model.smartpill.int_quickbooks__account_classifications"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/analytics_tables/quickbook_general_ledger.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\n\nwith  __dbt__CTE__int_quickbooks__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select * from analytics.`quickbook_purchases`\n    where id in (\n        select id\n        from analytics.`quickbook_purchases`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from analytics.`quickbook_purchases_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select * from analytics.`quickbook_deposits`\n    where id in (\n        select id\n        from analytics.`quickbook_deposits`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from analytics.`quickbook_deposits_lines`\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from analytics.`quickbook_journal_entries`\n    where id in (\n        select id\n        from analytics.`quickbook_journal_entries`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from analytics.`quickbook_journal_entries_lines`\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__payment_double_entry as (\nwith payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from analytics.`quickbook_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select * from analytics.`quickbook_bills`\n    where id in (\n        select id\n        from analytics.`quickbook_bills`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from analytics.`quickbook_bills_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select * from analytics.`quickbook_invoices`\n    where id in (\n        select id\n        from analytics.`quickbook_invoices`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from analytics.`quickbook_invoices_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from analytics.`quickbook_accounts`\n        where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final\n),  __dbt__CTE__int_quickbooks__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select * from analytics.`quickbook_bill_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_bill_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from analytics_v2.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final\n),  __dbt__CTE__int_quickbooks__account_classifications as (\nwith accounts as (\n    select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\n),gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from __dbt__CTE__int_quickbooks__purchase_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__deposit_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__journal_entry_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__bill_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__invoice_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__bill_payment_double_entry\n\n    union all\n\n    select *\n    from __dbt__CTE__int_quickbooks__payroll_check_double_entry\n),\n\naccounts as (\n    select *\n    from __dbt__CTE__int_quickbooks__account_classifications\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        gl_union.amount,\n        gl_union.account_id,\n        -- accounts.name as account_name,\n        -- accounts.is_sub_account,\n        -- accounts.account_type,\n        -- accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        -- accounts.balance as account_current_balance,\n        accounts.classification as account_classification, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        gl_union.currency_name,\n        gl_union.class_id,\n        gl_union.customer_id,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then gl_union.amount\n            else gl_union.amount * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.id\n),\n\nfinal as (\n    select\n        *,\n        sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.smartpill.int_quickbooks__purchase_double_entry", "sql": " __dbt__CTE__int_quickbooks__purchase_double_entry as (\nwith purchase_join as (\n    with purchases as (\n        select * from analytics.`quickbook_purchases`\n    where id in (\n        select id\n        from analytics.`quickbook_purchases`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from analytics.`quickbook_purchases_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__deposit_double_entry", "sql": " __dbt__CTE__int_quickbooks__deposit_double_entry as (\nwith deposit_join as (\n    with deposits as (\n        select * from analytics.`quickbook_deposits`\n    where id in (\n        select id\n        from analytics.`quickbook_deposits`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from analytics.`quickbook_deposits_lines`\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__journal_entry_double_entry", "sql": " __dbt__CTE__int_quickbooks__journal_entry_double_entry as (\n/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from analytics.`quickbook_journal_entries`\n    where id in (\n        select id\n        from analytics.`quickbook_journal_entries`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from analytics.`quickbook_journal_entries_lines`\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__payment_double_entry", "sql": " __dbt__CTE__int_quickbooks__payment_double_entry as (\nwith payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from analytics.`quickbook_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__bill_double_entry", "sql": " __dbt__CTE__int_quickbooks__bill_double_entry as (\nwith bill_join as (\n    with bills as (\n        select * from analytics.`quickbook_bills`\n    where id in (\n        select id\n        from analytics.`quickbook_bills`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from analytics.`quickbook_bills_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__invoice_double_entry", "sql": " __dbt__CTE__int_quickbooks__invoice_double_entry as (\nwith invoice_join as (\n    with invoices as (\n        select * from analytics.`quickbook_invoices`\n    where id in (\n        select id\n        from analytics.`quickbook_invoices`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from analytics.`quickbook_invoices_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from analytics.`quickbook_accounts`\n        where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__bill_payment_double_entry", "sql": " __dbt__CTE__int_quickbooks__bill_payment_double_entry as (\nwith bill_payment_join as (\n    with bill_payments as (\n        select * from analytics.`quickbook_bill_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_bill_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__payroll_check_double_entry", "sql": " __dbt__CTE__int_quickbooks__payroll_check_double_entry as (\nwith payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from analytics_v2.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final\n)"}, {"id": "model.smartpill.int_quickbooks__account_classifications", "sql": " __dbt__CTE__int_quickbooks__account_classifications as (\nwith accounts as (\n    select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final\n)"}], "relation_name": "analytics.`quickbook_general_ledger`"}, "model.smartpill.quickbook_accounts": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) is_active,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} name,\n        {{ json_extract_scalar('_airbyte_data', ['AcctNum']) }} as account_number,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubAccount']) }} as {{ dbt_utils.type_int() }}) as is_sub_account,\n        {{ json_extract_scalar('_airbyte_data', ['ParentRef', 'value']) }} as parent_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['AccountType']) }} account_type,\n        {{ json_extract_scalar('_airbyte_data', ['AccountSubType']) }} account_sub_type,\n        {{ json_extract_scalar('_airbyte_data', ['Classification']) }} classification,\n        cast({{ json_extract_scalar('_airbyte_data', ['CurrentBalance']) }} as {{ dbt_utils.type_numeric() }}) balance,\n        cast({{ json_extract_scalar('_airbyte_data', ['CurrentBalanceWithSubAccounts']) }} as {{ dbt_utils.type_numeric() }}) balance_with_sub_accounts,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['Description']) }} description\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_accounts') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_accounts"], "unique_id": "model.smartpill.quickbook_accounts", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_accounts.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_accounts.sql", "name": "quickbook_accounts", "resource_type": "model", "alias": "quickbook_accounts", "checksum": {"name": "sha256", "checksum": "46b26a16be7ac5583856e150d280345e62c567ab1b5f49beffc4495678c59a2d"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_accounts"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts"]}, "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.\n", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_airbyte_emitted_at": {"name": "_airbyte_emitted_at", "description": "Refresh timestamp for the field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_accounts.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"FullyQualifiedName\"') fully_qualified_name,\n        cast(json_value(_airbyte_data, \n    '$.\"Active\"') as \n    signed\n ) is_active,\n        json_value(_airbyte_data, \n    '$.\"Name\"') name,\n        json_value(_airbyte_data, \n    '$.\"AcctNum\"') as account_number,\n        cast(json_value(_airbyte_data, \n    '$.\"SubAccount\"') as \n    signed\n) as is_sub_account,\n        json_value(_airbyte_data, \n    '$.\"ParentRef\".\"value\"') as parent_account_id,\n        json_value(_airbyte_data, \n    '$.\"AccountType\"') account_type,\n        json_value(_airbyte_data, \n    '$.\"AccountSubType\"') account_sub_type,\n        json_value(_airbyte_data, \n    '$.\"Classification\"') classification,\n        cast(json_value(_airbyte_data, \n    '$.\"CurrentBalance\"') as \n    float\n) balance,\n        cast(json_value(_airbyte_data, \n    '$.\"CurrentBalanceWithSubAccounts\"') as \n    float\n) balance_with_sub_accounts,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') currency_name,\n        json_value(_airbyte_data, \n    '$.\"Description\"') description\n    from\n        analytics_v2._airbyte_raw_quickbook_accounts\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_accounts`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_accounts`"}, "model.smartpill.quickbook_bill_payments": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['CheckPayment', 'BankAccountRef', 'value']) }} as check_bank_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CheckPayment', 'PrintStatus']) }} as check_print_status,\n        {{ json_extract_scalar('_airbyte_data', ['CreditCardPayment', 'CCAccountRef', 'value']) }} as credit_card_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['PayType']) }} as pay_type,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_bill_payments') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bill_payments"], "unique_id": "model.smartpill.quickbook_bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bill_payments.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bill_payments.sql", "name": "quickbook_bill_payments", "resource_type": "model", "alias": "quickbook_bill_payments", "checksum": {"name": "sha256", "checksum": "a5cc0e33f3f5d2606f25cb4f5d39e3f97433afbbadb9f901e8a0daaeeeeeae24"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_bill_payments"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments"]}, "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bill_payments.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"CheckPayment\".\"BankAccountRef\".\"value\"') as check_bank_account_id,\n        json_value(_airbyte_data, \n    '$.\"CheckPayment\".\"PrintStatus\"') as check_print_status,\n        json_value(_airbyte_data, \n    '$.\"CreditCardPayment\".\"CCAccountRef\".\"value\"') as credit_card_account_id,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        json_value(_airbyte_data, \n    '$.\"PayType\"') as pay_type,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_bill_payments\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_bill_payments`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_bill_payments`"}, "model.smartpill.quickbook_bill_payments_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_bill_payments', 'quickbook_bill_payments', 'line') }},\nbill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        id as bill_payment_id,\n        json_value({{unnested_column_value('line')}}, '$.\"LinkedTxn\"[0].\"TxnId\"') as transaction_id,\n        json_value({{unnested_column_value('line')}}, '$.\"LinkedTxn\"[0]\".\"TxnType\"') as transaction_type,\n        cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\n    from {{ ref('quickbook_bill_payments') }}\n    {{ cross_join_unnest('quickbook_bill_payments', 'line') }}\n    where \n        line is not null\n        and {{ incremental_filter_line(ref('quickbook_bill_payments'))}}\n)\nselect\n    *,\n    if(transaction_type = 'Bill', transaction_id, null) as bill_id,\n    if(transaction_type = 'Deposit', transaction_id, null) as deposit_id,\n    if(transaction_type = 'JournalEntry', transaction_id, null) as journal_entry_id,\n    if(transaction_type = 'Expense', transaction_id, null) as expense_id\nfrom bill_payment", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bill_payments_lines"], "unique_id": "model.smartpill.quickbook_bill_payments_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bill_payments_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bill_payments_lines.sql", "name": "quickbook_bill_payments_lines", "resource_type": "model", "alias": "quickbook_bill_payments_lines", "checksum": {"name": "sha256", "checksum": "42c63df133b12729eb26803b328d699bb56522b9cf19b337aebf99d72a48d4c2"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_bill_payments"], ["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments"]}, "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "Entity identifier of the parent bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_payment_hash_id": {"name": "_bill_payment_hash_id", "description": "Unique identifier for the parent bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Unique identifier of the transaction record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Type of transaction associated to the bill payment line (Bill/Deposit/JournalEntry/Expense)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the deposit record associated with the expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bill_payments_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 4\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_bill_payments`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_bill_payments.line\n        where numbers.generated_number <= json_length(line)\n    ),\nbill_payment as (\n    select\n        _hash_id as _bill_payment_hash_id,\n        id as bill_payment_id,\n        json_value(_airbyte_nested_data, '$.\"LinkedTxn\"[0].\"TxnId\"') as transaction_id,\n        json_value(_airbyte_nested_data, '$.\"LinkedTxn\"[0]\".\"TxnType\"') as transaction_type,\n        cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount\n    from analytics.`quickbook_bill_payments`\n    left join joined on _hash_id = joined._airbyte_hashid\n    where \n        line is not null\n        and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_bill_payments`)\n\n)\nselect\n    *,\n    if(transaction_type = 'Bill', transaction_id, null) as bill_id,\n    if(transaction_type = 'Deposit', transaction_id, null) as deposit_id,\n    if(transaction_type = 'JournalEntry', transaction_id, null) as journal_entry_id,\n    if(transaction_type = 'Expense', transaction_id, null) as expense_id\nfrom bill_payment", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_bill_payments_lines`"}, "model.smartpill.quickbook_bills": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balance,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['DueDate'])) }} as due_date,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['APAccountRef', 'value']) }} as payable_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['PrivateNote']) }} as private_note,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_bills') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bills"], "unique_id": "model.smartpill.quickbook_bills", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bills.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bills.sql", "name": "quickbook_bills", "resource_type": "model", "alias": "quickbook_bills", "checksum": {"name": "sha256", "checksum": "8a10c3d3d5a30b78661bfbece0445313120545b344e8829e954e2dec788fbc77"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_bills"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_bills"]}, "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of the transaction for all items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bills.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        cast(json_value(_airbyte_data, \n    '$.\"Balance\"') as \n    float\n) as balance,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"DueDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as due_date,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        json_value(_airbyte_data, \n    '$.\"APAccountRef\".\"value\"') as payable_account_id,\n        json_value(_airbyte_data, \n    '$.\"PrivateNote\"') as private_note,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_bills\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_bills`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_bills`"}, "model.smartpill.quickbook_bills_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_bills', 'quickbook_bills', 'line') }}\nselect\n    _hash_id as _bill_hash_id,\n    id as bill_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'AccountRef', 'value']) }} as account_expense_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'ClassRef', 'value']) }} as account_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as account_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'BillableStatus']) }} as account_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ClassRef', 'value']) }} as item_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as item_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'BillableStatus']) }} as item_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ItemRef', 'value']) }} as item_expense_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\nfrom {{ ref('quickbook_bills') }}\n{{ cross_join_unnest('quickbook_bills', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_bills'))}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_bills_lines"], "unique_id": "model.smartpill.quickbook_bills_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_bills_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_bills_lines.sql", "name": "quickbook_bills_lines", "resource_type": "model", "alias": "quickbook_bills_lines", "checksum": {"name": "sha256", "checksum": "316451e10b93449aa85026453db8d6300b6537d24938a4893b5b252f8202adce"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_bills"], ["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills"]}, "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"id": {"name": "id", "description": "Identifier of the bill line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Entity identifier of the parent bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_bill_hash_id": {"name": "_bill_hash_id", "description": "Unique identifier for the parent bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_class_status": {"name": "item_expense_class_status", "description": "The class reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_bills_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_bills`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_bills.line\n        where numbers.generated_number <= json_length(line)\n    )\nselect\n    _hash_id as _bill_hash_id,\n    id as bill_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Id\"') as id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"AccountRef\".\"value\"') as account_expense_account_id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"ClassRef\".\"value\"') as account_expense_class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"CustomerRef\".\"value\"') as account_expense_customer_id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"BillableStatus\"') as account_expense_billable_status,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"ClassRef\".\"value\"') as item_expense_class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"CustomerRef\".\"value\"') as item_expense_customer_id,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"BillableStatus\"') as item_expense_billable_status,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"ItemRef\".\"value\"') as item_expense_item_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Description\"') as description,\n    cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount\nfrom analytics.`quickbook_bills`\nleft join joined on _hash_id = joined._airbyte_hashid\nwhere\n    line is not null\n    and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_bills`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_bills_lines`"}, "model.smartpill.quickbook_classes": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} as name,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubClass']) }} as {{ dbt_utils.type_int() }} ) as is_subclass\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_classes') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_classes"], "unique_id": "model.smartpill.quickbook_classes", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_classes.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_classes.sql", "name": "quickbook_classes", "resource_type": "model", "alias": "quickbook_classes", "checksum": {"name": "sha256", "checksum": "b85e2b158ffb375db9a675a7411cdc3743e851dce0b2cee9c4502abdcda0e84b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_classes"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_classes"]}, "description": "Table containing classes of incomes and expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the class.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_class (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_classes.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"FullyQualifiedName\"') as fully_qualified_name,\n        cast(json_value(_airbyte_data, \n    '$.\"Active\"') as \n    signed\n ) as is_active,\n        json_value(_airbyte_data, \n    '$.\"Name\"') as name,\n        cast(json_value(_airbyte_data, \n    '$.\"SubClass\"') as \n    signed\n ) as is_subclass\n    from\n        analytics_v2._airbyte_raw_quickbook_classes\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_classes`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_classes`"}, "model.smartpill.quickbook_customers": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balance,\n        cast({{ json_extract_scalar('_airbyte_data', ['BalanceWithJobs']) }} as {{ dbt_utils.type_numeric() }}) as balance_with_jobs,\n        cast({{ json_extract_scalar('_airbyte_data', ['BillWithParent']) }} as {{ dbt_utils.type_int() }} ) as bill_with_parent,\n        {{ json_extract_scalar('_airbyte_data', ['CompanyName']) }} as company_name,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['DisplayName']) }} as display_name,\n        {{ json_extract_scalar('_airbyte_data', ['WebAddr', 'URI']) }} as website,\n        cast({{ json_extract_scalar('_airbyte_data', ['Taxable']) }} as {{ dbt_utils.type_numeric() }}) as taxable\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_customers') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_customers"], "unique_id": "model.smartpill.quickbook_customers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_customers.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_customers.sql", "name": "quickbook_customers", "resource_type": "model", "alias": "quickbook_customers", "checksum": {"name": "sha256", "checksum": "efc6d735fe5d7e89cea28343b6839205ef8b582373922c26fe41cb072e655598"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_customers"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_customers"]}, "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website url associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_customers.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"FullyQualifiedName\"') as fully_qualified_name,\n        cast(json_value(_airbyte_data, \n    '$.\"Active\"') as \n    signed\n ) as is_active,\n        cast(json_value(_airbyte_data, \n    '$.\"Balance\"') as \n    float\n) as balance,\n        cast(json_value(_airbyte_data, \n    '$.\"BalanceWithJobs\"') as \n    float\n) as balance_with_jobs,\n        cast(json_value(_airbyte_data, \n    '$.\"BillWithParent\"') as \n    signed\n ) as bill_with_parent,\n        json_value(_airbyte_data, \n    '$.\"CompanyName\"') as company_name,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        json_value(_airbyte_data, \n    '$.\"DisplayName\"') as display_name,\n        json_value(_airbyte_data, \n    '$.\"WebAddr\".\"URI\"') as website,\n        cast(json_value(_airbyte_data, \n    '$.\"Taxable\"') as \n    float\n) as taxable\n    from\n        analytics_v2._airbyte_raw_quickbook_customers\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_customers`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_customers`"}, "model.smartpill.quickbook_deposits": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as account_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_deposits') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter()}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_deposits"], "unique_id": "model.smartpill.quickbook_deposits", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_deposits.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_deposits.sql", "name": "quickbook_deposits", "resource_type": "model", "alias": "quickbook_deposits", "checksum": {"name": "sha256", "checksum": "7afeac8d13d9c0c29e064b13ef22dbc371e80372fb5ca40f6195a3d208195ed5"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_deposits"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits"]}, "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line": {"name": "line", "description": "JSON Array with the lines of the deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_deposits.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        json_value(_airbyte_data, \n    '$.\"DepositToAccountRef\".\"value\"') as account_id,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_deposits\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_deposits`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_deposits`"}, "model.smartpill.quickbook_deposits_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_deposits', 'quickbook_deposits', 'line') }}\nselect\n    _hash_id as _deposit_hash_id,\n    id as deposit_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'AccountRef', 'value']) }} as account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'ClassRef', 'value']) }} as class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['DepositLineDetail', 'CustomerRef', 'value']) }} as customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['LineNum']) }} as line_num\nfrom {{ ref('quickbook_deposits') }}\n    {{ cross_join_unnest('quickbook_deposits', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_deposits'))}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_deposits_lines"], "unique_id": "model.smartpill.quickbook_deposits_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_deposits_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_deposits_lines.sql", "name": "quickbook_deposits_lines", "resource_type": "model", "alias": "quickbook_deposits_lines", "checksum": {"name": "sha256", "checksum": "dfc9decd07559d5b3d1baf3354a3ef7f848c67f9e7dfbe70df3acc68b9d99117"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_deposits"], ["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits"]}, "description": "Table containing individual line items comprising the deposit.", "columns": {"id": {"name": "id", "description": "Identifier of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_num": {"name": "line_num", "description": "Line number given for the deposit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_deposit_hash_id": {"name": "_deposit_hash_id", "description": "Unique identifier for the parent deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_deposits_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 88\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_deposits`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_deposits.line\n        where numbers.generated_number <= json_length(line)\n    )\nselect\n    _hash_id as _deposit_hash_id,\n    id as deposit_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Id\"') as id,\n    cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount,\n    json_value(_airbyte_nested_data, \n    '$.\"DepositLineDetail\".\"AccountRef\".\"value\"') as account_id,\n    json_value(_airbyte_nested_data, \n    '$.\"DepositLineDetail\".\"ClassRef\".\"value\"') as class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"DepositLineDetail\".\"CustomerRef\".\"value\"') as customer_id,\n    json_value(_airbyte_nested_data, \n    '$.\"LineNum\"') as line_num\nfrom analytics.`quickbook_deposits`\n    left join joined on _hash_id = joined._airbyte_hashid\nwhere\n    line is not null\n    and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_deposits`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_deposits_lines`"}, "model.smartpill.quickbook_invoices": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as account_id,\n        {{ json_extract_scalar('_airbyte_data', ['CustomerRef', 'value']) }} as customer_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['Balance']) }} as {{ dbt_utils.type_numeric() }}) as balace,\n        {{ json_extract_scalar('_airbyte_data', ['DocNumber']) }} as doc_number,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['DueDate'])) }} as due_date,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_invoices') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_invoices"], "unique_id": "model.smartpill.quickbook_invoices", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_invoices.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_invoices.sql", "name": "quickbook_invoices", "resource_type": "model", "alias": "quickbook_invoices", "checksum": {"name": "sha256", "checksum": "a9cc76bd0f9df7851722f0e96c7f6feacb6298796ddbab3e3959bf1d537b446a"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_invoices"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_invoices.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"DepositToAccountRef\".\"value\"') as account_id,\n        json_value(_airbyte_data, \n    '$.\"CustomerRef\".\"value\"') as customer_id,\n        cast(json_value(_airbyte_data, \n    '$.\"Balance\"') as \n    float\n) as balace,\n        json_value(_airbyte_data, \n    '$.\"DocNumber\"') as doc_number,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"DueDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as due_date,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_invoices\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_invoices`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_invoices`"}, "model.smartpill.quickbook_invoices_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_invoices', 'quickbook_invoices', 'line') }}\nselect\n    _hash_id as _invoice_hash_id,\n    id as invoice_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ItemAccountRef', 'value']) }} as sales_item_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ItemRef', 'value']) }} as sales_item_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'ClassRef', 'value']) }} as sales_item_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'Qty']) }} as sales_item_quantity,\n    {{ json_extract_scalar(unnested_column_value('line'), ['SalesItemLineDetail', 'UnitPrice']) }} as sales_item_unit_price,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    {{ json_extract_scalar(unnested_column_value('line'), ['LineNum']) }} as line_num\nfrom {{ ref('quickbook_invoices') }}\n{{ cross_join_unnest('quickbook_invoices', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_invoices'))}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_invoices_lines"], "unique_id": "model.smartpill.quickbook_invoices_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_invoices_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_invoices_lines.sql", "name": "quickbook_invoices_lines", "resource_type": "model", "alias": "quickbook_invoices_lines", "checksum": {"name": "sha256", "checksum": "c94b66ab2b867e1284fd9b21132381a268961a94e5c8198f2c84c8097d4d5999"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_invoices"], ["quickbook_invoices"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_invoices_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 4\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_invoices`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_invoices.line\n        where numbers.generated_number <= json_length(line)\n    )\nselect\n    _hash_id as _invoice_hash_id,\n    id as invoice_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Id\"') as id,\n    cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount,\n    json_value(_airbyte_nested_data, \n    '$.\"SalesItemLineDetail\".\"ItemAccountRef\".\"value\"') as sales_item_account_id,\n    json_value(_airbyte_nested_data, \n    '$.\"SalesItemLineDetail\".\"ItemRef\".\"value\"') as sales_item_item_id,\n    json_value(_airbyte_nested_data, \n    '$.\"SalesItemLineDetail\".\"ClassRef\".\"value\"') as sales_item_class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"SalesItemLineDetail\".\"Qty\"') as sales_item_quantity,\n    json_value(_airbyte_nested_data, \n    '$.\"SalesItemLineDetail\".\"UnitPrice\"') as sales_item_unit_price,\n    json_value(_airbyte_nested_data, \n    '$.\"Description\"') as description,\n    json_value(_airbyte_nested_data, \n    '$.\"LineNum\"') as line_num\nfrom analytics.`quickbook_invoices`\nleft join joined on _hash_id = joined._airbyte_hashid\nwhere\n    line is not null\n    and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_invoices`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_invoices_lines`"}, "model.smartpill.quickbook_items": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Active']) }} as {{ dbt_utils.type_int() }} ) as is_active,\n        {{ json_extract_scalar('_airbyte_data', ['AssetAccountRef', 'value']) }} as asset_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['ExpenseAccountRef', 'value']) }} as expense_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['Description']) }} as description,\n        {{ json_extract_scalar('_airbyte_data', ['FullyQualifiedName']) }} as fully_qualified_name,\n        {{ json_extract_scalar('_airbyte_data', ['IncomeAccountRef', 'value']) }} as income_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['Name']) }} as name,\n        {{ json_extract_scalar('_airbyte_data', ['ParentRef', 'value']) }} as parent_item_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['PurchaseCost']) }} as {{ dbt_utils.type_numeric() }}) as purchase_cost,\n        {{ json_extract_scalar('_airbyte_data', ['PurchaseDesc']) }} as purchase_description,\n        cast({{ json_extract_scalar('_airbyte_data', ['SubItem']) }} as {{ dbt_utils.type_int() }} ) as sub_item,\n        cast({{ json_extract_scalar('_airbyte_data', ['Taxable']) }} as {{ dbt_utils.type_int() }} ) as taxable,\n        cast({{ json_extract_scalar('_airbyte_data', ['TrackQtyOnHand']) }} as {{ dbt_utils.type_int() }} ) as track_quantity_on_hand,\n        {{ json_extract_scalar('_airbyte_data', ['Type']) }} as type,\n        cast({{ json_extract_scalar('_airbyte_data', ['UnitPrice']) }} as {{ dbt_utils.type_int() }} ) as unit_price\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_items') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_items"], "unique_id": "model.smartpill.quickbook_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_items.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_items.sql", "name": "quickbook_items", "resource_type": "model", "alias": "quickbook_items", "checksum": {"name": "sha256", "checksum": "8cef1da9c6b9f8c452539a2f372b58197044d598c42d33f661faaa4137c01c96"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_items"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.dbt_utils.type_numeric", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_items"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_items.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        cast(json_value(_airbyte_data, \n    '$.\"Active\"') as \n    signed\n ) as is_active,\n        json_value(_airbyte_data, \n    '$.\"AssetAccountRef\".\"value\"') as asset_account_id,\n        json_value(_airbyte_data, \n    '$.\"ExpenseAccountRef\".\"value\"') as expense_account_id,\n        json_value(_airbyte_data, \n    '$.\"Description\"') as description,\n        json_value(_airbyte_data, \n    '$.\"FullyQualifiedName\"') as fully_qualified_name,\n        json_value(_airbyte_data, \n    '$.\"IncomeAccountRef\".\"value\"') as income_account_id,\n        json_value(_airbyte_data, \n    '$.\"Name\"') as name,\n        json_value(_airbyte_data, \n    '$.\"ParentRef\".\"value\"') as parent_item_id,\n        cast(json_value(_airbyte_data, \n    '$.\"PurchaseCost\"') as \n    float\n) as purchase_cost,\n        json_value(_airbyte_data, \n    '$.\"PurchaseDesc\"') as purchase_description,\n        cast(json_value(_airbyte_data, \n    '$.\"SubItem\"') as \n    signed\n ) as sub_item,\n        cast(json_value(_airbyte_data, \n    '$.\"Taxable\"') as \n    signed\n ) as taxable,\n        cast(json_value(_airbyte_data, \n    '$.\"TrackQtyOnHand\"') as \n    signed\n ) as track_quantity_on_hand,\n        json_value(_airbyte_data, \n    '$.\"Type\"') as type,\n        cast(json_value(_airbyte_data, \n    '$.\"UnitPrice\"') as \n    signed\n ) as unit_price\n    from\n        analytics_v2._airbyte_raw_quickbook_items\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_items`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_items`"}, "model.smartpill.quickbook_journal_entries": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        cast({{ json_extract_scalar('_airbyte_data', ['Adjustment']) }} as {{ dbt_utils.type_int() }} ) as is_adjustment,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line,\n        {{ json_extract_scalar('_airbyte_data', ['PrivateNote']) }} as private_note,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_journal_entries') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_journal_entries"], "unique_id": "model.smartpill.quickbook_journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_journal_entries.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_journal_entries.sql", "name": "quickbook_journal_entries", "resource_type": "model", "alias": "quickbook_journal_entries", "checksum": {"name": "sha256", "checksum": "cd7edb1d7a0e5ff5de4a0273b9a86adb5522f818c10ead8e9372622386d5d7b7"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_journal_entries"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_int", "macro.smartpill.json_extract", "macro.smartpill.string_to_timestamp", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries"]}, "description": "Table containing journal entry transactions.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment": {"name": "adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the journal entry was transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_journal_entries.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        cast(json_value(_airbyte_data, \n    '$.\"Adjustment\"') as \n    signed\n ) as is_adjustment,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line,\n        json_value(_airbyte_data, \n    '$.\"PrivateNote\"') as private_note,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date\n    from\n        analytics_v2._airbyte_raw_quickbook_journal_entries\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_journal_entries`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_journal_entries`"}, "model.smartpill.quickbook_journal_entries_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n\n{{ unnest_cte('quickbook_journal_entries', 'quickbook_journal_entries', 'line') }}\nselect\n    _hash_id as _journal_entry_hash_id,\n    id as journal_entry_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'AccountRef', 'value']) }} as account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'ClassRef', 'value']) }} as class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'CustomerRef', 'value']) }} as customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['JournalEntryLineDetail', 'PostingType']) }} as posting_type,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description\nfrom {{ ref('quickbook_journal_entries') }}\n{{ cross_join_unnest('quickbook_journal_entries', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_journal_entries'))}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_journal_entries_lines"], "unique_id": "model.smartpill.quickbook_journal_entries_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_journal_entries_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_journal_entries_lines.sql", "name": "quickbook_journal_entries_lines", "resource_type": "model", "alias": "quickbook_journal_entries_lines", "checksum": {"name": "sha256", "checksum": "84b92958128941864765efb06762d895643a7d1961ca340f1394946bdff3df9a"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries"]}, "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"id": {"name": "id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_journal_entry_hash_id": {"name": "_journal_entry_hash_id", "description": "Unique identifier for the parent journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_journal_entries_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\n\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n     + \n    \n    p5.generated_number * pow(2, 5)\n     + \n    \n    p6.generated_number * pow(2, 6)\n     + \n    \n    p7.generated_number * pow(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 238\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_journal_entries`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_journal_entries.line\n        where numbers.generated_number <= json_length(line)\n    )\nselect\n    _hash_id as _journal_entry_hash_id,\n    id as journal_entry_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Id\"') as id,\n    cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount,\n    json_value(_airbyte_nested_data, \n    '$.\"JournalEntryLineDetail\".\"AccountRef\".\"value\"') as account_id,\n    json_value(_airbyte_nested_data, \n    '$.\"JournalEntryLineDetail\".\"ClassRef\".\"value\"') as class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"JournalEntryLineDetail\".\"CustomerRef\".\"value\"') as customer_id,\n    json_value(_airbyte_nested_data, \n    '$.\"JournalEntryLineDetail\".\"PostingType\"') as posting_type,\n    json_value(_airbyte_nested_data, \n    '$.\"Description\"') as description\nfrom analytics.`quickbook_journal_entries`\nleft join joined on _hash_id = joined._airbyte_hashid\nwhere\n    line is not null\n    and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_journal_entries`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_journal_entries_lines`"}, "model.smartpill.quickbook_payments": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['ARAccountRef', 'value']) }} as receivable_account_id,\n        {{ json_extract_scalar('_airbyte_data', ['DepositToAccountRef', 'value']) }} as deposit_to_account_id,\n        cast({{ json_extract_scalar('_airbyte_data', ['UnappliedAmt']) }} as {{ dbt_utils.type_numeric() }}) as unapplied_amount,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['CustomerRef', 'value']) }} as customer_id,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_payments') }}\n)\nselect\n    *,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_payments"], "unique_id": "model.smartpill.quickbook_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_payments.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_payments.sql", "name": "quickbook_payments", "resource_type": "model", "alias": "quickbook_payments", "checksum": {"name": "sha256", "checksum": "a4faef589aee5502a9fcb9062830d443cb939832f2e76bd446ebdbf05fe9aa85"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_payments"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_payments.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"ARAccountRef\".\"value\"') as receivable_account_id,\n        json_value(_airbyte_data, \n    '$.\"DepositToAccountRef\".\"value\"') as deposit_to_account_id,\n        cast(json_value(_airbyte_data, \n    '$.\"UnappliedAmt\"') as \n    float\n) as unapplied_amount,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        json_value(_airbyte_data, \n    '$.\"CustomerRef\".\"value\"') as customer_id,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_payments\n)\nselect\n    *,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_payments`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_payments`"}, "model.smartpill.quickbook_purchases": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\nwith final as (\n    select\n        {{ common_fields() }},\n        {{ json_extract_scalar('_airbyte_data', ['AccountRef', 'value']) }} as account_id,\n        {{ json_extract_scalar('_airbyte_data', ['DocNumber']) }} as doc_number,\n        {{ json_extract_scalar('_airbyte_data', ['Credit']) }} as credit,\n        {{ json_extract_scalar('_airbyte_data', ['CurrencyRef', 'name']) }} as currency_name,\n        cast({{ json_extract_scalar('_airbyte_data', ['TotalAmt']) }} as {{ dbt_utils.type_numeric() }}) as total_amount,\n        {{ json_extract_scalar('_airbyte_data', ['PaymentType']) }} as payment_type,\n        {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['TxnDate'])) }} as transaction_date,\n        {{ json_extract_scalar('_airbyte_data', ['EntityRef', 'value']) }} as entity_id,\n        {{ json_extract_scalar('_airbyte_data', ['EntityRef', 'type']) }} as entity_type,\n        {{ json_extract('_airbyte_data', ['Line']) }} as line\n    from\n        {{ source('analytics_v2', '_airbyte_raw_quickbook_purchases') }}\n)\nselect\n    *,\n    if(entity_type = 'Customer', entity_id, null) as customer_id,\n    {{ hash_field() }}\nfrom\n    final\nwhere\n    {{ incremental_filter() }}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_purchases"], "unique_id": "model.smartpill.quickbook_purchases", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_purchases.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_purchases.sql", "name": "quickbook_purchases", "resource_type": "model", "alias": "quickbook_purchases", "checksum": {"name": "sha256", "checksum": "466b22a6ca5fd891891bfb2b1f18f23a0cc5a269057663602aa31f6e61dd0775"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [], "sources": [["analytics_v2", "_airbyte_raw_quickbook_purchases"]], "depends_on": {"macros": ["macro.smartpill.common_fields", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.string_to_timestamp", "macro.smartpill.json_extract", "macro.smartpill.hash_field", "macro.smartpill.incremental_filter"], "nodes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases"]}, "description": "Table containing records of purchase expenses.", "columns": {"id": {"name": "id", "description": "Quickbooks entity identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the entity created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the entity was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_hash_id": {"name": "_hash_id", "description": "Unique identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_name": {"name": "currency_name", "description": "Reference to the currency which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_purchases.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith final as (\n    select\n        json_value(_airbyte_data, \n    '$.\"Id\"') as `id`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"CreateTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `created_at`,\n    STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"MetaData\".\"LastUpdatedTime\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as `updated_at`,\n    _airbyte_emitted_at,\n        json_value(_airbyte_data, \n    '$.\"AccountRef\".\"value\"') as account_id,\n        json_value(_airbyte_data, \n    '$.\"DocNumber\"') as doc_number,\n        json_value(_airbyte_data, \n    '$.\"Credit\"') as credit,\n        json_value(_airbyte_data, \n    '$.\"CurrencyRef\".\"name\"') as currency_name,\n        cast(json_value(_airbyte_data, \n    '$.\"TotalAmt\"') as \n    float\n) as total_amount,\n        json_value(_airbyte_data, \n    '$.\"PaymentType\"') as payment_type,\n        STR_TO_DATE(json_value(_airbyte_data, \n    '$.\"TxnDate\"'), '%Y-%m-%dT%H:%i:%s.%fZ') as transaction_date,\n        json_value(_airbyte_data, \n    '$.\"EntityRef\".\"value\"') as entity_id,\n        json_value(_airbyte_data, \n    '$.\"EntityRef\".\"type\"') as entity_type,\n        json_extract(_airbyte_data, \n    '$.\"Line\"') as line\n    from\n        analytics_v2._airbyte_raw_quickbook_purchases\n)\nselect\n    *,\n    if(entity_type = 'Customer', entity_id, null) as customer_id,\n    md5(cast(concat(coalesce(cast(`id` as char), ''), '-', coalesce(cast(`_airbyte_emitted_at` as char), '')) as char)) as _hash_id\nfrom\n    final\nwhere\n    \n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from analytics.`quickbook_purchases`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_purchases`"}, "model.smartpill.quickbook_purchases_lines": {"raw_sql": "{{ config(schema=\"analytics\", tags=[\"top-level\"]) }}\n{{ unnest_cte('quickbook_purchases', 'quickbook_purchases', 'line') }}\nselect\n    _hash_id as _purchase_hash_id,\n    id as purchase_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Id']) }} as id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'AccountRef', 'value']) }} as account_expense_account_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'ClassRef', 'value']) }} as account_expense_class_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['AccountBasedExpenseLineDetail', 'CustomerRef', 'value']) }} as account_expense_customer_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'ItemRef', 'value']) }} as item_expense_item_id,\n    {{ json_extract_scalar(unnested_column_value('line'), ['ItemBasedExpenseLineDetail', 'BillableStatus']) }} as item_expense_billable_status,\n    {{ json_extract_scalar(unnested_column_value('line'), ['Description']) }} as description,\n    cast({{ json_extract_scalar(unnested_column_value('line'), ['Amount']) }} as {{ dbt_utils.type_numeric() }}) as amount\nfrom {{ ref('quickbook_purchases') }}\n{{ cross_join_unnest('quickbook_purchases', 'line') }}\nwhere\n    line is not null\n    and {{ incremental_filter_line(ref('quickbook_purchases'))}}", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "base_tables", "quickbook_purchases_lines"], "unique_id": "model.smartpill.quickbook_purchases_lines", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/base_tables/quickbook_purchases_lines.sql", "original_file_path": "models/quickbooks/base_tables/quickbook_purchases_lines.sql", "name": "quickbook_purchases_lines", "resource_type": "model", "alias": "quickbook_purchases_lines", "checksum": {"name": "sha256", "checksum": "8b030caa3d1c93e6cad571f4d0fcd0ec438d1842fd5545c18d014e4368007e81"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "analytics", "database": null, "tags": ["top-level"], "full_refresh": null}, "tags": ["top-level"], "refs": [["quickbook_purchases"], ["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unnest_cte", "macro.smartpill.unnested_column_value", "macro.smartpill.json_extract_scalar", "macro.dbt_utils.type_numeric", "macro.smartpill.cross_join_unnest", "macro.smartpill.incremental_filter_line"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases"]}, "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"id": {"name": "id", "description": "Identifier of the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "Reference to the class which the purchase line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Reference to the customer which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_purchase_hash_id": {"name": "_purchase_hash_id", "description": "Unique identifier for the parent purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks/base_tables/quickbooks.yml", "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbook_purchases_lines.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "analytics", "tags": ["top-level"]}, "compiled_sql": "\nwith numbers as (\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 29\n    order by generated_number\n\n\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            \n            json_extract(line, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from analytics.`quickbook_purchases`\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in quickbook_purchases.line\n        where numbers.generated_number <= json_length(line)\n    )\nselect\n    _hash_id as _purchase_hash_id,\n    id as purchase_id,\n    json_value(_airbyte_nested_data, \n    '$.\"Id\"') as id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"AccountRef\".\"value\"') as account_expense_account_id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"ClassRef\".\"value\"') as account_expense_class_id,\n    json_value(_airbyte_nested_data, \n    '$.\"AccountBasedExpenseLineDetail\".\"CustomerRef\".\"value\"') as account_expense_customer_id,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"ItemRef\".\"value\"') as item_expense_item_id,\n    json_value(_airbyte_nested_data, \n    '$.\"ItemBasedExpenseLineDetail\".\"BillableStatus\"') as item_expense_billable_status,\n    json_value(_airbyte_nested_data, \n    '$.\"Description\"') as description,\n    cast(json_value(_airbyte_nested_data, \n    '$.\"Amount\"') as \n    float\n) as amount\nfrom analytics.`quickbook_purchases`\nleft join joined on _hash_id = joined._airbyte_hashid\nwhere\n    line is not null\n    and \n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from analytics.`quickbook_purchases`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytics.`quickbook_purchases_lines`"}, "model.smartpill.int_quickbooks__account_classifications": {"raw_sql": "with accounts as (\n    {{ unique_select(ref('quickbook_accounts')) }}\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__account_classifications"], "unique_id": "model.smartpill.int_quickbooks__account_classifications", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "name": "int_quickbooks__account_classifications", "resource_type": "model", "alias": "int_quickbooks__account_classifications", "checksum": {"name": "sha256", "checksum": "dccad3c1ec5e8e8ab51ef427b673073dda09c6dfa7f75f50ff9076415e082d30"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__account_classifications.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with accounts as (\n    select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nclassification_fix as (\n    select \n        id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_name,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        (balance * multiplier) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join accounts as parent_accounts\n        on parent_accounts.id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__bill_double_entry": {"raw_sql": "with bill_join as (\n    with bills as (\n        {{ unique_select(ref('quickbook_bills')) }}\n    ),\n\n    bill_lines as (\n        select *\n        from {{ref('quickbook_bills_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__bill_double_entry"], "unique_id": "model.smartpill.int_quickbooks__bill_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "name": "int_quickbooks__bill_double_entry", "resource_type": "model", "alias": "int_quickbooks__bill_double_entry", "checksum": {"name": "sha256", "checksum": "7188785ca6124753415818bffe9d3e248095cf8a6f02a9c18a2d21206ec3d678"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_bills"], ["quickbook_bills_lines"], ["quickbook_items"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_items"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__bill_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with bill_join as (\n    with bills as (\n        select * from analytics.`quickbook_bills`\n    where id in (\n        select id\n        from analytics.`quickbook_bills`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    bill_lines as (\n        select *\n        from analytics.`quickbook_bills_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        bills.id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.currency_name,\n        coalesce(bill_lines.account_expense_class_id, bill_lines.item_expense_class_id) as class_id\n        -- bills.vendor_id\n    from bills\n    \n    inner join bill_lines\n        on bills._hash_id = bill_lines._bill_hash_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- vendor_id,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from bill_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__bill_payment_double_entry": {"raw_sql": "with bill_payment_join as (\n    with bill_payments as (\n        {{ unique_select(ref('quickbook_bill_payments')) }}\n    ),\n\n    accounts as (\n        {{ unique_select(ref('quickbook_accounts')) }}\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__bill_payment_double_entry"], "unique_id": "model.smartpill.int_quickbooks__bill_payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "name": "int_quickbooks__bill_payment_double_entry", "resource_type": "model", "alias": "int_quickbooks__bill_payment_double_entry", "checksum": {"name": "sha256", "checksum": "87c3abfd95171c820a3ffa921a276c5100eef45d653c1ea3fbc424e69f4fea07"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_bill_payments"], ["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__bill_payment_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with bill_payment_join as (\n    with bill_payments as (\n        select * from analytics.`quickbook_bill_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_bill_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    ap_accounts as (\n        select\n            id as account_id\n        from accounts\n        \n        where account_type = 'Accounts Payable'\n            and is_active\n    )\n\n    select\n        bill_payments.id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id,\n        bill_payments.currency_name\n        -- bill_payments.vendor_id\n    from bill_payments\n\n    cross join ap_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- cast(null as int) as customer_id,\n        -- vendor_id,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source,\n        currency_name,\n        null as class_id,\n        null as customer_id\n    from bill_payment_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__deposit_double_entry": {"raw_sql": "with deposit_join as (\n    with deposits as (\n        {{ unique_select(ref('quickbook_deposits')) }}\n    ),\n\n    deposit_lines as (\n        select *\n        from {{ref('quickbook_deposits_lines')}}\n    ),\n\n    accounts as (\n        {{ unique_select(ref('quickbook_accounts')) }}\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__deposit_double_entry"], "unique_id": "model.smartpill.int_quickbooks__deposit_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "name": "int_quickbooks__deposit_double_entry", "resource_type": "model", "alias": "int_quickbooks__deposit_double_entry", "checksum": {"name": "sha256", "checksum": "c4bd262fb4b99b8b77aa0d928606d3864eda424f98fde0fc723d3549aa4c0e94"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"], ["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines", "model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__deposit_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with deposit_join as (\n    with deposits as (\n        select * from analytics.`quickbook_deposits`\n    where id in (\n        select id\n        from analytics.`quickbook_deposits`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    deposit_lines as (\n        select *\n        from analytics.`quickbook_deposits_lines`\n    ),\n\n    accounts as (\n        select * from analytics.`quickbook_accounts`\n    where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    uf_accounts as (\n        select\n            id\n        from accounts\n\n        where account_sub_type = 'UndepositedFunds'\n            and is_active\n    )\n\n    select\n        deposits.id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.account_id, uf_accounts.id) as deposit_from_acct_id,\n        customer_id as customer_id,\n        currency_name,\n        deposit_lines.class_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits._hash_id = deposit_lines._deposit_hash_id\n\n    cross join uf_accounts\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source,\n        deposit_join.currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from deposit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__invoice_double_entry": {"raw_sql": "with invoice_join as (\n    with invoices as (\n        {{ unique_select(ref('quickbook_invoices')) }}\n    ),\n\n    invoice_lines as (\n        select *\n        from {{ref('quickbook_invoices_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from {{ref('quickbook_accounts')}}\n        where {{ unique_filter(ref('quickbook_accounts')) }}\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from {{ ref('quickbook_accounts') }}\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__invoice_double_entry"], "unique_id": "model.smartpill.int_quickbooks__invoice_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "name": "int_quickbooks__invoice_double_entry", "resource_type": "model", "alias": "int_quickbooks__invoice_double_entry", "checksum": {"name": "sha256", "checksum": "132ee8d12aa85edd5f1a586a2d00974b54428fb1184f5b3dfc5fa02547d82198"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_invoices"], ["quickbook_invoices_lines"], ["quickbook_items"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select", "macro.smartpill.unique_filter"], "nodes": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_items", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__invoice_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with invoice_join as (\n    with invoices as (\n        select * from analytics.`quickbook_invoices`\n    where id in (\n        select id\n        from analytics.`quickbook_invoices`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    invoice_lines as (\n        select *\n        from analytics.`quickbook_invoices_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    ),\n\n    accounts as (\n        select *\n        from analytics.`quickbook_accounts`\n        where id in (\n        select id\n        from analytics.`quickbook_accounts`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    )\n\n    select\n        invoices.id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        coalesce(items.income_account_id) as account_id,\n\n        invoices.customer_id,\n        invoices.currency_name,\n        invoice_lines.sales_item_class_id as class_id\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices._hash_id = invoice_lines._invoice_hash_id\n\n    left join items\n        on invoice_lines.sales_item_item_id = items.id\n\n    where coalesce(invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id) is not null \n\n),\n\nar_accounts as (\n    select *\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        ar_accounts.id as account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source,\n        invoice_join.currency_name,\n        class_id,\n        customer_id\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__journal_entry_double_entry": {"raw_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    {{ unique_select(ref('quickbook_journal_entries')) }}\n),\n\njournal_entry_lines as (\n    select *\n    from {{ref('quickbook_journal_entries_lines')}}\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__journal_entry_double_entry"], "unique_id": "model.smartpill.int_quickbooks__journal_entry_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "name": "int_quickbooks__journal_entry_double_entry", "resource_type": "model", "alias": "int_quickbooks__journal_entry_double_entry", "checksum": {"name": "sha256", "checksum": "df272747f0011b1a8117afa59c66fc20019f916d7e4247c27f1e9cac8f6aa8d3"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__journal_entry_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\nwith journal_entries as (\n    select * from analytics.`quickbook_journal_entries`\n    where id in (\n        select id\n        from analytics.`quickbook_journal_entries`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\njournal_entry_lines as (\n    select *\n    from analytics.`quickbook_journal_entries_lines`\n),\n\nfinal as (\n    select\n        journal_entries.id as transaction_id,\n        journal_entries.transaction_date,\n        -- journal_entry_lines.vendor_id,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source,\n        journal_entries.currency_name,\n        journal_entry_lines.class_id,\n        journal_entry_lines.customer_id\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries._hash_id = journal_entry_lines._journal_entry_hash_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__payment_double_entry": {"raw_sql": "with payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from {{ref('quickbook_payments')}}\n    where {{ unique_filter(ref('quickbook_payments')) }}\n),\n\nar_accounts as (\n    select\n        id\n    from {{ref('quickbook_accounts')}}\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__payment_double_entry"], "unique_id": "model.smartpill.int_quickbooks__payment_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "name": "int_quickbooks__payment_double_entry", "resource_type": "model", "alias": "int_quickbooks__payment_double_entry", "checksum": {"name": "sha256", "checksum": "0fe237030b47ca7cd965417e9c7f358fb226aee8dfe3da0b649e071f10105e8a"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_payments"], ["quickbook_payments"], ["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_filter"], "nodes": ["model.smartpill.quickbook_payments", "model.smartpill.quickbook_payments", "model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__payment_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with payment as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id,\n        receivable_account_id,\n        customer_id as customer_id,\n        currency_name\n    from analytics.`quickbook_payments`\n    where id in (\n        select id\n        from analytics.`quickbook_payments`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n),\n\nar_accounts as (\n    select\n        id\n    from analytics.`quickbook_accounts`\n\n    where account_type = 'Accounts Receivable'\n        and is_active\n    limit 1\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source,\n        payment.currency_name,\n        null as class_id,\n        customer_id\n    from payment\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__payroll_check_double_entry": {"raw_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from {{source('analytics_v2', 'quickbook_payroll_checks')}}\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__payroll_check_double_entry"], "unique_id": "model.smartpill.int_quickbooks__payroll_check_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "name": "int_quickbooks__payroll_check_double_entry", "resource_type": "model", "alias": "int_quickbooks__payroll_check_double_entry", "checksum": {"name": "sha256", "checksum": "c6dac7c68f61d21d83899859f8c0d10f2277a97b08dd1914c95dd616c30e3b1e"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["analytics_v2", "quickbook_payroll_checks"]], "depends_on": {"macros": [], "nodes": ["source.smartpill.analytics_v2.quickbook_payroll_checks"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__payroll_check_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with payroll_check as (\n    select\n        id as transaction_id,\n        transaction_date,\n        total_amount as amount,\n        deposit_to_account_id\n    from analytics_v2.quickbook_payroll_checks\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        -- customer_id,\n        -- cast(null as int) as vendor_id,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payroll check' as transaction_source,\n        'United States Dollar',\n        null as class_id,\n        null as customer_id\n    from payroll_check\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.smartpill.int_quickbooks__purchase_double_entry": {"raw_sql": "with purchase_join as (\n    with purchases as (\n        {{ unique_select(ref('quickbook_purchases')) }}\n    ),\n\n    purchase_lines as (\n        select *\n        from {{ref('quickbook_purchases_lines')}}\n    ),\n\n    items_stg as (\n        {{ unique_select(ref('quickbook_items')) }}\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "intermediate_tables", "int_quickbooks__purchase_double_entry"], "unique_id": "model.smartpill.int_quickbooks__purchase_double_entry", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "original_file_path": "models/quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "name": "int_quickbooks__purchase_double_entry", "resource_type": "model", "alias": "int_quickbooks__purchase_double_entry", "checksum": {"name": "sha256", "checksum": "548379862689c94e398f4f7194eae68b00a403ecad49bbd155fae69309767343"}, "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"], ["quickbook_items"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.unique_select"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines", "model.smartpill.quickbook_items"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/intermediate_tables/int_quickbooks__purchase_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "compiled_sql": "with purchase_join as (\n    with purchases as (\n        select * from analytics.`quickbook_purchases`\n    where id in (\n        select id\n        from analytics.`quickbook_purchases`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    purchase_lines as (\n        select *\n        from analytics.`quickbook_purchases_lines`\n    ),\n\n    items_stg as (\n        select * from analytics.`quickbook_items`\n    where id in (\n        select id\n        from analytics.`quickbook_items`\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n    ),\n\n    items as (\n        select \n            item.*, \n            parent.expense_account_id as parent_expense_account_id,\n            parent.income_account_id as parent_income_account_id\n        from items_stg item\n\n        left join items_stg parent\n            on item.parent_item_id = parent.id\n\n    )\n\n    select\n        purchases.id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type,\n        purchases.currency_name,\n        account_expense_class_id as class_id,\n        coalesce(purchases.customer_id, purchase_lines.account_expense_customer_id) as customer_id\n    from purchases\n    \n    inner join purchase_lines\n        on purchases._hash_id = purchase_lines._purchase_hash_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source,\n        currency_name,\n        class_id,\n        customer_id\n    from purchase_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.smartpill.not_null_quickbook_accounts_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_accounts_id"], "unique_id": "test.smartpill.not_null_quickbook_accounts_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_accounts_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_id", "resource_type": "test", "alias": "not_null_quickbook_accounts_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_accounts_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_accounts`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_accounts_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_accounts_created_at"], "unique_id": "test.smartpill.not_null_quickbook_accounts_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_accounts_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_created_at", "resource_type": "test", "alias": "not_null_quickbook_accounts_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_accounts_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_accounts`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_accounts_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_accounts_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_accounts_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_accounts_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_updated_at", "resource_type": "test", "alias": "not_null_quickbook_accounts_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_accounts_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_accounts`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_accounts__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_accounts__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_accounts__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_accounts__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts__hash_id", "resource_type": "test", "alias": "not_null_quickbook_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_accounts__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_accounts`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_accounts__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_accounts__hash_id"], "unique_id": "test.smartpill.unique_quickbook_accounts__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_accounts__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_accounts__hash_id", "resource_type": "test", "alias": "unique_quickbook_accounts__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_accounts__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_accounts`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "parent_account_id", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_accounts_ca5eed68298868db72cc2b85a1a28a98.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_accounts_ca5eed68298868db72cc2b85a1a28a98.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select parent_account_id as id from analytics.`quickbook_accounts`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "parent_account_id"}, "test.smartpill.not_null_quickbook_accounts_balance": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ ref('quickbook_accounts') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_accounts_balance"], "unique_id": "test.smartpill.not_null_quickbook_accounts_balance", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_accounts_balance.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_accounts_balance", "resource_type": "test", "alias": "not_null_quickbook_accounts_balance", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_accounts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_accounts_balance.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_accounts`\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance"}, "test.smartpill.not_null_quickbook_bill_payments_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_bill_payments') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bill_payments_id"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bill_payments_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_id", "resource_type": "test", "alias": "not_null_quickbook_bill_payments_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bill_payments_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bill_payments`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_bill_payments_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_bill_payments') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bill_payments_created_at"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bill_payments_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_created_at", "resource_type": "test", "alias": "not_null_quickbook_bill_payments_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bill_payments_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bill_payments`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_bill_payments_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_bill_payments') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bill_payments_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bill_payments_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments_updated_at", "resource_type": "test", "alias": "not_null_quickbook_bill_payments_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bill_payments_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bill_payments`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_bill_payments__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_bill_payments') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bill_payments__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_bill_payments__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bill_payments__hash_id", "resource_type": "test", "alias": "not_null_quickbook_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bill_payments__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bill_payments`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_bill_payments__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_bill_payments') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_bill_payments__hash_id"], "unique_id": "test.smartpill.unique_quickbook_bill_payments__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_bill_payments__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_bill_payments__hash_id", "resource_type": "test", "alias": "unique_quickbook_bill_payments__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_bill_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_bill_payments__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_bill_payments`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_payment_id", "model": "{{ ref('quickbook_bill_payments_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bill_payments_lines_1761f7bf3a9a556e5487202b3996b2de.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "resource_type": "test", "alias": "relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"], ["quickbook_bill_payments_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bill_payments_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bill_payments_lines_1761f7bf3a9a556e5487202b3996b2de.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select bill_payment_id as id from analytics.`quickbook_bill_payments_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_bills`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id"}, "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_bill_payments')", "field": "_hash_id", "column_name": "_bill_payment_hash_id", "model": "{{ ref('quickbook_bill_payments_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bill_payments_lines_5927cb27b0268ad4740bc41f8280d300.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "resource_type": "test", "alias": "relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bill_payments"], ["quickbook_bill_payments_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bill_payments_lines_5927cb27b0268ad4740bc41f8280d300.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select _bill_payment_hash_id as id from analytics.`quickbook_bill_payments_lines`\n) as child\nleft join (\n    select _hash_id as id from analytics.`quickbook_bill_payments`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_payment_hash_id"}, "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_id", "model": "{{ ref('quickbook_bill_payments_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bill_payments_lines_e984b0aa705842b7b93afc2264014177.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "resource_type": "test", "alias": "relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"], ["quickbook_bill_payments_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bill_payments_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bill_payments_lines_e984b0aa705842b7b93afc2264014177.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select bill_id as id from analytics.`quickbook_bill_payments_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_bills`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_deposits')", "field": "id", "column_name": "deposit_id", "model": "{{ ref('quickbook_bill_payments_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bill_payments_lines_32b04cbdccd844dce7782f4970852148.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "resource_type": "test", "alias": "relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"], ["quickbook_bill_payments_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_bill_payments_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bill_payments_lines_32b04cbdccd844dce7782f4970852148.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select deposit_id as id from analytics.`quickbook_bill_payments_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_deposits`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id"}, "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_journal_entries')", "field": "id", "column_name": "journal_entry_id", "model": "{{ ref('quickbook_bill_payments_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_"], "unique_id": "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bill_payments_lines_52a67b0ded938a1e09cd97c1a79f7b57.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_", "resource_type": "test", "alias": "relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"], ["quickbook_bill_payments_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_bill_payments_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bill_payments_lines_52a67b0ded938a1e09cd97c1a79f7b57.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select journal_entry_id as id from analytics.`quickbook_bill_payments_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_journal_entries`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id"}, "test.smartpill.not_null_quickbook_bills_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_bills') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bills_id"], "unique_id": "test.smartpill.not_null_quickbook_bills_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bills_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_id", "resource_type": "test", "alias": "not_null_quickbook_bills_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bills"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bills_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bills`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_bills_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_bills') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bills_created_at"], "unique_id": "test.smartpill.not_null_quickbook_bills_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bills_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_created_at", "resource_type": "test", "alias": "not_null_quickbook_bills_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bills"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bills_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bills`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_bills_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_bills') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bills_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_bills_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bills_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills_updated_at", "resource_type": "test", "alias": "not_null_quickbook_bills_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bills"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bills_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bills`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_bills__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_bills') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_bills__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_bills__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_bills__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_bills__hash_id", "resource_type": "test", "alias": "not_null_quickbook_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_bills"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_bills__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_bills`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_bills__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_bills') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_bills__hash_id"], "unique_id": "test.smartpill.unique_quickbook_bills__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_bills__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_bills__hash_id", "resource_type": "test", "alias": "unique_quickbook_bills__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_bills"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_bills__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_bills`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "id", "column_name": "bill_id", "model": "{{ ref('quickbook_bills_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bills_lines_e984b0aa705842b7b93afc2264014177.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_", "resource_type": "test", "alias": "relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"], ["quickbook_bills_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bills_lines_e984b0aa705842b7b93afc2264014177.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select bill_id as id from analytics.`quickbook_bills_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_bills`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_bills')", "field": "_hash_id", "column_name": "_bill_hash_id", "model": "{{ ref('quickbook_bills_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_"], "unique_id": "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_bills_lines_fef5f9ca7436be37ee0ba424e8eb79a4.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "resource_type": "test", "alias": "relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_bills"], ["quickbook_bills_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_bills_lines_fef5f9ca7436be37ee0ba424e8eb79a4.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select _bill_hash_id as id from analytics.`quickbook_bills_lines`\n) as child\nleft join (\n    select _hash_id as id from analytics.`quickbook_bills`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_bill_hash_id"}, "test.smartpill.not_null_quickbook_customers_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_customers') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_customers_id"], "unique_id": "test.smartpill.not_null_quickbook_customers_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_customers_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_id", "resource_type": "test", "alias": "not_null_quickbook_customers_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_customers_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_customers`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_customers_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_customers') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_customers_created_at"], "unique_id": "test.smartpill.not_null_quickbook_customers_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_customers_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_created_at", "resource_type": "test", "alias": "not_null_quickbook_customers_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_customers_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_customers`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_customers_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_customers') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_customers_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_customers_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_customers_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers_updated_at", "resource_type": "test", "alias": "not_null_quickbook_customers_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_customers_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_customers`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_customers__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_customers') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_customers__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_customers__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_customers__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_customers__hash_id", "resource_type": "test", "alias": "not_null_quickbook_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_customers__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_customers`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_customers__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_customers') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_customers__hash_id"], "unique_id": "test.smartpill.unique_quickbook_customers__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_customers__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_customers__hash_id", "resource_type": "test", "alias": "unique_quickbook_customers__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_customers"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_customers__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_customers`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.not_null_quickbook_classes_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_classes') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_classes_id"], "unique_id": "test.smartpill.not_null_quickbook_classes_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_classes_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_id", "resource_type": "test", "alias": "not_null_quickbook_classes_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_classes"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_classes_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_classes`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_classes_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_classes') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_classes_created_at"], "unique_id": "test.smartpill.not_null_quickbook_classes_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_classes_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_created_at", "resource_type": "test", "alias": "not_null_quickbook_classes_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_classes"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_classes_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_classes`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_classes_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_classes') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_classes_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_classes_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_classes_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes_updated_at", "resource_type": "test", "alias": "not_null_quickbook_classes_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_classes"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_classes_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_classes`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_classes__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_classes') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_classes__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_classes__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_classes__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_classes__hash_id", "resource_type": "test", "alias": "not_null_quickbook_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_classes"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_classes__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_classes`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_classes__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_classes') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_classes__hash_id"], "unique_id": "test.smartpill.unique_quickbook_classes__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_classes__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_classes__hash_id", "resource_type": "test", "alias": "unique_quickbook_classes__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_classes"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_classes__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_classes`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "class_id", "model": "{{ ref('quickbook_deposits_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_deposits_lines_848bf994c5a05d4730eb7384f402e186.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "resource_type": "test", "alias": "relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"], ["quickbook_deposits_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_deposits_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_deposits_lines_848bf994c5a05d4730eb7384f402e186.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select class_id as id from analytics.`quickbook_deposits_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_classes`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id"}, "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ ref('quickbook_deposits_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_deposits_lines_6cc2ed41560200d04a81af2a2add92f6.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_deposits_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_deposits_lines_6cc2ed41560200d04a81af2a2add92f6.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_id as id from analytics.`quickbook_deposits_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "customer_id", "model": "{{ ref('quickbook_deposits_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_deposits_lines_5fee926b740b0a64fb84a60192d543d2.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_", "resource_type": "test", "alias": "relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"], ["quickbook_deposits_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_deposits_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_deposits_lines_5fee926b740b0a64fb84a60192d543d2.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select customer_id as id from analytics.`quickbook_deposits_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_customers`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_deposits')", "field": "_hash_id", "column_name": "_deposit_hash_id", "model": "{{ ref('quickbook_deposits_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_deposits_lines_c4dd31ed59060f398370a426c57d1894.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "resource_type": "test", "alias": "relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_deposits_lines_c4dd31ed59060f398370a426c57d1894.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select _deposit_hash_id as id from analytics.`quickbook_deposits_lines`\n) as child\nleft join (\n    select _hash_id as id from analytics.`quickbook_deposits`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_deposit_hash_id"}, "test.smartpill.not_null_quickbook_deposits_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_deposits_id"], "unique_id": "test.smartpill.not_null_quickbook_deposits_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_deposits_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_id", "resource_type": "test", "alias": "not_null_quickbook_deposits_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_deposits_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_deposits`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_deposits_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_deposits_created_at"], "unique_id": "test.smartpill.not_null_quickbook_deposits_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_deposits_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_created_at", "resource_type": "test", "alias": "not_null_quickbook_deposits_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_deposits_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_deposits`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_deposits_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_deposits_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_deposits_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_deposits_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits_updated_at", "resource_type": "test", "alias": "not_null_quickbook_deposits_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_deposits_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_deposits`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_deposits__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_deposits__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_deposits__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_deposits__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_deposits__hash_id", "resource_type": "test", "alias": "not_null_quickbook_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_deposits__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_deposits`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_deposits__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_deposits__hash_id"], "unique_id": "test.smartpill.unique_quickbook_deposits__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_deposits__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_deposits__hash_id", "resource_type": "test", "alias": "unique_quickbook_deposits__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_deposits__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_deposits`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ ref('quickbook_deposits') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_deposits_6cc2ed41560200d04a81af2a2add92f6.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_deposits"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_deposits_6cc2ed41560200d04a81af2a2add92f6.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_id as id from analytics.`quickbook_deposits`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_expense_account_id", "model": "{{ ref('quickbook_purchases_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_purchases_lines_7b5028e2b7ea221fc839225144679228.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_purchases_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_purchases_lines_7b5028e2b7ea221fc839225144679228.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_expense_account_id as id from analytics.`quickbook_purchases_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_account_id"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "account_expense_class_id", "model": "{{ ref('quickbook_purchases_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_purchases_lines_055b4d0801e0e17140cbb57e172ef42a.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "resource_type": "test", "alias": "relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"], ["quickbook_purchases_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_purchases_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_purchases_lines_055b4d0801e0e17140cbb57e172ef42a.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_expense_class_id as id from analytics.`quickbook_purchases_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_classes`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_class_id"}, "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "account_expense_customer_id", "model": "{{ ref('quickbook_purchases_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_purchases_lines_a26cd3e366dd1b6951f438d33eafa5e7.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_", "resource_type": "test", "alias": "relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"], ["quickbook_purchases_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_purchases_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_purchases_lines_a26cd3e366dd1b6951f438d33eafa5e7.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_expense_customer_id as id from analytics.`quickbook_purchases_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_customers`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_expense_customer_id"}, "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_purchases')", "field": "_hash_id", "column_name": "_purchase_hash_id", "model": "{{ ref('quickbook_purchases_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_purchases_lines_dee4000daec09a82624d133c790025fc.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "resource_type": "test", "alias": "relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_purchases_lines_dee4000daec09a82624d133c790025fc.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select _purchase_hash_id as id from analytics.`quickbook_purchases_lines`\n) as child\nleft join (\n    select _hash_id as id from analytics.`quickbook_purchases`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_purchase_hash_id"}, "test.smartpill.not_null_quickbook_purchases_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_purchases_id"], "unique_id": "test.smartpill.not_null_quickbook_purchases_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_purchases_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_id", "resource_type": "test", "alias": "not_null_quickbook_purchases_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_purchases_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_purchases`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_purchases_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_purchases_created_at"], "unique_id": "test.smartpill.not_null_quickbook_purchases_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_purchases_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_created_at", "resource_type": "test", "alias": "not_null_quickbook_purchases_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_purchases_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_purchases`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_purchases_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_purchases_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_purchases_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_purchases_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases_updated_at", "resource_type": "test", "alias": "not_null_quickbook_purchases_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_purchases_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_purchases`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_purchases__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_purchases__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_purchases__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_purchases__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_purchases__hash_id", "resource_type": "test", "alias": "not_null_quickbook_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_purchases__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_purchases`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_purchases__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_purchases__hash_id"], "unique_id": "test.smartpill.unique_quickbook_purchases__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_purchases__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_purchases__hash_id", "resource_type": "test", "alias": "unique_quickbook_purchases__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_purchases__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_purchases`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ ref('quickbook_purchases') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_purchases_6cc2ed41560200d04a81af2a2add92f6.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_purchases"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_purchases_6cc2ed41560200d04a81af2a2add92f6.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_id as id from analytics.`quickbook_purchases`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.smartpill.not_null_quickbook_journal_entries_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ ref('quickbook_journal_entries') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_journal_entries_id"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_journal_entries_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_id", "resource_type": "test", "alias": "not_null_quickbook_journal_entries_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_journal_entries_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_journal_entries`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.smartpill.not_null_quickbook_journal_entries_created_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "created_at", "model": "{{ ref('quickbook_journal_entries') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_journal_entries_created_at"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_created_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_journal_entries_created_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_created_at", "resource_type": "test", "alias": "not_null_quickbook_journal_entries_created_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_journal_entries_created_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_journal_entries`\nwhere created_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "created_at"}, "test.smartpill.not_null_quickbook_journal_entries_updated_at": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ ref('quickbook_journal_entries') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_journal_entries_updated_at"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries_updated_at", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_journal_entries_updated_at.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries_updated_at", "resource_type": "test", "alias": "not_null_quickbook_journal_entries_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_journal_entries_updated_at.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_journal_entries`\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "updated_at"}, "test.smartpill.not_null_quickbook_journal_entries__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_journal_entries') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "not_null_quickbook_journal_entries__hash_id"], "unique_id": "test.smartpill.not_null_quickbook_journal_entries__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/not_null_quickbook_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "not_null_quickbook_journal_entries__hash_id", "resource_type": "test", "alias": "not_null_quickbook_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/not_null_quickbook_journal_entries__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom analytics.`quickbook_journal_entries`\nwhere _hash_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.unique_quickbook_journal_entries__hash_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "_hash_id", "model": "{{ ref('quickbook_journal_entries') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "unique_quickbook_journal_entries__hash_id"], "unique_id": "test.smartpill.unique_quickbook_journal_entries__hash_id", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/unique_quickbook_journal_entries__hash_id.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "unique_quickbook_journal_entries__hash_id", "resource_type": "test", "alias": "unique_quickbook_journal_entries__hash_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.smartpill.quickbook_journal_entries"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/unique_quickbook_journal_entries__hash_id.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        _hash_id\n\n    from analytics.`quickbook_journal_entries`\n    where _hash_id is not null\n    group by _hash_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_hash_id"}, "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_accounts')", "field": "id", "column_name": "account_id", "model": "{{ ref('quickbook_journal_entries_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_journal_entries_lines_6cc2ed41560200d04a81af2a2add92f6.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "resource_type": "test", "alias": "relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_accounts"], ["quickbook_journal_entries_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_journal_entries_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_journal_entries_lines_6cc2ed41560200d04a81af2a2add92f6.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select account_id as id from analytics.`quickbook_journal_entries_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_accounts`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_classes')", "field": "id", "column_name": "class_id", "model": "{{ ref('quickbook_journal_entries_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_journal_entries_lines_848bf994c5a05d4730eb7384f402e186.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "resource_type": "test", "alias": "relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_classes"], ["quickbook_journal_entries_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_journal_entries_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_journal_entries_lines_848bf994c5a05d4730eb7384f402e186.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select class_id as id from analytics.`quickbook_journal_entries_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_classes`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "class_id"}, "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_customers')", "field": "id", "column_name": "customer_id", "model": "{{ ref('quickbook_journal_entries_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_journal_entries_lines_5fee926b740b0a64fb84a60192d543d2.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_", "resource_type": "test", "alias": "relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_customers"], ["quickbook_journal_entries_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_journal_entries_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_journal_entries_lines_5fee926b740b0a64fb84a60192d543d2.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select customer_id as id from analytics.`quickbook_journal_entries_lines`\n) as child\nleft join (\n    select id as id from analytics.`quickbook_customers`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('quickbook_journal_entries')", "field": "_hash_id", "column_name": "_journal_entry_hash_id", "model": "{{ ref('quickbook_journal_entries_lines') }}"}}, "compiled": true, "database": null, "schema": "analytics", "fqn": ["smartpill", "schema_test", "relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_"], "unique_id": "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "schema_test/relationships_quickbook_journal_entries_lines_2c19507f11cd5b8ff08bcf834503c05b.sql", "original_file_path": "models/quickbooks/base_tables/quickbooks.yml", "name": "relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "resource_type": "test", "alias": "relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/smartpill/models/quickbooks/base_tables/quickbooks.yml/schema_test/relationships_quickbook_journal_entries_lines_2c19507f11cd5b8ff08bcf834503c05b.sql", "deferred": false, "unrendered_config": {"severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select _journal_entry_hash_id as id from analytics.`quickbook_journal_entries_lines`\n) as child\nleft join (\n    select _hash_id as id from analytics.`quickbook_journal_entries`\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_journal_entry_hash_id"}}, "sources": {"source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_accounts"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_accounts", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_accounts", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_accounts"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_bill_payments"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_bill_payments", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_bill_payments", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_bill_payments"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_bills": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_bills"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_bills", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_bills", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_bills", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_bills"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_classes": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_classes"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_classes", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_classes", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_classes", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_classes"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_customers": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_customers"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_customers", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_customers", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_customers", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_customers"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_deposits"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_deposits", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_deposits", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_deposits"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_invoices"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_invoices", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_invoices", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_invoices"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_items": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_items"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_items", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_items", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_items", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_items"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_journal_entries"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_journal_entries", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_journal_entries", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_journal_entries"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_payments": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_payments"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_payments", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_payments", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_payments", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_payments"}, "source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_quickbook_purchases"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_quickbook_purchases", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_quickbook_purchases", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_quickbook_purchases"}, "source.smartpill.analytics_v2.quickbook_payroll_checks": {"fqn": ["smartpill", "analytics_v2", "quickbook_payroll_checks"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.quickbook_payroll_checks", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "quickbook_payroll_checks", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "quickbook_payroll_checks", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.quickbook_payroll_checks"}, "source.smartpill.analytics_v2.analytics_orders_logs": {"fqn": ["smartpill", "analytics_v2", "analytics_orders_logs"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.analytics_orders_logs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "analytics_orders_logs", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "analytics_orders_logs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.analytics_orders_logs"}, "source.smartpill.analytics_v2.goodpill_gp_rxs_single": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_rxs_single"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_rxs_single", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_rxs_single", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_rxs_single", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_rxs_single desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_rxs_single"}, "source.smartpill.analytics_v2.goodpill_gp_stock_live": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_stock_live"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_stock_live", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_stock_live", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_stock_live", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_stock_live desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_stock_live"}, "source.smartpill.analytics_v2.goodpill_gp_drugs": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_drugs"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_drugs", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_drugs", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_drugs", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_drugs desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_drugs"}, "source.smartpill.analytics_v2.goodpill_gp_orders": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_orders"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_orders", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_orders", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_orders", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_orders desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_orders"}, "source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients": {"fqn": ["smartpill", "analytics_v2", "_airbyte_raw_goodpill_gp_patients"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "_airbyte_raw_goodpill_gp_patients", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "_airbyte_raw_goodpill_gp_patients", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "_airbyte_raw_goodpill_gp_patients desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2._airbyte_raw_goodpill_gp_patients"}, "source.smartpill.analytics_v2.goodpill_gp_rxs_grouped": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_rxs_grouped"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_rxs_grouped", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_rxs_grouped", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_rxs_grouped", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_rxs_grouped desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_rxs_grouped"}, "source.smartpill.analytics_v2.goodpill_gp_patients": {"fqn": ["smartpill", "analytics_v2", "goodpill_gp_patients"], "database": null, "schema": "analytics_v2", "unique_id": "source.smartpill.analytics_v2.goodpill_gp_patients", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "goodpill_gp_patients", "source_name": "analytics_v2", "source_description": "analytics_v2 tables", "loader": "", "identifier": "goodpill_gp_patients", "resource_type": "source", "quoting": {"database": true, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "goodpill_gp_patients desc", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytics_v2.goodpill_gp_patients"}}, "macros": {"macro.smartpill.generate_schema_name": {"unique_id": "macro.smartpill.generate_schema_name", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.cross_join_unnest": {"unique_id": "macro.smartpill.cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "cross_join_unnest", "macro_sql": "{% macro cross_join_unnest(stream_name, array_col) -%}\n  {{ adapter.dispatch('cross_join_unnest')(stream_name, array_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__cross_join_unnest": {"unique_id": "macro.smartpill.default__cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__cross_join_unnest", "macro_sql": "{% macro default__cross_join_unnest(stream_name, array_col) -%}\n    {% do exceptions.warn(\"Undefined macro cross_join_unnest for this destination engine\") %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__cross_join_unnest": {"unique_id": "macro.smartpill.mysql__cross_join_unnest", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__cross_join_unnest", "macro_sql": "{% macro mysql__cross_join_unnest(stream_name, array_col) -%}\n    left join joined on _hash_id = joined._airbyte_hashid\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.unnested_column_value": {"unique_id": "macro.smartpill.unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "unnested_column_value", "macro_sql": "{% macro unnested_column_value(column_col) -%}\n  {{ adapter.dispatch('unnested_column_value')(column_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__unnested_column_value": {"unique_id": "macro.smartpill.default__unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__unnested_column_value", "macro_sql": "{% macro default__unnested_column_value(column_col) -%}\n    {{ column_col }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__unnested_column_value": {"unique_id": "macro.smartpill.mysql__unnested_column_value", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__unnested_column_value", "macro_sql": "{% macro mysql__unnested_column_value(column_col) -%}\n    _airbyte_nested_data\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.unnest_cte": {"unique_id": "macro.smartpill.unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "unnest_cte", "macro_sql": "{% macro unnest_cte(table_name, stream_name, column_col) -%}\n  {{ adapter.dispatch('unnest_cte')(table_name, stream_name, column_col) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__unnest_cte": {"unique_id": "macro.smartpill.default__unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "default__unnest_cte", "macro_sql": "{% macro default__unnest_cte(table_name, stream_name, column_col) -%}{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__unnest_cte": {"unique_id": "macro.smartpill.mysql__unnest_cte", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/array.sql", "original_file_path": "macros/cross_db_utils/array.sql", "name": "mysql__unnest_cte", "macro_sql": "{% macro mysql__unnest_cte(table_name, stream_name, column_col) -%}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- call statement('max_json_array_length', fetch_result=True) -%}\n        with max_value as (\n            select max(json_length({{ column_col }})) as max_number_of_items\n            from {{ ref(table_name) }}\n        )\n        select\n            case when max_number_of_items is not null and max_number_of_items > 1\n            then max_number_of_items\n            else 1 end as max_number_of_items\n        from max_value\n    {%- endcall -%}\n\n    {%- set max_length = load_result('max_json_array_length') -%}\n    with numbers as (\n        {{ dbt_utils.generate_series(max_length[\"data\"][0][0]) }}\n    ),\n    joined as (\n        select\n            _hash_id as _airbyte_hashid,\n            {# -- json_extract(column_col, '$[i][0]') as _airbyte_nested_data #}\n            json_extract({{ column_col }}, concat(\"$[\", numbers.generated_number - 1, \"][0]\")) as _airbyte_nested_data\n        from {{ ref(table_name) }}\n        cross join numbers\n        -- only generate the number of records in the cross join that corresponds\n        -- to the number of items in {{ table_name }}.{{ column_col }}\n        where numbers.generated_number <= json_length({{ column_col }})\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.type_json": {"unique_id": "macro.smartpill.type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_json", "macro_sql": "\n\n{%- macro type_json() -%}\n  {{ adapter.dispatch('type_json')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__type_json": {"unique_id": "macro.smartpill.default__type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_json", "macro_sql": "{% macro default__type_json() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_json": {"unique_id": "macro.smartpill.mysql__type_json", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_json", "macro_sql": "\n\n{%- macro mysql__type_json() -%}\n    json\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_string": {"unique_id": "macro.smartpill.mysql__type_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_string", "macro_sql": "\n\n{%- macro mysql__type_string() -%}\n    char\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_float": {"unique_id": "macro.smartpill.mysql__type_float", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_float", "macro_sql": "{% macro mysql__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__type_int": {"unique_id": "macro.smartpill.default__type_int", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    signed\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_bigint": {"unique_id": "macro.smartpill.mysql__type_bigint", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_bigint", "macro_sql": "{% macro mysql__type_bigint() %}\n    signed\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_numeric": {"unique_id": "macro.smartpill.mysql__type_numeric", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_numeric", "macro_sql": "{% macro mysql__type_numeric() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__type_timestamp": {"unique_id": "macro.smartpill.mysql__type_timestamp", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "mysql__type_timestamp", "macro_sql": "{% macro mysql__type_timestamp() %}\n    time\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.datediff": {"unique_id": "macro.smartpill.datediff", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "datediff", "macro_sql": "{% macro datediff(start_date, end_date, datepart) -%}\n    timestampdiff(\n        {{datepart}},\n        {{start_date}},\n        {{end_date}}\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.get_intervals_between": {"unique_id": "macro.smartpill.get_intervals_between", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__get_intervals_between": {"unique_id": "macro.smartpill.default__get_intervals_between", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.date_spine": {"unique_id": "macro.smartpill.date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__date_spine": {"unique_id": "macro.smartpill.default__date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_spine.sql", "original_file_path": "macros/cross_db_utils/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.date_trunc": {"unique_id": "macro.smartpill.date_trunc", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}    \n    {% if datepart == 'month' %}\n        date( {{date}} + INTERVAL (1 - day( {{date}} )) DAY)\n\n    {% elif datepart == 'year' %}\n        date(makedate(year( {{ date }} ), 1))\n\n    {% else %}\n        date_trunc('{{datepart}}', {{date}})\n\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.dateadd": {"unique_id": "macro.smartpill.dateadd", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n    date_add(\n        {{ from_date_or_timestamp }}, interval 1 {{ datepart }}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.format_json_path": {"unique_id": "macro.smartpill.format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "format_json_path", "macro_sql": "{% macro format_json_path(json_path_list) -%}\n    {{ adapter.dispatch('format_json_path')(json_path_list) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__format_json_path": {"unique_id": "macro.smartpill.default__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "default__format_json_path", "macro_sql": "{% macro default__format_json_path(json_path_list) -%}\n    {{ '.' ~ json_path_list|join('.') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__format_json_path": {"unique_id": "macro.smartpill.mysql__format_json_path", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__format_json_path", "macro_sql": "{% macro mysql__format_json_path(json_path_list) -%}\n    {# -- '$.\"x\".\"y\".\"z\"' #}\n    {{ \"'$.\\\"\" ~ json_path_list|join(\"\\\".\\\"\") ~ \"\\\"'\" }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.json_extract": {"unique_id": "macro.smartpill.json_extract", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__json_extract": {"unique_id": "macro.smartpill.mysql__json_extract", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract", "macro_sql": "{% macro mysql__json_extract(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.json_extract_scalar": {"unique_id": "macro.smartpill.json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_scalar", "macro_sql": "{% macro json_extract_scalar(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_scalar')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__json_extract_scalar": {"unique_id": "macro.smartpill.mysql__json_extract_scalar", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_scalar", "macro_sql": "{% macro mysql__json_extract_scalar(json_column, normalized_json_path) -%}\n    json_value({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.json_extract_array": {"unique_id": "macro.smartpill.json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "json_extract_array", "macro_sql": "{% macro json_extract_array(json_column, normalized_json_path) -%}\n    {{ adapter.dispatch('json_extract_array')(json_column, normalized_json_path) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__json_extract_array": {"unique_id": "macro.smartpill.mysql__json_extract_array", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/json_operations.sql", "original_file_path": "macros/cross_db_utils/json_operations.sql", "name": "mysql__json_extract_array", "macro_sql": "{% macro mysql__json_extract_array(json_column, normalized_json_path) -%}\n    json_extract({{ json_column }}, {{ format_json_path(normalized_json_path) }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.last_day": {"unique_id": "macro.smartpill.last_day", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n    cast(\n        {{dateadd('day', '-1',\n        dateadd(datepart, '1', date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.boolean_to_string": {"unique_id": "macro.smartpill.boolean_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "boolean_to_string", "macro_sql": "{% macro boolean_to_string(boolean_column) -%}\n  {{ adapter.dispatch('boolean_to_string')(boolean_column) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__boolean_to_string": {"unique_id": "macro.smartpill.default__boolean_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__boolean_to_string", "macro_sql": "{% macro default__boolean_to_string(boolean_column) -%}\n    {{ boolean_column }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.array_to_string": {"unique_id": "macro.smartpill.array_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "array_to_string", "macro_sql": "{% macro array_to_string(array_column) -%}\n  {{ adapter.dispatch('array_to_string')(array_column) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__array_to_string": {"unique_id": "macro.smartpill.default__array_to_string", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__array_to_string", "macro_sql": "{% macro default__array_to_string(array_column) -%}\n    {{ array_column }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.cast_to_boolean": {"unique_id": "macro.smartpill.cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "cast_to_boolean", "macro_sql": "{% macro cast_to_boolean(field) -%}\n    {{ adapter.dispatch('cast_to_boolean')(field) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.default__cast_to_boolean": {"unique_id": "macro.smartpill.default__cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "default__cast_to_boolean", "macro_sql": "{% macro default__cast_to_boolean(field) -%}\n    cast({{ field }} as boolean)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__cast_to_boolean": {"unique_id": "macro.smartpill.mysql__cast_to_boolean", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "mysql__cast_to_boolean", "macro_sql": "{% macro mysql__cast_to_boolean(field) -%}\n    IF(lower({{ field }}) = 'true', true, false)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.string_to_timestamp": {"unique_id": "macro.smartpill.string_to_timestamp", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/cross_db_utils/type_conversions.sql", "original_file_path": "macros/cross_db_utils/type_conversions.sql", "name": "string_to_timestamp", "macro_sql": "{% macro string_to_timestamp(string_column) -%}\n    STR_TO_DATE({{ string_column }}, '%Y-%m-%dT%H:%i:%s.%fZ')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.common_fields": {"unique_id": "macro.smartpill.common_fields", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/common_fields.sql", "original_file_path": "macros/quickbook_utils/common_fields.sql", "name": "common_fields", "macro_sql": "{% macro common_fields() -%}\n    {{ json_extract_scalar('_airbyte_data', ['Id']) }} as {{ adapter.quote('id') }},\n    {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['MetaData', 'CreateTime'])) }} as {{ adapter.quote('created_at') }},\n    {{ string_to_timestamp(json_extract_scalar('_airbyte_data', ['MetaData', 'LastUpdatedTime'])) }} as {{ adapter.quote('updated_at') }},\n    _airbyte_emitted_at\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.incremental_filter": {"unique_id": "macro.smartpill.incremental_filter", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/incremental_filter.sql", "original_file_path": "macros/quickbook_utils/incremental_filter.sql", "name": "incremental_filter", "macro_sql": "{% macro incremental_filter() -%}\n\n{% if is_incremental() %}\n    _airbyte_emitted_at > (select max(_airbyte_emitted_at) from {{ this }})\n{% else %}\n    true\n{% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.incremental_filter_line": {"unique_id": "macro.smartpill.incremental_filter_line", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/incremental_filter.sql", "original_file_path": "macros/quickbook_utils/incremental_filter.sql", "name": "incremental_filter_line", "macro_sql": "{% macro incremental_filter_line(parent_table) -%}\n\n{% if is_incremental() %}\n    _airbyte_emitted_at >= (select max(_airbyte_emitted_at) from {{ parent_table }})\n{% else %}\n    true\n{% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.unique_filter": {"unique_id": "macro.smartpill.unique_filter", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_filter.sql", "original_file_path": "macros/quickbook_utils/unique_filter.sql", "name": "unique_filter", "macro_sql": "{% macro unique_filter(table_name) -%}\n\n    id in (\n        select id\n        from {{ table_name }}\n        group by id\n        having _airbyte_emitted_at = max(_airbyte_emitted_at)\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.unique_select": {"unique_id": "macro.smartpill.unique_select", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_filter.sql", "original_file_path": "macros/quickbook_utils/unique_filter.sql", "name": "unique_select", "macro_sql": "{% macro unique_select(table_name) -%}\n\n    select * from {{ table_name }}\n    where {{ unique_filter(table_name) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.hash_field": {"unique_id": "macro.smartpill.hash_field", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/quickbook_utils/unique_hash.sql", "original_file_path": "macros/quickbook_utils/unique_hash.sql", "name": "hash_field", "macro_sql": "{% macro hash_field() -%}\n    {{ dbt_utils.surrogate_key([\n        adapter.quote('id'),\n        adapter.quote('_airbyte_emitted_at')\n    ]) }} as _hash_id\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.smartpill.mysql__test_equality": {"unique_id": "macro.smartpill.mysql__test_equality", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "mysql__test_equality", "macro_sql": "{% macro mysql__test_equality(model, compare_model, compare_columns=None) %}\n\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n    {%- if not compare_columns -%}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n    with a as (\n        select * from {{ model }}\n    ),\n\n    b as (\n        select * from {{ compare_model }}\n    ),\n\n    a_minus_b as (\n        select {{ compare_cols_csv }} from a\n        where ({{ compare_cols_csv }}) not in\n            (select {{ compare_cols_csv }} from b)\n    ),\n\n    b_minus_a as (\n        select {{ compare_cols_csv }} from b\n        where ({{ compare_cols_csv }}) not in\n            (select {{ compare_cols_csv }} from a)\n    ),\n\n    unioned as (\n        select * from a_minus_b\n        union all\n        select * from b_minus_a\n    ),\n\n    final as (\n        select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n    )\n\n    select count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__list_schemas": {"unique_id": "macro.dbt_mysql.mysql__list_schemas", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__list_schemas", "macro_sql": "{% macro mysql__list_schemas(database) %}\n    {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n        select distinct schema_name\n        from information_schema.schemata\n    {%- endcall %}\n\n    {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__create_schema": {"unique_id": "macro.dbt_mysql.mysql__create_schema", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__create_schema", "macro_sql": "{% macro mysql__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__drop_schema": {"unique_id": "macro.dbt_mysql.mysql__drop_schema", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__drop_schema", "macro_sql": "{% macro mysql__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__drop_relation": {"unique_id": "macro.dbt_mysql.mysql__drop_relation", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__drop_relation", "macro_sql": "{% macro mysql__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        drop {{ relation.type }} if exists {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__truncate_relation": {"unique_id": "macro.dbt_mysql.mysql__truncate_relation", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__truncate_relation", "macro_sql": "{% macro mysql__truncate_relation(relation) -%}\n    {% call statement('truncate_relation') -%}\n      truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__create_table_as": {"unique_id": "macro.dbt_mysql.mysql__create_table_as", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__create_table_as", "macro_sql": "{% macro mysql__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=False) }}\n  as (\n    {{ sql }}\n  )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__current_timestamp": {"unique_id": "macro.dbt_mysql.mysql__current_timestamp", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__current_timestamp", "macro_sql": "{% macro mysql__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__rename_relation": {"unique_id": "macro.dbt_mysql.mysql__rename_relation", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__rename_relation", "macro_sql": "{% macro mysql__rename_relation(from_relation, to_relation) -%}\n  {#\n    MySQL rename fails when the relation already exists, so a 2-step process is needed:\n    1. Drop the existing relation\n    2. Rename the new relation to existing relation\n  #}\n  {% call statement('drop_relation') %}\n    drop {{ to_relation.type }} if exists {{ to_relation }} cascade\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename table {{ from_relation }} to {{ to_relation }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__check_schema_exists": {"unique_id": "macro.dbt_mysql.mysql__check_schema_exists", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__check_schema_exists", "macro_sql": "{% macro mysql__check_schema_exists(database, schema) -%}\n    {# no-op #}\n    {# see MySQLAdapter.check_schema_exists() #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__get_columns_in_relation": {"unique_id": "macro.dbt_mysql.mysql__get_columns_in_relation", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__get_columns_in_relation", "macro_sql": "{% macro mysql__get_columns_in_relation(relation) -%}\n    {% call statement('get_columns_in_relation', fetch_result=True) %}\n        show columns from {{ relation.schema }}.{{ relation.identifier }}\n    {% endcall %}\n\n    {% set table = load_result('get_columns_in_relation').table %}\n    {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__list_relations_without_caching": {"unique_id": "macro.dbt_mysql.mysql__list_relations_without_caching", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__list_relations_without_caching", "macro_sql": "{% macro mysql__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      null as \"database\",\n      table_name as name,\n      table_schema as \"schema\",\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__generate_database_name": {"unique_id": "macro.dbt_mysql.mysql__generate_database_name", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "mysql__generate_database_name", "macro_sql": "{% macro mysql__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__get_catalog": {"unique_id": "macro.dbt_mysql.mysql__get_catalog", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "mysql__get_catalog", "macro_sql": "{% macro mysql__get_catalog(information_schema, schemas) -%}\n    {%- call statement('catalog', fetch_result=True) -%}\n    with tables as (\n\n        select\n            null as \"table_database\",\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case when table_type = 'BASE TABLE' then 'table'\n                 when table_type = 'VIEW' then 'view'\n                 else table_type\n            end as \"table_type\",\n            null as \"table_owner\"\n\n        from {{ information_schema }}.tables\n\n    ),\n\n    columns as (\n\n        select\n            null as \"table_database\",\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            null as \"table_comment\",\n\n            column_name as \"column_name\",\n            ordinal_position as \"column_index\",\n            data_type as \"column_type\",\n            null as \"column_comment\"\n\n        from {{ information_schema }}.columns\n\n    )\n\n    select\n        columns.table_database,\n        columns.table_schema,\n        columns.table_name,\n        tables.table_type,\n        columns.table_comment,\n        tables.table_owner,\n        columns.column_name,\n        columns.column_index,\n        columns.column_type,\n        columns.column_comment\n    from tables\n    join columns using (table_schema, table_name)\n    where table_schema not in ('information_schema', 'performance_schema', 'mysql', 'sys')\n    and (\n    {%- for schema in schemas -%}\n      upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by column_index\n    {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.basic_load_csv_rows": {"unique_id": "macro.dbt_mysql.basic_load_csv_rows", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__snapshot_string_as_time": {"unique_id": "macro.dbt_mysql.mysql__snapshot_string_as_time", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "mysql__snapshot_string_as_time", "macro_sql": "{% macro mysql__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"str_to_date('\" ~ timestamp ~ \"', '%Y-%m-%d %T')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.materialization_snapshot_mysql": {"unique_id": "macro.dbt_mysql.materialization_snapshot_mysql", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_mysql", "macro_sql": "{% materialization snapshot, adapter='mysql' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n      {% call statement('main') %}\n          {{ final_sql }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      -- MySQL does not support the MERGE statement, so we need to use seperate UPDATE + INSERT statements instead\n      {% set final_sql_update = mysql__snapshot_merge_sql_update(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% set final_sql_insert = mysql__snapshot_merge_sql_insert(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% call statement('main') %}\n          {{ final_sql_update }}\n      {% endcall %}\n\n      {% call statement('main') %}\n          {{ final_sql_insert }}\n      {% endcall %}\n\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt_mysql.snapshot_check_all_get_existing_columns", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=None, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__snapshot_merge_sql_update": {"unique_id": "macro.dbt_mysql.mysql__snapshot_merge_sql_update", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "mysql__snapshot_merge_sql_update", "macro_sql": "{% macro mysql__snapshot_merge_sql_update(target, source, insert_cols) -%}\n    update {{ target }}, (select dbt_scd_id, dbt_change_type, dbt_valid_to from {{ source }}) as DBT_INTERNAL_SOURCE\n    set {{ target }}.dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target }}.dbt_scd_id\n    and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n    and {{ target }}.dbt_valid_to is null\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__snapshot_merge_sql_insert": {"unique_id": "macro.dbt_mysql.mysql__snapshot_merge_sql_insert", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "mysql__snapshot_merge_sql_insert", "macro_sql": "{% macro mysql__snapshot_merge_sql_insert(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_mysql.mysql__snapshot_hash_arguments": {"unique_id": "macro.dbt_mysql.mysql__snapshot_hash_arguments", "package_name": "dbt_mysql", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/mysql", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "mysql__snapshot_hash_arguments", "macro_sql": "{% macro mysql__snapshot_hash_arguments(args) -%}\n    md5(concat_ws('|', {%- for arg in args -%}\n        coalesce(cast({{ arg }} as char), '')\n        {% if not loop.last %}, {% endif %}\n    {%- endfor -%}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', packages = dbt_utils._get_utils_namespaces()) (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% macro test_accepted_range(model, min_value = none, max_value = none, inclusive = true, where = \"true\") %}\n\n{%- set column_name = kwargs.get('column_name', kwargs.get('field')) -%}\n\nwith meet_condition as(\n  select {{ column_name }} \n  from {{ model }}\n  where {{ where }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where \n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2 \n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }} \n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n{% set column_name = kwargs.get('column_name') %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    {% if column_name is none %}\n    where not({{ expression }})\n    {%- else %}\n    where not({{ column_name }} {{ expression }})\n    {%- endif %}\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% macro test_fewer_rows_than(model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', packages = dbt_utils._get_utils_namespaces())(model, combination_of_columns, quote_columns, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\nwith a as (\n\n    select count(*) as count_ourmodel from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparisonmodel from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        (select count_ourmodel from a) as count_model_with_fewer_rows,\n        (select count_comparisonmodel from b) as count_model_with_more_rows\n\n),\nfinal as (\n\n    select\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_model_with_fewer_rows > count_model_with_more_rows then (count_model_with_fewer_rows - count_model_with_more_rows)\n            -- fail the test if they are the same number\n            when count_model = count_comparison then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect row_count_delta from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% macro test_not_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% macro test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', packages=dbt_utils._get_utils_namespaces())(model, column_name, interval, datepart, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval, datepart) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect\n    count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(pow((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    pow((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(pow(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    pow(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/data/git_repo/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [{"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qd.id as deposit_id,\n    qd.account_id as deposit_account_id,\n    qd.created_at as deposit_created_at,\n    qd.currency_name as deposit_currency_name,\n    qd.line as deposit_line,\n    qd.total_amount as deposit_total_amount,\n    qd.transaction_date as deposit_transaction_date,\n    qd.updated_at as deposit_updated_at,\n    qdl.id as deposit_line_id,\n    qdl.amount as deposit_line_amount,\n    qdl.line_num as deposit_line_num,\n    qdl.class_id as deposit_line_class_id,\n    qdl.account_id as deposit_line_account_id,\n    qdl.customer_id as deposit_line_customer_id,\n    qad.fully_qualified_name as deposit_account_fully_qualified_name,\n    qad.name as deposit_account_name,\n    qad.account_number as deposit_account_number,\n    qad.parent_account_id as deposit_account_parent_account_id,\n    qad.account_type as deposit_account_type,\n    qad.account_sub_type as deposit_account_sub_type,\n    qad.classification as deposit_account_classification,\n    qadl.fully_qualified_name as deposit_line_account_fully_qualified_name,\n    qadl.name as deposit_line_account_name,\n    qadl.account_number as deposit_line_account_number,\n    qadl.parent_account_id as deposit_line_account_parent_account_id,\n    qadl.account_type as deposit_line_account_type,\n    qadl.account_sub_type as deposit_line_account_sub_type,\n    qadl.classification as deposit_line_account_classification,\n    qc.fully_qualified_name as deposit_line_customer_fully_qualified_name,\n    qc.company_name as deposit_line_customer_company_name,\n    qc.display_name as deposit_line_customer_display_name,\n    qcl.fully_qualified_name as deposit_line_class_fully_qualified_name,\n    qd._airbyte_quickbook_deposits_hashid as _airbyte_quickbook_deposits_hashid,\n    qd._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_deposits') }} qd\nleft join {{ ref('quickbook_deposits_lines') }} qdl using (`_airbyte_quickbook_deposits_hashid`)\nleft join {{ ref('quickbook_accounts') }} qadl on (qadl.id = qdl.account_id)\nleft join {{ ref('quickbook_accounts') }} qad on (qad.id = qd.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qdl.customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qdl.class_id)", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_deposits_abt"], "unique_id": "model.smartpill.quickbook_deposits_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_deposits_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_deposits_abt.sql", "name": "quickbook_deposits_abt", "resource_type": "model", "alias": "quickbook_deposits_abt", "checksum": {"name": "sha256", "checksum": "a89c334b29341c20937b2635d41a17837bba57809bfb5b4ec4e933b812305307"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_deposits"], ["quickbook_deposits_lines"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qje.id as journal_entry_id,\n    qje.created_at as journal_entry_created_at,\n    qje.currency_name as journal_entry_currency_name,\n    qje.line as journal_entry_line,\n    qje.private_note as journal_entry_private_note,\n    qje.is_adjustment as journal_entry_is_adjustment,\n    qje.transaction_date as journal_entry_transaction_date,\n    qje.updated_at as journal_entry_updated_at,\n    qjel.id as journal_entry_line_id,\n    qjel.amount as journal_entry_line_amount,\n    qjel.description as journal_entry_line_description,\n    qjel.class_id as journal_entry_line_class_id,\n    qjel.account_id as journal_entry_line_account_id,\n    qjel.customer_id as journal_entry_line_customer_id,\n    qjel.posting_type as journal_entry_line_posting_type,\n    qajel.fully_qualified_name as journal_entry_line_account_fully_qualified_name,\n    qajel.name as journal_entry_line_account_name,\n    qajel.account_number as journal_entry_line_account_number,\n    qajel.parent_account_id as journal_entry_line_account_parent_account_id,\n    qajel.account_type as journal_entry_line_account_type,\n    qajel.account_sub_type as journal_entry_line_account_sub_type,\n    qajel.classification as journal_entry_line_account_classification,\n    qc.fully_qualified_name as journal_entry_line_customer_fully_qualified_name,\n    qc.company_name as journal_entry_line_customer_company_name,\n    qc.display_name as journal_entry_line_customer_display_name,\n    qcl.fully_qualified_name as journal_entry_line_class_fully_qualified_name,\n    qje._airbyte_quickbook_journal_entries_hashid as _airbyte_quickbook_journal_entries_hashid,\n    qje._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_journal_entries') }} qje\nleft join {{ ref('quickbook_journal_entries_lines') }} qjel using (`_airbyte_quickbook_journal_entries_hashid`)\nleft join {{ ref('quickbook_accounts') }} qajel on (qajel.id = qjel.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qjel.customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qjel.class_id)\n\n\n-- WITH RECURSIVE tree AS ( \n--    SELECT id, \n--           parent_account_id,\n--           1 as level,\n--           id AS top_level_id\n--    FROM quickbook_accounts\n--    WHERE parent_account_id IS NULL\n\n--    UNION ALL\n\n--    SELECT c.id,\n--           c.parent_account_id, \n--           t.level + 1,\n--           COALESCE(t.top_level_id) AS top_level_id\n--    FROM quickbook_accounts c\n--      JOIN tree t ON c.parent_account_id = t.id\n-- )\n-- SELECT *\n-- FROM tree;", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_journal_entries_abt"], "unique_id": "model.smartpill.quickbook_journal_entries_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_journal_entries_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_journal_entries_abt.sql", "name": "quickbook_journal_entries_abt", "resource_type": "model", "alias": "quickbook_journal_entries_abt", "checksum": {"name": "sha256", "checksum": "76141ca49f399277e920b7391fc0741ef6dffda3f08ff0afece3d15f0c10372f"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_journal_entries"], ["quickbook_journal_entries_lines"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\n\nselect\n    qp.id as purchase_id,\n    qp.account_id as purchase_account_id,\n    qp.created_at as purchase_created_at,\n    qp.currency_name as purchase_currency_name,\n    qp.line as purchase_line,\n    qp.total_amount as purchase_total_amount,\n    qp.transaction_date as purchase_transaction_date,\n    qp.updated_at as purchase_updated_at,\n    qpl.id as purchase_line_id,\n    qpl.amount as purchase_line_amount,\n    qpl.description as purchase_line_description,\n    qpl.account_expense_account_id as purchase_line_account_expense_account_id,\n    qpl.account_expense_class_id as purchase_line_account_expense_class_id,\n    qpl.account_expense_customer_id as purchase_line_account_expense_customer_id,\n    qpl.item_expense_item_id as purchase_line_item_expense_item_id,\n    qpl.item_expense_billable_status as purchase_line_item_expense_billable_status,\n    qap.fully_qualified_name as purchase_account_fully_qualified_name,\n    qap.name as purchase_account_name,\n    qap.parent_account_id as purchase_account_parent_account_id,\n    qap.account_number as purchase_account_number,\n    qap.account_type as purchase_account_type,\n    qap.account_sub_type as purchase_account_sub_type,\n    qap.classification as purchase_account_classification,\n    qapl.fully_qualified_name as purchase_line_account_fully_qualified_name,\n    qapl.name as purchase_line_account_name,\n    qapl.parent_account_id as purchase_line_account_parent_account_id,\n    qapl.account_number as purchase_line_account_number,\n    qapl.account_type as purchase_line_account_type,\n    qapl.account_sub_type as purchase_line_account_sub_type,\n    qapl.classification as purchase_line_account_classification,\n    qc.fully_qualified_name as purchase_line_customer_fully_qualified_name,\n    qc.company_name as purchase_line_customer_company_name,\n    qc.display_name as purchase_line_customer_display_name,\n    qcl.fully_qualified_name as purchase_line_class_fully_qualified_name,\n    qp._airbyte_quickbook_purchases_hashid as _airbyte_quickbook_purchases_hashid,\n    qp._airbyte_emitted_at as _airbyte_emitted_at\nfrom\n    {{ ref('quickbook_purchases') }} qp\nleft join {{ ref('quickbook_purchases_lines') }} qpl using (`_airbyte_quickbook_purchases_hashid`)\nleft join {{ ref('quickbook_accounts') }} qapl on (qapl.id = qpl.account_expense_account_id)\nleft join {{ ref('quickbook_accounts') }} qap on (qap.id = qp.account_id)\nleft join {{ ref('quickbook_customers') }} qc on (qc.id = qpl.account_expense_customer_id)\nleft join {{ ref('quickbook_classes') }} qcl on (qcl.id = qpl.account_expense_class_id)", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "airbyte_views", "public", "quickbook_purchases_abt"], "unique_id": "model.smartpill.quickbook_purchases_abt", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/airbyte_views/public/quickbook_purchases_abt.sql", "original_file_path": "models/quickbooks/airbyte_views/public/quickbook_purchases_abt.sql", "name": "quickbook_purchases_abt", "resource_type": "model", "alias": "quickbook_purchases_abt", "checksum": {"name": "sha256", "checksum": "5fe62286e6fd50c83200269a54cd3dd315e382856303c425c740302c89cb13a8"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_purchases"], ["quickbook_purchases_lines"], ["quickbook_accounts"], ["quickbook_accounts"], ["quickbook_customers"], ["quickbook_classes"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\n\nwith general_ledger as (\n    select *\n    from {{ref('quickbook_general_ledger')}}\n),\n\ngl_accounting_periods as (\n    select *\n    from {{ref('quickbook_general_ledger_date_spine')}}\n),\n\ngl_period_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        cast({{ date_trunc(\"year\", \"transaction_date\") }} as date) as date_year,\n        cast({{ date_trunc(\"month\", \"transaction_date\") }} as date) as date_month,\n        sum(adjusted_amount) as period_balance\n    from general_ledger\n\n    {{ dbt_utils.group_by(12) }}\n),\n\ngl_cumulative_balance as (\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then sum(period_balance) over (partition by account_id order by date_month, account_id rows unbounded preceding) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then (cumulative_balance - period_balance) \n            else 0\n                end as period_beginning_balance,\n        cumulative_balance as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance,\n        case when gl_beginning_balance.period_beginning_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when gl_beginning_balance.period_ending_balance is null and period_index = 1\n            then 0\n            else gl_beginning_balance.period_ending_balance\n                end as period_ending_balance_starter\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n),\n\ngl_value_partion as (\n    select\n        *,\n        sum(case when period_ending_balance_starter is null \n            then 0 \n            else 1 \n                end) over (order by account_id, period_last_day rows unbounded preceding) as gl_partition\n    from gl_patch\n\n),\n \nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition order by period_last_day rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter,\n            first_value(period_ending_balance_starter) over (partition by gl_partition order by period_last_day rows unbounded preceding)) as period_ending_balance\n    from gl_value_partion\n\n)\n\nselect *\nfrom final", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_balances"], "unique_id": "model.smartpill.quickbook_general_ledger_balances", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_balances.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_balances.sql", "name": "quickbook_general_ledger_balances", "resource_type": "model", "alias": "quickbook_general_ledger_balances", "checksum": {"name": "sha256", "checksum": "83462c2ef2259a5bf037a2c61f649a5fb2b71e3a5f64a7be432c5bfc72bb8826"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_general_ledger"], ["quickbook_general_ledger_date_spine"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.date_trunc", "macro.dbt_utils.group_by"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\nselect *\nfrom {{ref('quickbook_general_ledger_balances')}}", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_by_period"], "unique_id": "model.smartpill.quickbook_general_ledger_by_period", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_by_period.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_by_period.sql", "name": "quickbook_general_ledger_by_period", "resource_type": "model", "alias": "quickbook_general_ledger_by_period", "checksum": {"name": "sha256", "checksum": "f67c28a1e7a3ae7a60e48252e599045ca374147c73a63114661b18545377ed30"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_general_ledger_balances"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\n\nwith spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( transaction_date ) as min_date from {{ ref('quickbook_general_ledger') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n        {% if target.type == 'postgres' %}\n            {% set first_date_adjust = \"cast('\" ~ first_date[0:10] ~ \"' as date)\" %}\n\n        {% else %}\n            {% set first_date_adjust = \"'\" ~ first_date[0:10] ~ \"'\" %}\n\n        {% endif %}\n\n    {% else %} {% set first_date_adjust = \"'2000-01-01'\" %}\n    {% endif %}\n\n    {% if execute %}\n    {% set last_date_query %}\n        select  max( transaction_date ) as max_date from {{ ref('quickbook_general_ledger') }}\n    {% endset %}\n\n    {% set current_date_query %}\n        select current_date\n    {% endset %}\n\n    {% if run_query(current_date_query).columns[0][0]|string < run_query(last_date_query).columns[0][0]|string %}\n\n    {% set last_date = run_query(last_date_query).columns[0][0]|string %}\n\n    {% else %} {% set last_date = run_query(current_date_query).columns[0][0]|string %}\n    {% endif %}\n        \n    {% if target.type == 'postgres' %}\n        {% set last_date_adjust = \"cast('\" ~ last_date[0:10] ~ \"' as date)\" %}\n\n    {% else %}\n        {% set last_date_adjust = \"'\" ~ last_date[0:10] ~ \"'\" %}\n\n    {% endif %}\n    {% endif %}\n\n    {{ date_spine(\n        datepart=\"month\",\n        start_date=first_date_adjust,\n        end_date=dateadd(\"month\", 1, last_date_adjust)\n        )\n    }}\n),\n\ngeneral_ledger as (\n    select *\n    from {{ ref('quickbook_general_ledger') }}\n),\n\ndate_spine as (\n    select\n        cast({{ date_trunc(\"year\", \"date_month\") }} as date) as date_year,\n        cast({{ date_trunc(\"month\", \"date_month\") }} as date) as period_first_day,\n        {{ last_day(\"date_month\", \"month\") }} as period_last_day,\n        row_number() over (order by cast({{ date_trunc(\"month\", \"date_month\") }} as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_general_ledger_date_spine"], "unique_id": "model.smartpill.quickbook_general_ledger_date_spine", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_general_ledger_date_spine.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_general_ledger_date_spine.sql", "name": "quickbook_general_ledger_date_spine", "resource_type": "model", "alias": "quickbook_general_ledger_date_spine", "checksum": {"name": "sha256", "checksum": "4154857fb3b15c134b3492ba8caf5556645d3a8987b54e3b28eb1d69edc3d279"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_general_ledger"]], "sources": [], "depends_on": {"macros": ["macro.smartpill.dateadd", "macro.smartpill.date_spine", "macro.smartpill.date_trunc", "macro.smartpill.last_day"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}, {"raw_sql": "{{ config(enabled=False) }}\n\nwith general_ledger_by_period as (\n    select *\n    from {{ref('quickbook_general_ledger_by_period')}}\n    where financial_statement_helper = 'income_statement'\n\n), final as (\n    select\n        period_first_day as calendar_date,\n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_id,\n        account_name,\n        period_net_change as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "database": null, "schema": "analytics", "fqn": ["smartpill", "quickbooks", "analytics_tables", "quickbook_profit_and_loss"], "unique_id": "model.smartpill.quickbook_profit_and_loss", "package_name": "smartpill", "root_path": "/data/git_repo", "path": "quickbooks/analytics_tables/quickbook_profit_and_loss.sql", "original_file_path": "models/quickbooks/analytics_tables/quickbook_profit_and_loss.sql", "name": "quickbook_profit_and_loss", "resource_type": "model", "alias": "quickbook_profit_and_loss", "checksum": {"name": "sha256", "checksum": "3d92260578cf471a3453af80caad28d4396652661c775902f2f2532b89a5a315"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbook_general_ledger_by_period"]], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "enabled": false}}], "parent_map": {"model.smartpill.clinics": ["source.smartpill.analytics_v2.goodpill_gp_rxs_single"], "model.smartpill.drugs": ["source.smartpill.analytics_v2.goodpill_gp_drugs", "source.smartpill.analytics_v2.goodpill_gp_stock_live"], "model.smartpill.locations": ["source.smartpill.analytics_v2.goodpill_gp_orders", "source.smartpill.analytics_v2.goodpill_gp_patients"], "model.smartpill.orders_logs": ["model.smartpill.orders_logs_audit", "source.smartpill.analytics_v2.goodpill_gp_orders"], "model.smartpill.orders_logs_audit": ["source.smartpill.analytics_v2.analytics_orders_logs"], "model.smartpill.patients": ["source.smartpill.analytics_v2.goodpill_gp_patients", "source.smartpill.analytics_v2.goodpill_gp_rxs_grouped"], "model.smartpill.pharmacies": ["model.smartpill.gp_patients"], "model.smartpill.providers": ["source.smartpill.analytics_v2.goodpill_gp_rxs_single", "source.smartpill.analytics_v2.goodpill_gp_rxs_single"], "model.smartpill.gp_patients": ["source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients"], "model.smartpill.quickbook_general_ledger_abt": ["model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_accounts_top_level", "model.smartpill.quickbook_classes", "model.smartpill.quickbook_customers", "model.smartpill.quickbook_general_ledger"], "model.smartpill.quickbook_accounts_top_level": ["model.smartpill.quickbook_accounts"], "model.smartpill.quickbook_general_ledger": ["model.smartpill.int_quickbooks__account_classifications", "model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__payroll_check_double_entry", "model.smartpill.int_quickbooks__purchase_double_entry"], "model.smartpill.quickbook_accounts": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts"], "model.smartpill.quickbook_bill_payments": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments"], "model.smartpill.quickbook_bill_payments_lines": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments"], "model.smartpill.quickbook_bills": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_bills"], "model.smartpill.quickbook_bills_lines": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills"], "model.smartpill.quickbook_classes": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_classes"], "model.smartpill.quickbook_customers": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_customers"], "model.smartpill.quickbook_deposits": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits"], "model.smartpill.quickbook_deposits_lines": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits"], "model.smartpill.quickbook_invoices": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices"], "model.smartpill.quickbook_invoices_lines": ["model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices"], "model.smartpill.quickbook_items": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_items"], "model.smartpill.quickbook_journal_entries": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries"], "model.smartpill.quickbook_journal_entries_lines": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries"], "model.smartpill.quickbook_payments": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_payments"], "model.smartpill.quickbook_purchases": ["source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases"], "model.smartpill.quickbook_purchases_lines": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases"], "model.smartpill.int_quickbooks__account_classifications": ["model.smartpill.quickbook_accounts"], "model.smartpill.int_quickbooks__bill_double_entry": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_items"], "model.smartpill.int_quickbooks__bill_payment_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_bill_payments"], "model.smartpill.int_quickbooks__deposit_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"], "model.smartpill.int_quickbooks__invoice_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts", "model.smartpill.quickbook_invoices", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_items"], "model.smartpill.int_quickbooks__journal_entry_double_entry": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"], "model.smartpill.int_quickbooks__payment_double_entry": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_payments", "model.smartpill.quickbook_payments"], "model.smartpill.int_quickbooks__payroll_check_double_entry": ["source.smartpill.analytics_v2.quickbook_payroll_checks"], "model.smartpill.int_quickbooks__purchase_double_entry": ["model.smartpill.quickbook_items", "model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.not_null_quickbook_accounts_id": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_created_at": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_updated_at": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts__hash_id": ["model.smartpill.quickbook_accounts"], "test.smartpill.unique_quickbook_accounts__hash_id": ["model.smartpill.quickbook_accounts"], "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_accounts_balance": ["model.smartpill.quickbook_accounts"], "test.smartpill.not_null_quickbook_bill_payments_id": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments_created_at": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments_updated_at": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.not_null_quickbook_bill_payments__hash_id": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.unique_quickbook_bill_payments__hash_id": ["model.smartpill.quickbook_bill_payments"], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_": ["model.smartpill.quickbook_bill_payments", "model.smartpill.quickbook_bill_payments_lines"], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_": ["model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_bills_id": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills_created_at": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills_updated_at": ["model.smartpill.quickbook_bills"], "test.smartpill.not_null_quickbook_bills__hash_id": ["model.smartpill.quickbook_bills"], "test.smartpill.unique_quickbook_bills__hash_id": ["model.smartpill.quickbook_bills"], "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"], "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_": ["model.smartpill.quickbook_bills", "model.smartpill.quickbook_bills_lines"], "test.smartpill.not_null_quickbook_customers_id": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers_created_at": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers_updated_at": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_customers__hash_id": ["model.smartpill.quickbook_customers"], "test.smartpill.unique_quickbook_customers__hash_id": ["model.smartpill.quickbook_customers"], "test.smartpill.not_null_quickbook_classes_id": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes_created_at": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes_updated_at": ["model.smartpill.quickbook_classes"], "test.smartpill.not_null_quickbook_classes__hash_id": ["model.smartpill.quickbook_classes"], "test.smartpill.unique_quickbook_classes__hash_id": ["model.smartpill.quickbook_classes"], "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_": ["model.smartpill.quickbook_deposits", "model.smartpill.quickbook_deposits_lines"], "test.smartpill.not_null_quickbook_deposits_id": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits_created_at": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits_updated_at": ["model.smartpill.quickbook_deposits"], "test.smartpill.not_null_quickbook_deposits__hash_id": ["model.smartpill.quickbook_deposits"], "test.smartpill.unique_quickbook_deposits__hash_id": ["model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_deposits"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_": ["model.smartpill.quickbook_purchases", "model.smartpill.quickbook_purchases_lines"], "test.smartpill.not_null_quickbook_purchases_id": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases_created_at": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases_updated_at": ["model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_purchases__hash_id": ["model.smartpill.quickbook_purchases"], "test.smartpill.unique_quickbook_purchases__hash_id": ["model.smartpill.quickbook_purchases"], "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_purchases"], "test.smartpill.not_null_quickbook_journal_entries_id": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries_created_at": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries_updated_at": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.not_null_quickbook_journal_entries__hash_id": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.unique_quickbook_journal_entries__hash_id": ["model.smartpill.quickbook_journal_entries"], "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_": ["model.smartpill.quickbook_accounts", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_": ["model.smartpill.quickbook_classes", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_": ["model.smartpill.quickbook_customers", "model.smartpill.quickbook_journal_entries_lines"], "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_": ["model.smartpill.quickbook_journal_entries", "model.smartpill.quickbook_journal_entries_lines"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_bills": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_classes": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_customers": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_items": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_payments": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases": [], "source.smartpill.analytics_v2.quickbook_payroll_checks": [], "source.smartpill.analytics_v2.analytics_orders_logs": [], "source.smartpill.analytics_v2.goodpill_gp_rxs_single": [], "source.smartpill.analytics_v2.goodpill_gp_stock_live": [], "source.smartpill.analytics_v2.goodpill_gp_drugs": [], "source.smartpill.analytics_v2.goodpill_gp_orders": [], "source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients": [], "source.smartpill.analytics_v2.goodpill_gp_rxs_grouped": [], "source.smartpill.analytics_v2.goodpill_gp_patients": []}, "child_map": {"model.smartpill.clinics": [], "model.smartpill.drugs": [], "model.smartpill.locations": [], "model.smartpill.orders_logs": [], "model.smartpill.orders_logs_audit": ["model.smartpill.orders_logs"], "model.smartpill.patients": [], "model.smartpill.pharmacies": [], "model.smartpill.providers": [], "model.smartpill.gp_patients": ["model.smartpill.pharmacies"], "model.smartpill.quickbook_general_ledger_abt": [], "model.smartpill.quickbook_accounts_top_level": ["model.smartpill.quickbook_general_ledger_abt", "model.smartpill.quickbook_general_ledger_abt"], "model.smartpill.quickbook_general_ledger": ["model.smartpill.quickbook_general_ledger_abt"], "model.smartpill.quickbook_accounts": ["model.smartpill.int_quickbooks__account_classifications", "model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.quickbook_accounts_top_level", "test.smartpill.not_null_quickbook_accounts__hash_id", "test.smartpill.not_null_quickbook_accounts_balance", "test.smartpill.not_null_quickbook_accounts_created_at", "test.smartpill.not_null_quickbook_accounts_id", "test.smartpill.not_null_quickbook_accounts_updated_at", "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "test.smartpill.unique_quickbook_accounts__hash_id"], "model.smartpill.quickbook_bill_payments": ["model.smartpill.int_quickbooks__bill_payment_double_entry", "model.smartpill.quickbook_bill_payments_lines", "model.smartpill.quickbook_bill_payments_lines", "test.smartpill.not_null_quickbook_bill_payments__hash_id", "test.smartpill.not_null_quickbook_bill_payments_created_at", "test.smartpill.not_null_quickbook_bill_payments_id", "test.smartpill.not_null_quickbook_bill_payments_updated_at", "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "test.smartpill.unique_quickbook_bill_payments__hash_id"], "model.smartpill.quickbook_bill_payments_lines": ["test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_"], "model.smartpill.quickbook_bills": ["model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.quickbook_bills_lines", "model.smartpill.quickbook_bills_lines", "test.smartpill.not_null_quickbook_bills__hash_id", "test.smartpill.not_null_quickbook_bills_created_at", "test.smartpill.not_null_quickbook_bills_id", "test.smartpill.not_null_quickbook_bills_updated_at", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_", "test.smartpill.unique_quickbook_bills__hash_id"], "model.smartpill.quickbook_bills_lines": ["model.smartpill.int_quickbooks__bill_double_entry", "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_", "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_"], "model.smartpill.quickbook_classes": ["model.smartpill.quickbook_general_ledger_abt", "test.smartpill.not_null_quickbook_classes__hash_id", "test.smartpill.not_null_quickbook_classes_created_at", "test.smartpill.not_null_quickbook_classes_id", "test.smartpill.not_null_quickbook_classes_updated_at", "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "test.smartpill.unique_quickbook_classes__hash_id"], "model.smartpill.quickbook_customers": ["model.smartpill.quickbook_general_ledger_abt", "test.smartpill.not_null_quickbook_customers__hash_id", "test.smartpill.not_null_quickbook_customers_created_at", "test.smartpill.not_null_quickbook_customers_id", "test.smartpill.not_null_quickbook_customers_updated_at", "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_", "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_", "test.smartpill.unique_quickbook_customers__hash_id"], "model.smartpill.quickbook_deposits": ["model.smartpill.int_quickbooks__deposit_double_entry", "model.smartpill.quickbook_deposits_lines", "model.smartpill.quickbook_deposits_lines", "test.smartpill.not_null_quickbook_deposits__hash_id", "test.smartpill.not_null_quickbook_deposits_created_at", "test.smartpill.not_null_quickbook_deposits_id", "test.smartpill.not_null_quickbook_deposits_updated_at", "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_", "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "test.smartpill.unique_quickbook_deposits__hash_id"], "model.smartpill.quickbook_deposits_lines": ["model.smartpill.int_quickbooks__deposit_double_entry", "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_", "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_", "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_"], "model.smartpill.quickbook_invoices": ["model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.quickbook_invoices_lines", "model.smartpill.quickbook_invoices_lines"], "model.smartpill.quickbook_invoices_lines": ["model.smartpill.int_quickbooks__invoice_double_entry"], "model.smartpill.quickbook_items": ["model.smartpill.int_quickbooks__bill_double_entry", "model.smartpill.int_quickbooks__invoice_double_entry", "model.smartpill.int_quickbooks__purchase_double_entry"], "model.smartpill.quickbook_journal_entries": ["model.smartpill.int_quickbooks__journal_entry_double_entry", "model.smartpill.quickbook_journal_entries_lines", "model.smartpill.quickbook_journal_entries_lines", "test.smartpill.not_null_quickbook_journal_entries__hash_id", "test.smartpill.not_null_quickbook_journal_entries_created_at", "test.smartpill.not_null_quickbook_journal_entries_id", "test.smartpill.not_null_quickbook_journal_entries_updated_at", "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_", "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "test.smartpill.unique_quickbook_journal_entries__hash_id"], "model.smartpill.quickbook_journal_entries_lines": ["model.smartpill.int_quickbooks__journal_entry_double_entry", "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_", "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_", "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_"], "model.smartpill.quickbook_payments": ["model.smartpill.int_quickbooks__payment_double_entry", "model.smartpill.int_quickbooks__payment_double_entry"], "model.smartpill.quickbook_purchases": ["model.smartpill.int_quickbooks__purchase_double_entry", "model.smartpill.quickbook_purchases_lines", "model.smartpill.quickbook_purchases_lines", "test.smartpill.not_null_quickbook_purchases__hash_id", "test.smartpill.not_null_quickbook_purchases_created_at", "test.smartpill.not_null_quickbook_purchases_id", "test.smartpill.not_null_quickbook_purchases_updated_at", "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "test.smartpill.unique_quickbook_purchases__hash_id"], "model.smartpill.quickbook_purchases_lines": ["model.smartpill.int_quickbooks__purchase_double_entry", "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_", "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_"], "model.smartpill.int_quickbooks__account_classifications": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__bill_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__bill_payment_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__deposit_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__invoice_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__journal_entry_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__payment_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__payroll_check_double_entry": ["model.smartpill.quickbook_general_ledger"], "model.smartpill.int_quickbooks__purchase_double_entry": ["model.smartpill.quickbook_general_ledger"], "test.smartpill.not_null_quickbook_accounts_id": [], "test.smartpill.not_null_quickbook_accounts_created_at": [], "test.smartpill.not_null_quickbook_accounts_updated_at": [], "test.smartpill.not_null_quickbook_accounts__hash_id": [], "test.smartpill.unique_quickbook_accounts__hash_id": [], "test.smartpill.relationships_quickbook_accounts_parent_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.not_null_quickbook_accounts_balance": [], "test.smartpill.not_null_quickbook_bill_payments_id": [], "test.smartpill.not_null_quickbook_bill_payments_created_at": [], "test.smartpill.not_null_quickbook_bill_payments_updated_at": [], "test.smartpill.not_null_quickbook_bill_payments__hash_id": [], "test.smartpill.unique_quickbook_bill_payments__hash_id": [], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_payment_id__id__ref_quickbook_bills_": [], "test.smartpill.relationships_quickbook_bill_payments_lines__bill_payment_hash_id___hash_id__ref_quickbook_bill_payments_": [], "test.smartpill.relationships_quickbook_bill_payments_lines_bill_id__id__ref_quickbook_bills_": [], "test.smartpill.relationships_quickbook_bill_payments_lines_deposit_id__id__ref_quickbook_deposits_": [], "test.smartpill.relationships_quickbook_bill_payments_lines_journal_entry_id__id__ref_quickbook_journal_entries_": [], "test.smartpill.not_null_quickbook_bills_id": [], "test.smartpill.not_null_quickbook_bills_created_at": [], "test.smartpill.not_null_quickbook_bills_updated_at": [], "test.smartpill.not_null_quickbook_bills__hash_id": [], "test.smartpill.unique_quickbook_bills__hash_id": [], "test.smartpill.relationships_quickbook_bills_lines_bill_id__id__ref_quickbook_bills_": [], "test.smartpill.relationships_quickbook_bills_lines__bill_hash_id___hash_id__ref_quickbook_bills_": [], "test.smartpill.not_null_quickbook_customers_id": [], "test.smartpill.not_null_quickbook_customers_created_at": [], "test.smartpill.not_null_quickbook_customers_updated_at": [], "test.smartpill.not_null_quickbook_customers__hash_id": [], "test.smartpill.unique_quickbook_customers__hash_id": [], "test.smartpill.not_null_quickbook_classes_id": [], "test.smartpill.not_null_quickbook_classes_created_at": [], "test.smartpill.not_null_quickbook_classes_updated_at": [], "test.smartpill.not_null_quickbook_classes__hash_id": [], "test.smartpill.unique_quickbook_classes__hash_id": [], "test.smartpill.relationships_quickbook_deposits_lines_class_id__id__ref_quickbook_classes_": [], "test.smartpill.relationships_quickbook_deposits_lines_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.relationships_quickbook_deposits_lines_customer_id__id__ref_quickbook_customers_": [], "test.smartpill.relationships_quickbook_deposits_lines__deposit_hash_id___hash_id__ref_quickbook_deposits_": [], "test.smartpill.not_null_quickbook_deposits_id": [], "test.smartpill.not_null_quickbook_deposits_created_at": [], "test.smartpill.not_null_quickbook_deposits_updated_at": [], "test.smartpill.not_null_quickbook_deposits__hash_id": [], "test.smartpill.unique_quickbook_deposits__hash_id": [], "test.smartpill.relationships_quickbook_deposits_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_class_id__id__ref_quickbook_classes_": [], "test.smartpill.relationships_quickbook_purchases_lines_account_expense_customer_id__id__ref_quickbook_customers_": [], "test.smartpill.relationships_quickbook_purchases_lines__purchase_hash_id___hash_id__ref_quickbook_purchases_": [], "test.smartpill.not_null_quickbook_purchases_id": [], "test.smartpill.not_null_quickbook_purchases_created_at": [], "test.smartpill.not_null_quickbook_purchases_updated_at": [], "test.smartpill.not_null_quickbook_purchases__hash_id": [], "test.smartpill.unique_quickbook_purchases__hash_id": [], "test.smartpill.relationships_quickbook_purchases_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.not_null_quickbook_journal_entries_id": [], "test.smartpill.not_null_quickbook_journal_entries_created_at": [], "test.smartpill.not_null_quickbook_journal_entries_updated_at": [], "test.smartpill.not_null_quickbook_journal_entries__hash_id": [], "test.smartpill.unique_quickbook_journal_entries__hash_id": [], "test.smartpill.relationships_quickbook_journal_entries_lines_account_id__id__ref_quickbook_accounts_": [], "test.smartpill.relationships_quickbook_journal_entries_lines_class_id__id__ref_quickbook_classes_": [], "test.smartpill.relationships_quickbook_journal_entries_lines_customer_id__id__ref_quickbook_customers_": [], "test.smartpill.relationships_quickbook_journal_entries_lines__journal_entry_hash_id___hash_id__ref_quickbook_journal_entries_": [], "source.smartpill.analytics_v2._airbyte_raw_quickbook_accounts": ["model.smartpill.quickbook_accounts"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_bill_payments": ["model.smartpill.quickbook_bill_payments"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_bills": ["model.smartpill.quickbook_bills"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_classes": ["model.smartpill.quickbook_classes"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_customers": ["model.smartpill.quickbook_customers"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_deposits": ["model.smartpill.quickbook_deposits"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_invoices": ["model.smartpill.quickbook_invoices"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_items": ["model.smartpill.quickbook_items"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_journal_entries": ["model.smartpill.quickbook_journal_entries"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_payments": ["model.smartpill.quickbook_payments"], "source.smartpill.analytics_v2._airbyte_raw_quickbook_purchases": ["model.smartpill.quickbook_purchases"], "source.smartpill.analytics_v2.quickbook_payroll_checks": ["model.smartpill.int_quickbooks__payroll_check_double_entry"], "source.smartpill.analytics_v2.analytics_orders_logs": ["model.smartpill.orders_logs_audit"], "source.smartpill.analytics_v2.goodpill_gp_rxs_single": ["model.smartpill.clinics", "model.smartpill.providers", "model.smartpill.providers"], "source.smartpill.analytics_v2.goodpill_gp_stock_live": ["model.smartpill.drugs"], "source.smartpill.analytics_v2.goodpill_gp_drugs": ["model.smartpill.drugs"], "source.smartpill.analytics_v2.goodpill_gp_orders": ["model.smartpill.locations", "model.smartpill.orders_logs"], "source.smartpill.analytics_v2._airbyte_raw_goodpill_gp_patients": ["model.smartpill.gp_patients"], "source.smartpill.analytics_v2.goodpill_gp_rxs_grouped": ["model.smartpill.patients"], "source.smartpill.analytics_v2.goodpill_gp_patients": ["model.smartpill.locations", "model.smartpill.patients"]}}