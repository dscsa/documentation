with rx_group_unnested as (
    select
        *
    from "datawarehouse".goodpill."rxs_grouped", unnest(string_to_array(trim(both ',' from rx_numbers), ',')) as rx_number
),
_rxs_single as (
    select *, ROW_NUMBER() OVER (PARTITION BY rx_number ORDER BY updated_at  DESC) rank
    from "datawarehouse".goodpill."rxs_single"
),
rxs_single as (
    select *
    from _rxs_single
    where rank = 1
)
select distinct on (rs.rx_number, rs.updated_at)
    rs.rx_number as rx_number,
    rs.rx_id,
    rg.rx_numbers as rx_numbers,
    rg.best_rx_number as best_rx_number,
    rs.patient_id_cp as patient_id_cp,
    rg.drug_generic,
    rg.drug_generic as rx_group_drug_generic,
    rs.drug_brand as drug_brand,
    rg.drug_brand as rx_group_drug_brand,
    rs.drug_name as drug_name,
    rs.group_id,
    rg.group_id as rx_group_id,
    rs.rx_message_key as rx_message_key,
    rs.rx_message_text as rx_message_text,
    rs.rx_message_date as rx_message_date,
    rs.rx_gsn as rx_gsn,
    rg.drug_gsns as rx_group_drug_gsns,
    rs.drug_gsns,
    rg.max_gsn as max_gsn,
    rs.refills_left as refills_left,
    rs.refills_original as refills_original,
    rg.refills_total as refills_total,
    rs.qty_left as qty_left,
    rs.qty_original as qty_original,
    rs.sig_actual as sig_actual,
    rs.sig_initial as sig_initial,
    rs.sig_clean as sig_clean,
    rs.sig_qty as sig_qty,
    rs.sig_v1_qty as sig_v1_qty,
    rs.sig_v1_days as sig_v1_days,
    rs.sig_v1_qty_per_day as sig_v1_qty_per_day,
    rs.sig_days as sig_days,
    rg.sig_qty_per_day as sig_qty_per_day,
    rs.sig_qty_per_day_default as sig_qty_per_day_default,
    rs.sig_qty_per_day_actual as sig_qty_per_day_actual,
    rs.sig_durations as sig_durations,
    rs.sig_qtys_per_time as sig_qtys_per_time,
    rs.sig_frequencies as sig_frequencies,
    rs.sig_frequency_numerators as sig_frequency_numerators,
    rs.sig_frequency_denominators as sig_frequency_denominators,
    rs.sig_v2_qty as sig_v2_qty,
    rs.sig_v2_days as sig_v2_days,
    rs.sig_v2_qty_per_day as sig_v2_qty_per_day,
    rs.sig_v2_unit as sig_v2_unit,
    rs.sig_v2_conf_score as sig_v2_conf_score,
    rs.sig_v2_dosages as sig_v2_dosages,
    rs.sig_v2_scores as sig_v2_scores,
    rs.sig_v2_frequencies as sig_v2_frequencies,
    rs.sig_v2_durations as sig_v2_durations,
    rg.rx_autofill as rx_group_rx_autofill,
    rs.rx_autofill,
    rg.refill_date_first as rx_group_refill_date_first,
    rs.refill_date_first,
    rg.refill_date_last as rx_group_refill_date_last,
    rs.refill_date_last,
    rg.refill_date_manual as rx_group_refill_date_manual,
    rs.refill_date_manual,
    rg.refill_date_default as rx_group_refill_date_default,
    rs.refill_date_default,
    rg.rx_added_first_at,
    rg.rx_added_last_at,
    rg.refill_date_next as refill_date_next,
    rs.rx_status as rx_status,
    rs.rx_stage as rx_stage,
    rs.rx_source as rx_source,
    rs.rx_date_transferred_out,
    rs.rx_date_transferred_in,
    rs.provider_npi as provider_npi,
    rs.provider_first_name as provider_first_name,
    rs.provider_last_name as provider_last_name,
    rs.provider_clinic as clinic_name,
    rs.provider_phone as provider_phone,
    rg.rx_date_changed as rx_group_rx_date_changed,
    rs.rx_date_changed,
    rg.rx_date_expired as rx_group_rx_date_expired,
    rs.rx_date_expired,
    rs.rx_date_added as rx_date_added,
    rs.rx_stock_level_initial as rx_stock_level_initial,
    rs.transfer_pharmacy_phone as transfer_pharmacy_phone,
    rs.transfer_pharmacy_name as transfer_pharmacy_name,
    rs.transfer_pharmacy_fax as transfer_pharmacy_fax,
    rs.transfer_pharmacy_address as transfer_pharmacy_address,
    rs.created_at as created_at,
    rs.updated_at as updated_at,
    rs.status,
    rg.created_at as rx_group_created_at,
    rg.updated_at as rx_group_updated_at,
    clinics.clinic_name_cp as rx_clinic_name_cp,
    rs.rx_status_updated_at,
    rs.provider_email,
    rg.rx_inactivated_last_at,
    rg.rx_activated_last_at,
    rg.group_status,
    rg.qty_total,
    rg.rx_sources


from rxs_single rs
left join rx_group_unnested as rg on (rs.rx_number = cast(rg.rx_number as int))
left join "datawarehouse".goodpill."clinics" as clinics on clinics.clinic_name_cp = rs.provider_clinic

order by
    rs.rx_number,
    rs.updated_at,
    -- prioritize the rxs_single that was updated before the group was created
    rs.updated_at <= rg.created_at desc,
    rg.created_at desc